node {
  name: "global/on_policy_state_in_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "global/on_policy_state_in_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "global/on_policy_state_in_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/on_policy_state_in_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/on_policy_state_in_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/off_policy_state_in_pl_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "global/off_policy_state_in_pl_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "global/off_policy_state_in_pl_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/off_policy_state_in_pl_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/off_policy_state_in_pl_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/rp_state_in_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "global/rp_state_in_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "global/rp_state_in_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/rp_state_in_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/rp_state_in_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "global/on_policy_action_reward_in_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "global/off_policy_action_reward_in_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "global/on_policy_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "global/on_policy_sequence_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "global/off_policy_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "global/off_policy_sequence_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.23904572427272797
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.23904572427272797
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/conv2d_1/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 24
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/conv2d_1/W/Initializer/random_uniform/max"
  input: "global/conv2d_1/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/conv2d_1/W/Initializer/random_uniform/RandomUniform"
  input: "global/conv2d_1/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Initializer/random_uniform"
  op: "Add"
  input: "global/conv2d_1/W/Initializer/random_uniform/mul"
  input: "global/conv2d_1/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/W/Assign"
  op: "Assign"
  input: "global/conv2d_1/W"
  input: "global/conv2d_1/W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/W/read"
  op: "Identity"
  input: "global/conv2d_1/W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_1/b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/b/Assign"
  op: "Assign"
  input: "global/conv2d_1/b"
  input: "global/conv2d_1/b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/b/read"
  op: "Identity"
  input: "global/conv2d_1/b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "global/on_policy_state_in_external_pl"
  input: "global/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/add"
  op: "Add"
  input: "global/conv2d_1/Conv2D"
  input: "global/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu"
  op: "Elu"
  input: "global/conv2d_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/conv2d_2/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 41
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/conv2d_2/W/Initializer/random_uniform/max"
  input: "global/conv2d_2/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/conv2d_2/W/Initializer/random_uniform/RandomUniform"
  input: "global/conv2d_2/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Initializer/random_uniform"
  op: "Add"
  input: "global/conv2d_2/W/Initializer/random_uniform/mul"
  input: "global/conv2d_2/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/W/Assign"
  op: "Assign"
  input: "global/conv2d_2/W"
  input: "global/conv2d_2/W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/W/read"
  op: "Identity"
  input: "global/conv2d_2/W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_2/b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/b/Assign"
  op: "Assign"
  input: "global/conv2d_2/b"
  input: "global/conv2d_2/b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/b/read"
  op: "Identity"
  input: "global/conv2d_2/b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "global/Elu"
  input: "global/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/add"
  op: "Add"
  input: "global/conv2d_2/Conv2D"
  input: "global/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_1"
  op: "Elu"
  input: "global/conv2d_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/conv2d_3/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 58
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/conv2d_3/W/Initializer/random_uniform/max"
  input: "global/conv2d_3/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/conv2d_3/W/Initializer/random_uniform/RandomUniform"
  input: "global/conv2d_3/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Initializer/random_uniform"
  op: "Add"
  input: "global/conv2d_3/W/Initializer/random_uniform/mul"
  input: "global/conv2d_3/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/W/Assign"
  op: "Assign"
  input: "global/conv2d_3/W"
  input: "global/conv2d_3/W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/W/read"
  op: "Identity"
  input: "global/conv2d_3/W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_3/b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/b/Assign"
  op: "Assign"
  input: "global/conv2d_3/b"
  input: "global/conv2d_3/b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/b/read"
  op: "Identity"
  input: "global/conv2d_3/b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "global/Elu_1"
  input: "global/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/add"
  op: "Add"
  input: "global/conv2d_3/Conv2D"
  input: "global/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_2"
  op: "Elu"
  input: "global/conv2d_3/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/conv2d_4/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 75
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/conv2d_4/W/Initializer/random_uniform/max"
  input: "global/conv2d_4/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/conv2d_4/W/Initializer/random_uniform/RandomUniform"
  input: "global/conv2d_4/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Initializer/random_uniform"
  op: "Add"
  input: "global/conv2d_4/W/Initializer/random_uniform/mul"
  input: "global/conv2d_4/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/W/Assign"
  op: "Assign"
  input: "global/conv2d_4/W"
  input: "global/conv2d_4/W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/W/read"
  op: "Identity"
  input: "global/conv2d_4/W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_4/b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/b/Assign"
  op: "Assign"
  input: "global/conv2d_4/b"
  input: "global/conv2d_4/b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/b/read"
  op: "Identity"
  input: "global/conv2d_4/b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/Conv2D"
  op: "Conv2D"
  input: "global/Elu_2"
  input: "global/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/add"
  op: "Add"
  input: "global/conv2d_4/Conv2D"
  input: "global/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_3"
  op: "Elu"
  input: "global/conv2d_4/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Shape"
  op: "Shape"
  input: "global/Elu_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice"
  op: "StridedSlice"
  input: "global/Shape"
  input: "global/strided_slice/stack"
  input: "global/strided_slice/stack_1"
  input: "global/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/truediv/Cast"
  op: "Cast"
  input: "global/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/truediv/Cast_1"
  op: "Cast"
  input: "global/on_policy_batch_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/truediv"
  op: "RealDiv"
  input: "global/truediv/Cast"
  input: "global/truediv/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/Cast"
  op: "Cast"
  input: "global/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/Reshape/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "global/Reshape/shape"
  op: "Pack"
  input: "global/on_policy_batch_size"
  input: "global/Cast"
  input: "global/Reshape/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape"
  op: "Reshape"
  input: "global/on_policy_action_reward_in_pl"
  input: "global/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_1/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "global/Reshape_1/shape"
  op: "Pack"
  input: "global/on_policy_batch_size"
  input: "global/Cast"
  input: "global/Reshape_1/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_1"
  op: "Reshape"
  input: "global/Elu_3"
  input: "global/Reshape_1/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_2/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 150
      }
    }
  }
}
node {
  name: "global/Reshape_2/shape"
  op: "Pack"
  input: "global/on_policy_batch_size"
  input: "global/Cast"
  input: "global/Reshape_2/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_2"
  op: "Reshape"
  input: "global/on_policy_state_in_internal_pl"
  input: "global/Reshape_2/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "global/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/concat"
  op: "ConcatV2"
  input: "global/Reshape_1"
  input: "global/Reshape"
  input: "global/Reshape_2"
  input: "global/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/Shape"
  op: "Shape"
  input: "global/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/strided_slice"
  op: "StridedSlice"
  input: "global/lstm/Shape"
  input: "global/lstm/strided_slice/stack"
  input: "global/lstm/strided_slice/stack_1"
  input: "global/lstm/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/ExpandDims"
  op: "ExpandDims"
  input: "global/lstm/strided_slice"
  input: "global/lstm/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  input: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm/global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "global/lstm/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/range"
  op: "Range"
  input: "global/lstm/range/start"
  input: "global/lstm/Rank"
  input: "global/lstm/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/concat/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/lstm/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/concat"
  op: "ConcatV2"
  input: "global/lstm/concat/values_0"
  input: "global/lstm/range"
  input: "global/lstm/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/transpose"
  op: "Transpose"
  input: "global/concat"
  input: "global/lstm/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/sequence_length"
  op: "Identity"
  input: "global/on_policy_sequence_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Shape"
  op: "Shape"
  input: "global/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice"
  op: "StridedSlice"
  input: "global/lstm/rnn/Shape"
  input: "global/lstm/rnn/strided_slice/stack"
  input: "global/lstm/rnn/strided_slice/stack_1"
  input: "global/lstm/rnn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm/rnn/Shape_1"
  op: "Shape"
  input: "global/lstm/sequence_length"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/rnn/stack"
  op: "Pack"
  input: "global/lstm/rnn/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/lstm/rnn/Equal"
  op: "Equal"
  input: "global/lstm/rnn/Shape_1"
  input: "global/lstm/rnn/stack"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/All"
  op: "All"
  input: "global/lstm/rnn/Equal"
  input: "global/lstm/rnn/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm/rnn/Assert/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor global/lstm/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Assert/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Assert/Assert/data_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor global/lstm/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Assert/Assert/data_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Assert/Assert"
  op: "Assert"
  input: "global/lstm/rnn/All"
  input: "global/lstm/rnn/Assert/Assert/data_0"
  input: "global/lstm/rnn/stack"
  input: "global/lstm/rnn/Assert/Assert/data_2"
  input: "global/lstm/rnn/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "global/lstm/rnn/CheckSeqLen"
  op: "Identity"
  input: "global/lstm/sequence_length"
  input: "^global/lstm/rnn/Assert/Assert"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Shape_2"
  op: "Shape"
  input: "global/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "global/lstm/rnn/Shape_2"
  input: "global/lstm/rnn/strided_slice_1/stack"
  input: "global/lstm/rnn/strided_slice_1/stack_1"
  input: "global/lstm/rnn/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm/rnn/Shape_3"
  op: "Shape"
  input: "global/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "global/lstm/rnn/Shape_3"
  input: "global/lstm/rnn/strided_slice_2/stack"
  input: "global/lstm/rnn/strided_slice_2/stack_1"
  input: "global/lstm/rnn/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm/rnn/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/ExpandDims"
  op: "ExpandDims"
  input: "global/lstm/rnn/strided_slice_2"
  input: "global/lstm/rnn/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/rnn/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/concat"
  op: "ConcatV2"
  input: "global/lstm/rnn/ExpandDims"
  input: "global/lstm/rnn/Const_1"
  input: "global/lstm/rnn/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/zeros"
  op: "Fill"
  input: "global/lstm/rnn/concat"
  input: "global/lstm/rnn/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Rank"
  op: "Rank"
  input: "global/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range"
  op: "Range"
  input: "global/lstm/rnn/range/start"
  input: "global/lstm/rnn/Rank"
  input: "global/lstm/rnn/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Min"
  op: "Min"
  input: "global/lstm/rnn/CheckSeqLen"
  input: "global/lstm/rnn/range"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm/rnn/Rank_1"
  op: "Rank"
  input: "global/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_1/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_1/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_1"
  op: "Range"
  input: "global/lstm/rnn/range_1/start"
  input: "global/lstm/rnn/Rank_1"
  input: "global/lstm/rnn/range_1/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Max"
  op: "Max"
  input: "global/lstm/rnn/CheckSeqLen"
  input: "global/lstm/rnn/range_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm/rnn/time"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "global/lstm/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "global/lstm/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "global/lstm/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "global/lstm/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "global/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "global/lstm/rnn/TensorArrayUnstack/Shape"
  input: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "global/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "global/lstm/rnn/TensorArrayUnstack/range/start"
  input: "global/lstm/rnn/TensorArrayUnstack/strided_slice"
  input: "global/lstm/rnn/TensorArrayUnstack/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "global/lstm/rnn/TensorArray_1"
  input: "global/lstm/rnn/TensorArrayUnstack/range"
  input: "global/lstm/transpose"
  input: "global/lstm/rnn/TensorArray_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Enter"
  op: "Enter"
  input: "global/lstm/rnn/time"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Enter_1"
  op: "Enter"
  input: "global/lstm/rnn/TensorArray:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Enter_2"
  op: "Enter"
  input: "global/lstm/global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Enter_3"
  op: "Enter"
  input: "global/lstm/global/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Merge"
  op: "Merge"
  input: "global/lstm/rnn/while/Enter"
  input: "global/lstm/rnn/while/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Merge_1"
  op: "Merge"
  input: "global/lstm/rnn/while/Enter_1"
  input: "global/lstm/rnn/while/NextIteration_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Merge_2"
  op: "Merge"
  input: "global/lstm/rnn/while/Enter_2"
  input: "global/lstm/rnn/while/NextIteration_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Merge_3"
  op: "Merge"
  input: "global/lstm/rnn/while/Enter_3"
  input: "global/lstm/rnn/while/NextIteration_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Less/Enter"
  op: "Enter"
  input: "global/lstm/rnn/strided_slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Less"
  op: "Less"
  input: "global/lstm/rnn/while/Merge"
  input: "global/lstm/rnn/while/Less/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/LoopCond"
  op: "LoopCond"
  input: "global/lstm/rnn/while/Less"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Switch"
  op: "Switch"
  input: "global/lstm/rnn/while/Merge"
  input: "global/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Switch_1"
  op: "Switch"
  input: "global/lstm/rnn/while/Merge_1"
  input: "global/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Switch_2"
  op: "Switch"
  input: "global/lstm/rnn/while/Merge_2"
  input: "global/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Switch_3"
  op: "Switch"
  input: "global/lstm/rnn/while/Merge_3"
  input: "global/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Identity"
  op: "Identity"
  input: "global/lstm/rnn/while/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Identity_1"
  op: "Identity"
  input: "global/lstm/rnn/while/Switch_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Identity_2"
  op: "Identity"
  input: "global/lstm/rnn/while/Switch_2:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Identity_3"
  op: "Identity"
  input: "global/lstm/rnn/while/Switch_3:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "global/lstm/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "global/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "global/lstm/rnn/while/TensorArrayReadV3/Enter"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\333\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06326664239168167
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06326664239168167
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 239
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 475
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^global/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "global/lstm/rnn/while/TensorArrayReadV3"
  input: "global/lstm/rnn/while/Identity_3"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^global/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^global/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  op: "Const"
  input: "^global/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  op: "Add"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  op: "Mul"
  input: "global/lstm/rnn/while/Identity_2"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  op: "Add"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "global/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Select/Enter"
  op: "Enter"
  input: "global/lstm/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/Select"
  op: "Select"
  input: "global/lstm/rnn/while/GreaterEqual"
  input: "global/lstm/rnn/while/Select/Enter"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Select_1"
  op: "Select"
  input: "global/lstm/rnn/while/GreaterEqual_1"
  input: "global/lstm/rnn/while/Identity_2"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Select_2"
  op: "Select"
  input: "global/lstm/rnn/while/GreaterEqual_2"
  input: "global/lstm/rnn/while/Identity_3"
  input: "global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "global/lstm/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "global/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/Select"
  input: "global/lstm/rnn/while/Identity_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/add/y"
  op: "Const"
  input: "^global/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/add"
  op: "Add"
  input: "global/lstm/rnn/while/Identity"
  input: "global/lstm/rnn/while/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/NextIteration"
  op: "NextIteration"
  input: "global/lstm/rnn/while/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "global/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "global/lstm/rnn/while/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "global/lstm/rnn/while/Select_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Exit"
  op: "Exit"
  input: "global/lstm/rnn/while/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Exit_1"
  op: "Exit"
  input: "global/lstm/rnn/while/Switch_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Exit_2"
  op: "Exit"
  input: "global/lstm/rnn/while/Switch_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/while/Exit_3"
  op: "Exit"
  input: "global/lstm/rnn/while/Switch_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "global/lstm/rnn/TensorArray"
  input: "global/lstm/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayStack/range"
  op: "Range"
  input: "global/lstm/rnn/TensorArrayStack/range/start"
  input: "global/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "global/lstm/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "global/lstm/rnn/TensorArray"
  input: "global/lstm/rnn/TensorArrayStack/range"
  input: "global/lstm/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm/rnn/Rank_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_2/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_2/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm/rnn/range_2"
  op: "Range"
  input: "global/lstm/rnn/range_2/start"
  input: "global/lstm/rnn/Rank_2"
  input: "global/lstm/rnn/range_2/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/concat_1/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/lstm/rnn/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/concat_1"
  op: "ConcatV2"
  input: "global/lstm/rnn/concat_1/values_0"
  input: "global/lstm/rnn/range_2"
  input: "global/lstm/rnn/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/transpose"
  op: "Transpose"
  input: "global/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "global/lstm/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_1"
  op: "StridedSlice"
  input: "global/Shape"
  input: "global/strided_slice_1/stack"
  input: "global/strided_slice_1/stack_1"
  input: "global/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/Reshape_3/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/Reshape_3/shape"
  op: "Pack"
  input: "global/strided_slice_1"
  input: "global/Reshape_3/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_3"
  op: "Reshape"
  input: "global/lstm/rnn/transpose"
  input: "global/Reshape_3/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/action//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\325\373)\272*[*8D&\2049\262B\0259\214f :REM\272\370\312\2169\327\317\316\270\027\374\223\271qi\315:\267\214 :Zi.:\021/0\272Ag\036\272]\317)\2723\325\032:\307\375\242\272{\274\224:\377\227\3769\207\352B\266x\323\3578/E\010\272\244\313\266\271\221\325\010\272\311\242\264\271c\033\004\271\225f7:\311E\275\271\255\366\270\272\034\346+9\341\217@:\232\031\33592\007%\272\377T\2779\273L\335\271\203C\2025\344\276v9+2\007\270u\260n:\002\354\2559\365\306\t\272J\353\327\271@\034X\272\264\257\200:,r\"8l=\212:=\303\227\271\331\311\206\271\035<\2139,VY:\251BN8Y\242R:k\200\247\271zs\301:\260\332>:&\026p\270}>\035\271\n\301\200:Zu\246\271j:\034\270\037\234I7\365c\261:(\267\024:\230\306\3418\271G\263\270)}V\272_\304$\271\032\302\031:A\001\275\271\325\360\231:+\201\267:\034\201F\271\216k\2239\247\236\215:\006\016\005:&i\013\272\355\325\'\272\336\324\2359\206\267\036:\212\234\3059\217\356\212\272J\2745\272\0028\230:0(<9IKn:=R\n\271g\024\321\270\010t\255\272\364\247h\271\255\212\020\2718/\t\272\302\252u\271\217\323\226\271\223!i\272\344\301\017\270\021>L8\032&\035:\322\214\2308\317\262B9Q\037\274\270\352\371\235:\002\203\":=\334B\272\360\r\200\272\202Sk:\363\201\000\272\017\234+\272[J\2679\263X\202\272\317&\3739y\3017\271\007,\226\272\216\251\2109%\305\026:p\036\3268\003\232\325\271,\223\251\270\314\r\010:\267\244\001:\274h\276:\253\366\001\271);\234\271\273\246%9\344\350n\272\302P\256\271\017\t\2528E\340\202:\013\351\023:\037\336/:\2504}\272 \231\342\2712\\\233\271k\347\356\271\205\303\240\270\244Z?\2729\215\013\270\365\206y:\350\273\2039\243\"\275\267\336\223(:\227\374\313\271o\360\3228\000;\0217!\337>\272\003\360\3759\344\177\344\271K\023\"\272\242\213q\271\206\250\2628\021\370\206:\313/!\270n\314\2439\026R)8\313\034\200:X\321\002\270\017\367V\272F\242+\272W\201\2619\333\263\216\272\255\256\224\272\3437\234\271\0170\3669\r.B\272A\237/\272\324\300G\272\032#\303\270\017\211~\270\n\0003\272\201\r\206:\006\265M9w\334A:\323\341\2529sg\3609HV\3279\202\'J:O\026\2319\363\312\3669e\002\030\272\267\240O9`#0\272V\2665\272\315\306\362\271z\032\254\271(\327\023\272\376\214F\272\007A\2259kj\3508\256\307\237\272\"\374z\272C\2053\271-A\371\271\374\234O:\201fg:\211\322\323\271k1\033:\230s\3579\363\030E\270\352k\225\271\320\300\031:\331\347\3607\363\247=\271:>\36081e\214\271\240\371\267\271$\273\3669\204k-\272\027\3433\272i\013\2759\360\274R:\263\035o\272\367n\257\272\271\227p\271\2078\204:\237\034\035\272,o\203\272\247\2359:\374\252<9T\307\024\272!Zt\2729\210`\271\"\371\037\272\325\000\002\272b\224\003\271)\263\024\272\374\221\027:\303[\3659(\373\207\272\224S3\272N\311/\271\002^\363\271\355\233\2708zd\200\272seG:\001\323):\314\004\3529\364\317T:\350\032\2559\3342\1779\323<\2207*\316.\272\262K-:\302\22509\306\37398\265\342\377\271\350\322\2259@5\262\272\364/j\270>6\016\272\332d\321\271@\363\3177t\366E:\373\246\363\271:t\3578\220_\007:\246n\3759\210\213P\271\330\034\212:b3O9p)\004:\365\031a\271\202\314\2449\306\273(9\351]\352\271\037\033m8\247\252\350\271\3610\033\272\t\336\230\271\350\"\016:\362p\0019\3563\2168\203I\2419g\233\240\271\313\243\013\267\211`+:#P@:\240u{:5\016\005\272`H\3239x\231\2678\r\'\3155m\364C:\341\203/:\322A\270\272O\320\'\272Y\014\236\271O\021\027\272\220\206\233\271h\203:9\340\026\223\270\0132\371\271g;/\272Y\035\321\271\n\316\2509\236l/9|\212R:\302\342\3278M\013$\2723\321;9T\256.:\204\354V\272\004\366\2109\275\256\3207\331\330R\271\374\2327\272`\336\001\272\312\306\2579iV\202\272z\370$\272\241Y\215\270\211F\211:\032&\207\272$\016\360\271\004\003\2429\031\261\005:\347F\203\272!\002\276:t\014w\2702@\2249\034:\234\271\266\226C8\226\200\334\270<\010^\271\210Z\200\272\0146@9\241\254\3026\245\006\341\271\227\372T:x\177\347\271\333\02608\007\"\330\270\302\r\020\272N\236\3339\355o\34080Q\2379\223\r\262\271|\237\3069\013\365\314\271\007\343\3307c\336_\272\246+\272\271R^8:\003\250\207:\265\035\200\271\222\2772:J\252d:eO\231:\314\326j9 8\3739\234R\231:L\256\3258|D\235\271\310\031\221\272+7\200\272\274\225\016\2665\357\3259\231s\242\2711\270\3549\027\342\3459\226\233\3769\213\207\325\266;\253\006:\312xI\272\346\235]\272j\270\2749\265\002\325\271>\"<:\262\331\324986\3019\321Z\216\2724H\240\272\252\212@9\274\006V\272\236\350=\272Hu\244\272\200\020\210:\216)\266\270\321\024\205:\226B\266\271\204\264\226\271bmv:\236\377x9\256~\307:\037\324\3138GR\27789q\226\272\362\2504:\374_=\272\222\357Z\271\321\002\243:b\227\33095o\2648\\xS\272\377\352\214\272\231\231\250\270\207\254\003\2720\004\200\272\256\010\2459N\305}:61S:\215\247J\272\371\237A:\360\253\332\271b\374\321\270\021\240\255:\276C3\272\252\004$\271z\304\3169\340\325\3048$\016\036\2709\357\030\271\220=x9\024\205\204\2727\205m99\362\314\267_\274\3009HT\353\267\031P,\272\022\317j\272q\330\2128\346\226\3759\237\332\027:BW\2429-\026@\272\314\255W\270E\271\004:\353w\276\271\356\243A:\005\224\n\272\312L6\271\342\2240:CG\243\272.g+\272B-R\271\252\372\305\270\322\252\2319\267\331\204:\243\013\217:Y\216\2159\304\321\1778o\016\241:\353\307\3778U\344\335\271\261\330\2619\317\323\000:\213ZC9\225\337\200:Gq\256\271;\356_\272-\032,9C\313\013\271B\207*:~m\235\271K\247\261\271%\311\243\271\232~\217\272\325<,:\tL$\272$\3170\271\026\266J\272\301\264\007\272rKj:\203\370\2719\022\343\n:\250ph:f\010\240\271\014\277\356\271\224\212\2439\353\361\2109\315\350.\270\310\225o\272~\260:\272\317\032,\270\321\324\025:\334F\250\271\262l\3129\247r\t:\257\326D\271\255\227\241\272B\341\3279)gv\271\023=\3278\225\320\':\223\031T\272AE\02090s\025\2722\306\225\271\364>c\272\366T\216\272J\0271\272\"Q\240\272\235\300\0068\021#\253\271\303\204\330:\030\267\277:\244zI\270D\205\260:=\254\206:;\333%8\"S\0319\266)\3448\216\360\345\271\340d\353\271\265p\251\2700A\0178O\340\2419\375\236\2629\0312\235:\247C\2419Yw\2728\234y\340:2i\322\271\233y\3549\244\335\2769\237\032Q\272+Nj\272\322VY:n\2225\272\236\230\2249[\020M:\026.\2509)\304\233\272>\350[\271\261\233\033\272$\022\260\271\211\004\3679\022\251\342\270aB\205\267\025\\\024\272\326\256\n:c\243\225\271!\"\034\272\314\350\032\271\250U\037\272o\211I\271\373\204\242\272.\353\254\2710r\2639K\263&\272\206(4\271\\4j:0]T\272\335\277\356\271>\343/:\215\334g:\004\203\3239_\3476:%\370\3679\366\357E:d\305\344\271\241\206?\271TFY:\224\253Z\272\214\244,\272\241\'#\271\300\031 \272\214~\203\271\353\034\014\272xzS\272#\335\341\267\235\365\333\271\216\240\241\271\222\201\3368\370\337\2649l\367\0259\236\234/\2715\200\013\272\026\243990\377\221\271dA-8\244\260\240\270\360\362\2159\347&\220:\211\030\303\2719\234\2149\342\223\206\271\276\272\267\271%\336G:>\24009\260\016\201\271\000t5\272\000\270K\271\364u}:<\311-\272\013X\024\272\366\n-\272\205\251\2149\334O\311\267 \010\252:vS\2239*\372\013\27212\013\272\324\030\241\271\210\351t\272:\343H8\357\n\244:\341\202I:\315VQ9\243\377)\272\215\363\3469?\351Z:4\330\341\270g\217\036\272\270\363\216\272uk\t:\263\251\255\270\202\247?\272\260^z:\372j\3379\266\302\026\270M\372D\272?v69UK\032\272\352\025i\272\177\376\0269\257t\3048X(\3779\271\037\\:\361\300\2159\004Fo\272m\347\017\272,\250x\271\310t\2167\031?\236\2709\205\216:\036z\014:\0054\2458\243\210\275\272&\326n\270\324\t\2349T\320\375\271\277\357\016\272\377W\3319\370IR:\322\270\t:\2659\322\267\232\332\240\270.\337\3279\334\331\026\272\260g\010:\215\364O\272\253\252j:\304\311\2409\206\002&:\266\342\3329)_\0249wy\3729\347\336\2409\325\346\0048\222.39M\366\345\2701\226\343\271\\\370\350:\243\r\027:>\310\2128\376\212\272\272\301\335\264\2712\223\000\270\251\330\2339\rmY\272\301\342+\271ZA\232\272N\247\215\271\264\260\020\272\322G\223\271\3453\2119X\241\0029\263\203\216:\2430\032\2721\214\0319\210O\027:\360n;\272u}O\272\347\0033:\204Ad\271\332\265\013\272\236 S\272\342 \247\271D$\2609\332\361\25792d\2279\347\205\026:\346\340\221\270/\311!\272\177\263\3419\344V`\271\261H\237\272kS\2369|\002L:\020\263D\270z\225\245\270i=\023\272\213\362w\272\316\325J9F\204\3569\013\231\250\272!\235\2077g\202\222\271^\301\262\267u\277\t\270&N\014\272\260\256\364\270\206v\001:\332\201\2617\024\250\1779*\004*:A\221\317\271\n\300\2639\236\375\3279\233\316u\272\035\251\2768V\300\345\270\037\005\302\272\224\256\254\271(\357\260\270:\206\3259(,\2368\2748\032:\360\250\364\271(m\2027\266\225@\272\254\366`\271\344%g\271\215y\324\271\342`\316\271J\222`\271$\266\\\2679\263P9\033\234\014\271\013y\307\271\355c\2079&\377d9\014\212\267\271t-u\271j\247\2049\241V\215:l\336\367\270^\021D9\233\335P\271L\250|8\3353W\271l\232y9\226\2516\271\254j\245\272\273=79WG=:\344\232\2138\332\'&\272\275J\006\272\274|\332\271\257\0172\271\004u7\271<c\010\272g^+\272\302\224\"\271\375\005\014\273\333.\014\271\030\322\023:\006\023\347\267\233\276%\270jJ,\272\344Q\217\266\337\005\232:$f59^Q\2649XD\020:\241\243\t:\305h\'\272\355\034\372\2715\317\255:\017\023\0338\327\020\014\271b^\3478Vj\037\267\"\346\3409\247Nq9T_\225\271\002Q\2139\\~\251:m\007y\272\034%\021\272\233\304\2309\245\250\0078\254A\203:\204\331l:l\244\2739\254\203J:\'\345\t\272\224\010\250\271\005h\341\271\310f%:\345h\002\272\323\377\257\271*3\230\272\366b::Pa\2239}\207\020\272^SQ\270\022\326\304\270-\303\265:\010\251`:\2637\202\271\n\354?\271\317Uz\271s\253\035\272?\021\2669\203\311\204:n_\032\272\203;*\271L?p\272\234i\252\271\335\236A:g\314\2109\356c49\362\253_:\307\225\002:>%\2279\3303\231:#\376h:\233\0206\270%\233\3309\017\030K\270\377\032z\271!\031\2709\327w\3449\354\355\031\272\363Z+9\333,\0009\007\232\33276!\231:\0130\\\272{\031\241\271OC\244\272q%\\:\325\177\2539\003\251\005\272\221\206\331\271\213\035\225:f<.\271o\220\2128\216\002W:\232\350;\271\330:\017\271\220C\027\271\317\024\3219\331\007E\2713\025\243\272h\357^9\222i\207\272\325\256\356\271\003\364+:\207\263\236\272\034\024?:u\273\226:\027\036\0049\311\343\272\270G`\201\271h\367\235\271X_j:Y\343*9\220J\2128[\275\223\272\330\304\005\272\016\034\031:\332OL\272(\263!:\236V\253\264\347\257\304\272;\217\2759\263\377\024\272\337\311\232\270\365r \272\225\237\010:\007\307\224\270\252\243\017;\n\367\266\270z0\3779\262_\371:\000\212\214:\355\177\313\271}\316_\272,\333\3159\307\307~9\177\371\213\272h\335o:\023\351$6\313]\356\271Ce&\272g*3:1\263\250\272\025\024\3369\024\004\2028\373\207\262\272\222G,:\342\3254:v\213\0109E\345\3179\375T\034:\t\262\2259\262C\004:\227l\2039\367o\3169\020-u\271C\301\203:\327\372\3019\214\t\325\271MO\264\272n\\$\272\223\327\3068\374\261\024:s\2500:>\354\027\272\317d\327:\347\275\3228\207\033-\271\242\t$:v\315\2209\302\025-\2725\032P\272\3018l\272-\261\321\270\344\\\332\270\243Sf:\302\324,:E\263E:\r\270-9Z\347\016:\264P\3679\352m\305:\264\017&9`\036`9\246\220\217\271\017\355\2309a\037M\272\037%l\267v3\323\271\240r\256\271\321\367\240\272Fz\2749\226\303,\267xY)\272\376\255\3348my\0229\201\362\314\270\223\305\215\271\257\226\322\270\235O\001:\317\252\323\271s\367\t\272fQ\245\270\346<\260:_\376\006\272\301E\025\272\315\352\224\271-\241q9\000\212I\272\372\200\025\271!\227\2759l\021~:0Yk9\234$J:\200\344\3219\256\361\234\271\327O2\270\253h\254\272&\263&:\263J\2609\376\315\215\270\210\230\341\271H\217\2349l/\2769\317);9D8\234\270[\036\351:\322\327\352\270\247i\263\270nd\030:\006W\033\270\223\305\206\272\301<\3548\000\266\324\267<~F\271\340t\0049\230\007d:d\322\":\372;\0309\251\017^\272f\340\2469D\327\2409\300\377\310::\334\\\272eXQ\272\331\305b9\352\347\246\270\233[\3269\213\366`:\245<\272\271F\323\004:\035\177\202:\366+\006:\312\234$\271\307\326\332:\030\024\003\272\324\335\212\272q\250.\270\206\030\3449K\264\006\272\317\271-\271\210\201<:\203\0320\272\366\262\000:\333\251\3408\251\t\315\271\261O1\271\324\274\037\271E{\333\271\206(r\271>@|\272\375\3100:\332\371+8\375l\016\272\361\025\3539]-\245:3F\2258\035(\251\272"
      }
    }
  }
}
node {
  name: "global/action//w"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//w/Assign"
  op: "Assign"
  input: "global/action//w"
  input: "global/action//w/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//w/read"
  op: "Identity"
  input: "global/action//w"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/action//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/action//b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//b/Assign"
  op: "Assign"
  input: "global/action//b"
  input: "global/action//b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//b/read"
  op: "Identity"
  input: "global/action//b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul"
  op: "MatMul"
  input: "global/Reshape_3"
  input: "global/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add"
  op: "Add"
  input: "global/MatMul"
  input: "global/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/value//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\t,\\;W)\013=.\023\313\275\320\354 =\321\273]\275\301T\017=b\225\006\275\356\347(\27587P\275r%\353<\265\004\300\275Y\236\305\274#1\336\274^\327\254=\205\205\212\275\215\246\356=\277\234\265=\264*8>o\353l\274Tf\034\274`@\327\274\334\344\231=\003\225\205<\211\354\033<<i\230\275\236\202\245\275B \035\274\321%]=cM\376=\004\317^\274\250_v<\241k3\275\323\266\207\275\214\3775\276\342\013\257\275(\253\244=\036X\367\272k\371y\275\3546B<\346>\230=\026\001V:\004\177\034\275\016\2305\275\177\235\240=?\212\243\2750,\337<\276W\337\274\363\331`\275\327\326\342\274$\t\201\274\263\2017=\355\036\n=\370\373\210=\215\200\367<\316\227m=\355\346\376<\325\261\226\274\277y\234;\266\017%>\377\007\025\275\210]\254=\356\315\204=,\262\335\274)G\022\274^=\360\275a\020N=\250\344\217\273[\372\245=\340\244\337<\013\252=\274=1\021\276\312,\231\274\217Jt=\3335\211;:\353x\275\304\014\302<\000\307{\275&\371\257=T\036\241\274,l\027=\030\037x\275\013\\v=5\353\353:\263(h\275\035\375F=#\353\303\274\313\267\207\274O3\305\275g\236\022\274tz\352\273<\003v\273N\257\324\273F\022\037\275-\263\355<4#\341<\r\213\313\275Z\312n\275\335C\037=\222ZI=|h\025\274\214\272\206=a-\022\276\034}1=\361\261\030\274Q\307x;CNC\275\312S~=X\226t=\220\307P\275\324\3043:\221\300\311;2\247\016\273\027\367\213=!\201\257\274\250\202=;\273\230)=O\036\254;\222,\202<[\230*\275\006\344\372\2750E\032\275\317\022\212=\005d]=\331(\273=\374Z\017=\004\203\370<\334\3032>l&\364<\215>p\2742\345\277=\242sJ\275\317\266\205\273y\213\223\275\021\267\337\274\2142\307\274\360\253\361=\215\302\'\275G\226\3019\261\337\022\275n\232\336<\225\256\256\275\036al\275\\\204\331=\272\370\322\275\355\t\216\275R\210\333\274w@\t=\271\332\212=\302\311\243<w\222\247=h\233\206\275\257\237\301=\231aq\274TK\234\275\3735v\275\273[\020>\\\261\007=\222tw\274\037\000\004=_\335\212\275hz\035=\013\233\244\273\031\320B=\254\325b\275\232x\250=:i9<\372\242\312\274\275H\032:\365\252\266\273* \275;\331\033\264<74\"\275\337~\253=\334\025\222\274\254y\032\274l\r\373<\001\225\201<\203\211\310=e\301\203\275\262\0338\2755O\205\274\335f-=\266)\031=i\246\220\275\211\300R=k\315\224\275\313\306M=Bz\005<9\321\354\275\306iO\274\277\220\221=\344\004\020\275V\333\000=\346I\232\275\001\367\023\275\357\304\010=]\341\246=\307\362\304<\260\004\345\275.<\033=9\244\014\2755D\304={\023g=\243\260\220\2748\022\307\275M\034\376<\361\356\371=?\375 \2766\215\336\275\177(\312<;\374*=\322\346\204=\276\t\214\275\025\372\323=\017\370k\275\263z9\275\253J\035=i\323\361\275f-\320=2\232\247<\022\323\316=\214\354\200<\360^\214=2_\303<@\250\001=`\374\273\275\260/\324\274\343\247y=\342\340\317\274\004s\223\275&d\355\2740\262\310<\005\314\267\275\343Zd=_\000+\274\256L\367<D\326\337=\217U\315\275\327$[<A21=Tj\236=\272\324A=le\002=\021\tu\275w\007\206\275\206\223\351\274k\026/=\265\215\237\275wd\251\274\000\303\220=$\247p\273_p\245\275YP\222\275\034\330\353=\210\3503\275\000V?\272"
      }
    }
  }
}
node {
  name: "global/value//w"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//w/Assign"
  op: "Assign"
  input: "global/value//w"
  input: "global/value//w/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//w/read"
  op: "Identity"
  input: "global/value//w"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/value//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/value//b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//b/Assign"
  op: "Assign"
  input: "global/value//b"
  input: "global/value//b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//b/read"
  op: "Identity"
  input: "global/value//b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_1"
  op: "MatMul"
  input: "global/Reshape_3"
  input: "global/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_1"
  op: "Add"
  input: "global/MatMul_1"
  input: "global/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_4/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/Reshape_4"
  op: "Reshape"
  input: "global/add_1"
  input: "global/Reshape_4/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/Max/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/Max"
  op: "Max"
  input: "global/add"
  input: "global/Max/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "global/sub"
  op: "Sub"
  input: "global/add"
  input: "global/Max"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/multinomial/Multinomial/num_samples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/multinomial/Multinomial"
  op: "Multinomial"
  input: "global/sub"
  input: "global/multinomial/Multinomial/num_samples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 336
    }
  }
}
node {
  name: "global/Squeeze"
  op: "Squeeze"
  input: "global/multinomial/Multinomial"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "global/one_hot/on_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "global/one_hot/off_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/one_hot/depth"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "global/one_hot"
  op: "OneHot"
  input: "global/Squeeze"
  input: "global/one_hot/depth"
  input: "global/one_hot/on_value"
  input: "global/one_hot/off_value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "global/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_2"
  op: "StridedSlice"
  input: "global/one_hot"
  input: "global/strided_slice_2/stack"
  input: "global/strided_slice_2/stack_1"
  input: "global/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/conv2d_1_1/Conv2D"
  op: "Conv2D"
  input: "global/off_policy_state_in_pl_external_pl"
  input: "global/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1_1/add"
  op: "Add"
  input: "global/conv2d_1_1/Conv2D"
  input: "global/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_4"
  op: "Elu"
  input: "global/conv2d_1_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2_1/Conv2D"
  op: "Conv2D"
  input: "global/Elu_4"
  input: "global/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2_1/add"
  op: "Add"
  input: "global/conv2d_2_1/Conv2D"
  input: "global/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_5"
  op: "Elu"
  input: "global/conv2d_2_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3_1/Conv2D"
  op: "Conv2D"
  input: "global/Elu_5"
  input: "global/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3_1/add"
  op: "Add"
  input: "global/conv2d_3_1/Conv2D"
  input: "global/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_6"
  op: "Elu"
  input: "global/conv2d_3_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4_1/Conv2D"
  op: "Conv2D"
  input: "global/Elu_6"
  input: "global/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4_1/add"
  op: "Add"
  input: "global/conv2d_4_1/Conv2D"
  input: "global/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_7"
  op: "Elu"
  input: "global/conv2d_4_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Shape_1"
  op: "Shape"
  input: "global/Elu_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/strided_slice_3/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/strided_slice_3/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_3/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_3"
  op: "StridedSlice"
  input: "global/Shape_1"
  input: "global/strided_slice_3/stack"
  input: "global/strided_slice_3/stack_1"
  input: "global/strided_slice_3/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/truediv_1/Cast"
  op: "Cast"
  input: "global/strided_slice_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/truediv_1/Cast_1"
  op: "Cast"
  input: "global/off_policy_batch_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/truediv_1"
  op: "RealDiv"
  input: "global/truediv_1/Cast"
  input: "global/truediv_1/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/Cast_1"
  op: "Cast"
  input: "global/truediv_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/Reshape_5/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "global/Reshape_5/shape"
  op: "Pack"
  input: "global/off_policy_batch_size"
  input: "global/Cast_1"
  input: "global/Reshape_5/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_5"
  op: "Reshape"
  input: "global/off_policy_action_reward_in_pl"
  input: "global/Reshape_5/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_6/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "global/Reshape_6/shape"
  op: "Pack"
  input: "global/off_policy_batch_size"
  input: "global/Cast_1"
  input: "global/Reshape_6/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_6"
  op: "Reshape"
  input: "global/Elu_7"
  input: "global/Reshape_6/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_7/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 150
      }
    }
  }
}
node {
  name: "global/Reshape_7/shape"
  op: "Pack"
  input: "global/off_policy_batch_size"
  input: "global/Cast_1"
  input: "global/Reshape_7/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_7"
  op: "Reshape"
  input: "global/off_policy_state_in_pl_internal_pl"
  input: "global/Reshape_7/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "global/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/concat_1"
  op: "ConcatV2"
  input: "global/Reshape_6"
  input: "global/Reshape_5"
  input: "global/Reshape_7"
  input: "global/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/Shape"
  op: "Shape"
  input: "global/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm_1/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/strided_slice"
  op: "StridedSlice"
  input: "global/lstm_1/Shape"
  input: "global/lstm_1/strided_slice/stack"
  input: "global/lstm_1/strided_slice/stack_1"
  input: "global/lstm_1/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm_1/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "global/lstm_1/strided_slice"
  input: "global/lstm_1/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  input: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "global/lstm_1/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm_1/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/range"
  op: "Range"
  input: "global/lstm_1/range/start"
  input: "global/lstm_1/Rank"
  input: "global/lstm_1/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/concat/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/lstm_1/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/concat"
  op: "ConcatV2"
  input: "global/lstm_1/concat/values_0"
  input: "global/lstm_1/range"
  input: "global/lstm_1/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/transpose"
  op: "Transpose"
  input: "global/concat_1"
  input: "global/lstm_1/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/sequence_length"
  op: "Identity"
  input: "global/off_policy_sequence_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Shape"
  op: "Shape"
  input: "global/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice"
  op: "StridedSlice"
  input: "global/lstm_1/rnn/Shape"
  input: "global/lstm_1/rnn/strided_slice/stack"
  input: "global/lstm_1/rnn/strided_slice/stack_1"
  input: "global/lstm_1/rnn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm_1/rnn/Shape_1"
  op: "Shape"
  input: "global/lstm_1/sequence_length"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/rnn/stack"
  op: "Pack"
  input: "global/lstm_1/rnn/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/lstm_1/rnn/Equal"
  op: "Equal"
  input: "global/lstm_1/rnn/Shape_1"
  input: "global/lstm_1/rnn/stack"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/All"
  op: "All"
  input: "global/lstm_1/rnn/Equal"
  input: "global/lstm_1/rnn/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm_1/rnn/Assert/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor global/lstm_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Assert/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Assert/Assert/data_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor global/lstm_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Assert/Assert/data_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Assert/Assert"
  op: "Assert"
  input: "global/lstm_1/rnn/All"
  input: "global/lstm_1/rnn/Assert/Assert/data_0"
  input: "global/lstm_1/rnn/stack"
  input: "global/lstm_1/rnn/Assert/Assert/data_2"
  input: "global/lstm_1/rnn/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "global/lstm_1/rnn/CheckSeqLen"
  op: "Identity"
  input: "global/lstm_1/sequence_length"
  input: "^global/lstm_1/rnn/Assert/Assert"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Shape_2"
  op: "Shape"
  input: "global/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "global/lstm_1/rnn/Shape_2"
  input: "global/lstm_1/rnn/strided_slice_1/stack"
  input: "global/lstm_1/rnn/strided_slice_1/stack_1"
  input: "global/lstm_1/rnn/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm_1/rnn/Shape_3"
  op: "Shape"
  input: "global/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "global/lstm_1/rnn/Shape_3"
  input: "global/lstm_1/rnn/strided_slice_2/stack"
  input: "global/lstm_1/rnn/strided_slice_2/stack_1"
  input: "global/lstm_1/rnn/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm_1/rnn/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/ExpandDims"
  op: "ExpandDims"
  input: "global/lstm_1/rnn/strided_slice_2"
  input: "global/lstm_1/rnn/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/concat"
  op: "ConcatV2"
  input: "global/lstm_1/rnn/ExpandDims"
  input: "global/lstm_1/rnn/Const_1"
  input: "global/lstm_1/rnn/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/zeros"
  op: "Fill"
  input: "global/lstm_1/rnn/concat"
  input: "global/lstm_1/rnn/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Rank"
  op: "Rank"
  input: "global/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range"
  op: "Range"
  input: "global/lstm_1/rnn/range/start"
  input: "global/lstm_1/rnn/Rank"
  input: "global/lstm_1/rnn/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Min"
  op: "Min"
  input: "global/lstm_1/rnn/CheckSeqLen"
  input: "global/lstm_1/rnn/range"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm_1/rnn/Rank_1"
  op: "Rank"
  input: "global/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_1/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_1/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_1"
  op: "Range"
  input: "global/lstm_1/rnn/range_1/start"
  input: "global/lstm_1/rnn/Rank_1"
  input: "global/lstm_1/rnn/range_1/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Max"
  op: "Max"
  input: "global/lstm_1/rnn/CheckSeqLen"
  input: "global/lstm_1/rnn/range_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm_1/rnn/time"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "global/lstm_1/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "global/lstm_1/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "global/lstm_1/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "global/lstm_1/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "global/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "global/lstm_1/rnn/TensorArrayUnstack/Shape"
  input: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "global/lstm_1/rnn/TensorArrayUnstack/range/start"
  input: "global/lstm_1/rnn/TensorArrayUnstack/strided_slice"
  input: "global/lstm_1/rnn/TensorArrayUnstack/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "global/lstm_1/rnn/TensorArray_1"
  input: "global/lstm_1/rnn/TensorArrayUnstack/range"
  input: "global/lstm_1/transpose"
  input: "global/lstm_1/rnn/TensorArray_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/time"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Enter_1"
  op: "Enter"
  input: "global/lstm_1/rnn/TensorArray:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Enter_2"
  op: "Enter"
  input: "global/lstm_1/global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Enter_3"
  op: "Enter"
  input: "global/lstm_1/global/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Merge"
  op: "Merge"
  input: "global/lstm_1/rnn/while/Enter"
  input: "global/lstm_1/rnn/while/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Merge_1"
  op: "Merge"
  input: "global/lstm_1/rnn/while/Enter_1"
  input: "global/lstm_1/rnn/while/NextIteration_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Merge_2"
  op: "Merge"
  input: "global/lstm_1/rnn/while/Enter_2"
  input: "global/lstm_1/rnn/while/NextIteration_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Merge_3"
  op: "Merge"
  input: "global/lstm_1/rnn/while/Enter_3"
  input: "global/lstm_1/rnn/while/NextIteration_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Less/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/strided_slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Less"
  op: "Less"
  input: "global/lstm_1/rnn/while/Merge"
  input: "global/lstm_1/rnn/while/Less/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/LoopCond"
  op: "LoopCond"
  input: "global/lstm_1/rnn/while/Less"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Switch"
  op: "Switch"
  input: "global/lstm_1/rnn/while/Merge"
  input: "global/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Switch_1"
  op: "Switch"
  input: "global/lstm_1/rnn/while/Merge_1"
  input: "global/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Switch_2"
  op: "Switch"
  input: "global/lstm_1/rnn/while/Merge_2"
  input: "global/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Switch_3"
  op: "Switch"
  input: "global/lstm_1/rnn/while/Merge_3"
  input: "global/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Identity"
  op: "Identity"
  input: "global/lstm_1/rnn/while/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Identity_1"
  op: "Identity"
  input: "global/lstm_1/rnn/while/Switch_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Identity_2"
  op: "Identity"
  input: "global/lstm_1/rnn/while/Switch_2:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Identity_3"
  op: "Identity"
  input: "global/lstm_1/rnn/while/Switch_3:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "global/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "global/lstm_1/rnn/while/TensorArrayReadV3/Enter"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/TensorArrayReadV3/Enter_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^global/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "global/lstm_1/rnn/while/TensorArrayReadV3"
  input: "global/lstm_1/rnn/while/Identity_3"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^global/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^global/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  op: "Const"
  input: "^global/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  op: "Add"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  op: "Mul"
  input: "global/lstm_1/rnn/while/Identity_2"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  op: "Add"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Select/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Select"
  op: "Select"
  input: "global/lstm_1/rnn/while/GreaterEqual"
  input: "global/lstm_1/rnn/while/Select/Enter"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Select_1"
  op: "Select"
  input: "global/lstm_1/rnn/while/GreaterEqual_1"
  input: "global/lstm_1/rnn/while/Identity_2"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Select_2"
  op: "Select"
  input: "global/lstm_1/rnn/while/GreaterEqual_2"
  input: "global/lstm_1/rnn/while/Identity_3"
  input: "global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "global/lstm_1/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "global/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "global/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/Select"
  input: "global/lstm_1/rnn/while/Identity_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/add/y"
  op: "Const"
  input: "^global/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/add"
  op: "Add"
  input: "global/lstm_1/rnn/while/Identity"
  input: "global/lstm_1/rnn/while/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/NextIteration"
  op: "NextIteration"
  input: "global/lstm_1/rnn/while/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "global/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "global/lstm_1/rnn/while/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "global/lstm_1/rnn/while/Select_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Exit"
  op: "Exit"
  input: "global/lstm_1/rnn/while/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Exit_1"
  op: "Exit"
  input: "global/lstm_1/rnn/while/Switch_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Exit_2"
  op: "Exit"
  input: "global/lstm_1/rnn/while/Switch_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/while/Exit_3"
  op: "Exit"
  input: "global/lstm_1/rnn/while/Switch_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "global/lstm_1/rnn/TensorArray"
  input: "global/lstm_1/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayStack/range"
  op: "Range"
  input: "global/lstm_1/rnn/TensorArrayStack/range/start"
  input: "global/lstm_1/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "global/lstm_1/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "global/lstm_1/rnn/TensorArray"
  input: "global/lstm_1/rnn/TensorArrayStack/range"
  input: "global/lstm_1/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/Rank_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_2/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_2/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/range_2"
  op: "Range"
  input: "global/lstm_1/rnn/range_2/start"
  input: "global/lstm_1/rnn/Rank_2"
  input: "global/lstm_1/rnn/range_2/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/concat_1/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/concat_1"
  op: "ConcatV2"
  input: "global/lstm_1/rnn/concat_1/values_0"
  input: "global/lstm_1/rnn/range_2"
  input: "global/lstm_1/rnn/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm_1/rnn/transpose"
  op: "Transpose"
  input: "global/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "global/lstm_1/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/strided_slice_4/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/strided_slice_4/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_4/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/strided_slice_4"
  op: "StridedSlice"
  input: "global/Shape_1"
  input: "global/strided_slice_4/stack"
  input: "global/strided_slice_4/stack_1"
  input: "global/strided_slice_4/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/Reshape_8/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "global/Reshape_8/shape"
  op: "Pack"
  input: "global/strided_slice_4"
  input: "global/Reshape_8/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_8"
  op: "Reshape"
  input: "global/lstm_1/rnn/transpose"
  input: "global/Reshape_8/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_2"
  op: "MatMul"
  input: "global/Reshape_8"
  input: "global/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_2"
  op: "Add"
  input: "global/MatMul_2"
  input: "global/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_3"
  op: "MatMul"
  input: "global/Reshape_8"
  input: "global/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_3"
  op: "Add"
  input: "global/MatMul_3"
  input: "global/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_9/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/Reshape_9"
  op: "Reshape"
  input: "global/add_3"
  input: "global/Reshape_9/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global/Max_1/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/Max_1"
  op: "Max"
  input: "global/add_2"
  input: "global/Max_1/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "global/sub_1"
  op: "Sub"
  input: "global/add_2"
  input: "global/Max_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/multinomial_1/Multinomial/num_samples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/multinomial_1/Multinomial"
  op: "Multinomial"
  input: "global/sub_1"
  input: "global/multinomial_1/Multinomial/num_samples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 576
    }
  }
}
node {
  name: "global/Squeeze_1"
  op: "Squeeze"
  input: "global/multinomial_1/Multinomial"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "global/one_hot_1/on_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "global/one_hot_1/off_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/one_hot_1/depth"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "global/one_hot_1"
  op: "OneHot"
  input: "global/Squeeze_1"
  input: "global/one_hot_1/depth"
  input: "global/one_hot_1/on_value"
  input: "global/one_hot_1/off_value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "global/strided_slice_5/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_5/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_5/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_5"
  op: "StridedSlice"
  input: "global/one_hot_1"
  input: "global/strided_slice_5/stack"
  input: "global/strided_slice_5/stack_1"
  input: "global/strided_slice_5/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/pc_change_est_state_in"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "global/pc_change_est_last_state_in"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "global/Sub"
  op: "Sub"
  input: "global/pc_change_est_state_in"
  input: "global/pc_change_est_last_state_in"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/Abs"
  op: "Abs"
  input: "global/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/ExpandDims"
  op: "ExpandDims"
  input: "global/Abs"
  input: "global/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/strided_slice_6/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_6/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_6/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "global/strided_slice_6"
  op: "StridedSlice"
  input: "global/ExpandDims"
  input: "global/strided_slice_6/stack"
  input: "global/strided_slice_6/stack_1"
  input: "global/strided_slice_6/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Mean/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/Mean"
  op: "Mean"
  input: "global/strided_slice_6"
  input: "global/Mean/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "global/MaxPool"
  op: "MaxPool"
  input: "global/Mean"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "global/pc_dense//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
        tensor_content: "\354D\226:\345\034\001\271l)\303\271\212\277\004\272bb\024:\000\326\3419Y\366\2669q9K:\tW\243\272\204=k:\2102\006:\360\324&:\241A\t\272\226\204\204:]\345Y\272Z\210#\271\035\323\2029w\256\2328(\273\2418K\224(:~\333\3278(\311\030\272\316\353R:\206i\255\270\373\371Q\271\245`\315\271\200\031\207\271\333T\200\271\314}\2069\'X\317\271\231E\014\271\n\346\2268A\035B:\331\225\0319F\275\016:v\340Z:B\026v:.@A:\232o\2319\334\233\177\2715\274\177\272b]\033\272\325\177\323\271\232Q>\272\331\232\3647F\303\253:\016\007\251\271\3032<\272\351\205\203\272:\261\3409DY\3149\017G9:\235l.\271\331[\220\272\014\300V\267_:\253\272Q\220\006\272$QD\271AQ\2359\'\327\352\271\031P\257\271\307e\224:>\021\233:\030\302\3509\005?\205\272M\226\372\271\210\375c:\360\244\2228\350\257?:Q\377\205\272\266\344:\2726b\3278\036o-:Ud\266:\034\201\2719\250=1\272\327.\333:\333\237\007:\365\010\2048bmZ\271\305\320\r\272ei\n\272\314P\3619S\320T\271\335\303\030\272\351v\2069\342x\311\272\227\033*:\231\202n\272gc\214:\353\37089\344\025\336\270}WO\271\024~(\272\375\204m\272sN\323:,\02029\"f\2779_\177\201:\340\222\000\272\333\215\002\272\031\332g9p\277\3038\256\240\327\271\274U\2339\361/\3779\226\277\256\271\231\'\307\272_Wt9\331\201\350\271[\260\343\267/g\r\271\212\212\221\271\347T\255\271|s\367\271\207\004`:8\264*\272B/<9\253:{:r\261\005\271\3268):\177\014B:\000`\211\272\255\225\223:f\266\2029{2\351\270\250\021d:\231#\370\270B\004\3046\227o\2118-\226\0059\363\371H\272:\013\242\272\233\356l9:\213::\372iC:\340\205 \271|O-:&\267u\2701l\2039=jj\270\211\007\231:\310\336\273\271\320g\002\272\345\263\214\270\317\306\346\271A\322\2479\337\004$\271\301\200R\272\245FW:~6|8\210\013\2758~\322\2619t/=9~\307{:\324r\024\272t\254f\271\020Hr\272\207\240\313\270\307F\2769\322\031\327\270]Y\301\270E\212\324\271\326|\013\271\214X\200:\223\266\0019\010\r\007\272\274\302\365\271GIU\272\022\262_9\006\003\312\271\004A\332\271[\327\2368.\302\0249\215\010\241\271\302u2\272\377\360\3519\236%\3269\265d\350\271!\352\0358_\355\022:P1\013\271\374m\245\271\373\265\207:\220\250\033:\nX\356\271\251O\257:s\365?9\030\335^9\233\366\034:\344\256\201\270\254w8:0\377\277\272\305hT\271\327r\037:\2160\274\267#\236\2239M\271\363\271\220\027\361\2712\010\37270\273\002:\017^\206\272\236!\02190Qv:fs\2458\016G\326\267B\230t:r\316w\272\274\234,9\000+\3629\002IQ:o1\3229S:\265\271>nK:e\255\\9\303y\024\272\222\264\24197\306j:\0336\014:\333J\00397B\274\272\260\227`9\035l\000\271a\276\000\272JV\341:\020g\302\271D\034X:<p\2019}\346\034:!\307\002\272\230_b\272~#\032: \303\200\272\240\331{\271f\313\3259U\017Q:\326t\014\271);\023\272\030\201\266\271 ,\026:\234/F:\350\260g\271\035\032-:\316\3459\272\363a39\032\034\322\271\303\033\026\272\375\3042\270o\22259\033<\353\271\346m\033\272L\247R\272_>\315\271/\374\1779n\265\206\271\202\333\004\270\013\2007\272v\311\226\271>\253\2039V\232\0139\207\305\2779\036\010\2128\361\273\030\272\005F\3619\313\177\3548\245/\"9\335\'+:v\252\3309\313#\317\270Iq\0068\220\217\246\271\037\257\240\271\306\242\363\2713\314@:\002\013\213\272\354\014\223\272\354\374H\272\350*\361\271c\023\347\271\340\313\250\271`\327\200:56\3209\273\355r\270\362\271\314:\354\341\2649J\324\2769\n\250\2726\323\261\035:x\254\261\271\342~\3629\2215\323\270M\240)\272\204$\3269\261\2105:`\t\2649 \303\':\n\376\353\270\225O\017:\205\237V\270\315\006\3278\254\367A\271\314m+7P\352\2509\367\333\302\271\027<&\2726L\236\272<\212!\271\233i\2509\326zA9R\007e\270\016$\3219\036\232\":_p\265\2712\251\3119\337\332\3769\014Lw8\010\260\241\271\361\215\3059\204M!:o\231\220\272*\334\207\271\030><9\236 \3079\360x\330:\354Iu9\031\265\267\271\021\031\231\271\224\353\3218Oql7\371\223\220\270\332\360\357\270\371\273p:G\033\312\271-\026n9\031\215\216:\271F89Nl\2039\235\212\020:;O\201\272R\317N9\210\353`\272t\247\n9\227b\333\270\024\0358\272H\212W8\223\207\030\272\037\010W9\221\300\223\271\177h\200:\261z\2609X\366\3748\364\273\312\266\267|.\272\324\360\202:\332=\002\272,\231\t\272\001e\'9\224c\025:\321\200\3559!\177K\272\307\313\022\272V\265\202:}\377\023\272\345.\253\272`\n\3259\234w\035:Qb\237\270\tt\013\272\n\320\234\271\177h470\237c9W\336e7\267\034\3059\376\375\220\272\253Z:9@b\3139\221\253\3609\262H\261\271\347\234\3519b!\254\2678\330s:\201C\2648z\250/\270\372\360\203\272 \316\210:U\375\03399\202\302\271\032~\3167KLA9\231\364\204\267\024W3\272\'\203\230:\246\003D\272\3645h\271#B\222:;\352.\272\352F\211\272b\275G:\337\013u:\'\230Y\271gt\3059z\345\253\271T\023\2379\214\312\024\2720p\013:\250*\310\270\224\373\206\271\017\307\2058\261\357\257\271\357\313S:G\271\222\271\254\3468:\001?\\9\234<\n:!\370\24292\3424\272s\235>\272\335\270\030:\022\023\023:[\300\r9A\262\317\270\220{$\272\204\355\216\272\026i\241\271\306\306\332\271\345p\245:X>\263:B\014}\2716\263\263\270\252\335\216\272=>\2359sd\017:D\341\0358{\346\004:\224\220r\270\227\022\022:\256\007#:\007\363+\272\224\363u\272O&\212:int\271\264}W\272\024\360\0259\217\371|:\021\364\020:\230p>:\235z7\272w\177\215\271\265a\033:\333\317A\271Y\220\264\271\013\235=\272\251\327\210\270\n\340d\2710\323\3579\321\226t\270\250U\035\271\343\037\032:&]_::\3566\272\t\314\0378\266O\363\271AQ\005\272+\260\033\272\312\272/\272\245\227\016:we\242\272\307Z\324\271{\210\3179\030\234\2039\221\333::z\271\271\272O6\322\271\335\213\006\273.\003Y:Ciq\272\234|y:\023\033\340\271\342\177(:{O\335\270H)\0239\030\363e\270&\350\343\267\227\223\3019m\346\036\271\331\200M7V\3260:`\304\0034\245(\231\271\366FV9\257\301\031:{\326\321\271\243\273:\272O\203_9\004m\205\271\356\350\2669\332\351\2177\021\332/:\212F\232\271\026\265p\271B  \271\250\224\004:b\352 :\356K\25183\223\0049\226}@\272)k\223\271\361\215\r\272\263\206\266:\266\234\035:=\377^9T\233\004\272\235\205\213\272\017u\3158M\023,\270\332\245\0169\266\251\3418\036\311]\271\013\247\2178\342\350\363\271\0313k\270\227\241\346\2712o\242\272\337\333K\272~L\030\271\333\324+:\244139\001m\200:\013\332~9\317\321\210\272\314\205#:\321\321\021:E\202\304\271\226!\0338\2771\360\271?G\254\270\250\271\372\271uI\355:\207$\235\271\016:O\272}\230\3749s\270\2709\276G\':{K\252\270\271\277\255:Y\317\3539\021\356X\271\302y\022\272y\203h9\347\332\23384W\223\271\301\303\030:\33772\272\213\2342:\201 \324\270\262\034k:\212a\2739\351\336\0229\244\301\020\272 \320\265\271ev\3079\220\272\0368\350\234\006:\nq\274\270\307(\3029\356\325\3646\307\231\3719s\002\2069\217\'\3569O\336\326\270=u\3208>\205\345\267\342\241\353\271G\001):5\030\030\271r\274\207:\255\365\250:S#F\272\370G\005:\272u\016\272B$\2429\253\215\355\2718;i\272\205%\304:x\270\204:\256l\245\272\236p\330\267\304\267W\271[\325w:\303**9\327\210\336\272\037\216\203\272X\225\351\271\201\242\247\271?-|9\347\213\301:D\377\267\272\312\336\034:\304\305\227\272\242\364\237:cM\022\272V\336\221:\026\217v\271R\341@\2726\271\314\271X\306 \272 4s9\236\332a\271Km09G<\324\270\315\373\246\271\003\005\0059\340\014\332\270\023\004B\271\"/\3458\313\317H\2723\327I9\376\206*\272h\306\2639WNP:\205\302\311\271\000^\0369\260<y9\033\376\223:K\362\r\271\271E\223\272\243(%:~l\2139iv\3549\r\232k:gj\273\265X\242\274:V;\341\272\312\324N\272?,\3678\210\241|\272c\371\315\271,\345)\2726\024\261\272X(\245\271&\231&\272F\035\3179\272\254\211:\005H\276:=\277\305\271 c\2719\033\001\272\271\350N\277\271c\252\002:6\336\016\272\021\244\021\271\374\260\355\271\360\013\\\272\235\300\222\270\246\377B\272u@\306\272\013\034\026\272\211\245]:\243\314#:\302\016\210:\226`\36294\307\017\272\204\365\306\271\031\001p:K%\020\270q\220\213\272vP@\272>\001f\270\3462_\272\205\'\201\272\266U\n\271\370\330g\272\273\230Y:\252\367\345\271!\254\3249\232\353$:\251\002Y9$\226F\272\260_\010\272\300 \346\271\336\261\331\271-\304v:\252\t)\271\266\244\272\271\360\027D\272\366\t\3419\342\002(\272\307\241\2748*\277U:$L\022\272N-\031\272\340\201\3079N\336\t:\206\357\235:=1\250\271\213\224\312:\255i\257:\373P\016\270\223\316\3049X\247-:\375A\2029\275\010\257\271\034\t\243\272p9i\272\261a\3349\3706m8\204\314\014\272\266\251\275\271\021?\2138\213*\3639TqH:./\212:\340)\200\271\002\317D:1\250a:\341^\3529K\t\254\271XW\013:|\244\205:\353\002\255\272\177f\000:\273\267j9j\033\3049\335>\r\272\305P\235:\333\240&:fW\017\271#\202.:\306\224\013:B\257E\272\271gE9\2556\3079L\276\211\271\016\253\2049\336<E:\2758\201\272}\313R9yX\033\271bd\224:\324\255\030\272\357\00009\324\216%\272\304\273\3059\032\362\361\270V\276\2379z\025@\272\021\261\r:<\'\016:\327J\017\272\003\264\016\267U(\242:\023\022B\272[/+9\026\\\3118q\226\3339\370X\2319\032\n6\272\310|\007\272gW\3609\256\321\2779\223\241O\271\337\314\022:[S\251\271\207\252\2309\267v\r\271\261\356\356\270\017\304.:X\360z:cd%\272i,\342\271\024\347\350\270\346\202\201:\216~?:Ln\362\271\330\245\314\271\237\223\302\271\3205X9)\364\313\271a\205\016\266b,\224\271\237aU:\237\261\333\271\350K\257\271=\274C:{\215\0048J\2238:\340\017\213\271l\337\030\272]\224\225\272u}\3519lv_\271\"(+\2712\027/\272\022\303Q:\346O\2618\tr\213\271\245\013\3139;\311v7\277\321B\272\242Cu\271\376o\2629\363K\320\271S\355\25598\037\'\271\317\010\312\271f,\2219`u\023\271\366\357\030:#\037\227:\223e,:^\n\252:\263H\231\271\256\365U9\314\256\210:\246\336\3338\330\034\020:i7\3179\244\374(\271\t\021V\272B\n\000:|\333|\270\005Je9\205\006\2149\002Q/\272\277\222\327\271\325\252H\272\352\332\035\271b%\355\270\326m\036\272Y\r\036\270\376yb:h\033\347\270\'\215\3118\361\265l\272n:\2329W\226\027:\336\320\264:D\371\3739\227+\007\272\231\245i9\217\257\2169\214\0253:\201\233\273\271\2131a:6\243|\267\254z\3678_CZ7U\266\350\271\371i/\272\027\333#\272/\351\205\271!#\2278:\260\2148\363?8\271\024;\252\272Y\024\2627\366\r\3639O\230\3569Q6\203\271\210\\\3658\016\376\250\271q\331\001:\274\355\205:\324W}:\217D\2239\023i\215:\003\001>\271`9\231\271v\317\221\272\223\251\362\271\214\346\0279)\177\'\272\023\320\025:,\366R\270\273v\3179\203\246\t:\224IZ:\366}\250\272\216K\3558\235\354\035:\274C\3768OF\3479\244\376\2019\217\030[8\212\311\275\271$\261\222:\005\343\3079\273=\002:\256\214\000:\372\334\020\270\344G?:C\245\300\271\371\304\2469\037k\266\271\013\342\3239F\007\3509\202\327\203\270\263\013\251\271q\343Z9-\n\003\273\271\2755\271\364\t\360\271\220\036\365:>\016>\270\261\020@:\027~\0069]\304\2248\355\213P\272\305\033\236\272\274\227\327\271Q\370\2379\235W]:\006\230\232:\223\261H\272\323X\2566K+\364\271m;(\272\216\202\31499O\201:\271\376\245\271\307Q.\271\346\035\3659>7\211:`t\363\270WR\177\272\361\212c\271\376\010m:C\007\373\271\357\373u\267\037*&\270\323\227k\271\255\257u9\232E::\302\367\2208\357(I:huP\271\337\222\026:\370(\000\272^\034\2738\247\366\025:\345\352\360\271/\230\3478\270\361\3309\321Dz\272\2277_\272\251\005\307\271v\364\2206]2#\272\355Q9\272a\225\347\2707m\211:\354\342\250\271\365W\\\272\336mQ:t\376\0327\333\326[\271\tP\223\270F\361B8\213+\'\272\315\233\2769:\267d9<u\226:\321\204\217\272\264\346\2179\345X\217\272v\323\231\271\304%i:\253\303q\270\255\271\324\270\341\023\035:3<d\2720\376@\272\313\033\267\272\300\002\333\271\024z\360:\344q\267\271\256\016\2279\177\300\216:{E\313\272\305\374\302\270S6\210\271\375\362\2458x\307\030:\244\022\020:\352\303\203\2715\320\031:J\321\t\272=\324`9\313\340\034\271\257Rj8\242,\1779\000\224\002\271\376L\017\272\316\375\277:\325\036\001\272H\265\260\271:/\3469\215\013v\272!\030\340\272\206\010\r9gW\201:\273\264D90\315\\\272\204\375\2778C\036\353\271\214\376w81\023\0279/\367\3359\275\367J9\252\'\007:\300\377\355\271\216q\213\271z\364\245\271\350&49\327\305\2759[C\265\271t\244\033\271r\021\2268\274\037\21587\314K9@\303Q9C\242\t:\240|\271\272j\177\2659\205\035\315\271\002\213o:e\360\032\272\355SF\271\310q\200\272\310C\2759Z\261=\270\261h\235\271a\367]:T\341\205\271\303\357E:_\314%:@\253U:7\017,\2715S\3069t2x:6\331\t78/K:\325\255\353\271\334.\247:\247\025m\272\346|P:\346\312\265\271\315\177)\271\025\262\3739KzB\271\273\202\222\272\373|[9\225f\3768y8\374\271\220\234\3349\354\200\274\270~\330\250\271\331\002\001:*p\217:4\306}\272\233\245\t:?\340s\271(\035\2279\345\277u9vi=\272\013\355\2237\226s6:\210\277*:\300\200a\272\032\026L:/\004\000;\321\301\026\272s\375i\271VR\177\272\244\231\245\272\222\204_9\274\202 \272\342\036Y81\003T:m5a:\335\263\007\272A.e\271\003\026\2109\006\3121\272\013Q/\272qNn\270\227+\211\272L\0276\272\232\223\0279\355\260\3409\351aB\271^\315\':t\202R\272\333k\010\270V\025\272\271\247fZ9\330\256\2679z\023\035:\312\256E\271\202\327L:\355w\217\272\231\0334\272$\220\3339=\016\'\271w\311v\272\312\230\001:\016P\330\271\325l\22490k\t8\200(\356\267\254\262o7p\271\363\270\n\333W\271\274zs\272\322\203.\272\345\017&\272\023n_9\033\0130:\372\224t\272\223\216Z9$\3177\271C\0072\271\031\330\204\271\'d\305\271\214\004\267\271#r\t:\364P\360\271\017i\273:\212\215_:\266\240\255\272\033\320\007:\016\342\3579\241B\023\272x\177K\272\010\246=:AZ\260\272\362h\014:YD\227\2727\366\202\2714p\013\272}\016\222\2716U&:\274\353T9w\253\376\271a\244v\271\317]!9\224\250P8\263\335\251\271{\003\3049\007\270\256\271\374LK7\251F\3429a.\3569`\270\3379\240\271\242:\243\00259\373\260\254:<\301|9\320\220P\271uuS9aR\010\272\244r\033:\243(\"\272t\014\356\271\013\201\027:\241\204\203:b\300w:l\230\2768\334\006y\2714\333\224\271x\252\242\272M.\025\272\013~\317\271\362\215\000:\362\302\232\272\315Z\026\270\377\022\014\271(RC\272\370\327\222:\232\261Z\272\262KY:\372IL\272,\325\006\272\275!\253\272\322\007P8\021\267\0279\335\371\201\271\276l,:\036\327\301\271\221\234\3429\014\227,9/y\275\270_\261L\27121\3137\3264A9\266\305\231:\352\210\374\271\307>\2149+\225_:e\330\3548\343\260\2219Q2\246\266>\270\024:*\3101\272+\372\3328\371\306\2728\325n\010\2720\252\001\272.\257/:\253\374-\272C\364B:\363#\240:\200\215\2249j\247O9\241d\227\271\304\370\271\270\251\231?: \225\3049\030\277\005\271\310]V9xy\253\272\300\255a8\240\315&9\224\332\271\271\351\215\236\272\010\200\203\271\236\265\":\312\301\2679\265~\363\271O\222\n8\022\225\2409\253\335\376\270L\200\235\272\'R[:3\244\2059P$_:\332\376\024\2713\341\270\2711\265\311\270\300\347\244\271i\246\205\271\273\326\337\271\234\300\205:4|z\271\277q\215:\315k\n9\375\376!\272\265\rR\272\371\323\270\271\267d4\271o\034\2647\016s\006\272\273\256\347\271RS7\272\210^\017\271\310\275\211\271\3268\367\271\005\027\247\272(<\335\271eb\2049\217\007\036\272\311X\022\2727\232\300\271S\257=\272\270\215\2729\331\rn\272n\257\301\272O\221H\271O\371\332\267\177\2041\271\375.\037\272gB\007:\215\3735\272-\366!:\341\\O\272P\333\360\2703\373Y\272\'L\3209\007\327\002\271\tO\204\272\336\375x:\177\206\242:`\2142:z\371\226:\376\303\255\272w\27149\220\363d\272\223\342\2549\022\210\002\271\033\306\303:\271\353\350\271\303\204\21679-s\271\363\307V:\247(}:\036\242\243:\206|\2749\035\333s94m\3138\'\216\212\271\002P\247\270\024\r\242\271)\245\177:V\230\022:\301P\267:\251\237\3459|\334\025\271\345~\334\2712`a\272V\240W\271\016\024\224\271p\031\020\271\240r\203:\376\342\203\271\210\340\312\270\364\357u\271p\304\354\271_\014\023\272\276\306@:\313\355u: Z\205\271]\007\3239\267\205.:l\343\2169\017\332\0109\027\346\211:&\256$\272\013\275o\272\006$%\272l\271e\272\305\204!\272n():\013\351E:\314sX\272\r\2304\272\002\366\005\271\212;\242\271\034\274Q\272\001\030\2678\307/g\272\343\226\206\270\016\334\3649\372{Q:\233\272}9\317\007\000\272\301\352g\272\222\363\016\272N\357\216\271\177\257\3109\274\237\362\271m\320\325:\016\2307:\341\311\3739\006s\266\271\372\362O:\304F27lz\205:YRc:R\302\033\272\020\362M\272\3461\204\271,u^\272\026\370\202:\017\272\351\271\230\325\3239\316\223\214\272\234\263\000:\364\310\026:a\202\200\272\247\003,\272\260m\020\270\372j5:\244\252\006:{\217%\270Im\207\272\240\277?\271\243\343\2529\356\'\020\270\3772\2517\245\257\3739\247\004O:\311\034\201\272\240\003p:^\370\256\2712P\'\270\232:\246\271\216\202\206\272<LP\272\350\300\000:\350\200\2159G\020\0277L\204\r:D\304\3259\242-\000\271\343\336\320\272<<\271\271\265\356\2309$=\2639M\270\3749\213\206\025\271\317r&:\004q_9wu\":\253\216\024:\347 \2549\3237\333\271rX%\272%\005*:\336\002\000\272\315\204\2609\247\267\331\271\337\345\2159\005\036q\271Y^\023:f\031*9\341\340\2609\207\230\035\272\225m_9n\313\3529\321F?9\022\037G:\370\223_\272,\262\207:\242\337\2749\321f\210:\014\216\357\271\224\341\264\270\"\251#\272\"\375j\272\021U\033\272\3771\3028N:\302\267a\223M:<x&:\311BV\271\2076\2659\246W\t\272\265Zm8\357\272\266\270\372\367\3249\316+l8Al\273\272\'y\014;F\276(\272\014\336\n:\225\312\2268\237\\J\272\223\347\2049U\0140\272\034\344\025\272\n\320\005\272j\020\3538\244\360\264:>\222S9\272\220\3139s\336\3059\222\370\2129\001|\270\271\005T\232:\265\t\3779E\000_:K\363\221\272\246\301%\272\030s\000\271\026\265\007:$i$9\372G\2149\347L\2779\364\034)\272j\315\255\270\202p\021\272\"\027-9\271\254\334\271\226H\2659\034\2517\270\213\364/9\312u\3249|:\26493\nD8\263\321\177\272\006\352\256\271\222\004d\272V\340\2479*\2577:\347\222|\272\377\003\237\272\247\330b9|ir9\200\247s\272k*\317\271%J\031\271\273i\3769J\205\3508\221Fc\2718\000c:\327\200\270\271>\222\025\271\311\213D9\322v\300\271\262v\204:\266\377\326\271N\031\203\272\255_G\271b\247\3659\345H\253\271\235\031{:0\265\242\270\036\221&\271\3657\2768=\363\016\272\264\341d\272G\35119\033\265\3338`\252\244\270\234nT\272\340\333\035\267n\373\3059G\313\223\272Cs\226\271\233\374\2239.\240\251\271\007>\261\271|~\222\272P\023\3039b`\274\271\367\325L\271\005\244y:\312\004\3118\354\r4\271\001\216\221:\221\325\2209?\254\005\270{\036\365\271\356\310$:b\230\'\272\262\326\2629\342!8:\323\374\200\271 r(:q\264\010:\225\251.9\340tG\271\250gq9\323\337j\271\024\325X\271r\037\237:\32237\272e\020\2738I\225i\272\251\321\2519\312\340\343\271\351\205\215\270\241\312\202\267hW\263\271\014\216\020\271\246\320\302\272\256\350\3009me79\027\235\353\272\317\014\3539H\224;\272X\256\014\272\266zB9\375\331\236\271\272\316\032:\025i[98\257\':1\001\216\272\250s\3609\251J6:B\230\301\271\\\352J8\232x\320\271U!\2337s\202\3529=\024\022:/a\207:\032\236\212\272\262]\014\270\314\325I8\257\0370\272\273\341p\271\207f\020:s\257\237:\211X\004\271F\270\036\272\321?\007\272\315z\207\271\215E\r\272\354\1770:\204\353W\272\337/\231\272\204\"\3667\240\033h\272\310\033\036\272n6\275\271{7\254\270\341sr\272\261\307i\2725\361\230:\005\205\346\271(\303D8\325A\232:N\256\3029)Q+\272L \1779\177\3362:\333\032>\272b\357\006\272\245\251\025\271\227\376\005:L$\3548{\300\310\271\215\322T:%\n\240:\3130\214\272!\201\3039\261\032\322\271\023\355@:Q\342m:]\226\2537abv\272\371\361\3009\327\0178\272\263\034\254\267\306$}9\0338\207:C\033u\271\274Wm9\306\2629:\014S\026:\224p\000:>\253j\272\352\224/:^ES8=\333\305\266\354x\005\272\312+o8\314\234N\272/\'\2319\353\247\':~e\265\272#\360_\271$u\3049\303\"\00091\n\2169\r\007\2429P\315\3539TQ\005:\2768\231:N\356\r\272uA$\272Gzp7\243\345\3778\2506:9\236\370\307\271\327\360\206:\364\242k\270W\314\0319W;\3039\367k\032:\332\020\240\271K\371\025:\027\204\365\271\035:|:\2262A\272\226\217\3778NN\305\267]\367=\270\026\207U:v\034\034\272\\\222\2118\003`\336:\321\213k\270\357\250\2139\035\234\213\271\305hu\272\352\350\231\271\005p\005\271\000\037b9\340\205\2408\310\200\225\271l@\t\271\005\037L\270\343Y\025\270S\325\204:\256\017\3169\257\336$:p\266~:l\240\207\271\270=`:\317\357\2778\036\225\227\272NE:\271\237\221\":\302\231\001\272\r\204\223:\331\360\200:\343F\371\270\026\361\"\272\362z\2748p2\027\272\342#\325\271c\351\005:\2055[8\225\014\3339\352\357R9\240+\377\2716\337\2308\243l\214\272\375e\2459\3509\207\272b:\0069\307\024{9\212\217\320\271/F/9\373&-\272\0071\212:t\206\276\270\325\211\206:\353\2408:\223s\023\272:\034\336\271TT\3728\340\010\364\271\203O\200\271a \233:\334\332\002\271,\242\364\267O;\306\270\004^\010\271\361C6\271\232\353\0219>\337N8\203\225d\272\236n\024:1h\'\271\014\336*:#R\000;I\374\004\272r\200\213\272e\355%:\257\206\223\271-\377\216\271\321r\323\271\371j\2269gk\227\271\362\236\215:\\oF:M\200@9\227C\233\272\000\304\2639\276\222N\270\000\324\026:\323\227\377\270\rg):\373l?\2724\201\037\272\204\217>9\210g+\272\212\310\2248\215\334_:t\222\2138\356\007\233:\331\350\26281jf\272\245\277\2078\205\354\307\271j\355x\272G\201E\271\020\362\0209\373\304\2127\014\365V\271kS\352\272\257\336 \272\\\312\256\272\274,\013\272\327iX6\2554+:\322E\272\271|\202\3129\004U0:\021uD:x\206\2609\363%\331\271$\034\223\271W\026R\271\261X\205\272q\323U8~\035Z\271\305,\014\271w(\377\271\263{\3059\315\\\370\2700/\231\271\177\320\250\270Q\276\256\266\233\225\000\272|\302\216\267\253\207p\272g\327\":s9\023\271\'\260`9\267\320\2329_M*9q\006J\271U\362\317\270L\216\t:T\250 \271\352\332\262\272\352\234\250\271\276\212A:KeL\267\324\235Q\267\327\t\3268\361\360\373\271+\247\3379\333Hc\271Z^\267\272\244\332%:\342\204\2558\007\257\032\271\334\016\3128Ef\240\271\366\235k\271\351]\025:\004\312I\272\003\231\333:\332\205\2708\236\375^:+\023\371\270\263^\320\271\256Z-:\252\303\357\271v\010\276\267\357\003\0108\332\324G\272\332I\t:\321\343\325\272ik+:A\332|\272\267z\3079\324\253u:\022l\000\272\016>\007:8[M9\336\277Z9O\035\022:\315\303\026\271\333\007T:\310\303%\272\2053\213\2709\177\253\270\033k\0238hX\002\272\365\007\214:uy\3609\325D\233:KR\027\272&\033\3439G\230\3658\243\000\215\272\226s_9{\272\2368X\220\242\271\313[\3679*\002H9zm,\271\374h\263\270\203\013D:\016\332\"\272\231\200\254:\022\332A\271\213\327R:\t\257\244\271\346\252\200:\206;\017\271-\002}9\343\347\3579\353a\355\270 \3678\272\022\235\0378\364=%8/\265\016\271\200\031\025\271*\376\000\271m)\3259\360\257V\272\247\023\343\271>\321\r\272j\243\2078\r\266\007:}\307M\271\243\276$9\264\317\3618\351\024(\271\3576\346\271:\365\021\2728\260k\271|\n.\272\346\026#:\334\034\0059\360\300\224:\260\256\242\271(\005V9\370\224\0369h\252F:\214\347\004:T\357\2349\003\234\034\271hK\027\2720s\370\2713,\2439\337b\007\272\311\252;\272\372J\214\271\307\352\211\2722%\3548\316\315L9\217QK\2713k\000\272\266\220!:\246d\3209\377\317\315\271\335\005{\271\3511B8\245\264\250\271\3670\276\270\261b\2259\367\307\226:\"d\010:g\200&:\r\312\3438\367\214\035:X\267\302\271A\217\"\272\215\316S\2711\276\001\272\202\340\2149\r\024*9\035\311\2459\215n\2728y.\310\270\335\305-:\344\313\237\271\324\277%9\277#\340\271\"\001K\272\362m\3638\317V\004\272\264\241\3409\036\211\240\272\247\367b\272?\307/\272\\\213\3736\023\t\026\2725\303O\272\034Y\3619\354\221\242\271\311\003\3219\0130\1778\206\314j\270\342q\266\272\363\325\227\271N\013S9\203\306\306\271\374\020\200\272\006\022\306\272&==\272\256o\2539\'\211\212\271\001\357-:?\n\353\271 \353}9\014;\2269Z\252L\272/Hv9{,>:u\243\034\272\267\022\2179\\\235\3317\253\36639\004\373\313\270\371\2276\270\365\031\202\272\321/\034\270\225\310U\272%$n\272\025W\3559\013f\007:\237\2622:\014D\233\272\315\022\236\271E\350\370\271`&\0309\025\014}:R\267\3268\240\326\3129\361\256=9O\307\2719-\341\023\271\0135{:\336XU:\317\016\3379\032a,9\372\313\1779\"\364\227:\302\360^\272\302\235\260\271=\214\3418\210R\017\272\317\251a\2713>p8\345\t\304:l=D\272\2106\323\271\2144\273\271\013U\3118\217\322\253\270\227s\004\271S\010\3029\325\316x\272lQ.:H\262\002\271\235\205c\272\212\321\001\272\252p\3069\272\363\031:\262v\\\271\017Qq\272no \270\327\204G9\340\206\020\272G\\\3609)\201[\270}\\\246:\207W\r\2729\345\262\271\002^\207:\231\370\231\271\346\221\020\271\375\277\n\272\235Z\2339\262\2751\272T\315\364\270\266\207^8\032\320\261\271\016\343\037\271/\002d\272d\306<:?}\315\272\367gZ\272\013\204\0329Z\301\350\271\2509\365\271Sp\260\2729h\031:\002\377H\271\245\217\206\270r2\027\272\225\305\322\271i\026o9/\274x\2727\373\221\270\342\303w:\206Zs\271\326Sl:\316\207\0229\253\0028:\230\375-\272\014\304\032:\200\270\201:\316\030\304\271\3207\214\271\354\336\3777\224\206\276\271\333`6:\002h\364\270\202\365\222:h\333\300\271\251?\016\272\271D$9\252\350\224:T\347\\:w\335B\272f\006a\271\277#\2259\035\220.\272\251b\240:\201W\3348\300\371\005\272j\013d\270\345<\222\271];\221:,EZ:W\367\021:t\264\337\271\234\376+:[g\263\272\031\305\2228F\013\205\271\230\211\3539\346\227\342\271\250\313\2029R\002v:U\n\2468R\224!\270A\314\3238\252@\'9_\035\201\272\322\032}\271\242\014%\272C\203z9Xn\025:\027\335S\272\n0\027:\002\222[\271/u\3609\336_\2329\030\331\255\271\332\207\351:$\334\2158{Cr8\360\000\2009`V0\2727\257\210:\025\240\2149\001V^:\022\225r\272\262\026D\272\tj\2379nBS:B\034Z\272\323\273\026\2728\321\3519\n\010\301\272\365B\\:+\016\316\271R\244\035\272\302\271>:\344\300\222:\373\215V\272\246\316K\272L\216*:K\217B9\361\200;9\321\371\3149[\016\013:\302:#:|I\2079\264\375v8Pq\325\271\265\333p:+Vp\267\224\227\243\272\246\347,\272\324=\025\272\350)m9\034\266;\272<(:\2721j\3269 9\3209M\253r:\202EG:\234=\344\271\350\337\010:\013|\n8p\205\266\271\033/y\272\252\3328\272d\323`\270\026h\024\272\272\031,\271\321\220\207\270\274T\002\272h[#8\357\352P\272\223C\2739\306+\2559\3157\361\270\337\265\003\271\000\213\00092\342\223\272m\241f\270\n\276\014\272p\017\2549\235\223\2649\006\003#\272/\035\275\271[\373i\271\221x\234\271\252I\235\271RH\030\272\230\3618\270$Y8\272\330\342!9vX\333\271b\266\246\272Lc\006:|\216\020:\203\325<93\037\317\271\2000j\272\322\26599\020\036%\272\347t1\272o\322\006:\347r\2178\331|\326:\235o\255:\210X\2509\262\253\212\271\351\322J9\340\311i:\256\217X\272;M\3369\031HV6\\\023\2179\024q\023\271\222\334\300\2715\323S\271\270#R\272u\212\352\271QxW:w\225\3409Z\216i9a\302S\272\220k=\270\314\234/\272\344\032+8<\307\223:\323Z\320\271o\215:9\337(\0169\001\331b:\202\215_:\3470\226\272\361n8:+\307\3628\331\004\210\272\014:q:\016\\\243\271\372\360\201\272\010\035\020\272\365ce\272\242\247\2409\344@\340\271*\367\3779\3756\321\272\366\333\007\272\340\355W\272\327\335\201\272\335\206D\271\025\272(9\036\" :\3645\002\272\r\037\251:\212\213\026\272\275\00069\236<\340:U\222\020:\024&\202:\357\265\2148\315\344\023\272\364\t\177:\032\256\2739\304\320\032\271\211\206\274\271\306t\2579Q\273\223:\322\221z:x\224\006\272@\236\017:h\300\221\272c\206\2519\220\341\3158v\273\242:\341\027\333\272\342\201\237\2715N\231\270\220\275\232\271E\266*\272\263S\317\272\302\330\\\272\205X\332\267\034\302\251\270\226\334\242:~\325\3258\201<[:-\322P\272A\266\3228>(\273\267u\t\010:B=\204:66f8d\276Q\2723\202\017;>E\2339\3319R\270\353:@\271a\206\3329\263\354\"\272\032*\231\272)\363\226\2722z\215:\310\034=8q\025\2269\361\202=9\304\372o\272\365\334\t:6T\352\270\337\026\274:f\316\r\272\022a\334\271\267/\273:q\361\3129\334\212@9d\356\236:\377\264\22090\030\2038\207\333(\272p\020J\272\202\341\252:\307p\325\271\211\307\002\271k\273T9\242\373b\272\363\203\2279\344\332\3419y\031\3158\365\262*:\327\216\r:\3608\237\270\033\320\014:\357q\251\271_\212\2069D\313\200\271\013`\3669A\\\3679\233\210\0259;8\3648\323\346M93\330+\272\260\330\241\271\340\252\204:\333\305\214\271vR\237\271\211\026z\272\276\334N\272\365\344\3629\020 \034\272^\211\2209(\304\263\270&\016\0319T\035\240:\347\315a9\014b\3169\262\231p:.\000\3129\003\220\000:i\3220:\273\252H:\355\2328\272\205\332\2029M\241=:eJ\031\272%\264\2638\374M\0319_\240\207\271\271\271\3519\227!\273\271W\267\204\271f2\2779n\227\241:\026\017\3528v\'\2778\266\t[:\217&H\272Q$G:.T,:,\257\031\272)i\376\271\273\2100\272Za\016:\310\377\2058S\2262:z\361\026\272\377] 7\245\no8\r\034H\271<P\267\271\237\255\2339\367y\235\270\007\225\243\271\261\t|\272\357\304\202:\344\001+9\330\246\226:\034\331\204\272K\026\013\272s\205B\272k<w\271\270W\33299\000\250\272<~\020\2720\267\247\272\374\013R\271\300\351&\272\214=i\270Y\266\363\271\233\306\235:2G\2148\232\316\256\271\0260\236:\266\036\204:\356\t\346\271\367\237W:D\307\372\271\360\365\234\272\037U\021\270\3701\033\271{z\230\272Jp\316\271J\212\306\271\032o6\272\216\264%:\302\231M:\177\213\2229\263\236\'\270\377\026d\272\365[\031\272\035\036\241\271\243\350\t:g~\3629y-[9\335\342\220:\027\032{:@\335\340\267\177\315\261\271\312=\260\272\206\332\3329\016\340x\272g\273\225\271\263@\224\272\321\2575\271\366\233\2259u\3648\271\335\233\3259\333N\3119K\266\'9}\360\212\267\306\226\312\270\241}G:\335\3632\272n\306E\271U\030U\271Z\010\205\270u\324\031\271\221\226\023\271C_\244\270\334\212\3309\362\334w\271\230FZ\27193A\267\345\212M\272,\333\3208\275?\232:\235\363\207\270E\247\376\271\264\251\273\267\376\316G:X\'@\272\025\223]\272v\005\034:\322\310\3079\010\204f\271\303Y\3538Y\320\330\271\221jR:a\254\3778\366\224\3239\263\270\3739\"\353!:>6\3548,k\t\272\000\007\3169\355\273\0079O:;9Lc\0269+\254\266\271:\316W:\337n\350\270\211\265\316\271\313\325\2349.\361\3538\265\210\354\271\273b\023\271\022\323G\272\256\010Z9\224\335W\272l\\89g\350\2119\3506B9\263m\2779\312\tr\2721\235\0309\214K\216\272\306t\206\271\211\207\3418\002\300a9\360s\2778\334\327\306\271\243\261\252\271\n\264\341\271\377\246\014:\231T\2659\227Z=\272\365\215\360\270fXP\272#\300\216\272P\302F\267j\254\037:\376&}\272\227\207<\272GY\2649\335\034R\272\335\253_\270\244\363\025\272pP\010:n\230\305\2718\030\336\271\343\315D\272\007J\326\272\r\273\216:l\034\034:\224n\0039\034\303\250\271\276\213\r\266\366\247?:\216\032\324\272\346\014/:%\376\300\270\363\023\2377\302\026\2508\264\360\037\272\354\302\2478\272\357\3609\232\356\252\272\247k1\271L\n\2369S\021\025:\307\003\257\2724\332G8#\363\304\2718\234y:\226\36029,\255\230\271\212G\356\272pj\244\271\323\357\340\271H\325\2609\027\r\2358\274>\013\272\002\021(:L\237!\272>\362\337\271\317<N8\000+\241\270\'}\3268\213\025\356\271\317E&:\366,G:\314\323\356\270\343\276\2147`\261\3539k\333\032\271\337+\3059?\215\005:\020\\\0049\233)\3038M\253\271\271\321uz9W(U9\035\223\035\271\000PO9\256\233_\272\235\332\206\270\t{\362\266\'3;\272iE\322\267\223(\2229\354\025{\270\027n\314\271f\300\2759\346\337e9\351o\2118\032\210\2469V\336;9!\037\224\272\242\030$\272\3075\"\267\010\353R\271\320\322|:I\311]:Gp\212\271\264\214\206\271\371\306%\272\345\364\002\272\236Ej\272_\311\2349:\377\243::t/\272\227\000\302\271H\373I\272\2176\000\272F\376\013:\227\240\261\271\276\320\205:\334W\3349\365\022\224\272_x|\272\205\266\244\272\177\212\3259\250\217v:\303\313-9\340\305\377\271\216T\025:I\310N\272\254\362C\270\200\276\302\271\236*g\271L\276Y\272T\005\031\272\006\217S::\356N\270:\235\010:\234\017\3569\276f+:e=\237\271\230B\355\271UE\034\272b\335Z:\000\216\365\271\204*\204\2728%\031:\007=7\272\\\260A\271\312\310p:F\343^\272-\336\032\271\264\273\3019\n\013\203\2723\245\3229\205\373\006:\032\240\306\271\001\315\265:\235\216\241\271\341\361\3759\320\006\272\271\247\330\360\2711\356\0038\030\253\335\271Mj\006\270\255@k\272\271\ri9\266PW8\370[\002\272I\300\2029\221k-\272?\005\2779\233\271Q:\361\234\2179\202\345\200\272\271Z\214\271JF\211:\245\n\020\271\r\220\341\271n\363\\\272\225\255):\206x\3478\354\004\037\272\210\3055\272+\037F\271\220\310\':JZY9\033*\020:\364&\021:pv\375\265\322\346\2019\261\223\244\270gR&\272\301A\222\271\200\257\3349_a\263\271&\315%\271\247\245n8\235\247\355:\345\032\000:\271\363B\271\'\24024+\234\275\270\320\005>\271&\224I:\211\325\000:B\260\3179\332\345\3539\004\362\010:2R\2519\016R\2139\367\224\0359N\202\375\270\"\366i9\224\210!\271%\361\020;\321\276\207\270\020E\003\272 Qw9\365q@9\364\034\n\2704\305\2778\316\001\305\271\254h\272\271)\245\206\271\265\343?\272\033\300^:\020\366\260\271\222|%\272\356|\205\271\030\035,\272qtv9\010\310\227:\335\324\2659M\371\306\271\327\021M\2713\321\2257\371\313\3569\354\200r\272\372U\2739\3702\2068\315\252\2316\261r\376\271\224\302u:Y\227V\272)[\2648\362\030|:\224\3529\2721\305\263\271\330\305\231\271r.\3229+w\230\270\315b\3678\351\31308Bp@\271=N\237:\262\026\323\271\313\315\022:\264\225\305\271\31074\272;\344h:\365wU9iFI\272&\317\254:\n\367\215:\265\223\220\272\032\354\220\271\254\022\'\270If\261\271\323\t\346\271\n\007l\272$\n!\272Cz\227\272I\336`\271L\251;\271\262\030[\272\362S\25194\366\022\272Kd\021:2~\3769\263M\r\272\025An\272\010D\201\271[M\241\272\262\240\362\270\002K\2578Y\036\303\271\204\212M9\020\n^\271\344\346\227\2713Z\'9\254\331>:C\236\3239\177\013;\271DG\322\2670\010\274\272\266\317 :\374\225\2279\004\321\2629\234#4\272d} \271\017h\2739\216H\002:cV\237\272\244}e9\232\354B:\361;\001:\034t\3679\234\254%\272\213\302E:\245L\3139\276\232\221:{*\260:\014\362\2019\337\177\004\272.{\240\272h\365!\272g\243}9EB\3408Y!\037:\\\004J\272\330\02549?\266\035:\001\244\033\272\023o!:\311\265I\272e\353\2358\217\332\334\271pE\356\270\235\343\t:\204\262\023:\212D\026:\210\277>:\267e+:\217\232\311\267\241h\270\271\274\256\2238h\'\2368C\205O9\361\026\234\271\357\236\037:\272?\214\271\234d\2579\334\271>\271\3731U:\201VK\272G\"\036:s\010\215:U\207;:\2206\030\272\003\343\271\271\004\225\257\270\035\007H\272\262\022\203\270r\375t\272C\205\200\272Hi\3259\372|\254\270h\363m:\215\315\024\272\253\036\036:\264KM\271&\310\2428\375\244}\270Vg\3139\033\007\014\272\254\244\217\272\037\231\3519\357\357e\272\351l|\272D\355\t:+Q\243\270w\321\2109\324\324\237\2719\272\021\272\3378P:\302\312\322\270\273\252;:\203\245w\271}\002\352\2712i\3129}\340\3058\363\324\2639\'\364\020\271\366\305\3259t\235E\272\376\313\276\270\235\3066\267\005e\203:X\'\235\265\362\221Z:\324\363)\272\355\314\2349!i39\360\346\251\272$\316\377\270(g\2759\351\315\0367\272\036\1778\317\211e:G\360\035\271\337\003\0109\256\230^9\372,\002\271\300\037\237\271\275\200\3179\261\272\2129\345\367\3729\257\253\211:\354\201\373\271y-6\272\3152\376\270A\023\356\271\325\264d9\351\252\256\272\261\302\2507\303\250\2279Z3#\272\267\224\\9\202\270e\271\016\344\2279\343Cq:?~\0009\225\025\210:\221\2079:\272\352\016\272f\rM:\025@s9\031\256\3678i\030\23293\313\240\270P\266p:V\353\376\270\000};9\325\236|\270u\002\3669\313\244,\271\305\322\177:%\216W\272\345\240\220:\"\256\354\271}YV:\336x\3079+I\204\272\365\335\205\271P\255\246\271\241`j\272\003\213/:\342fs:Z0\2569\315\357K\272\263oZ\272ky\3529\002x\254\270\327\332\0018\334\005f:0\346\230\270P\302$:9L\3538\226\331u\271\265\256C\271R\207\221\270\273\321J\272\264\215(:\001\014\035\272|-[9\340lP:\330\037\2449\316?i:\305t\245\272\224\362\3269\021\251\0319\\2B\271X\245\033:,n\034\272\335?O\271I\353\310\270T\252V:mN\226\272\242&\0068\223\376\007\270\311\002+\271\020\236\330\270i\203\240:\355@(\272m\032\262\270\300\306\026:\350\355j\272\362\002\2139\035o\2728\3020\331\271\340\374\003:\253X69\336\224-7g\310\2639\340\201b\271\267\231\202:\216p\222\271\253\257s9\263\307N:d\255\271\271\3539U\271I\202\2248l\247\2549\014\005?8\006c.\272:\342E:d\352\007\272\001\206\022\272\211\277\002\272\336\005d:\211\203\2208\226\367\033\272i.\010:\037\024[\272\006\243(:l\311\':\267:\014\271i\213\032:\335\336G\272o\207\037\271\302\2733:\353\265\247\270\304\353n9\300f\2538\366L\2129l\214\3668\371T\204\272\221\204B\272\307\013_\270\371#k\270\256\013\260\271o\2306:\250\324\021\272J|\3018^\235\214:\377\033\220\272\333\2636\272{\211\241\271P\305\2369\335l\r9\374\00449\270\276\t\272?\224K\272W;<\272\036m\233\271e\300\261:\027\204\224\272v\371\2669yQ,\272\251\340,\272\221R\311\271R\363\322\271q\332r:\203\035\'\271\304\304\021\272\305\266\235\270\257\276\0148\243`\231\271>\006\3328\331p\326\271\027,\33390\365\25696\264i9\270\224\r:y\213\350:pn\340\267\302\303\026\272\233\247\0209%,28\332,\2509\326\336\2319E\367\r:\365\254h:A\347\242\271\231\016W8\217\307\3379t\232O\270)\246\206\270\213R6\272\340\2165\271\264\272W\272ml\260\272g\2364\272\301h\0018\336~a9QM%\267H\005\'\272z\002\304\271\037UA\271\242\220\3329\r\313\3239\345W1:\"\001\2148\255\017\2259dW\t\272b\265\301\270\223h,\272\273I\240\270\022<[\272\232\252!\270\234\216\362\271Hq~:\247\224$\272\\\340x:\311\215\2249}\023\3559\350\306h98\037\3778\177\254\r:y\332\034\272.H#9jn\210\272*\211\"\272\035>\2359!|~\272\222>\2479\316\271>9\232v\3459M\276\257:k\312\031:t\247;:\242\346\203:\243\271\2238\376m\213\272\027n\346\270\273\222\2518!\003\205:\245\3316:\\4C\272K\361\014\271\337\245\036\272\226$\207\272\276#\214\272\"c\034:\366\2469\271xl\206\270\\\034,\2723h\237\270KJM\272\264\332\0309\351]\327\270|\251\221\272y\025\2529yJ\010:\254\220\207\271\312\300\002\270\025\030 \271\375QG9\336y@:\020\352\202\272\277\273\017\271\300 \337\271x\237\262\271\013\232x\271NV\256\271\353\212\256\271\366\363\212\270\342T\023\272\202;\016\270\305t0:VL\252\271\372\216V:\307i\006\272\233\345\350\270dMi\271QN\014:\005`\214\272\340\273\213\272\357@?9m\203\n9\231\365m\272\241\013\\\272\'\031\207\271\356\255\t:p\350\310\271Eq\003\272\354hH9\307\236\000\270\314\321d\271\231\321\336\271;* \272\304\332\331\271\220\311\3509\221\335\223\271U\321\272\272\357\036\2629\307\201\2659\267<\275\270i#b\271\031\235z8\026\\\3429\031w\007:[z\227:q\3530\271\240\014\0247b\220\207:\025\315\350\271P\"\2028\366\315z\272N\312G\272\237\001\3239E\010\336\271N\310\t\267\233M\3777\321\266\270\271\253\200B:\306\023\216\271\r\223\2519\353T\236\272<5\312\271\325v\276:\263kL\267\031n\025\2717\377\2029\235jQ:$\237\2109\301\257\3129\267\245\3229\313j\225\272\234\213\3019\'\017\034\272\373;\306\272\317Y\311\271p\027\270:\225\357\262:\260>\017\2728y\021:/\243\335\271\3140\355\270\275\347F\271N\222D\272l\221\3759\023\320\264:[\037g9\375\260\235\272\233j\277\270\243:\022:5\254\3068<X1\272\026\026\232:Q\300\277\271\352\034{\271\316\266\275:\321nx:\366G\214\272\252\025L\272#\035j\267\200G\2729\3237<\272e!\274\2712|\2649\316\353\220:\367\371\010\272\3464N\271\364\266l\271\245\033\2328\231\341\020:M\362\355\270\2335\035:\036t\246\272)\353\2079f/\3349\324\210\211\272so\2308\360\347[:\025\354Z:\355\036\2229\211El:\320;\25791{R\270\341\010\2779p\256U9j\027\3119F\226\3059\002\337?:\312A\210\272\345\266\000\272u\233\271\271\214\216\360\271M\332\021:\357\353\220: \335\'\270uQ\002\271\373bB9u+L:\343\314\213:\234lE:\277a\3479\375\t\277\271w\t\252\271bX\254\272\023E\3169\260S@\272#\340\3219\377Y3\272[\344\223\271\237\311\001:\335U\211\271h\022\006\272iZ\367\271\2110\231:\215\374\252:\371\360F\267\340\2447\271\375\000\354\267L\223g\272AuA\272\365\311\341\270\016\244}:\246Pk:I\032\031\272s,\206:\342\262\261\271Y\247\014\272\375\307\220\267\325\221 \271j/c7U\267\350\271\267\361\221\271S\237\020\2719\363}\271\261\376\3778\217\031\2218eP\036\272\235\240$\271\263\350\362\271\035\264\376\271G\006\022:\217g\336\271i\376\3619\345(\t\271\235\340F:S\263\2278\376\021\030:\034\"\000:m\376\306:5\031\2058`\301\2529\303h\312\271\357RT\272\220\254\211\271\3576\3078[\265\'9s|C:~W\254\272\n\237\027\2724\225J8 \225\363\271\035\024!\267\251\254\2768Bm\253\272\274\204{:t\312J8n\373\2319d$\032:\025\364-:\t{\034:\256\tZ\272\355k\3559H\340\026:\016\206\':!g\377\271\301\020#\271>\034\3479\255\223\024:,i#\271s\243\013\270{\344l9.\345::`\253\2275Knj\271\361\004\3039\026\206\262:\363\002P:s\304\322\271<\237\343\2717x\013:\374\377\002:\237\016\262\272\254\224\323\271;\335\'\272K~\320\271\310\321\342\271/\026\2129\342L[\271\237S\025\272\025\237x9G\2536:\005\337\376\272\0034\005\271\352\210g9o\232\3727\305\240\3179\000\355C\271\247@r\272\264-\243\267\274f\016\270\372\352\373\271@\325\201\271`\274\013\2718\013\217\272\274\236\2779\314\033\332\267\345\'\3029W\003%\272\346\216\236\272\330@x\272\212\241\2739\000\317\223\272F(\212\272\254\222\251\272\344?\017:\317\367H9\231\026\':<=@:B\351\272\267\342|H9\0251l\272:\367\007\271\230\331I\272\262\334}\2710\240\004\272x\335\3009\277\263D\272\321+\234\270\220\314\232\271\030\263\2019F\033\241\271\005\")\272*M\02593\200{:\027\210\331\270\265T8::\242S:\360\210\0009\270tB:\005>s\271Y\351\314\270\307r!:rA$:\"|\2539X#\214\272\013/\307\271I\220\3709\317\026\3029\370\373\3607gO\217\272\244h\2528g\003\260\271\203\357\021:t\237W9\3728\312:\016\321G\270P\313\210\272\252S\3659\226\310\3758\227^\313\271\240\233\250\270\260)\0229\237\367\007\2711\021\225\272\367\305\371\271z\332\260\271\027\353X8\314\243\325\270\345\247\236:\002\264\2648\037@\206\272\377\004\220:\337\373\245\270\324K]\272\242\221\260\271[\032c\272\224\335\223\271\335Y\010:n\234\3029xY\3649\331\343]:\313\332d\272x\343\220:\213\025\3469\354\177\3409\301\271\007:\252\357\262\271\270\232L:\017\303\203:\0315\030:\236\3544:\202d\25692\306T:\377\330\311\270\031\361X\271\331\245T\272\366\203\2219>\252\202\271\302\302\r\272\033n?:rDH\270\007\347\306\270\025\301y:r\330\025:\303\216}:1\033\267\271\261)t\272\234\314\0278\016T(\271,\245\323\271\304J\206\272\307\372%:6B\234:\006\266\246\272aoQ\271[\351\276\271\267\274p:\342k\251\270K\030\204:]\367\316\271\277\217!\272\277\0077:\226\317\326\270\352Q::\207\316$\272\0077\031\271\243\340\235\272\203\205\003\271\203\242\372\271\336\236T\272\313\034\036\271\300\020\363\271\334\313\004\272\026\034V:\302\\\346\271)\242\241\270wKx:\271\231N:@\252Q\271\240\211\3779\211c\3249\0217\237:\254PB\272\360\274\331\271\372\n\006\271\363\357l9\233\2440\272*\027\237\272\207\301\373\271\031\243\211:\227\246u:;\312K9\016\211\301\271\354\230\217\267\227P\37575\032::\n\3250\270OU\213\271Y\376X\270\263\302\216:lq\256\271sgb\272\235B\3177\276n\023\272\355\322\254\271Tl+\272\361E(:,aQ\271!B\037\272\244\244\\\271<\'v\270\243\332,\272 .\322\270\334\317\216\271\273&\270:~x\305\271y\0249\272mc(\272/&\366\271\372`\235\271aP[\272\005\371\2019\322\2557:\305\204\242\271u\271P\271y\316(\272\235\217\0209\260\234\3469\361\0105:\232j\013:\340oV\272\236\362n:n\220\2619*V\024:y\227N\2728d,9)z\322\271\035L\':l\356\211\272\375\321 \272?\343\352\271\314\372 :\326\314\317\271d\321&:.\326b\271C\0345:\'\272 :\031!\257\270h\266\2679\241\\\2339\345\324\323\270:\214`8\271\274\3629W\256\3378\254\371\225\267\367\0234\272\246\274p\271&{f\272\340M\3409j\375\305:M\014\2169\025\202G:a\\\2459\330\030\342\271\363f\014\272Wj\2459\204d\3658\226\335E\272\310\251M9\006U\362\267\307\3758\272\tk\2119y~\3529-%<\270\347\334\0379\355\n\342\271\254@A\2710\257\257\271\342\034\357\270\022\374F\272\231k\251:z\304\024:\361\361\2408\352\001\2368fZ\337\267z\010C:\220!\013\272\341X\203\271\343\325\':)\036\213:\363\353\353\270\347@H\272p\222]:L\310\3067\025\213\321\267+\211\025:N\376\223\271\024,\0029\014\004\205\271\262X\036\271\223\000-\272g\315\227\270\340\302\2739\275Vf96\007\244\272\272V\001:\016^,\272\265\257\020\272\256\222\207\270,\312\006\270I\007~:\000-X\272b\341\3139q\021\211\272\331\254\346\271\377H\337\271\222\352\277\271\320U\267\270\344j2:\013\332d9#Q\343\270\032%3:\276\006\033\271\263\'\200:\350F\252\270{\361R:\t\271\230:\214\0037:\035\004\267\271M{]\270\302\35149\002t\247\2725\177\2339nH\323\2710\365E85\370\0058W8\035:\213\263\2109\325\370*\272M\267\2749\337\310\220\272xC\262\272\345C8:\303\350p\272d\301\201\271\327\323\207\272N\263\013:\367Y\250\272\374\262\262\272pI\0319\245\367^\272$\352\3379\022Q\213\272\3713z9\372,\217\270t\003c:\261`*\270\364\242\341\267m\264\2249\307\004I\271\336\334\267\270S:\3539\367\020V:E\325\263\271\246\222\0019\001\303\321\270\272\2337:pz :[\340>9\235Y\2039R\200\236\271C\272\372\271\002U\222:\366\246e\272\353\342\0108\017\306\333\271?\337\302\272\333!\3059]\017\3538\213\375H\271\276\024<9j\264\304\267\307SP9_\347\025:\213\224\264\271\241\337\273\271\035s\0029\205\370g\272\021\217\3549\234\343\200:\206\3137:\020\t\0229\330[\3259|o\254:\033\014A\272c\351\032\272TyA\272\260\002K9\242Q\214\266b@\2058\230\334\3639gq]83\262\231\271b\212\227:\rH\220:\025\355\340\270y\300\013\272\200\347\t\272J\337\2419\306,\250\270v\n\037\270<\354\010\272vc\221:u0f9S\303\t:\361Y\2258\023p\245:\240\033\006\272\275^\013\271\303\263\335\270\325\244\3609\203\215R:U@\2018\342\350\2019\357V\207\271\213l\252\267r\357-:S\252\024\272\322\235\2019\241\242(\270tY\323\271Y\307\2729\237\243\375\270o\301\360\2713\241\004:\315u\2119\346 \3549\031m(:K\373\"9G\210\272\2713#\315\271\377\275\333\270\212\212\2119\007|\t9\226w\'9!\353\030:_\001t:Z}6:\'o\254\271=\021f\272b\t\240\271\t62:\035\202\26791\307O:\254\022\2509BL\322\270\022Md9k\027\252\271\'\230\3369\253V\0209;\240\3529k.l\272\301\310\242\272&?):({\0179\274\330f:\332\342}:\304\016\024:2l\247\271\017\005\010\272|\311\3069\254I\362\271\212w\2429\326\256\037:(\241@:.\320L\272#\317\242:^\373\0379x\004\204:\236\240\337\270\257\247\2549\316\005\216\271\\\212\254:!\001\026\272\377\352]\270\001\2703:\027q0:m\212\3349\263\355\226\2724\312\2518?=#\272\257\320\200\271\341Q!:\025\016\":\034\024\325\267;/\367\271[\254\304\271\201y\336\271dC*:\222k\032\272\351-H:\302\221\317\271\0322\2409r\315-9\256~\3539)\376\014:.1\254\271\343I\256\272\262@\3718R\264\25297\177\021:6=\340\270\232h\230\271\345\317\3578\227\340\3139{\222\2339\027x\304\267#\003@:i+\3349,\032\2368\346\270\224:tB\247\271\316-\202\271,\000&\272\202\017i:B\370\3479]\210\2239p\332\0279\301\231|9\t~\206\266\270A\327\271$\274\275\271\261\036\203\272W\372\022\271\033!u\271-0<9otj:Yp\211:\224\275\346\271\265Hv:\305k[9v\261\022\272\025\24449\201\22359V\013\2449\341\306t9\nP\226\270\037%\337\271:\253\344\267W\312\250\271!\017\264\271\372qY9\343\272\222\272[x\'\272)\255\2519\206 {\272iV(:\254\3120\271@\031\2309\330\222\2278m~\3079\235\377\315\271k\"):r#\253\271y\010H9U\332\2309\334s\311:\237\205\211\271\2452\232\2713\323\0059^\346\234\271;\262\026\272\202\372C9\272+\2169\375\333\3749\251\310\3329\203\022Z:\361J\3119\024<\3219\344#\247\271\206\344\2529sFq\271\211\324\2719;\364\217\270\361\245Q\272\370`\314\271\240\314-:\3101\200:Li\315\271<\344D9s\320\0029\204i>\272_\005\204\272\2268\016:\002\036\365\270\032\3660\271\016?\305:&*C\272^E\025\272\232\241G\272{\t\201\271\253\256\300\271\232{\001\271\n^ \272 \004<\271\002\34778?\212\203\271]k@\272\036\372\222\272\\\03139\204nL:\'y\033\271\032\030\010\271\t\224\303\271\007E\3538X:B9\357\351\2169\314M\370\271\221\212\241:C\217\3739\317\352\20691\316-\272\373\337K:@i\335\271x:\007\272\227\265Y7\345\037\000:|\262\270:\237\263\2429\201\3371:\357\270\216\271\3006*\267m,5\272\232\224\203:{n\360\271$\322\235:Y\034I\272\020\201\3578\260\214\0059\315\373\035:\276m\000\270\356p5:\017\277\223:\373-\253\270JU\2309\322\3541\272I\366\246:~ \2779{\343u\270m\316\351\271\2238\36095\027o\271\317\212\222:\020\263\3368F\234j\271\354\034\206\271\330\264\2429\272BC83@Q:\254SS:\020*c\271\177K\261:\342\311&9\217\273D:\376\347\t:u\247\377\271v\373\350\270\222\333\3439h\004\235\270\331\230\2139$\221\r\271?l\326\2711\363\2279u\246V:M+\034:P\000\3109\364\233\232\272F\031\3049d\240l\271\204\\^\272\234- :\374\024K\271{\310&9+\003O9\016\325\231:[\371\3558nPo\267\205\235]:\374#\001\272\256\314W\271\213\253\2629\201\264\024\272\022\361b\272\000#\177\272\211E\343\271[\350\0169\211\024\217\271`iy9\306\260\313\271\266\310\376\267\202\204y\270\327O\024\272\207\226\013:\263MC\271\345\333\3656\032\352\221\272\207j\3049\033\023\346\270\242\237Y:\3744\214\272\"@[8\245\361Z\272\207[\365\271i\247E\272\300\232\3458\\\347\207\271\032\323\350\266\212KP:\233\373\030\272\221\243G:J(%\272\354*\035\271\300\243\2218\333\177\3637=\007#:\264\234\263\272m}\3049qCH9\255\274\263\271Z\014=\272SRr\271>\004\266\271K+\252\270 \304\002:\325Y\017:T\254\3329\334\324X\271K\227-:!\004\024\272\001$984\361p\272\027\332l:\036he9\027:\273\272\333\237.\267\370\225\371\271\254\37197\020|-\272/\3025:\234;\030\271\275\262\321\271\310\344e:\2152Q:{\211\004:\017=\0249X\212\0179xL\016:\200*\3279\324\322\315:\000V\2568\222\311\270\272O\366\0219\002\ti\266\032\016\263\271\324s{9\241\241\3668\337iC:\032_;\272;\"\205\271\346\022\3109N\305\347\272L\235\007\272\266\203\010\272\3774l\272\352\301 ;\350\367\031:N\310\232\271>\203E:\222\270<\272\031\334#\272}\224\326\272\033\362L\271\003G#\270\teI\272$\300\\9)\350k\265\266(\3629\244g\2639\324\347\0319m\255\006\272\234\255\245\271\340\371\2238\367\321\014:\241\303L\271\300:h\272P\317?:\205\003\031:]\332\211:\205\021G\2718\342#\272JX\3609\332e\2279\226\01719\353\252\177:nm\320\271\315\301\002\272\320cM\2724\243\007:oR\333\270\237\234b\266>\252\233\271u\213\276\271\251\313\3669\351\217\325:O\241C\272\376\356D:\261\213\335\271\315\227\2359h\312\002:\355qU\272r(\254:\335\262\360\2720\350H\272\215\270i\271\244\201\250\272\375BK\272\310\234\214:\210\377!:\366\317\304\271p\375T\272Q\\\241:\310\301\204:\374\270\226\271{e \272\313\316x\270\212\365@\272\332\2311\272z\246\304:\031\361#:\277\244\003:Q\244\3609\201\370\220\270c\035\253\271)\0374:\201\361y\270\2637\340\271\276\001\243\272\246\"\3506\007\356\201\2706,\017\272\215a!\271v\214t5kS\0358\234\222\\\271\220\216::M\010\2049\004\352\030\271\272j89q\352\0149\037\027i\272\007\335\'9w(\025\271l<b\270\343\257\006\272d0\0269\357\320\367\270P\237\016:\262\351\216:WI\221:\3665\270\271\244\005g\271*\315p87\327\t:\223\312 :\366\220\210:G\005\367\271\253\211\240\271\350Y1\270\336+\233\271nBu\272_~C:\361\230v:\302{\250\272\324\230\367\271\276\027\375\271\340fC:\260\332\240:k\013\033\272`\036:\272Aei:\376\246N\272HHj\272\253j\2418\266\000:\272\tw\2729c)\2059&\242$\271\301\001\231:\351\342n\272\372\026J\272{c=:0\243\3237\226\254N\271\352lb\271~\367\340\270b\234\210\271AW\224\272\260\364\2147Q/\302:X\307\2558\247!\3359\304m5\272\315U\033\272\253\017\341\271\237\370\2176\366oo\272\001\243.90\3607\270\355Q\013\272v\275;\272?R)9\206G::\361Q\241\271\264\321\374\267|\356E\270Z}\324\272\337=\035\272\371\364\3069\3741\373\266l\240\225:\317Q\2339\031;&:%SR9\347\214\305\271_\364\242\271\310\013\3019O\357 7\345d/8&\0062\271\325\177\243:\373o\2479\277\242^\272\373\211x\271\374:z\272\261\202S\272(b@:\211\035\362\272\367\0272\271\376<\273\272\317zP\272JE\3469\'\263\270:\276X\024\272`/\026:\243]\016\271\370)\216\272\213\353j\272|hc\272\004CX\272\222\365\3469\314\031[9\223\362\001:\303%\023\271\344D@\271\1779\000:.i\247\267\233\270F:l\234@:\314\301\030:_X\2339W\273\240\272D\007\267\267/\026\341\271fPX\271\234R=9\201zC9\262P\037:\004\34018F\227\3628\007\341\2369\235\312\262\271\306\230\2759\275\216!\272\031Tm\271\306\371\201\272\233#\030\272p\013:\272c\3326\272.Z\2009\006<\3538\312\345\273\271\021t\2629\366.\2569\364%\2738E2\031:hi\267\271\324<\010\271\005dT\272\375\nA9/\362\271\271\356\243v:U\357\022:(\320\024:\354?\244\271\364+\2129\000|\222\270\351\361\212\272\264\320\2729\037\267\316\271S\3056\272Ql-9\037\020\225:7\362t\271\023\303I\272$\3064\272)O\026:\255H\n8\270\\N\271\257\371\2379Q\355\014\272I\023h\272\336\254\2649\321.\3159\003\002\363\271i\205\016:*\247]:I\341\023:8\272\026\272\270\321\222\271\320\326\205\272u\342#\271V\005\2608M{S\271n\306\2129\n_\0009V\224\244:nIe:3\336+\272\026*\030\271\244\272#\272\314\026\2126\221\254\003\272O\266\232\267\356Wn:M\267k9\330\263f:\001\'\035\271\266I\245\272A\036\0379\255\034\2179\034\016\2018U\020\275\271\211\352\0359!\"\3719\235c\270:\213\323\314\271q\004X:|\315A8\214\201\025\271\225\001\3559\220\212\020:{\024\376\270\032\343{\270\264u\0249\024\3520\272\330\337\334\271-\377v\271\323\347\025:s\0160\270..h\271Ps\2377\177^\3238\263\210M\272db:9v\242\252\271\352\327\3179\0302m:\t\204%\272\007\255I:\357kh9\rf\3216\322\205e:H\267\3529\343\000\3649\033\257\022:;D\375\271\035\374\3379\206\340\3559\220$5\271`T\2739D\233\326\270\nd\035\272bz6\272\327\021\252:k\037\002\272?r\226:y\207\2629\035\030\341\270\212\306N\267\234\256\267\271#A~\272\006\024\276:\370\024\023:\376\r\242\271\020x\255\271\341\340\203:sQ\036\272\2029\0179H\352\377\271(\316d\271\253q?\2729\204%\272\340\275{9\331\256\002\272\205U\037\272\250\271K\271\253\356\t8\226!\212\271\353]\222\271]\026\324\271i\037{:\242\270\3038\362\242\n:\002$\342\270\210\266\2079\272R\0278\205\347>\271\0368j:\366q\3349\2177\2719\373\203\305\271z\242\0049\264\037\3729m\325\3239F\277M\2721I\2028\237T\035\272\337\221\3738\232\230\027:\315\037T\271h \023\272\374\334F\272\253\221\21096\235\016\272\224Y\345\271\2617\n:F\302$\270\267\230::a\261i\272O\214\001\272I\306\241\271\326\003\2059Y\022 \272\ryD\272\276\270\3609\274Eo\272#\377\3209\336\316\313:\347\003d8\375Ff\272\'`{\271J\340\237\271\354T\210\271\216\0061\272I\210\033:\257\207\373\271\203\266\357:\377\300\'9\342\311\023:\211+\351\270\320^\016:&f\031:\2602\2218\304K\025:rjE8\211\023!\272$\n\226:\355\306\010\272\244*\001\272%\"\357\271\0015\3648\225\032\205\272\312\033_:;u\224\271L\216]\272\203x\031:M\222\3119\2446#:_\374\353\271V\033u9\315\326\2708\360\276L:\307\330\212:@a>\2729\304\374\271/\215\2279\334\366\215\271 \352\027\272\026\202\312\271H\335D\272\336\320r\272\327\013\336\271\006sX:\322\371(\267\360F\304\270 \005\372\271\257\247E9\241J\0379\353\274x6\362\354\3339\217\253\257\271[Bx::g|\271\010\004\241::\353\0339\252\202\2508/\260v\271\316\204\2539y\366\3439)\335\254\271\334I\023:\326\270\005\272\276\240\223\272Z\207\2669\213\316\t:-3\224\272\342\030\20197\206\202:\207dj\272@\312\2029\345\355\2639\267\362\2638\364\025\2219N\355\2469\t\031 9i\311\2559\214\321\2576\275j\026\272\325D\202:\331\215\032\272F)g:m\026\227:\243`\2328\370x\006:\201\020\332\270\313\013\037\272p6z9K\313T\272}^R:\333\035\364\271\370t\352\271|R\':\001\245W\271s.\031\272\202`\266\271\313 \002\271C\222b9\365\356\251\270\026*\004:g\363p\270J\336\034\267\322\217\2558w\350\000\272T\377S\271\232\375\0149\272\026\224\271e!2\272\024\216\2709\266B\2519J~\177\267L&E:z<\002\272g\0374\272\373\304\331\271/\22729\3268\0149\302)\3048\022\206d\272\023V\221\271\013?8\272\203\314\221\271\301( \272\241\333\202:\007\376\223\271DN\362\271Y\013\226:lls:\216\014\221\272\371\034?\271De\357\271\003\361\262\270s\272J:\335*r8\3278v\272\034\324.:%\3118:\301\0339\272\355\2445\271<\262\3249\225\256?6\227\363\3459]hm\2710ch\272\333\364=:\373-\3619\234_\251\272\240Y+\272\314\017R\271\n\274\024:\021\031\0319\032B\3379n\030Y\272u$\2529\345`%:t2]\271\335r\200:\337X\3149\333\361\305\270X2\200\270\0212\024:}`L:\233\240\3529H\206@\272\356Qv\271>3W:T\337\3339\235\024\253\267T%\020\271\314\014\227\271\304\222\220\271X\300\021\272&H\3628W\017\331\271k\350B:6@\300\272{\370\021\272zhw\272\200\345\261\266a\235,\272\343;\033:\251+\002:\264\301\262\271^\311O\272Iw\265:\375\255O9\335f\237:)G\354\271}8\2469+vw\272Y\243\033:\t\004\3768\366\251\037\2720Ns9$\200D:\332\337\2618?A\2018di\345\271\320q79\221W$\272G\223\003\272\271-T\271\303/\245\272m\310f9\205Lb\272\306\242\217\2710E/:4\262\210:H\346Q:\344\201B:g\203\3366C\25449\345\256\0359\322\232\n:@\370Z\272t\342\032\272za\217\270\204`P\270\325x!:\"C\0319\344\313\022:\213\371\217\272\216\275\256:i\236\314\271y\221\2719w\3400\272\2221y\272MWk:\n\234 :\220_s:\371W\242\271S\366\216\271\370\212\241:\354-\2339\271\274I\272?~C\272x\312\2709\017\365\022\272\341\021\232:>\27268\351pE:\206\313\316\271F\034\365\271\2550&\272t`\206\271:\003\2459\333\357\3168k\230\2308\376-\026\272\3252\2009\026E\2029\312rV\272$o\3769\316\323>\271B\375\024\272\202T\217:\252z\370\270\205\243\252\272\233\331\2449\021\260\n:\252\321F:\325]\200\272\276\275\017:\nb0\272\271^\274\271\373\243\243:V\326K8?\026w\272\030\\h\270\007\317\207\272\361-\035\272\273R\2349\024\347\353\272\026\220S8\317$}:u\254\360\270\244\3373\272\205Jc\272\304\222K9\007\005\201\272]0\204\271\037\327W\271e\364\032\272P=-:DJ\2378\371\336\201:%\021L\272g067j\357\0039\001\226\0019\252\355=:?\3255\272+t\344\271\311\223\201\272m\217\0319\224\371*:\360(\232:y\021\177\272\264Y\2318ue\031\272\272]49o}\n9\257ki\272\344\201D9\324\366\037:q\364]\271Q\341\2569\272\3464:\033 \3059\240\236#\270\331\031\013::\033\225\271\2011/\272O\230\225\272\240\332\0279}}\3449\204\351\342\271\370\322\2239!\244\3618\266k\000\272d\034\002:6\320\2729&\r\"8I\014\2049\307\330\316\270 \033\t\271lA\025:\214RW9\256Ha:\035\303\211\271\216\nK:@X\365\270\273\353=:gP\3649\362\014Y\271y?\014\272\244\272\020\272q\367\212:\363y\031\271\001p\3628\365\306C\272\017\201\0329\241\256`:r\347\2749\3772\0069\306\306\0109<\021\226:cO\354\267\230E\033\272\213\331\2569kp\311\271*\221z9\313\301=\272\362_\307\272\202\352_\271p\336\237\267\262\323\007\272\301\252W\270E\221)\272\002\352\010\272\312c\3259\214\234\354\271{\204\006\2728PJ\266\022\034.:\315\004\035:\337\307\366\271_\335S\272$\251Q\27230\245\271\371\022G\272\251\355\263\272\306%\017\272O\314o\271\342*B\271T\364\3209\260\374\003\271\3270F\271\257\3165\272\027\307\3149\200\325\"9\340N\233\271x\306O\272\317/`:M\033Y8\246\265\3469:\013\250\272\256\373\224:\000\331\220\271c]09*\331\3259K\331I:\346\315e\272\014t\2048\\\377t9\n~\027\272a\273^\272j\004\3448\271\337(:\005\256<9\360\006\251\272\014\035\220\272\r\0324:)V\267\271E\213886\213\236\272]hD9\016\341-:\245\360g7\367\332\253:co\362\271t\220c:R\330a:\214X\351\271Em\203\272\0142K\271\n\243\2259\361\306\202\271\374\316):a\001\3209\273\t\202\272\236\320\2129I#\2669\256\036\300:\270&\222\272B\310\211:K\231.:\365\262\3507!\024\2508L\351\025\272\274m\2679O\024\007:\300i\260\271\240\363i:|!\177:\310>\203:\310N+:\334\371Q:\007\364\333\272%\225\251\271\255uf:*+\":\213\352-\271\347{\014:G\267\264:D\002\2458\0207\2679\302=\215\271\357\224\2509\353\nb\271\214\326\016\271rZ\232:\022\026T9\245w%:\364p\322\271x\177\2229DFF\271\0350\2348iD:9o\325\315\271\327f\035:<m\242\270\006\233?\270\002\361;\272\300H\001:\023\026[\270{\227%9\214-_9\314\235;\270 \262\006:\032I\321\270R@\362\270\023[8:\032SP9\206\220Z9Q\344\002\272\266\335\305\267\343i9\272\241!s9T\277\2048\252\352(:\267\345\3629\026\200E9/X \272\267\326\017:\013\306W:\373\2775:\347\352\344\271\272\302>9\026\266\217\271(YD:v\230\325\271\241=\031\272\260T\017:=_~7Yq\230\272\016\001\3519\024\224n\270a\252\0319#O\251\271g\225\033:\224\323\312\272\2567\366\270\245\336\3469\211d5\271\026Y\343\271\223\t`:\370*\0149\337\332\234:\267\200|\272\314\313\232\266\224\"\3019\3473\257\271\325\320\n:\200\200\007\271\363\321\2127\352\342T\272\320\202?\272)\340\207\271\177I\213:\327\007`\272\212\211\2139v\331\025\272-\351\r:\33424\272q\370u\272\211\253\200:\030l*9B\221\275\271\241\350*\271p\250\2269\334 \t9BL\2259\212\2360:\002\223\3358m\233\025\272\030\310B\272\300(\2379k\342L\270\027\032\032\272\377\216\201\272-\306\201\272\rn\033\272n\353\272\270\026\313\34594x\003\272\013R$9\213\367\n88R-\272\031\023\2179\3378T:\r\235\257\271C5\021:\370Q\014\272y\253\240:\303\342\234\266\301\3532\270\006\'\032:\033\301\2505iM\007\272\220~E\272\320\365|\271\247\307r7\206cL:/\264\":\315\215\212\271a<\301\2710\210p:-\234\2549\377\254\274\271\311\225\032:\354c\363\271\263g\2129\277T\"\272;\027\233\272\331#\03789\302\262\270\255\214\220\271B\361N\272KW\000:\031\353V\272%\233\2159\236\345\222\271E)\303\271\304\026\252\270\n\312\204\271\013\222\217\272\3231t9\323d\3449>\305Q9<2\3739\235\265\2367Tm\211\272\306\302\337\2709\2778:\223\351\204\272\200\000\250\272\220\35799\217\205%\272\\|\256\270e\001%\272:\265\2667I=99\301\01008\001\356\352\271\365\n(:\244Y\003:H3\232:\217\2231\272\022\374\0227W\360B\270\312\313\3339\010z\350\266\351k\037:k\312\3029\007\210\024\272\342\251\310\272-Z[9v!^:`\223\2639t\006\270\272\317\312X\272\371\243j:\212\213\207\272-\275C: Q\201\272\352\213\30194wO:\364\304)9\320fG\2723\032,:\265\364\2279\251}\316\270M\004Y\271\206\000h:4Z\201\272%\373\3369\372y\201\271\227\016\300\271,\246\252\271f\n\2329\200?0:4\343\211\272ki\205\272D\261\337\271\210b2\272\035fh\272\026Z0:I\3259:Z\230\0068\376\253f\270*\331\327\271\333\323\276\271m\363\202:l\212\000\272\001\331\3539H\321\372\267P\353Q\272\264\214\2629\355\300c\272,T\010\272\201\304\215\271\245\3152:\252\307\215\271\367\334V\270\303\345Q9@\266\214\272Lq\21185o\2659\227\225\254\271\241,$:\337\"\2608@\304\370\265#\351\331\270\333+\342\267\261\263\273\271\t\230\231:\220\004\2329\352\254>:\310q\215\271\016\240\212\271\316\035\242\270\247(\3039\334O\276\271y\037w:\264\361\"\271\020\251\351\271\310yM:\207-_:\322>]\272\243@\3249\202>\2049\0045\017:\245\226\276\270\n~.:_\336\256\272*\2758\271\014\331\3058\342\026\310\272\266G\3417\263\234[\272\030>\002\272\033+N\272\300\220F\271\363\377\2179\250x\203\271\214\016\346\270tG\001\271N\031\211:\025\201\r9fJ\222\272u\007\2259\305\320\3669UT\316:\204U\3739\264-\274\272\225\307\033\271p\306\n\272;\021\274\272\256\207\252\272\223\364\207:\275\334r\271D\334Q\271V\200\276\271\261\221e\272\330_C\272!\315\3149FOS:\357\261N\271\374\003a:\0216\3319\237\n\201:\3105\3258\'P\302\271\236\322\245:\357\006P\272\320cp:\"\335\230\272\035xs9\370\013c\271\264\200\200\271j\007&\272\315\250\202\271\303\361\3449\330\307V8\261\204K\272\236e\253\271V\266*\272\230E\3648\223\355a:\365d\3606\2771D\270w$\002\272\034\273#:7,\2439\231c\2047\013\256i:\255T\211\271(\214\002\272\335w\214\2679!\037:\0225\223\272\333GB\272\220A\3138\201\027\2028\227\306%:\302\305\0179\371\352\266\271\023\010\021\272\316\265\2168\216\343\360\271>Xg\271\232\240\274\267@\324\000:\334yL9\360=\002\271\376@N\272C)\216\271\207\332\300\271\376\272\260\270,?\220:\250a\305\2705\036\2429\027\363\0139\301\363\003\272R\244\020:\007\036\3328\225\215\3538*9\032\271\021\301&\272\233\311/\272a\010q\272Z6d\271\202\322\220\272\306\313u\270^\350D:3\304\3308\004\025\021:\270\264\0037\177\032\201\271\031\242\275:\261\200\027:\n\375\007\272\222q\251\272\260\223\3449\316\335D:\343\250\24592\3576\2726=\251\270Z%\2369\277\213K:\207\2111\272\036\267`:Z]\3337\212)-:\311\020\246:\310s\376\271\314q\220\271)\346%9m\350\211:\335\302\205\272\352\351\3738(;*\272V\377$\272\265\335\033\272\355\233\3649\314\01318\342x\216\272\002\307%\270\177\002\203\271\242;\2678\367\024z\272\257/t\272\213\360:\271}Vq:\240\345\373\271\306HP\271\307o\0039m\2474\2722\213u\272\337\377\003\272\236N.\272\376,I\272\240\372\212\271\276\201\0329\275H\2469\317\203\3149;+/7|\027\2129\345\261\3648k;\301\271\272Fh:\331\343\371\271\366\204\201:\304\006\016:\005a;9u*\3339\033\272*9\356\201\2459\374\310\2119S,\337\270h\007\2419[\255\000\2721/\212\272r\316\357\271\020r*\272\"Y\34094\356\2749:\214\027\271\274\024G\271J\372\36073B\340\267<\207\2409\205\023&:\031@\022\272\211\326A:m\362-\272^\374\2549\377\237\007:\361\207\3639Q]\277:*\264\254\271\326\331\200:\245\023X\270\"\362\3339\022\014\023:0\367\n8j\355\033\272~Pz\271\233\013C8\037\370z\272\365\002\020\272\031<E\271\274\000\t\272\247\347\254\271\256h\370\270\272S\2469\355\273\335\271\322K\3149\360\226\250\271(\276\177\265\275f\200:\003\263V9}\273!\272\337\372\317\272\255\300q\272\027z\271\2725[s7\\\031#\271\037\211\2609\257$,:\331Jz\271\026\021[9\221\032\306\271_\003\2458\025\210C9R\010\2209\2561\214:\326\236!:3\256N\272k\017e\272\305\207\3579\343\033\247:\373\246t:_\\\255\2717\3631\272\227\333g\272\324\036X:\304\275^:4\211\014\272\345\214%:\320a\2717Y\264\264\271\"\257E9\343\250\220:\212\275\232\271\016v\2219\245\027Y98|\"\272p\33119\204&\315\272r\200\2409\314}#9\027\027A\271s\202[\272\346B\0139T\362\3779\277\377\034:\226\315D:\275(\312\271\013\233I9\3724\203\267\243!\2129\236\374\324\272\214}\221:^LH:\001\370R\272\212\314-:f\256\3519\306\275`\270\305i\211\271\325/\2739\253\3540\272\013*5:dfA:Y\312`\272%\212\210:W\221E\267l\376~\272\"\330C:&ik\2716\024=\272V\251\027\271\204\264\206\272\234\245\252\270D7\200\267\023\037):\372\2426:\331O\361\270\236\245w:\356H\2249\253ek\272\276\271\3059S4:9K\307X\272\372\026\001:|\nD:O\303\007\271U1\335\272\347U\224:\265v\262\272\021\376-:\375i\2469\365\377\260\271\306\034[:\014\233\2729\t5\0349<A\243\271d\351\307:\256X\3017\244*\023\272L\343\212\266p`\013\267\304$\2627\374\303M9\320\253\214\271\212\323\27598\221C:V\360\3609(\300\3549\000\244\2237#\320\216\271\356K\231:\0057o:\344u\227\272\212\373\215\270\260\203~\271E\255\000\272\037\242\006\271\321\305\2178\023s\341\2723\214\2719\370\3670:\347\215!\271\"\331\321\271\231\306t\2723\336f\271\236m\3629\230\274\3017\366\323\0228o\222\3739\332\032\032\272\313\363s9\036\210\273:\265t\264\272\334\300\2279\352\017v\271\2612\251\270\366\277\307\271\323\241\224\272\355BJ\271m\304\27798T\2547W\037?:\271F\333\271t\316\025\272\nB\0169\235?\321\270\003\270i:\2034\374\271\360\310\021:\366\260\204:\2628\202:\204~(:7\257\237\272:\2503:\221n\022\272\353\260;:\\\331\033\272\030{\316\272\256\210i\272\331,^:\305k\022\272R\024\217\272\330\230\2259j4\0239M=\322\272\272\177\3059\374\266\224:\216\232\2659\200\263o\272\177\347\3639\257\265\234\272\322@\205\270\275\272\005:\007\003T\272\347\374\027\271\270\027\3149\256\327;9\364`\3159\373\337\010\272\010.\371\272G1S9\000\204\3159Y\266-:\275P\274\270\234\314>\272\014\265%\272B\276\273\271d:\n\272:rl\271\227\372r\271\017\264@\272\344\247\246\271\206\024V\271\276\031\311\270\n\376\244\271IN\0349V\270\236\271\n\020\2568\267Z\2179\206\272\035:\352\027\360\270\014e\247:u>\323\271jy\252:u$\213\272\321\325\020\272E\247\037\272\316\302\177\271\337\306\223\272\032^z:0\351)8V\311\2439\200$L:9w\2219\352\372\2419\024\002\3729\270\036\354\271w\277\232:\206\312\3559\361\343\217\270\010\254\2249xn\356\271/#c:\357\215\3729cb[8\030\032\2469?!=9\246\205\313:\307-%:\237+\324\271q\354\034:\303\277\300\271J\266\321\271\017\010\266:\344\037p9B8N\272\377\375\027\2676\333\3409,E\003:f?s\272\202\001\2509\223\224\0367\230\352\301\272\004\342M\272\367j&\272\037\027\277\272\274s\226\272\006D;9*C\177:\314\367\325\270\253\312\330\271\306K\r9:\320!9g\357N\271d\342\2149\300\257\202:\251/\2578\367\330J\271\374\271%:\230\211Y\271\004T\277\271`\212\324\271D##\271\264<Z\272\330\366(\272V\247-\272+\354\343\271\323\2237\272\317\306P:\223y9\272\213Oq\272\3641\341\271o\346h\271|\260\3769\225\277\210:E1\030\271\315\313\350\272\177\r\201:\333\351\274\271\267\330\0226^\tB\271K\372t:\354\206\003:\216\202v\272fH5:\001o1::\330W8.\267#9\263X/\272%M\276\272j\210\3319\224;:\272JC$\272k\350\2148\356\242\t9\272=\354\271n\256\2039\007!#:\300\274\3579\257\216\325\271\335\307\3209w\351\034\271F\'\325\272\273\027\226:\323p\240\271U\273|\271\221\016\340\271\274\201\3759RQ\227\272\314cX8/Fz:[%|\272`\252\006\272\307g\032:\371\303f9k\215\375\271\341\r\303\270\321\375\222\270\371\\\2679K\010\220\271~\221\205\271)\013x9\333\347\016:[\\\2449Hr\2568\347\224\3248>P\233:~\034\014\271v\347\206\272\324\223\017:R\316\3269{pq9<\026\0048\t\\\31194DY92Y\200\272\233\362|7\314\347_:\326\304F:N\237\020\270\304/W:\217\310=7\\v\'\272\321i\346:\014]\340\271\273k+:\004A\350\266i\354@:\207\370)\271\302\267,:\013p\2549utY\272\312QV\271p\275!\272t\254\3068\237-\274\272\217\356#\272(l\3459\253\260\206\272\226\324&\271\344\344\270\271&d\254:(\243\247\271\326q\207\272v\005:\272\344\343B\272C+[\270\345\2252\272\243V\266\266\370\260r9[\3260\272\265\030\377\271\201\004\373\267\177\023\\9_q\245:\016\2240\272o\306\014\272\255\276\021\271#\221\0219\256!\200\270y&\330\271\344\323\267\270\321\271=8\364})\271\311\306\005\272\204\014\0319\342\236#\271\357\345\2509\305\202\320\271\341\351L:g\257\007:\261\224\024:\224\321\200\272\2212\3049\344\000\270:\314W\267\271\343#\\\267$PG:8&\221\272q{\3128\353*\235\272:Z\264\271c<U\272\013\'\317\271{\036\222:\242@i\272\334\027\221:\202\226\223\272J\357,8z(\316\271<\357&\272\311\317\026\272\227\035B9\330a\225\272\301M0:cCf\271\366\372\010:\235\346\003:+\365\3249\357!\2539G\214\34198\226\250:ZeX9Sx\022:\024J\362\271E\306*:\302C\206\272\377X\2047\304\030E\272N\255O\272T\367\234:c\3372:O@\247\271\032\245\2449)2/9\337\323\312\272W\006):\024\372\3279\230er:\276\222k\270nj\2547\201\241~\272\024l\234\271\337\210J\272EyF:\225\330\206:\031L\r:\267,~9\300\317\2659\236\3476\272Q`\205\272J\261Z:\207\014\360\271X\221\2457\363D~:\327-Y\271W%\\\270\317O\2479\001\235X:.B\3569i\0006\272\225\314+\272u\250z:oH\267\271*\272\000\272T\265\260\271(\345\033\272\242\206\236\271;\265\2449\316\017\3019\257\216\370\271d0\372\267;\377\3149\2217\362\271\312\222\3119}\034\2375\006~\214\272\003\316\236\270\331\023\272\271\316nu8\307\2137:%4\2218N\321\2069\301\032\3568\020\265\231\271\002\2169\271<w\202:\003H\2049\024OL\272\231\r\000:<\351\n92\305\344\271eG\225:\253\335\2626G\2713\271\326V\006\272\235.\260\271\234\376\0259\245/$9\344\310\033\271u\341%\272\356\036\2329\010\326\3428\265n\036\272v\320=:\311\244\203\267]\273\3059\306\334\3229W\242\227\271e\332\2719\251\316E9%\004K\272\300\337\243\271\307\227\226:\234\357 9\006 \2518a\304\221\271J\321\3229X\355\322\271%\310\3419\031\224\3167cd\205\271\360\310\033:\030\035\373\271\0364\3249!X\2159\244\306\251\271+Oe9\354\013\014:rD\312:8\356\303:?\210l\272>r\335\272\324\016\207\272\323\227\337\271\220\276l9EK\0218\267@\213:0za: 2\002\272h\271Q:6\314D\271\037L1:\375Z$:\274\357\2509 \243.8\2474%\271\t2X\271\254k\3709f\362;\272$\236\236:\3579\305\271\250!N9\t\335\322\271\350!X\272_w\220\271t\346\235:m\231:\272\232j\2239,\212\206:\001\216\2618r\0236\271\224\027\r\272\265@\312:\216\007G\272\207\342\335:\206\266\t\272r\230\315\272\032\247\035\272\304\007!\272\005\007\2348\270;\212:D2\013\272\031n\2728\332\210\0169\374\247\3678\256\213\221\271\372g\200\270\352|\3179\021+\222\272(|2:\377\372o:\363(\32073L\3749d\024\247:(\323\3748^\263s:k\334\205:\300\316P\272{\231\305\2717\2669\271\2624\033\272i\201\2629F\274E9\364\362i9\361\235c\271\344&x\272\177\033,\272\010\206]7(\220\207\272\036\223\014\272\223\025*\2727\212\306\271=@g9\214uQ:\365\337\032:\317\376\353\271\245\364x\272Z\307N\272\257\013 \272is\014:\214Fh\272B\301r:\337\027t\272\'\"\216\272\327c\r\272\333+\304\267;_\3677\225*\\\272B@\377\271l\215\2629\217\022\346\271\331\367\':\221E\2319KM\021\272\201D$:`3 \272*\357w\272\3479\3259Ne\342\270\005B\261\272\301\245\023\272\001Q\307:\213If\271!0\024\270[G\2729\000\204\213\2715H\205:%\263\010\272\031\024X6\245&\200:&\351\333\270?\017F\272v\016\0269\332Z\216:\000\007\2247\361\275\312\271\364h\3209\221z-\272l\213q\270:S\2469\001RM\270\225C\005:&wz:5O\007\272i`\002\271\351\353\3519\356\216\3559\226\037-\272v\210\237\270:\3758\2721\214\002\272\305S\221:,:\313\271\357tx9\201\233\2348\024\273\2309\0331\2039\262I\206\271@\363Y:\206!\010:\320\373D9\273Ml:\247\223:\271s\\\002\272,A\2178\362\253\222:J\206\r:\350\274\0079\252y\243\2662\375\273:\010\035\231:\273,\343\271\373\242\201\271+\203N:\345\210\232\271ta\3419\264\335\246\271\3454\2649\224\022\304\271\234r\2569\370\275N9\020T]9SF\017\272}\214\2768|U1\272P\342\3177@M\235\271q` \272\306sa:\274:\330\271j\243S\272\031\323\177\271B\354\030:\356\212\255:\005\200|9\374\351;:l\342\2629\354:e\2726\306\0357\330U\001\271@\330\260\270\000]\3169K\346\3519\221\026\2469M\272\004:f\346\3519~\324*\271\261\3470\272@\236\3369\017;\377\272\026\253\034\272\003\230\2326a\350J:\327\363\2209\rqL\270!\333M:\201\256,:\362B\031:\t\225.\270!uZ8\214\004\252\272\245\352w\272_\224\n9\270\037n:x\376Z:\r\034`:\032Y\0049j\212\037\272\322t#\271\202\025L9\371\021|9\233D/:O\373\27694\374a\270\202=\033\271\262\346\204\272i\t5:\n\374\231\271hN\265\271Gm*9\261q_:\372v\222\272PJ\247\271y\037\224\272\216\341\3409\241\264\3419\317_\300\2701S\2038\306\350\3208(Q\2068\330\224\n\272\240}\242\271\3409\226:7\214\3079\345m`:\r\001\236\2713\234;\271\345\264\266\271\010\"b:\336\201\3639\224\262\337:\234\202\263\271\300RF\272v\205\2369\266\217#\272\t\251#\271\231v\206\270G\002]:\362\217`9?\276\3649\255\336\303\271\276i\3359\257(I\272r\275\023\272s\334\3249\333\241\024\271Q\232\254\271s\254\n9\304\201e\272\030\206\000\273!\243<:N\027\035\272\003*\206\271\325\354\304:\363\214T:\375\332f:\265\360)\272\030\224\177:\353\204\225:\362\201\3359u\'\204\271\251C\207\272l+9:\244c\210:\250\350\253:\210\201\0019\366B_\271\237\223\2229\031b\3259\220\033h6\0248\007\272\244\021M:\354N:\272\t{\3738\313\001M\271\262\314z:\210\001U:6\275W\271\244\244\250:\\\t\227:\321]\225:p\2077\272\r\235\252:!\244\021:\250\200\0049\220x\355\270<\"\230\271\367\252N\272\374Mt7\307\362\223\272\003\207d\271U\034U\272E\260k\272G&\201\272^M\252\272\035<~\271+\226\250\271t\316#:\277\313\31080\232\313\270e|\231\272q0\2059\262\351\263\271\245\216?8\351\343\250:d}I96\264N:|\020\005\272\376`\231\272ie\241\271_\37039H\317\233\272\357\325\26097_|\271ju\2279\'\242U:1\027\235:\344\001\272\271\332\2348\272\277\350P\271\343\021\271\270\351F\2459(E\211\272O\236{8j\267\3149]\341\006:%\024\250:\227\312i\267+\'a\272\010[\201\271=\335\214:\256\317!:\307S\3209X\302C7\302t\3519\210\2715:\027\275(:u\217\302\271DWM:\244/\r\272\300\253I:\371$\2769\366,U9\030\324\213:\330\3706:\021\352@8\236\2357:l\260\004:%q<: 0\220\271\356\020G9\364\337\347\271\263\267U\270\262-%:\245\360t:th\367\271kf+\271[\020g9/v\204:\245\373\326\271w\033\2549.?T\272\337F~\271\351\024\3408\301\302\266\272\230n\304\272\201\231g:\255\336l\272\271\315\2579\210\027::\210\014\3769\362Dc\271\'\301~\271\001\352\354\271DC+\271@\027\374\271w\204n\272\030\014\204\272\227\014\032\271\036\223\3349v\024h:\030\306<\2717\025\017\271\026H\3769R\317Y\272\032C\2349\314\000\014\271\375\332\347\270&\240\213:\211\312\2729z\317\233\2713\246R:\253\251\317\271qV[:\312\246H9N\347\2059L\345b9[Q\2379\362\306\35191;\017:\021\267\257\271/q\325\271L\177\033:qXE8\306\014\212:\367\004\3379\367Q\205:\216\255\n\2710\312\3069>\020\342\271\233U\2049\336\216k\272\242\362\213:X\001\035:VX\032\271_Z\303\270\313sg\272\247q\205\2718l\316:\251\351!9\305\261\037\271\205\266\321\270R\374\204\271na\230\271\021\311\345\271!Na\272F\264}\270\321\0308:g\021\243\266\000\026\206\272\300\341\232\272\256\336\234\270\036-2\267{5]\271\317hG9\332\002C\272\004\254\"\270\321\323\025\272F\244!\271\347Lm9\033\200\201\272\275\025$\272\250I\242\271[\002\254\271a\014\2038,#\220\2718\341O\272q\231\002\271\2214^:\322S\274:v\026\':\246\371\3719F6\301\2718+1\272x\035X:\357\325\023: \333a\271o\'\2319 k\2149\323\216\361\267$\2754:@?\346\271\203\214I\272\241r\3029\026\214\t\271\204:\022\272\347\267\321:w\024o9wL\000:\241q%\272qvj:\371\205\300\271q\035\016\272\022\036r:\350\232\006:\021h\3629q\206\3558\302\231\226\272u\033{\272\334b\3279\263R\202:\022\264D\272ux\262\272\230\031\3158\3406\333\271\343@#:\223\365o9\026Q\2249M\016$\272\2527u\271\257\220\027::\365\030\272+H\321\271\357l\3609Q\024\225\2713A\3739\332\217\r\271\323$-\272_\234&\272\016\340Q7g\215<:\206\223-:\210\006\302\271v%\001\272\376\241K\272v\374\271:\003\276f\271/\351\2059\262%\3679P\020\233::\010\332\270\037t<:\245E\272\271\016\203\317\271\372\3363\2712\000j\272\242\317\3409M\254\3479\304E\241\272\300{\217:\007\264y:\204\310\021:\276:x\270$\332\0029j:\2109\206\335\020:BH\2749K9\316:;R\2159\374\303\2078\270\332\2309\001\014\334\271xq]:e\246\3319\0007k\265\215S6:\203\030<:\256\353\3268\n\230q:UV\036\271\217Q\214\272\326`\235\271\371^U:\330\364\321\270\237\362S\272\\kh\272\323\253\323\271\\\032w\272\005?\273\271\370\025)8$&y\272\000J\274\272&1\0019}0\0109g\264H:<C\252\272\305\233\2479r\305\2318\223\r39\245\177\3169\320\000\014\271\313O\177\271\311\002=\272Y\200\017\272\352\033\3709Dc+9;\304\230\272\2566\260\271\372\335\205\272\177\233S\2720\272\005:\244\254\312\270\322\307\272\272x\375\024\272\266\371\3157\331zc9e\030#\271\2571#9d\375\0169!\035\201:\334\341\270\270\340\024.:0\251\301\271\225\t@\272F\341W\272H\240\0258\202\222-\271V\333g\272?\177\2259\t\200\02478\231\013:\341Sm:\355v\3059\2051q\272\357\276\331\272fu\016\272\345\365\3619\263\233\2769<2$:\352aU:\315\341\215:m\272#:vtw:<\\\t:x\351\314:\026B\312\270\343\350\0168\311\237\2429u\005\036:{\014f\271\267\352R:\177\"\207\272\311K\262\272d\004\260\271(\270q8\022\003k:\365\315o:4\352*:@\337C\272\223\216\026\272&\212\001:\304\037\327\271\177\031\031\271$\220(:\357\264\3639\360\013\014:\226\025\214\270\275\217!9\235\323,\272\207\360\2609\320\251\3658\337@\3258\3259(\272\246\301\033\272\014\345\217:\206\323\226\272<\347%\272\230^>:s\303J8\345\370\3009\';\233\271\360\345\204:kDO\271\277\315\216:b\345\245\272+k\212\271\343X_\271\362W\2439\"&\266\270\264<*\272\256*T:7yu:\004\203\345\270\323\352\r:*\271\324\271\215^J:\347\201\224\272O\356\2659xr\301\267+\225/\272\356\200\2569\0210\230\271\273_>:\363\277\0069\341\317\372\271(\301d9\rLC\271\356\300\"\271J\256\017:3\240\t\271\355Y\2619\276\236\3229\217|\025\272i\267n\270\233J\3159_h`\272o\370O\272\177\037\005\271i\300B:\014\303\256\271N\025\2619\376<%\271\241\235\0008b\217\2609]p\3259{\007\205:\371x\2719\245\202\037\271\236\243D:\007u\2358v\224\203\272\312\337\2529z\000\024\272\353\003.\272\260\241\030:\236\254\3509\201/\346\271\343\22349;\242\227\271p@A\272e.\221\266\n\340,8\342\255-\272\314\002\213\272\260\255\034:}\000\261\271\265\006\2019.P\0109V\3224\2715\302\t\272\356\20658\274\343@\272F\257}\271\352\362\245:l\346\221\270J\271\020:B\341\241\271&\300\003\272\343\371\350\271\303M\202\272\326\234(\271d\335\004:)@\273\270No(:\273\2469\272\'\217\021::MC\272\2007\3758\036|\2339\301H\366\2719A\017\271\253\027}\272~\373\322\271\000\205\2619\002\350\343\271\353\036\2479\032W;\272\231\214$\270\031\r\275\271K\317/:&\013\031:\001J\0219e\350#\272\252b!\271,\302\220\272\350q[9\356\314\20095(\2509gW\247\2715\202\211\271\022\370M\271\357\324\2028\303)\200:1-\2479#\357K:\377sc:\356/l:\217\243Y\272Xz\014:n\270\2579\327;\214\272\210\333\337\271\254l\365\271\327\020\236:z8\3249\315\024b\272\0363\0228\322\232U9\367\273i9\036\256\032\272\307\245\220\271\2243\"9V\232\031:\323C\001\272|&\027:\014\374\2747\023j\310\271\3010\201\272\023\323+\272\312*\2449:\365\t:D^\321\270\303My\272*\273\3539|y]\271ZKt9H@l\272\240A\2239#v\374\271\341\335\331\271\021\025\3019\264#X9\340_\234:T};:\233\022\267\271c\361\350\270\374Z\210\272\337\002\037:\314\247*:\365\222\231:\337\021\203\272\231\303e\271\273T\3649\033\276\2549\223\245\3268\205\360\031\2724\270\230\272n\033\3619\270\264D\271\310\375\3615^\025\016:Lo\032\272\002nR:\022X1:\257!\024:;*\3069vr\257\272\030\320\206:fZ=\270tO\201\272\200Q\3349u\370\2778\005\014\316:\027\001{:]\306?:\361\367\320\271\r^\300\271\3708\2439\363\013y\271P\220\2548v\240D\271\372\n\031\272\360x\3409\t\376\036:L\312:\272\242U\223:\020\203\017;\005U\3249\355\240\2578\340\271\201:(\360L:\322\257:\272\305\210\3668\320\341\007:U\311\3258\014\307\034\271\354\215e:Jx\237\272[\010\030\272\213\312\2579\273\316\0109?\343\235:\315\032\2348\251\366;\272\342R\316\266\037%\216\271>eH:\264l\2337\025\250^:<7\3159m\251\002\272\330\023{\271s\367\3446xX_:x? \272\032R\227:\007\340\3749\t\024\374\27114 \272\223H\231\271\200\217.9\226ea:\372<3:R\345x\272\342\263\t\272\320\237c8\242\265\214\271*G\030\272R\367N\272\272\247_\271\022\321\343\270\366.\r:%\'\261\2714\344c\271\016:\206\272\002%S\272\237\267L9\203C\270\270\272W\335\271\345V\2658\232\035\r\272\344\224\21599d\020\272H\377P:\223&-:>H\0059\337S\033:\204Q\0178#\313\226:Z%\274\271\225\330\034\2727\373\3649?fZ9\003\251]\271\016\260\3419C\2659:\\\255\355\271\204\316\305\270\261YL\2725y\220:=\364\210\272\236k\203\272\265\305n\271\263\306\203\272\304x\311\271uV\337\271\357\230\321:\306\346[: X\005:1JK\272\005\216\3359r\026\006:d\30759_\200\t9N\300\037\272\241\3517:\322\326\324\272\241\031\023\272\267\3477\272\323\300\2339\\i\0039\243\260&\272z\034Z\272\033\352\302\270\321\"\257\272\264\237\026\272\333\233\221\271/Ya\272S]t\272\307C\226:\2113\2079\355\005\314\270\276\304\3239\023\251\3349(\332k:A\272Y:\254\265\2769\332I\035\272@Q\016\272\341\213(:\007\312\026\272\234,\3429\316\260\3749!\264\035\272q$v9\351\204\361\265*\206\2048~h\20683;\221\267_\360\311\270a\225\200:.3\242\271WB\021:u\230\3609\000\215\201\272\026W,\272\356\212\330\271Y}\2209\013\211H\272eh\250\271\274\273\205\271\005b\024\272HM\356\271\233\n4:\017 <:~,\027\272(m{\270C\326\2728\351\212\004:S3h:P\235\2609\275\026=:\323U\022:5\300H9z\370\227\270\003\230\2608\013\001\004:<\370\215:\222B\267\272\005%?\272\355\337\365\271^\272\025\272<f\246\272\017U\2509\345\177\214:\347\321&\271\366\"&\272\376\207\203\271\214c8:\303\016\37792\304\010\272<\311\3729\n\314\223:zI\200:\201w\2339\231\345\314\271\255\303J9\271\205\3709\365{z\272xB%8\323\256\215\271\003L\2477^\332g\271Gj:\272\230\221\3029\263\026\2329\222\225 \271K\307\265\270\216\310^9\361+\":D\023\372\271\210)\231::\322\016:@\033\236\271\226\250\017:\271\374E\272q\342*\272]\250\213\271\327\322\033\272\237\204\257\271O\226\2279\270\372\356\271\221G\217\272\n\010#:d=\037\271\254J\234:\317\217L\271\013\365\3628t\365\202\272y\227\3437nO\326\271d\336\2769hh\3328\244=\276\271\257\324\3339\353S\3638,\312\002\271%\277\272\271\361\366H97Z\201:1\004Z9\313m\235\272=\227\265\271\323\276\"\271DQJ\271V.\002\272\247\373\025\272P\305\233\271\214\004j9D\031w9\203\333):*\360\240\271|\201E7m{\'\267\357V\004\272\314<y9\207\327z\272\r\307\214:aJ\016\272\031\202\361\271K\365\3768\360\374\312\271\357R\3418M$\224:\310I\2479\235\347I:~\310;8Z\361\247\271GG \272x\246\2679\313\231\353\271A(\3529\330\034\014\272\177\022E\271w\005N\272m\357\2448;\203h\271V\0272:\274\23379?`\2359\371\202\3249\240Jh:\025u\3639\017\347W\271\264\205\303\270\320\0176\272#\325\353\270G1\010\267\031\261\36690\221\"\2722\225}\272\240\336B:i\366/\272\342\332A\272&\006}\266!p\3067\354\274C:\302r\3569[BE\272B\305\273:F\304\207\272\242\371\237\271\010\224\2428\207\332\273\272\017Z\234\271h\231\310\271\333\345$\272\204\263?\271\355m\030\272#Qv9\214D\2329\253A\227\272<m\2739#\367\330\271J\225\327\266\355\237/:\364&\034\272\304_]:\322\321\315\271\370P\373\267\263u|:\347\347\207:\236L\224\271p:$\270\0056\202:9\024\354\271\367n\3218-\274\001\271\321(\0079ZS\356\271\266m.9\204\023n\272\271\" \272\2228\003\272\265\345\'\272id \272\352\027!:>k?9!\022x:\005\323]\272\271\236M9\341<b:o\3775:\3136\360\271B\237\371\271\260}\303\270\226\003\2319\312\014\017\272\022\322\3739\334\251{\272\220|\231\2714y3:\342\016\0229\225\274~\272\007\2175\271\372\014\3059\004\332t:\341\223\3629\234\226\204\272tQ\273\270{\257\303\271\321\316I:\313\200\3259\206{\004:K}\025\271\226\001\0079\010\013\306\2711[$\271\023iQ:+\010\2339\234X\2529\362\304\005:\216\310\231:\216\r\310\271\316\273 :\276\033\206\271y\010\267:\342oS:NA/\272D+\220:;\346\2177!\212\346950\204\272\250\356\214\271\021\374\305\271k\266\223\271_l\376\270|\244\241:\332\0044\272\3062\022:\316\324\207\271\251\205\026\272\357\2459\272U$(:\023\330\342\271\025\337E:\274\000e\272E2\":I\020\021:A>\005:\347\304&\272;D\0048\324\027\026:\350e\2339n$g\272\001\343\037\271g\034\216:\0319\232: \341\366\271.\006Z\272\303u\2119\302\345\020\272\307ui\272K\261\'\272\247\275\203\272\351X&\272\026\330\016:\023_\225\271\230\336v9V\256H\271\032\017\256:\317O\\:\230\237#9\225\0241\272%\201:\271S\3542\272\212Qu\272\342\340\2139B\374\373\270\032A\200\272jO\031:L]\0269\247\037c\270^\\\002:\306;\276\270g\357\267\267-`)\267;\224(\271r`e9p\311\3439\332\017\2719\326\224\2359\232\200\006:\340\031\3329e<p\271g\237\002\272k\222\002\272\\WD8\003W174\241\212\271\337\025\357:\203\2518\271\036\243\2218\225\320\247:\321k\215:\343\303I:\313\022\017:\344\374\021:\255>\335\271\216^\253:rS58=\023\001\272\341\263\000\272\206|09\347\227\260\271}\244\2049c\"v\266f\033\266:\325\217|\272;\263C7.\225\244:U\003c\272t;/\271\266vE6\365\240\372\271\307\035\255\271\340\027\032\271\226\317\245\271\0066\215\270+\302\2579\222\223\024\272\311\321`\271\215&\260\272vg\212\272\262\316W\272Z\272V:\301\341\2728\017\233F\271\350\213\226\270V\334\210\272\275q\0259\250\261%:\017\267(:uo\314\271{\367\37093\336u\272\010+I\272\352y69\371\304\253\272\022\354\272\271@Q\264\272$\020\226\271\363\272\2209\201\2321:c\336\362\271\275\376\254\271\346\026[\2720\341B:\'\357\3429`\356;\270\262O\2219j\253\t\272n\313j:\250\210U\271#\313+9\260tu\272\025\341\324\270\311\274\2067\022\222\'8\300\201\215\272=M\2638_,\204\271cX7\271\026\250\354\271\321(\0259\020\177\0049\005\346\275:\221_\3258eJ5\272\330\254P\272[\n\221:\340S\331\271\302\250M\271\355\350\317:\224:\2648h\215\2539\306\271<\272\223\\X:\342Z\2729^\216\213:\224{\005:\215K`\271Z\271\273\271\344C|9\324Lu\272\022\"!9-\257\n7\003\242\3029T\277\007\272n|z:\332\375\036\271\021\224\3458!\232\227\272\222\302\210\271\"4\3139\2339N\272\r\276\221\272v\005{9\257\020\265\271\353#\2309\276P\0169\352\312\2606[UX:\217\211\310\272\221\374\213\272jD\245\270q\317\213:\027Nk\271\312\300\300\271:\222\351\270\205\333\2429\231f\2379\022\351\276\270M\017\332:\302\226\037:\314S+9\t\271\316\270\312\\\346\271=~\2259F\315\211:\036\031\214:E\361\206\271\243\002X8\277\341M\272\232D/7\251\257\354\271&I\001\272\177:\272:\031\211\2579\331p\251\267\257\200 :\210\317n7\210\202\3475\206\000\2209\213\030(:\205\013\227\272\303\203y8\024\227{\271\30403:\200\022\t:f\031=9\022\200\2308\363\320\3234mn3:\251\235+:\223\r\3619\001[\0369\304\303\n\272\370sN:\\\355p\272\222d6\271:\301*\272\252?):\362w2\272\216\265\002\272T0c:>?\237:.\360h:\036\253\2679\242\261?9\364\370\241:\255\006=\272\010\246\010:\251E\017\272\236\267\2039fde\271\027\276\2408z\201\302\270I\214\'\271\220\324\2519\346\013\2019iY\3559\267*\024\271\247\210\360\272\276\2436\271\321\004\233\270nCQ\272\270w\300:k\036N\272$\'>:\275R\266\271\260\272<8\024\035\250\271\'\351w\270\234K\362\2703\202\3149\263w\320\271u\022\2139,\303X9\333&-\272\237\303\2708:\023A\272\003\371\2539\324*\001:\373\350s9\253\033J:o\310\236\271\264\365\0209\005b\374\271@v:\272\225d\2338\002\357a:d\255\3509\tm\0359D\tP\272\n\025\2228Y\365R:\007+\':9\366J9r\027\214\271c\314\2759i\001/:\023\261\341\270-T\205\270\220n\2379\371c\032\272\213^\30597\227\227:\233\030\211\272\346z\351\271\241}\227:@\213\252\270rJ\3419\254\355\2179\317\033\315\2703\252\2248.\276\251:\212@?\270\313\005\3618\310\265\2628\333\223O9a\216\327\271\243\250\3069\311\244\177:\275\323\344:\250rS:\304\232\234\272\310X\177:\275\264D7\212\245\n9\013\255\016:{p\014\272L\035M\272)\357[\272>:<\270\257\207\256\271\211\317\265\270\332J\2259\025L\2008kW\2318\025\370\025\267G\031\0319\324\211Y:\355\r\027\2729\255\017\272\243\340O\271)\002\005\272\263\357\210\271i\321\2549\3014k9kj;\272i}I9\363\225 :^\204):\256\274\002\271\247\tE\270\017\351\2049\361\024p:\241\376^9\321\1777:\203\003\217\272\354\003\216\271\224$\332\271\021\"\300\271 \'\2078p\371\204\272D\005\037\271\302\247\2428\032E\230\267\243\251h:\333\246=8g\262\2538\323}{\272\316\272i9\0060\3149W\033\021\271r\361\0339U,[:s\r\3069H\214\3209C)\013:HL\366\271\260\240\0269m\300\3359X\222\260\270k\03698<\344\2668#\360i\272r\214\0368[\213\2339\032\013p\271>\327\2419\022j\215:$\317\251:\231\321\234\272~\340\035\271\243+L\267\023\014\2609L\322X\271\325\331\036\272=\240\3739\037\333m9/x\334\272\2408.:\207&*:$\324w9-\034\220\271\303\020\014:|s<:FH\3459\205\241\215\270\271\031I\271\245G\204\271\036Y\301\271\025C\336\2718O\233\271:\037N\271\352\240\350\271\354\372^:\235\354_:FRO:I\355\245\271E[F\272\276-\3529>\2347\272q[\017\272\205*\3218:\276\2009\254\366{9w\036\237\271\266\024\2659\266\201\210\271M3\250\265\273\203T:\375\345\301\2715\361b:q\024:\272B\344\3658\020?\026:\032\361\274:\376\020P\272R\301\0049\n\360\257\271\177\003\261:eg\2269\206\270\261\270\353(\3659\206ud:\363\341H\272-\210\27095\037\272\271C\020L:f \013\272g\"\200:v\033\300\271\240H\2308\375\334L\271$\311n9\264\006\2159Q\340c\272\020\0261\271lF\2258m\036\3678\202\2536:\254\"\2229`\035\031\272\373\034\317\271\3365g\272\372[\036\272?\177\313\272e\213i\272\265\357$:\257j,9\241?0\272\202V\3349\t\036\r\267n\262\242\271\367\246V9z\224\360:D.\0109\261\364\204:\213\241\213\272\234\311C\271Bh\201\270O\313\242\270\237\340\305\272\220\023\320:\221\250\005\270\264\ne9\355\324\2549\344,\022\271P;\034\272\266\342\2029E;+:\351@\200\272\247!\006\2716S]\270\246\353\3529\203\227\2608\223\010\201:\353\277\321\271\214\317\3409\351\252?\271\2708!8+\317\2717\236\262\272\267\313\306\223\271\241L\3249o2v:\331\010\203\271!\306W\2724\264u:h\030\2139\245\232P\272\254\035`\271\010\354\3059\300@\276\271\031\177\377\270\277,\241:0\230I:~+\206\271\234\341$\272t\310\275\271\234\ry\271\302\202\2569)RY9\224e#:\016\026\276\271\370\215\24498\226\277:~\213\250\267-(\003\272\231H\252\272\317\277\002\270\332\221\3279\375\227\3149nl\236\270@\254\3019!\365\365\270\003r\331:l\205\3239\312\244\037\271d\247\3029x\256\\:\373\273\314:u\202I\2722-\0109\314\037)\271{{p\272G\223K\271E\343\2569\317U3\271kz\345\271g2\2528\365t\223\272\032\325O9\335\017;:\331\360\3079\212\225\3538<U\371\270\254\347\227:z\002\206\271\250\312\202\272\337/B:\362\267K:\375Y\3249\252\377\2769\233\036e\271?\026&\2724N\0339D\366\330\270\244>?:\0139\201\270\323\301\3309t\212\264\271\333G[:\237R\304\267\211$n\272\014\222O\272acY:V\354I\270\022\0322\271\r\233$:L\260u\271\221a\276\271\327[\003\2726\374\010:\016\231M9\360\342\343\271_\027\3718d\347\2646\r\337\371\271\204(::FxV\271\354l\2368\371\330M:;\343\267\272\t\202\2279\031\335\260\272\235\333\2009=\200\010\272\204\356\013\272\234\017\3757\370\337j9\227\266<\272Lq\2559+\350\177\271\367\373\2518\r\220\2577\371\3617\272.\261.:#\010\235\271D?\342\270\003>5:=\374\267\2726\332K:\357\234\3269\210\315\2769dS\203:\325\233P:\204\240.\272g\247\225\272\202\364_\272\273\313[\271\333\320\2518\322\375\0209\217Z\241\272\222\022\266\272EY\262\270\037\223\3378\361\273o:1\251\3556\2076\031\272\207\004\3629\301\177G9\305:\2319\rB[\270\304\362m\271@\332\241\271\222+5\272\215]\304\271\227*\313:\302w\222:\204o\2608\257\227\034:\321\010|:\310\311\3179}\266@:=\313\177\271XG\2618\212\323G\272\255\026<:\376\235*\271V\\\262\2719F.\272l\037\251\272\217\373\010:G\2266\271\320\2608:\361t\0019\265\014\252\272y\257 \272E\317\001:\263\237\"\272\342j\353\270\202\024 :\223\014O:\340_\00788\t>:$\225\3559\031c\'\271\037\365\025:W,\2339e\227\242\272\014\3452\272\364\253+\272q4\004\272\315zy:Za0\271\312!T\272P\002p:\301\360\207\271\036\024\2729?iR\271H\014\373\267o\005\206\272\317\363I\272~\000D9\323mC\272)A37\326\tP:\212U3\272\\\354\357\270\342\330\264\271\376\225\251\271>@\264\2710;\022\272\030^\035\272$\312.\271\270\001Q8\337\255\006:\362/\321\267|\177 \272>z\251\271\347Z\230\271\374iU:\365?\301\271\260\361\241\271mT\2139x\361\207\272\371\230\331:4J\3759\261\301\2359\226I\376\270\265\032L8\021\024\201:-\315\034:\267V\30199-B\272\315{#\2728\257\2067\353\363\014\272\341\360\356\271\257N$\272\230\227\004:\361_P\272\327\265\266\271\013X=\271\356\254\302\271K\316A\271\255\322 \272-\350n\271\250\026\224\272\303a\004:\\N\2739\330f\007:\260(\0279A\031\237\271a\376\262\271#\356\2048\rO\307\271\325y\227\271&\235\217\271~\027q8\276\000\202:=\022\345\271\213\002$7:\365\247\272\322X\351\267\262my\272zx|\272\377`\002\272\2113K9\031k#\270H\267\315\271\305D\223\27167\225\271\335\216\302\271$5\3309kb\357\270\223\227@:\004Wz\271*/\376\271\215\352\231\271`\363\355\271\213|\306\271\201,%8\001\026\374\266\327\006\31584\256\322\271\037\264R\271\025\2630:r\036\237\271\243\354\2739w\313X\272\331\331\037:\251\365\243\272\252\234\224\272\360P\220\270\223\035`\271\251k\253\272\322\243[9\300\244J:2\315\333\270]\335\3439\0378~9\277\035\261:{\r\0259\006\324\224\270\326,\2719\236C5\271H\022\210:EI\233\272\354\206\262\271\334\337l\272\345\267::\327h3:\357\353\025\272\007\232\032\271k\367\235\271\275\224\216\270(\334h\272\366\225`8m2\004\271Z\263o:\354\033\3119\212\2115\272\277\216\025:_\273.:*tv\271\306Q\217:1\033\3459Q\247\2529P\t\2578\313Q\217\271t\216\34077\201\r\272\243\003\316\270\345]\":\234\230\360\270\247D\022\271y&.:\374?\0369\217X\201\271enQ\272\3206P:\222u\3039\367n\033:\263\016u:\226\317_\272\315\307]9\306w+\267\202(\033\272\023F\361\2724\000\035\271#\026d:\241\024}8pq\216\272\214z\275\270\202\001\2459\006,q\271 X\020\272{\307s:\337-\3219\247\223\3379\000\363\221\270\364\331\337\271\317X$:L\014\3419=}\3069\217\020K\2722\234w\272]\006\025:\352CH\272\026\207<\272\233\021i::c\2069\302Eb8\320B\2419\341\347\2639\301y\2548\351\021O9\246\263Z\272\030\3067\271\034\005\':\340\225)\271\341f)7\213K\210\272\333|\201\272i*}\271\001s\243\271\350g\3739G\225\246\272\353|\257\272?\314\221\272\032^l9\014;\305\271\365R\262\271\\\257c:\206=\030\272\222\257+:\376O\2509\271\266\2629\231\235\314:(\277M8D\316:9\221\326\272\272\316\207\026\272\251\037g:\266!\220\272\000\320_::\342\\:\023\312\3019\233u\220\272\3519\3269\321P\325\271\007\374v9\240y\376\271*\t\2538\377\300\036\272x\372A\272;\024a\271h@O\271<\36159\247\332\037:\250l\267\270\345\036\3758\202\375\215:^\201\2609-XX\272\366#\2559\200\035\3549]\303\255\271\312%+\2722\204\225\271\006\346\225\271\244i\3028\000\302<\272\033\204\315\270d8\211\272pA&:\252\351,\272\207\334\324\271\256\225\331\272\301\031\3638\252e\205\272.\003\232:\306\2527:u@\376\271\325\277\3629C\320\026\272\n\2709:S\325v\271[!5:6\306[\271\217\200\231:;\0365:\177\307F\272P\304p:a]\017\272\rw\005\272K\365<\272v9\276:k\031\3358\201\221\3779\244e \272\334\031\3129s\221\2269\250QQ8\007v\202:\004\271[:K\227\266:a\362\365\271\214F\226\272i$\r\272\337\230!\267\031c\353\264q\342\2259d\206#\272\265\t :\336\023?\271\274\235\2779\376\nD\272\345\344\264\272\025\007\2209\377\246\2269\001x\n:\252\271\353\271\202\006\257\271aF\211\271\3276S9\204V\202:\315)4\272L\177\2239\342\367U:\345\233\026\272$Z\217\271\360\331U9;.}\271\312I\177\272\236\025\026\272}\313}\271\335\n\364\267>\370V\270\263\351A\271ID\2779\232\030\000:\177rJ:\300UD:_\367\210:n\373\2249\270Yf\270\244\326/9\246\244\2519d\326\020\266\214\036\3339k\275\327\271\254uZ\271\275>L\272;\242Y\271\314.u\272\244DR\272\r\215\2519\374\322Y\272\031\211\030:\336iO\270\255\342\0219\306\351\245\271\373\010\3508\364\007<:\220\232\2748\363\360\336\272>\273\2139\r\273\216:\210\270\223\272\n\344Q\272\010\226O9\330\025\214:X\266\0069i;\005:\240\314\3139\236\374\2319\377(s:w\325\017:\242\303\371\271\022\242\345\271\261\372\r\271!\225\211\272\246l\3008\261T :\t\300\3169\3545\021\271\265\242b9\025C<\272\343\332\t9\002\003\n:)\207\254\271\003\304~\272\321\377\2567\370\342\0279\332\025m\271\321\226\003:\026\354\203:;A\220\272\201\310\2129{\211\270\270r\024f9\325I\375\271C{\036\270\3116.\272q\273e\271o3\251\272&T3\271\377\325U:\013\265\036:\327\024\2748\331}\360\270\021e\3728u\350\211\272bo\253\272\276\314)\2721yb:\226qg:N\017B\272#\217\177\271\256y\265\272$N\031\272\025\374\245\2674\247\2628\207\224\2169\013u8:\367t\216:\311b\213\271\364\350l\272S^\227\271*\203\235\272\3641Y9\236\203e\272p8\034\272\313\310?\2723a\302\272Y\315\013:\245\230\237:f\275 :e\275\305\271\221\310}\272\375]7\272\223\262\203\272}1\"\270k\212\3307\256\307\206\271\022\\\2179\322S\010:\032I\203\272\216\376A9\014\364~\271M!K:\001f\220\271\304\343\3059\010\251Y\272\213\245\3209\374\266D9!cP\272\343\001,\271b\35459\241\021\3239\216u<9`nI\272P\264\256\271\243u(7\034\256\000\270\024\251\026\272\177\357\3629\332-\273\271?\304\332\271o\252U:c\274$:\317,\314\272\017\257\3467^4\270:ba\3438\021L\037:\277\\\2109\035\306\t\272Y\336\032\272\242\314A:8L\236:\343X\242\271\261_\2639%\223=\272\351\003\304\271n^6:\357Y\036\272\244\332>\272\224\017A\272\356?_\272>\263F:ED3\272\301o\201\272\000r\216:)\274\252:\257\232\027:\247\3335:8\242\357\271\367 1:8\346\260\271\031km8J>\213\272\'\250\272\272\3203\232\272\337~\326\271\357Q\375\271P\276\237\272\255\230^\267\027\010\270\271\333a\226:\250\364\0339\224\237$\271\244U~\271\327\016s\272e\270\237\271\325\014J:\030h\263\270u+\2119C\217\373\271P\241g:\0024\2679\214\344\265\272\226sM\2726\036\273\270\352\302\\:\316x\334\271\342c\236:?x1:o\373\2619\247\265/9@\310\343\271\206,\234:<s\3109\247\306\026:$\370x8p\340q\271\022Q\232:\204\377\20495c\t:\325C+\2722{\016:\254W@:\345i\3078\204\3629\272n\'\027:g\025\262\272\032\030\026\272\3669\2109\374\n\004:\n\375*8/\020\032\272\255\256\n\272\214\213J\271s\311\254\272|$o\272\264\242\2249J\322\312\271z#\250\270\332\306\2059\223b\203\272\252\373\212\272\344.\0318\203a\225\271c\022\271\272\261\203<:`\2578:#\316\2419:\3173:\326,\277\271k\003\2159\373S\035\271.L\3109N\266*8%[\206\2716.\265\271\367\230\2229\352\275\2359\360\202@\272X\030f\270\310\3358\271\214\003\017:\272\330\025:c\020H9\013#\354:k\260\3679\275\2602:\344\225y:\2336\3619\020\232\3619\272\302\2249A\361\020:{\307\367\2719<$\272q\177\027\271F3v\272S\332\343\270z\262\207\272=U\227\270\375\216\036\272\330\007[\272\024N\2449\322l\245\271+\307I\270q\211r\272C\022r:\256@\025\272\207}q\270\225c\276\271z\371\021:\013\360~\271\270.J:\227\202\3749\037\277\375\271\020\236U8\235\245\224\271\367\355\\\272w\333\327\271M\364\372\271o\261:\271\363\265\00090\326\246:\250pN9\202\337\026\272\266\023\020\272\244\024\2756\016\211\245\272\366\225W:\016X\322\270y\232 :;\327\3248\031I\2358*\222\300\270\236\334\2028\333\020\2139\002T\3019v\203\25080\373\016\270\372\240\216\267Z\303z\272\332Jz\271v\022\\9\375\032\350\271\343yQ\272\265569\001\257\263\272\000\256\223:&\305\'9\330w\224:@\204\2429\224\037\233\272\033 \335\271\3162\003:\257\311\3539\235G\005\272\3707\217\271}\313s\272\365G|9H!\373\2703\243\275\272\253\213\2519\320^\244\271\025\253\257:\232\334\216:\255\237\302\272\177\276\006:\267lh9\214\206\255\270$\236\022:\204\240l\270K]o:=H&:\305_\261\271a\222\002:\225\035\006;\025\272\2119{\014\221\270\370\nZ\271\242\\\2778\373\272b\271\270{\223:\004\224\3369\366\347\210\267j\022q\272\034\310#\272\363\225V\272\242\327\221\272\254U195\235S\271\215d\2469\317\212 :b2-\272Ht&\272`y\2047\003\000\\\272\2528\346\271\371k1\272O(\212\267\373\2436:\264\001\005:\342\317\2069\273\312\3209i\303\2669\337\300\3049U\255\252\271D\344\335\2711K\257\272\2605\321\271\332\t\004:}\314\2459\266O\2679\002\223\2619e~\023\272(\315\013:\340\331 :\204x\0179U\245\"9\352g\214\271J\230C:\n\351\270\271i\334\210:\036\230&\272e\354%9c\247\021\272W\263r\272\216d\2339M\364P\272Z^\2768)\260L9\351\036\360\264\365\275#\272\253T\214\270\234\305\324\271(\337\022:L\023\2549QS\3659Zb\3119\237\365\3459^\024\2519,\323\216\271\211\027\'9\014\325M:\311\300\032:@m\3619r\010\3039d\316\0108\233\013\031:\277r\374\271\245^\3509Q\357D:\243\026\2439\242\004\3359\336\217\252\270,\352l:>\357A\272\031\251o\271z\315\3279?\231\332\271\016\021\261\271\207;\007\272\242o\3369C\300+:\2734\030\271c\024\250:$/B\267\231W\211\272\330\237\':\270i\202\272\213NL:\323\272#:\201\216\360\270]\023\3338\274\312O\271\250Qu\271\204z{9\210\350\203\272\371mL8\033xU\272G\301\321\271\207\255\344\272\237\322\2559e2M9A{-\267k\363\243\270\265\371\2529\n4N: \362X\272f\377J9\275M\2159>\341\3378\210\3013:\022\333,\272\'\037\254\271\214\255F:\021f(9\362\036\013:\370\371T\272\035\004\3119%\305\2539\032[\023\272\212?\2119^\2232\267\2724\325\267\310\233\3536\257\201\244\271Zy\237\271\375\274\031:\261\261\3259\036\2359:\223V\264\271\244\377G\271\022=\2608\356\314\220\272\016\2033:\032e\020\272H\303\260\271\242\r\2029\216\275C\272\201M\2509\035\323v\272TK\2719\333\371\0019\260\246\213\271@\306o:\245\314\0079\236\363|:d;)\272\026\274\\:\204C\304\271\223\273\273\270\360Y\225\271_\325_:\267D\2529\230\222\024\271\212\260\2009\032X\031:\246Qg9\251\240\2669\3232g9\006\017[:\213\032\3257\237$Y:#\235L\271\310\370\006\271U\240\304\271-c\276:\n\373\226:De:\267\217U\020\271\332\337\351\271\367\3021\272\222\271\2669E\215\030\272i\\D\272\225x\3169\010\024\323\271\247\005v9\357d\026:\247X\202\272\0046j:r\210\2669\236\306]\272\313\214\202:\372\033\257\270\360%\216\270*\240G7\366\r\023:\354\345\026\271\207\226\3169\201w\3429\235l\2078\'\367\0379\314\221M\271\371\316@\271\243\223*:\320j$\271{\325\226:\316~\2759B8\3749\350&\306\265\355\3778:\226J \271\213\217J:\231\270\032\271\355\370\2639\0319#9+3\2579\361\353\352\271\t\211\022:Hu\302\271\335\370\3559\234\204\364\270E\307u:u\336\332\271\242\276\213\272\213O#:f\275\3769\213\034\3149O:\201\270\002V\206\272\337\030\2139i\351\027:\277:o:\013\001\3549\002\312\024\272pM\2179\212\036g9J\347u\272\303\245a\272FE\264\271)\265\2119\303\232\377\270c\340\237\272\347\237n9\310\216\247:<7\25690j+\272\340B`\2701\247\3059*\202\r9r\347\2569\334jq\2726e\2169Z\320\231\272\371\036\354\272N\211\021\271\020X\0319\367\202\000:M$\364\270kx\000:S\237):\311\027\0279tu\032\272\027&\210\271\350~\023:\355\203D\271\301\306\341\271\010=\t:\366\002\3259\357\355\002:6/Z9J\312\310\271\377\016w\272\234U\2129\006\t\013\270\345w \272\201]\2529\t\235\2709\256\373\230:\026\010#9\2509\230\271\201?\311\271\356\377(\272\200\364\361:N\323K\272E\350\234\272\243\351d:\315\215H:\006{0\272\204]\336\271\234\025v\272\330*_:\315\261#\271\221a7:x\306\2528\360\315\207\272\265w\2209X\n\2539P\342\302:\223\036_:\037]9\2716\303\214\272\300\244\355\271\352\232\225\271\312kw\272\341\363\217\271\321\342L\270r\222\330\271\342\270\270:\261\344C\271\r\002\2029\331~\220\271\345\214\033\272\013\362\234\2714,L\272\334\343\302:\316\216&\271\377=\212\271\025\365\030\272{\360?:cm\3139x\023j:+i`:\367\310\221\271k\013\370\271\357\rt9{\241Y\272\274\374\313\271\334\007\3406\357W\35599\362&\272\203l\217\272\353\353\3137\361n\020\272\245Z\2119ye\031\272 4\342\270\243\242\026\272\377\323\004\271\373\222\3239\366y\265\270\200#\2167\361\377\3429\344%\200\272pKZ\272\236\206;9\342E\014\272\331b\256\2719\210\3679\2452X9\275\347\333\270\352)\3739\305\243\022:\023\r\3115\332\334\2538g\007\3708\307\207\2758Hr\302:do\204:+?\320\270\247\241Q\272\004\251\3529\316^\2109j\227\3519\207\205=\272\200\000v\271\337\234\'\272\r\\\344\271\231\256\251\272\233\363\254\271\034+>:/,V\272\202\231\250\272\220\035C\272R\203\001:\002\332h\2713\235\\:\260\261\226\272-\005\235:<\032#\272\223\024H:\"\023\2449\267yI\271\"]\t\272\"\343\211\272c0l\271+wo:\266B`:,\345\223:\2101\024\272gZs9\247\035\022\2703\371\035:&\255\307:\351\251=\272\033\262\2039\206\372s:\231\240z:\304!\020:ok\2658kk)\272\321\254\241:N\211\2129\303Y\354\271E}\035\272\357\3255\272\327<\204:\2015&:\241\027Z8\327\230\277:]sl\266&\007X:^\241`\272\337\306\234:\256\037\357\2717\363\2707\030f\233\271\213\336\212:\3149\377\271lc\302\271\017\340\314\267\337\272p\271\353\305\255\271+\027\2129\275\337u\271\212\240\245:X\313\2538\014\371\323\271\246\240\214\272K\331|:\266\3338\272T\331\3348\223\221\2228D\000\3349\351m\005:\307u\212:\227k\234\272G\316\034:\\\202\000:\330\007r\272w\257\006\271K\3118\272\353\265\2459\202e#:\350\214\204\272\253\243\307\271J-\212\267\020y\004\272\217\233Q\271\t\263$:\207\361*9\332$O\272\024Z@9f\302\3429<y\033\272\206\322w9\376\311\251:\014dP8\277\262%\272\026\0308\272O\372\232\271\356\270\031:E\370\2029\210z\307\270d\021%9=\333u\272\337=*\272\273\"\341\270\036\243\025:\243p\271\271\267\347d\271\201~[8\272q\206\271\250X|\272\272\226\013:\031p\003:\267\350\2079\356+\020\271\275\307\2459qD\335\271\273\254\253\271~\321\267\271{\344\205\272\354\3705:\t\305,\271\377\277-:\256\302O9\225\302\202\272\311\200U\271\227n\2639\342\353\202:\255\301\223\270B.J\272\263\356T\272#\377\265\270cP0\270(\345\272:mI\232:\203T\0079\232)\2347\353K\213\272\216\010\n\271\263 \034\2728\373\2419!W\025:\353\031B\272\270jm\270\250\213\3229\275\346\264\271\360(\3359(\313m:8\323\2769\347\rZ\271\374\231\2315\300\210d9\343N\202\272\376\302\366\270M\352\3319 1\0059\345\030\352\267\366\177\3039\232\tL\272nm\031:\013\002#\272\263\212T\272\221\000\373:\345r\020\271\311EO:\016\301\003\272\231n\255:\035\030\340\271wh\2657\311\361\3058\206\360@\272\206\325\213\272|\347\214\267\363\372s\272\022\235C\272w\222K:3\260G8\024!\2158\t\233j\271\277\201\216\271!.\260\271\303\306\2079:\026\3349\254\213j9\362\030\312\271\343\270y\272S\256m\272\3661V\272\244\007]:2\250\301\272N\36769\243L\2529\016b\2549&4\00075\371 \272O\313\2679Qd,\270i\337\215:y\024\3069\303Z!\272\363\212\037\2724\301\207\271akf\272\t#\003\272\305pX\272\351\331H9\300Z\3309\273\363\0048O*\\\272\346\224\3778\n\305z9Pp\353\271\243\001\035:\307<\2009\273\220\022:\272\222\246\271\321\246\2459%g\3009 \313(\272\370\177\016\271b\253p\272\244\\\220\271\246\2779:\222Z0\272\000h\3209[&~\272\3720\202:\306#):\274=\306\2726\327\350\271\272\r\2659h\254\2549\266\035\334\271\335D\002:uv\0249\335\016\210:%\017\326\271dV\2329\371j\310\267\232\'V\267\250AZ9\002\253\264\272\307\240\261\271\241X\000\272c\204C\271\323[\200\272\310} \272.\374\226:\227\313b:\236\346\26393\203\246\271\337\227\004:_+\3279_\363\2079\266\373\2359\216\347J\270\324,F\272\273\275/\272\3152Q9\235*\30692r\266:\302\370\0138\027\324\250\267>E\023\271\222|\':V\035\2079\334!Q:\345>\223:\0000\3379&\022\336\271\265z\2729i a\271\205\357e9\262?f\272\002F\24792q\336\271\346\355\234\271i\323\362\267[#u:\305\276\266\272\2353\2269\217\034\221\272\224\250\n\272\006J)\271ec\2109<U\3029\t\323{:\350LC:\373\016\2179\260\323\242:\216Bd\272\331V%:\241\275\255\272\273\244Z\271{\351\304:\3139\027:U\360I9\022\005\350\271\023\2360:\266\t\021\270*\016\220:\244\334\2329a\227\016\272\324\030\r\272\310\033d:gxp\267\317T\010:\360\031\21595\350(:\022l\2259Z\2475\267j\264\264:e\207\3649\266\231!\272\311\327\0379i\254\265:-\365@\272\375\316-9v\367q9\313\270\3449\213)O:\355t\3319{O \267\035\025\3369-\244\330\271(\213\205\272\222]\177\270\022Cg:\036\000\226\270\000\273\0347\2374\3477:c\2737\350v+:\321b\307\271c\343\335\271@A*\272\364c\3419\354\257\3109\026\200\3619!\251\371\271psx6\263|\206\272\275\220\366\270\230oE:<\315r8\300k\274\272\263\211\221\272\033\300\\:`\335\2029\373\2362\272\203>\237:\224\206\3527^\037\217\272\204\032\2678\335\213\236\272\303\256N\272/M\021:\014\304\306\272L\224B\270\377\210\274\270\002\222\360\271\315^9:\237\324\2538\337\002\020:Otp\271\232\325\236:U%\022:ILi:c\327\010:\036\245\007\271\'\260\3417\005\303\3309\021\257\3327\t\311\014:\254DI:\377\177a:\356\360E:]\177\232\270I\020\274\270\354\023m:\305^\2129 \370\360\271\304\310\214\272-z\0219:N\254\267g\342\242:\007IE\271\265(4\271\271p,:mT\3709\002!r\272,. 9V\350\243\271\274a8\272\017\251;82\376\231\267-\256z8\020\202\223\271\254\315]\272c\324\202:4Z\274\272\256\2376:\374\211\032:!\325\035:\027\230\275\271\203\30208H\255\0349A\236-:\241+\210:\023/\217\271\345\311\254\271\360\261\374\267\001\361\3419\267\325\334\271:\013u\272\320\364\2319\024\206Z8\376\270B\270\352\017K\272\335\372W9$i\365\271I\026\263:r\374\300\2704\212\2118RRy\2715?\317\271\272\322\225\271\301\217\313\271\330\242\2219\260\203W\270\277\355Q9\335\243\364\271\\\334\014\272\305\336\327\270\224\261\031:\220\315\027:@D\3628q\37459\235\345\2248\315E\244\266\362\254\365\270\307]\374\271\325\201\212\271Xc5\270R\200\205\272+\336\006:\376\004R:@-\362\270X\213\3679d\232E\272v<\220\271OD\000\272\270[::\231\243z\270\361\021P9\354\357#\2729]\006:\357\274\025:\335\001w7H\370\2068\312\340\317\272\372\347\333\271\361\027\233\271\257\342\2049t\3644:i>\2219\352\331=9\223g\2658VP\236\271M\370H:x\233\250\271b\204\306\272\322x\177\272\304 3\272!\000\201:\224\326j::sl:\270/\302\272\214\016<95\227\272\271:\323\3608K\026\025:\3308\3449r\373\2708\3532u9\262}\2208\021\235\210\267M\010M:Bj\003\272.\017G\271\277$>9\021\361\2159\2425\3329wn\002\272\245;\342\271\026\013h\2670\305\2278@X\2719\324E\2118\030\353\33496\002\206:\246p\032\271\221\013\036\271KPx:$DB\271QoJ\270taV:\350E\316\270T*\3568\320\205x\272\317\031\022\272\2558}:\346\034z\272.\222\371\271G\224%9r\343\302:\317SI:\361P\271\271\325\20789\206\366t9\253\225\242\272\355C\3369\231\203\207\271Xma\272\026\332\35599JN:a\256\226\271p\375\204\270\\\312>\272\247\220\"\272{\036*\272\357\021\266\270\377\243\3349\255y\2039p\265B9\002\376\'9\003\254\237\272G\244d9\263\375\242\271zk{\272\363\240\205\272\001\026\3079D\305\2449\230\306\273\271\352\\\2069\216\304\370\271\350W>9\344MU:=\201.\272\3279r:2\253\2749\350\210\263\272c\013{:/\370*\272f\351g\272V\267\004:\304\307\222\271\2754d\271\036\215c\271\335\232G\270\224\241\003\272\272S\2639\316\206\0108\264i.:)\353G\272\323?\002\271\341|\220\267\272L\3077._\"\272\314\355\036\272\206\"\2169A\344\365\271\200S6:\004\'\024:\355\331[\272=RO\272\361H\215:\206\334\3518\026+q\272\267\211\264:\322\360\003\272\023\037(:x~x\270p\366n:\302\'\2077[@\2649\274\332\r:s\205\275\270\220W\2709\3761\24499D(:\341\t\2107o\322:9\010\025\3059\013\252\223\272$\271\224:j\220j9\265\'\354\271U\245\2709w\001\\\271\032pC\272\245\351J:SB\2069\032@0\272\316\371\026\272\226 \0239\255\357\021:z\355^9\234)\002:\021/|9\245\256\024\272\367\021\3637\340\213j8\265Fz\271p\024\256\272R<\3429\266^\340\271l\"\345\271k\376\014:\242\030\3559I\025\3577\300\007`:Y2\024\272\352mC\272\305\230=\272yx\030\271\317`\270\271;\256\202\267P\020T\272Z\364\265\271\\M>\272\246\336\306\270\337\002\2509\010`\207\272\225\216\311\272\277\256\006:\t\251\005\272T\371\276\271+-\2269\246\271\245\272\330\274\334\271\252\247h\272\233x\'\272\337]j9L\232\3209W)\345\270(\304\202\272\303 \207\271\317\270\021:\233\001\2379t\353\004\271\007\354\t\272j\322R9\200\223]:s\353q7&\254\2649\214\030.:\r\324\031:\334\006\214\271\220=A9Sj\027\270\202\205\256\271\"\036~\271\351\31369Uq\3009\033\204{\271\370@M\272\262Nq:\303\257q\272;\323R\272\204\302l\271\363\t\036:\241}\3559y\321+\272Ow\000\272B\276\0319\031\373\3539\220\222\006:\343\365\325\271\222\363\377\270h\306\302\271/\226\276\271\325\'\307\271\301\037\3308\010\033&:\241(R\272\007aH:\r\203\2419\353v\006\2706  :/\362\222\272\271\371G\272\020\017X:R\332e:>\220\3666|\325\232\271\323\'\3069\367\025\201\272\331\\\017\272\036\376O\272\235\210\2629IdH:\201\274=:\356\300\3069\364\252\177\272c\304\245\271\345\257y\271\033E\23092\250\200\272\000\305N\270E\370o9R\206\3509x>k:\221\016\001:0\"j7YP2\272\250\013q\272v\310b:_M\2379\277\225`:\233\001\323\271\0200\n95E\210:\237I\260\270N\244\020\272w\213G9\237v\212\271\263\314\2549\262\355r9\301\314N8\363\000\303:w\317\032\272`rv9p/p\271`(E\271\026\213\2569\313ZO\272\254\031\2179\245m`\271\323Z;:[\371\255\270u\321\025:\027h\3329\254\260\007\272\302\241\350\271\315\336F8\031\265\2429;m\001\272\302\254\2759Y\3430:\256N\2218o\230\2358\273\r\3349\250\017\0278zHH\272\r\270\2159\264G\013\272\013\n\0329\221\227L:\233\240\3579yz=:+\304\200\270 5\3019\034\302\272\271r\345\237\270Yqi:\002\233\010\272\274Gc\271w~I8l`?9\227\244\266\272\242P\001:\305\307\0219\333\340\226\272\267B\315\271\314\233\3339\220E\3569Ul\0329>\321W\272kA!9+\270\2077\257L\254\271%\200\3069\310\375\243\272\241(\252\272\030\217%:\0046~9\204\361\201\267\rQ\212:\255\273$:\300\362(:\034\236\013\273\235\276x\271.\224\3039(\213k\271\362\253\024\272\323H\0219BLM:>\3072\272\376F\3709\370\213\2209\367\246\2469\035\306\0009\031%\026\272\256\301G: 6\231:\r\271X:(z\3409\234\010\234:>\322Q:\371\337\3149u\303\t\272{\014\251:\003\306\241\272\235\230\375\271u\275\262\271\307q;:E\302\330\271\177O\205:\230\273\2529\341\362a\271#\3752\272i\225Y:[G\\9o\231\033\272/\267.\272\214\347p\272e\260\'\272\242+\236\271\354.\035\272\250 \254\270! \000\272)\365\034:\366\321\020::9A\272\373\241U\272-@\'9q\014\224:\224\014J\272jZ}\272\016\225v:\304\0357\272\021\264\203:aB\214:R@\214\272x \3349\013\rn\272\370Z\033\271N[\224:\316\311\226\267\244\303P:\n\2343\272\231\217\2139h/\2729\231\376\007\272U\326]:D\033J9\312\247\177\267oZy9\266\341\0269\030\313\25099@\023:\341]l\272%\025z9\2745\2449\377lx9\n.\216\2728\301\0108@\332V\271\346\261\260\270]\275\274\267*qr\272\354}>:\305\323\3419\360\0022:\204\363\032\271D\363\320\271\364\007\007:,\207\003:\361\343\220:\016\205\231:\"A\211\271\347\317\253\270l\312T9]1\3239\371\002\0369cN6:=\245\331\271\337\267\225\271\256\200>\271\010\316L\271q\3102\2710q\312\271\306\013\2028\257\315\2049p\nM9:\353{\271\313xk\271\016\004\241:\223\214\225:\251\361\004\272\365\266\021\272i}\304\271\0254\035:\331ZK:\274<\025\272\276\035[:dQ\311\270\251\'\256\2728\245R:~\306}\271\rl!\272|\200\006:4\224\007\272\332uV9\333\331\002\271B\006\r\272\031B4:A\007#\272\257\224\3719i\361{:\231\274\343\270M\250W\272b\373%9\234\204\3469\237\242\022:\370)\000\272\005\344\026:X{\'\272|\266\3749A\377\026:\245X3\272sjd:\322\371\227\271\252K\2077\214P\004:\'\323\3559X\306\362\270\227\373\325\270\332\265.:`\266J9;\226\237\272_U\026\271\326\220\3429\252>\010:c(\234:\3111P\272\347\322e8{e\032\271\265\353\251\2672{\2719{\262;:\252\365\3379\246\235\036\272\277a\2219\261\031#\271\312\237\310\272\374\2079:I\214\006:]\"=\2721\352D\2729\363\022\272\310\307\030\272\253\247\003\271\214\245\211:\262\254\033:\013p\033\271\334\256]\272r\342E8\013\\\222\271\311\027\2158\207\270\2759\366=1\272G1J:\366\241\260\271\262\341\332:\021D&\271\365\306\250\271Y[\220\271~\006x:\331\330\3048\265B :\351)L\271\271\343\2458U\212\036\271\225\270\252\271\261k\341\271Z\323\010\272\216@D\272\022\327\235:I\331,\271E\241\2109\326\n\017\272>Ms:\030\r\3179{\242\211\271\361\234\034:\254\216k\272\206\260^\272\004\226\335\271-\037\013\271\240k\2337\201\373y:h\322\210:\367\003t\270\375j\260\2676\035\216\271EcA\272\266\307\2039\027D\213\271\375\345r\270B\014\202\272\263\333D\2718\037N\272\355p\302\270~1\2059\202^\347\271F\254\3439\0372t:| f9^\364\002:\331\033\3208\230\000Y:\357\366t\272C\3557:J\372V:\024\33588\317\360\016:\366\023\2269\020\374\3459\321\035\376\2718%\232:\320\270\2068y\260!9~\220\214:\0366(9lqq9\363\256^:\217L\342:p\2233:\277\376\237:r\217J9\322\2260\272\243\356\233\271\225\342\240\271G\023\017\272N9\3239?\372D:\332\033\3629\016/\2039s\031t:\020\276\274:\244w\211\27070\221\271pT\3409\363\246\007\270T8\0229\255\201\016\272A8\3118-\240W:{\263f:\336\007\016\271n\330\237\270\031\301\3709F\333L:\321\225\235\272TW\2349&\3520\271\003\372\215:}\017q:\320\277\223:\371\037!\272\255|\327\270\305\233*:Z\251A\272\354\022~:\010pB\272a\364\204\271m\324\017:a=\202\272\225\255\005:\236\202\3019\377[\333\270\250\342\n\272\247\222A:0\375\2167[1\2338\n\230\2749\364\036r:)y\202\272\"\033\3049%\316\302\271v\336\r9\244\315y:\2517\017:\300\022\t\272\n\020\232\272f\024v:\240\261\361\271\241\314\0019\\HE:\301\240>:\310\306T\272\304\312\2509K\260\3079\216\356j9A\213\204\272\t\315\2249\003\251\024\272\013\355Q:\034\200<:\325R\310\271\007D\033:\036\321\2369p\217q:\275\261\00395`\265\2715\240\0039\227B\026\272\251\267\023\272\216\0330\270\375\346\220\270\006\223\303:eaG\271\000\343\204\270\016\351\272\272[\350\313\2711\304\2039\311k\025:\021-\016\271\224\332r\272Hk\216\272\304\360A\272\241C?\272\272)H\272qU<:\2157\324\2716\323v\272X\230]9\310\307\0278\332\022V\267\337\270v\271\302\006\t9\243\256\217\272n>d:\303\267_:,\033\213\270r*\004:\030\221\340\271a9\3069\236\214\3339\337\355U\271z\324\':3\343\020\272\023a\2648+\356\t\270\213\217\t:\301\226X9\330\250\212:\363Ts\271\375A\342\267C\010\034\272S8\000\270\023\247e7\003\030\307\267I\016\353\271\004\371\014\271X\353\225\271\306Z\024:S\341^:\206\357W\271\374_\027\271Z\213\0169\227\027\253\272\241S\002:\315\260Q9\321\241|\272\014\210\005:3\346n:\233\376A:,px9\250_\3738\364}B\272\367*\301\272\25446\271\254\331e\272\352\215F\271\\$\3679,I\2666\266\235\347\271\032\2150\272\360\345&9ST\2638\260\260\3737\253\270z83,j\271\311\274\2229Ys\0039\377\342|:\341\361\3169\223\033\0149i)\3259\262\n\227:\331\311q:\364\277\212:0Oh\2713\316\2349\314\005p9^Zd\272\005\346\253\272b\214\234\267\221T\013\272\213\310L\272\342k\0139\021\275\023:K\2303:/\261\177\272,\356d\267xC\2759\352R\261\270\300\377\275\267%\347i\272\254\320\214\272\210?\257\272\016\000\037\271\2542c\272\257\344\365:\355\034\017:\355\357\357\271\364v\226\271\352\357\021:\325\334\202:\"\313;\272\013c\2649)\2134\271a\210\2359\220\366\2549N\0103:2\0141\272\361\374-:\014\266!:{\004\006:\327t`\272:\233\0138\3140\232\272.o\326\271;\376\3059\322\"\345\271\214|-\271q\200A:\210\010Y:\330U|\271\306\033E\272\203\362\3118\227 !:D\344\2338\201\204B:?a+7.\204\3019=\'\2569F\020\t:\264\277\242\272M \30395\231E:\270\207\2227L\332\3259\301\037\260\272k\236T\271\274\273\267:\375s\010\2721\034;\272\245M=\272\364\3129:\013f\217\270\364#\306\271\331\206l7\205L\031984>:\3167)\272\177\220\2158Q7 :=`\212\272\247\006J8\225`E\272\255\2763\271?\'\232\271\002\204\265\272]\371\3748\244\342&9\347\n\3329\302\021\233\271\020@\002\272\207\261\273\271\354\307\2279\363\266 9\211\221\3519\335\024$:\027\201\257\267\313?T:\303\357,\271S\005\264\270g\320\202\272\025~\227\272H<\030\272\242p\2009\335,\202\270\022\213\025\272\354\202\026:\357\016W\272\254\260K:I\341E\272#\273\3568n\344\254\271\334 \257\270\217(\2039\276P\247:\257\257\027:\323\302\3059\027f\331\270U\013f\271s\032\3279\353\256L\272\370SN\271\324\210\001\272d\245\225\270\275\275\006:\243\374=9s\234\244\272T%m:\267\357\3777C\214&\272c\360\3178\322\2567\272\312U\323\271\260\254\2359q\006\316\271\273\353K\272\344\310\3558\353\353\212:\272\211\177\272*s\0227\037;\\\272\356\277o:b\333\31386\302\217\271\260\025\3119I\274\236\271\000\322$:\006\301\223\272\304\312@\272\326\006\2269\230\021\304\271W%b\271z\236\014\271\247$\r\272\004(\032\272\220\230B\272\243\3366\272\267\213\007\272\272\214\312\271\311\350\205\272/\033C\272\372\235\035\272aG\2108\366O0\272\216\021\350\271p\204c:\r\367Z:\037;\231\271\375\225\241:\302\250p\271v?\372\271\247\223.\272\221/j\272\177\253Z8BZN:\3436\001\272N\036\2649B\000x\271AG\\70\336\017:Rl\255\271\264\243\337\267uV\371\271\351#\251\271\317\363\2539\333\365%\272\244\302\017\271\322Kl\272\227\025\217:\005\333\203\271&\311\0149K\000\036\271\306\367)\271\374\023h:\370\313<\272OA\200\272.\270O\2721\314\3279\334v\204\272\3248\3338\324\201\3718\030#\3479\035\235\3719O\000\273:\356\313\3157_\234\262:\001\035\323:\236\303\303\271\222@\30498\260\3349d\313\3349\271\243\014:\230\"\3069F\n\2719\363\"t:5.\003\271X\256\365\271st\3038)\337\010\272\201\3420:\336<M\271\036g\3709\353\251_\266\201\360/:\263)N\272\010\305t9\334.\3069y~z95\313y8\374\260\276\272L\315\025:\243\345\2629\261\037S:\322\350\245:\357Wc:\323J\202\272\262n\260\271LpV\272\256\021\003:\025C\n\272\352\256#\272?\177u8\242\273W9T\025:\272A\220B:\200\025\313\270\261\372E:\016\006\304:_\n\013\271w\367u\272 \351\007:\004\201\267\271\243=m:\031j\016:g9O:\374\014b\272\251k\215:\263+C\271\212\204\033\270\335L\2719C\315\203\272%\212\302\270\305D\372\271^\355\2579\234; :\274)\207\271\237\237\202\272\255d\014:\034\365%:p>\004\272*\224\2769i#o9\333\257\342\271Y\202\224\272\333\210\264\2711\314\2169)\014\316\271\274\261\221\271\370\010\2169}\027\"\271s\331\204\271\332XF9\246xc\272c\237`\272\251o\317\271\313\336\233\2723\003{\272\331|\201\272\2444\':\257!\2618x\267\2119\0348 \2668\203\000\271\242\010R\272\363S.\272\257\322[:\266\221\025:P\000\233\271\231\236\002:\000\004\304\271\205\r\3269\253\265+\272$\000\025\272*HV:\354\326\001:\223\342\0359\0005$:m\216\r\271\016\'7\272=\034\032:{\367\360\271b.\t9R7\3659m\362{\272v\330\205:\321Y\3549h\311\311:\236\232\211:\"*\236\271\261Q\221\266 }\2359\324\342\3109\275\245P\272Nc\203\272jO)\272\035\004\333\271v\205\0069\215\2672\271\265\004\335\271\010\034h:\231\363Q:\252\376\2709$\215\2109\'\337\250\272\305\214\0369\354\350\2709\033\035\033\271%\332f\272\361s\36596\263\274\271\014\362\244:Jj\203:\252\340\010:\330\203S\272\016u\257\272bk`\271\266\237\036\267\325\030\034\272\363S]:F\263I9\260Rk9c\234&9S3!\271\212$\313\271C\320@\271\014\005P\270x\220\255\271!\213\247\272[\361\2229\003\004\020\272/W\0248\334(M\266\377\200\2657&eZ9=\216\303\271\247\201\2549\327\211o:\010\021\2179p\361v9\000\373\035:Y\357\2509\322\346\013\271\030\336\0359\205:\3639\277i6\271\371\356&:\365\344\217\272P\260\234\272OgY:\343\'&\270\014\3526\272\030S\3579\244\022,\270\353J\3739W\005\2609\323\257]:\033Hy\272\036\335\263\271\007tj\271\273\257\212:R\031\027:\303r\207\272\031\217\325\271%\001\004:\2118\003\272\263\335\212\271\370\3240\270\262P\254\272\020\313\333\272\251\025\023\272\306\365\2176\010\340#8\364\364)\272$8\022:\263\251P\272a\355\231:\242\004\3759S\244\004\272\264\335\2579\204\217B:5J\263\265&\177\245\267IG\0109\273\014?9w6<:\251\266\003:\001\004\027\271\315\027\250\272\034\311H:\036\"Z\271\007R\232\271\274.}\271<~<9\302!\260\271\021C\213\271A\203\347\267e\340V:\347\363\234\272!\364q7\"\267;:\262d\2269\365\2268\272\217\035\2449\275\265H\272.c[\271\343\342I7\240\252\240\267\215\317*9\002\022\0219Z\331+\271\177\321\315\271\336P\342\271\000\210@9r_d9\350\n\034\272\311u\026\272t\322\016:\362\033t:/\205?9\271\252\3079]\321f\270C\304\23796\245\325\272)\365\026\271o\363\200\272\237\'\006\271m\235\300\271\306\023\r:^- \272,70\272\237@\3479R\014\336\271\027L\3449\355N\322\270n\365\213:$\r79\350_A9l\375\003:\304\371\\\272)\332\225\272\221\250\242\272%\207\351\272,\362\235\271\362s\200\271\373O\027:\343\374c\271\247`@\272\373\024]\272\200?\3059\231]\214\27078\204\271+\227\207\271\266\017\335\271\\S8\272\\9\340\271p2M\272\223\003\001:E\035E:;\372\3729c\326\027\272\210\010Y\270\370\314\261\272W\322\3079\315I\204:\244\301\274\270\360\232\251\266;\365\3329%\264\302\271*\033\035\271\375y\322\270\225\002\223\272\203G\346\2719\004\205\272W\247\027\272.}\2419\rZ\326:\327>\226\270\333\337\r\272\230\203 \271\256>m:r\030\2169\201\"m\272\'\274\021\2669%]:\277\222\001\273\005!>\271\202\232i\272\334\377I:m:!\272\325\351\340\270\321\262\270\272\260\000\3779M>\227\272\371;S:\374\266%\272\304\253m9\242\355|\272\220\0000:I2\010\272\356\250\3379\371\237b\272\237)\023:e\016\362\267!f\2739\202Y\3029\346\016\025:\210\024m\272+E\3239\"\354\215\272\010f\004\272:i\3467i~\376\271\212}\241\270\034\316\0179\212\357\375\270\034XX:\264d\206\271\3445e\272l\237\272\270\r\330\365\271y\360\2237\237R%9\273\247p\271q\016\254\271\304\003\037\271\362\235\220\271;Y\2349\350\027\323\271&\201@:c\036J:\254\303F:\274_S:\225\301\257:W\3128\272y\024\337\271\017\253\256\271\024\322\3237\345\001\250:\241%\203\2713\343\345\271\003\0339\271\317F\225:ts3:\215\247\202\271|#\320\270\227I\030:l5\216\272\311R\3039p-J:X\276\000;Sl\301\271W^E\272\325y\0149\3229\274:,\245V\2711\'P\271k\013\334\270\036\255\337\270j\322`:\305LZ7\267\317\036\272\342\000\252\272\211&\377\271Pk\205:\036\250\004:ft\217:mkE\272\010\231h:\177?\215\272d\376\03194\361{8\023:89\232\344\2349s`\250:\000\267\262\270?\223\245\271\342\211\3278\361d\340\271v\\\3409\004s\237::\250\362\271\327\214\276\267\240\253\204\271~\206\210:\357\227&\2723\336R\272\366\234F:)\222\310\267\305\255\02597\226\3529\003\322g\271v\013\3048\304I\303\271\332\013\251\270]\347\355\270\352\333p\272\334=\277:\327vN6W0\2209)\033i80\351\2039T\300\373\271\316`\365\271M\006n\272Lb\260\270\035I\0229Cw\357\271\307;\3069\315.^\272,\270\300\270k\363\2179\035\333L\272\273c\2239:\214\224\271B,,\272\314J\2059\333\350\001\271n\263\371\271\247b!\272\016\017\203\272\025p\361\271\255\036g\272x\316z\272!\241\311\271\t\017q93\332\2679h\332\2349^\273\3349d\220V:8\234\241\271\345\345\034:_\'\254:\r7v\272CJ$\272\312=\001:\253\361\304:\361C\352\271],\226\272\014\225\245\272\225\317\2637\3325\237:\240\317%\271\367!69\214\377\231:G\023\347\271\213\200Y:W\344w9\366\324<\271\300z\227\271\333\245c\272\010\324\3359J\315\356\271]\244C\270\023\023\2729\242\332\3158\263\374\345\271\3364\010\272\335\014\2719\000\035\310\270\341s\021\272\307F\3269j\304\214\270/\236!:\355u\314:9I\345\270c\360\0219\225^\3049\026\217\3358\313\236\303\272\033\307M\272\007\257\341\271:Q\307\270T:\224:\234\233\003\271\255_G\270R\352\001:/\252\t\271\214h\3478`\305\r\272k\226\342\271:d^9\211F\017\272\305\306\022:\023A,\272\253\247[\2724\241g\270/\226G9\3379\3739G\270\2459\251[\307:\362\354$7z\301\224\271j\267\240\272\347\331\016\272\363\206B\272P\267[:\310\342M9\222\262o92\3562\270\350]\205\271s\260&\272{\204=\272\350\r 9\014\254T\272\316N\3429\017\332\242\271\275 x\272\242Pp\272\313qK:\022\320\004\272\r\034\203\272\375\215\342\271\004\270\242\272\250\314g8\310\247\3538\r\036\2259:y\3539\342a0:\272sr\271Nm5:\214\313\034:\363\335\0169\237\325\227\271Wov\272@AB8\220\230\270\271\227\220\377\271a\277/:\375c/\272\001I\214:\365\266\235\272!sq\272\366\336\200\271\006\014\240\271\033\354=:\032\305`\272\242|\021:=\244\336\271\267\357\2469zb\2009\376{\2407Y,\345\271RW\226:\0377:8j0T\271 #\r9\2027\3409\265Y=\266PB\2629F\320\3379\314Uh:\334\007\226:K\240@\271\245\205)\272\311\353\2509\314O\0059\303:\2359M$\206\271m!\271\271\366FT:\212-Q8\305b\200:\242\007T\271\037P\200\272t\023\33391\022Q\271\366\324\330\270\306\264\0278Z\333,:\230\226\036:&q!\271c\001\3439\016IF\272.\013.\2702\010\216:6Q\227:\257\200V9\366\222a8x\341V:\347D\005\2728\002[8\211\177\2268v\004\025\271\275\356\3619\224\317(\272\231\326\255\271\n\245\211:Y)U:\343\216/\271}\316\261\271\321\372_\272G\312\2009>-\2728]6\n:\014\034\232\272\343*\3378\272\243\3439\212\333\3159\357\000#\272\343\262\022\272\317\000U\270\356\216\231\2714\325]8\240[):Y\357\2049\371\t\3309\346\243\3759Tb\265:\355\r\320\271\272nJ9\\\2212:M\235\276:\251\373&:\205S&\271\277\356n\270P>[\271\302Z\3279\005\005<\272\202\217\2709t\260\2209\235\207\3019\354\231v\272\022\375M\272\323\301$8\226\r\313\271\200`\220:oP\3319\324j\272:4b\2629\202s-9\2509\260\271\374\342\206\272s8\324\271QX\0019\"\271c\272<:\036\272\232\364#:\212\344\3149o\353\3718?\247\352\2717\010\"\270\271\177\002\272\017\027\3719DM\2009\231J\2259A;\302\271\366\206\2338\354\320\266\271HO\010:\032\2367\271\261\020\362\270T\361\024\266\365q\0135\260\352\0219\317\036\006:\006\337\213:\362}\220\270\260\213S\272\266\031h\272\340am\272\243\244\307\271\265\323^\270V6\\:t\316w\272\252q):8\231\2148;\\\014:\2446\022:\253C\312\271\234\364\225\272\310\0221:\2340\315\271b\327\036\272\017\030\200\271\250\3542\270\023\270\t\272(w\"\271\316\210\030\272\235\263\"\272W\006R\272\333\221\206\271\310`+\272o\021J:\366k>\272S_\277:\2504\335\271\240\317\277\2700\320\265\270\200\"\3269\340\361;:\232\021\005:*\202\210\271[uh8\000\253\t9r#\035:\320\0218\271\r\343\2129\253\333\314\271\303\377\304\271N\315\021:,|<\2729\306\2329\320\300!9\346\373\034\272\245\352\3469\264\376\0359@4\3046\365\212\013\272#\242\0059\033|\020\272\222\326\025:\001q\217:\244\260\3179K\377B\271\235(\2438,\372\214\272\373\017\3327\212\221\2769*\244\203:\363\241\345\272`\2275\272\342\027\002;\371\37028{\037m:\272\003\2568,\354\3379d3\264\271\2128\3109\036\377\"\271\203Uw\272\270Z*:\234W\237:\207\247\2629\35310\271\371?\247:e\006\247\270*\355\213\267\323\007e\272Y\320_\271\023Xw:\260\204\2739\223\213\246\271qN\003\272\212\321\2738\"\301B:\r\264t:\271\010\352\271\3238\354\271\236g\205\272H6\230\271D\231\340\271qp\2329@M7\272\3444\255\272\335\271D\272\301\027p\272\005Y\025\271j\235#:\273\257z\270i\226\33081U\202\272L\245\021:\305\222\t\272\204\252\031:@:g:\"C\2438\257^\307:\332tc\267\021h\01693\265\253:O\232-\272\032x*:Ka\221:\005L\006\272\365\324\037\272R\204\250\272\277\\\3017bJ\352:[u-8\242\035\3477\341\323\342\271\2417\244:<\013m:\374\334\213\271\242\215\3468\207\002=:\364\025A\266\350\355\n\271\"\266\310\271L\035\237\271g\214\325\267\000\202\254\270P\005J\272\3622\007\272\351\003\210:#&\3059\002\327r:zP\0169\034\020R\272\340\345\215\271[F\003\272\341b\2779\207G7\271\305\306\3039\2740\272\270\362B\366\271\274\354i\272n\372&\272\332\005\207\271s\020 \272 P\016\272\266\220\2348\225\233\3369\202\337l9\r~c\272B\323|\270\233\347 \272\020f\207\271\214\007\2369\310\022\335\271p\353\224\271V\'\333\2708\240\001\272@\014)\271\217\337\311\271\373\341d\270\376\367\034\271\306\t>\272\270\333\3519\234WM:B\240\341\271el\355\271l\033\250:<\247\177\271\322\351\207:\266\320\305\271#\331\220:\205\021\250\270\013Jv\2715\361\220\271Z\326\325\271\305\327\3258\326\303j:,\344j:|\322\204\271\335i_:{A<\272\035\261y\272\310!\3067[\305\307:\247=k8\003\236\025\272\031\036P7\257\321\264\272\313:\233:\271\366\036\272\237\030_9\251^x\271\243\317\3029\242\005\306:7\360\246\272\233\010f:\035>\004:\313\263*\272\007:\217\272\033\024\210\272\307\336?:\356\230\300\271\225&\237:\302H.9\266*\232\272\372r\267\271w\'\231\271\337c\2439\2358\342\267\013\220Q9hx\3169\306\305\250:m\355\264\271\035\3520:\\\353l\272J\307\342\270\260%\01384\347!\270f\345B9;\255T\272?I6:\272FJ\270\311Lh:ab\0078\004\345\317\270\332\355\n\272\362\273p:\341\313+:\234\302\254\272\2704;\272R~J\270\306h@9NyQ9\266\275.\272\321\264>\272\310\320P\271\232\rm8~\017\2249!$R:|Aq:\364x\244:\333}\230:\325D\3169C\361/9\206y\2519\304\214\3559\032Q\022\272\204F]9`\232[:\326\014/:$1\'\271J\240\006\272\326\010\2419\001!\2259\253%\224:b]\3079P-\261:\314\352\213\271dB\260\271Pj\2169*\004\217\270\353a$\271I4\313\270\334\376\177\272\307\304/\272\242(\220\272\351\351\337:\355\210\302\270S\322\221\271\267\311\376\270\312\255\333\271\r\005K\272K\2434:\340t\2319\262@;\272\334\213I:\330e\010:\023G\0169\255\033\024\270\210\224\221\270\246\007%\265\337-\2029\311\233\3249\367\357>:]\373=:\275< \271\3525\3729k\355\202:S\347\3519\354\234\0349\340\010\023\272\031\310E\271z\2636\271\207\005\204\272\231\321\2559\241dA\272\002m\3009#\373\211\272X\302\224\265\305T\240\270\356\022\354\271\2505\3568\004\203\201\271\247\271\330\271\005\253\':\035O\2109!\273V\271_\2162:\320\236L\272\222\"j\272\200\027\016\272\373)\2249\343}\2779T,\223\271\335\237U\272\227\304\3459*\030\206:\365\256X\271x\233t9}\367c\272\r\361\276\270\225\007+\272\010~\331\272\236$\007:75\236:\273\362\321:\250f\030\270\335* \272\255\304\263\271\220#\022\270\376E\362\271v\004\312\272\321\343V\272\3717\2329VC?:\215\370^\272\231\257J:\217a\2529\234\222j\271\352/\3759\367\033\':\026\033\247\271m\003\3569\356N\026\272FVd9{>D9\211IF8i\36439\271^M\271\357c>\271L\221\2757+\017u9\037$\027\271\333\351\201:\014\316\":\016\263\216\271\326\237\246\272\260%\2719\310\274\241\271\321,%\272\252\317Y\272\264\361=:q\310\246\271\347\263\204:;\275\3607\275n\210:\372\330$\272>\'\302\270\300\037\200:\313\244\231\271\275\301,:\322\370-\272c\212\021:\263S\24696\024\204\271R\235\226\270\273\024}\271E\275P\272+b(\272\3178@\272\332\355\322\271\323\014\237\270\021\033\025\272C\247K\272~^\302:UT\310:\013Z\r9n7\3479\022E\034\272\033\266#\272#\215\002:W\374\211\272\267\352\226\2726\223+\272\217w?\272\025\025\251\270\233]\2469\007/\036\271~\317\252\271\'\353r:WW}\271~\350V\271z\217\253\271\232T\210\271bx0\272.\247i\272\035N(7w\330N\270\360\204/\272\020:(\272@\022\033\272\356R&\272X\242 :\245\314\225\272\330n\215\271H\302\335\271k\r\207\271\005,\03390\270\001\271\020\003l8\204\026\1779\227\030\3378\315\300\332\270G\241\224:\257O\'\270</i:z&\350\271\365I\007\272\330\001]6\177\3350:\347\215\203\271\234\235\302\272j\344N:c\236\3429\030j\212\272\245\356:9\333\323f\271\252\004{\271\021t\2419\371+\037:\266\331N9\203\266\302\272\1775\3008\245t3\265)\307 :\204-\2308\204\352\r\272\353\'`\272Ia4\271vT\001\271(\354T\2728\23349#\300\205:\225\273\213\27184G:\254\2029\272\355\230\267\272\001,b9\323]W8l8c\272)\254\240\263\025\340J:\346}&9H\246\227\272\353\337A\272\220\007\377\266X\270i\272/\375\347\271`\271\2539\376+L\272\036\024\274\271\327\354\211\267\336\377\0039\213\355\027\271\225\320\351\271\330\317\200:\206\353\3609\211\245U:\372I\010\272\272\022\t\272b\256d\2717>#:1RS\271\371\312\003\272A\262\265:\327\273\377\271\333G2\272\035.)\272x\330l\271\214\037\2609@D\327\271I\215}\272\364JQ9\357\034U\271\027P~\271B#\236\272\326:\\\2723g\304\267\332f\3359l\364\222\271L\2503:C\003+:\370H\264\271s\030]\272\357;I\272\341\023r\272\365C\r:\"Ju9\243\233?\271U\220 \272\"\t\233\2715V\007:k\366\3169\252\253x\272\314\337\32791\324\262\272C\025\323\267|v\235\272l\177}:\205@a:sG\035:Go\3509\256\326\005:\004M\213\270\3775z7\005\004\023\272\366\306\312\271\000\373\220\272b\2122\272\326\235\010\272#D\335\271\263D\340\271\254\270\203\270\347g\211\271\223\022R:\027\370f\271\324\n\003\272\316\177U:\316s\2419;\020\330\270\322\231\3109I@\322\270V\317\253\271\214p\373\270\377`\007\271\005&\3729y\244\224\271\033L-\272P\261\321\271j\304\235:\231\007\3777\370\2759\272\014\277\2279\276\3207:\376\231%\270#w\004\272\1770\030:\2450N:\3714J:2[\014:\266\306u\271=\031b\272\034\265r8H[\005\272`+>:\255E\244:\354\3444:\'V\006\272A\227#:\007v_9l=D\271\237\035\3439\323\275\363\271\027\3703\272G\333\341\271\240\246\2119D\000\242\271\257\021z\272\275*\204:\303\32059\000\030\26393\276{\270\260\305\3739=\226,:\233\371\021:9T\257\270!F9\272c\250E\272\270\245\326\271\r\206\'\272\345g\014:\310\250\3108\001\320S\272\210OT:\253\255\222\271\365=\210:\356\340E\267\214\244\264\272\"\0273:\244\351\351\271\361\036\3559\241Im\270\244d_9\225\302\212:9<\026:\211\003\264\272j\336\'\272.UB\272\374lb\271\317C?\272\251\037\001\272\312\215\3519\241\370^\272A\342\021\2720\341$9\340\323\235\2723P\006\272%\312\224\271,\022i:\021\037\3219\226\006\0338=\310I9:C\245\271\211\261\250\272\375\023\022\272$\303\2429\343\023\3629S\266\0369\020\277\370\271]\331\025\272\371y\216\271Ky\203\272\227\363T\272e\346\3705.\234\224\272q\310\2539k\330R8\346\245\035:D4\020:X\334\214\270\267*\'\272\313\022^8NL\227\272+\006\031:.\347;\271\3569 \272\246\323\2269\213U\2118\265\245\0378]\000&\271#\376X:\336\204\223\272`!\253\270\312\032\213:2\243a\272\232\316C8\312\267\3518lu\3529\023\000\3449\024dx9E\244\2458\377\010\326\271\n\251:9\331\253\\\272\004\370\2757/\024\264\266\365\327\3469\325\314<:\355\002\037\272F\243\006:e\313J\272lS\256\270JMR:oX\3449\310I\213:\211\350\2059\367\330\021\2727\317\016:\261E\320\271\356\223\t\272`\322\204:w\355\026\272uM\200:\025\237\276\270\205\364v:\361\000\265\271\354`(:\350MT\272.k39\001\271\0259\347#\2638\374\213\243\272^\361\241\271\271px\270&\330\036:\234\335\020\272 \263\352\271\024\207\\\272\360\035E:\337`\211\270\277\324b\271\247\274\n:\240W,:\267\206\2249>\300\2069\031-*\272j\371\002\271zu]\272\250n\036\2727c\005\272x\216(\272\374\352\006\266:\244\2249\016\272\010:}\267\3429d\310`\272<\214$\272\246\0038\272\307P\225:Y U\271\245\0322:=\366\025\272\231\265\2239\031\335n9~\005U:2}\225:\216\320\307\271\300\355\023\271\305}\2129h=\226\272\377\363\276\271\271\037\260\272\304\301\315\271j>\2769\201Nz8\0352\205:p]\3459v\256+9\275\255.\272a\226\001:\307k\n\272\267\222,:\233\334\204\271\226\245*\271e\344\361\270\276\221\220\271\326Z+:\007\203\316\270~k\236\272\364\327\3519O\355\020:\250\027F\272\277\311\2239\247\217v9X\212\310:\322\237\244\270x\366\013\272\262N\025\271\023\r\260\271\030t2:V\350\2208\315\311\3368\2507\3209a\0323\271\235\023\312\270\350\262B\271\201r\\\272\023\310t\271\212N\2529\202\267\301\270\016\036\r:\215MS\272\266\017\244\272\265\003\025\272\227\301\2229w\371\362\270\261m\305\271\316?Z\271\212\213\037\272\321\245g:\266q\227\271\301\303\217\272\317\310/\272[-s8\277\031\2719\205\257Y9\225T\225\272\206\t\224\271\344*\332\271\236\3171\272\332Bn\272x\317\000\271R\247X7V\020\033\272\002\3107\272\005\365\013\271\304\313\3279\252\254j:\327b\2149\353@\342\271\230k\0329OC\2207 \345N\272DIO9\340T{\272\221\342\n\272Y\374\320\267\376l\233:\240\262\r:b\024\2539\010\262\262\271S \233\271\363\360\020\272\312\371k9\217\264\0169\252\253\2209\225\023Q:\003)\r:%\303:\271\0324\276\272\336[\2159W\016\271\264u\030\2769\222&\3557!\344l\272\373\003K\272\201%A8 \313>\271\3768]:\303G\2059\026\030|9\361s\215:\361\213J:\332\346Q\272\"\370J\272\231\343\3309\327\365\3168\210Vz\2711k\2718\010\363s9\304\311\300:\213T\2619j_\331\270\360|\2158P\032\305\265\226\256\017\272\"]Q:U\271\252\271\307\005^\270\350w\2117\017\260\232\271\'s\244:\220eR9\215a\030:\031l\0179\2730h8\026<\3749A,D\271\275\224\335\271\223\372F\272@\336\233\270\254o#:\036l\356\267\246\225e\272\302E\0359\203\226h\272#\346\202\272\344\325~9\003\314]9\345\264\356\271+f{9\356\206\367\271W\317\2629(%\326\271\014\271\205\2721\334\3009h\017\014\272\342g8\272\202\376\3468\326=\274\272\265\t\202\271\2549\266\2718k\210:*\302\2438\007\020\337\270\326%\213:\\\237L:\004/\3449m\035.9F\341\001:+F\3279W\340\253\271\376\372\202\271\203\367\020\272\024\233\2657\301&\010:\"A\2508\356\343\204\271PE\245\271\314\251\260\271F\336\271\270\204o}:\037\013I\272\262\247d:V!B\272pA\340\270.\001<8\215\027`\272\227\022=:\235=O:\305\t~\272\236\t\315\271`Px\271\272E\226\271\317\366!:\005 \'\271tlJ\270E\340\3719\364\272M\272\266\337\2719FK\236:c\217\3419q\310<\272\326\202\215:$\216\340\271\234\334\375\271\204-):\n\017L90 \2639\'\034?\272\002\021-\272a\320\017\272\334\024\3769\323\327$8?2K\272\234\266\224:\201\217\3649\000\315C\272J\226\223:Y\213\2029}\2761:3\3022\272\362,\226:\376\374\3228\341\272\253\272/\361?9\032\346\0249\312\013\3369\361\'\223\271]\307J\271\\\216|8e\247\211\272\3038\2608\200+\204\271\010N\003\272\263#\236\272\032\246\226\270Y\224\237\270Nj\212\272\001s\\9v\032\310\270(\247\001\271\234\275h\272$N\237:\203p?9\311\003i8hV\n8j\307\245\270\345\360\275\272\316\363\2329S\021\261\271\367\212\010\272\357T\3719\351\226\231:L\244\341\271\377\325\206:\017\310\3068=U\003\272\255\345:\272\201\002J:\273\242w:?\356\276\271\007\253U:{\371\344\271\334\271\3349.\177C9\265i\226:\0379\026:\333_^\272px\017\271\346R\207:\250G\3677\026s\201\272\340\021\037\270\214\204\356\270\371\250\372\271\001\007\346\2717\007\275\271l^H\270\0064\034:,7\220\272\212y\243\271\237\260\205\272&\256J8\002\236\2349\024\244\3149\377\027\2139\275\246\320:\253\232\231:\370\000\360\271\321\373<\272\327\342l\271\014\225;\272\316=\374\271\344u>:\244_\226\272U+\201:3\302\3159In\237\271<\304\344\271\201=\2209\233^\2729q\023::V\2459\272\321\255q:\324\007M\272\254\014\":\354\235\3228:\247\276\271\370\250\202\272\245\351\355\271Hl\":!\231\007\272X\350\2079\025\211\3018\374\267\2309\232\251<\272%6\r9\273\037\3308y\323\3169&Z\3179vL+9}\337\255\271\025\375\237\271b\200\302\2723q\331:d3t\272c\22658J\315\3329\333\264\0016\214\201\255\271|x\2019\274\023\3439\2770\335\270\323c\3469\355h(:V\003\0259\031\3216:M\n\333\270\337\316\2609\200P\300\271\202\257[\271P\343O\272\035\306\206\272\277L\2706|\246\0079\315[\0229\346<\2279\266c\025:B\021\222:\000\024\2459\300u;:\313\354\3639\301\'\003\272Nv\252\271\'W:\271\340]B:\252E\3439\366\034C\271\347a\0068.\211\3769\004\024\314\270\240\334\263\270\337\371\314\271\022\ti\271\0170\206\272J\226\3259y\035\214\272\204j\"\272`x\022\271#6\246\271\316n\2269\276\362\302\271\311u$:\310\325\010\272\216\323\021:7C\3569\225\277\223\271\216CS:D\355\220\272\374\n\0329\264\253\020:\265\'\3367+\314\215\272L\223\\9r\214\2049k\006b\271[\251\262\271\370n\3578{&\004:\t\366L:\037?\004\273\275\316\207:\300\320\206\271\n|\030:\215F\241\271\202[\001:]lj\272\030iJ\271\236\226V\270\206\220\3508\3208\334\270\322\354\2079:\036d\272\020\244\335\271\347\330?\271@\317f\271\333\301y\272\326\365\301\271/E\2469\365\2562\270\214\327\025:\241\305\3479%\2268\272\327Iq9h\325V\272\352&x\271\325\377\007:z\233\200\267\365\343\2749\201\230\3529\"]\267\271\331\231?9\220\226U\272\223\361i:[+\241\271t:\3229Yw\273: \236\027\272\213\372[\270,\255\273\267\354\201\2149\316\345=7\324C\3379\020)\020:;\004\233\271N<a\272\255b\003:\r\010\022\272[\267\217\272\365Q\311\271\274\312\\\272\357c \272\"\331,:<*\013\271\213P\2569\354\334r\271\344\240+\272+\330\255:`$\2159\372\365\3219\267c\245\271\210\\\035:\315\246\220:\302\227\3339\t\001\221\271\302\032\2529\264\035t:\371PG9uNc\271\306\026\r\272$\232):wfD90\216\363\271z\252\350\270\343\374X9\244z\205\271\262\206X9{r@\272\354&\303\271\374\257\313\270\275iK\272\217\376\005\272\210\364\014:\331e\227\2715\023\265\271\300\347\221\271;2\1779)\327A\272?\216\2259Y\t\27797\341C9\251\245\347\271\324\227\227\271f;\233:\223g;\271\370e+9^\016q:k%\3639\177\300\3119\327\261\2207\372B\2528;bC\272\323\252\033:\331\253\3746\'\274\2278v\026\2249\373.\3179r\005\007;~T\034:]\322e\270@\333\336\271\264\325\211:\374\327\2519v\372\2319\204\344\244\271\347\350\300\271L\216/7\252\213\2269j\033^:E\221\3469\265\nE\272=\221*:&\312\240\272\024Q\020:\004e\247\271M\241\024\272\245\013\004:\322V\325\271\014`\2379,\255N\272\215\260\025\267\007\344\001\272\277\026\25596\306\267\270g\242L:\205\274+\272%\2103\272\263\24148\315\031\0018zlr\2724rh:\302rj\271\335\363O\271I\2339\271\001s\026:\322~\203:\213y\3307(\367y8\210\202\306\270\033_\036\272O\216v:W\240\0038{\0329\272\353\252\022:8\371\036\272P\353\204\272\336\205\266\271q\262\"\272\2137F\2725\367!6Z\251\222\272UwT9\355V_\272\262\006\0009\t8\020\270!d\017:\370\020\272\271\017Bh:p\276D:\326\341\2779f\342\3679\004!\007:\035\001\"9\277_\214:\335\020+:\212M\3767}u\256\272Q\246\002:\223)!\271%>\2039\026\236\2359\004\262\3258\233g\262\272_\226\r:mH :\330\370\227\270\230\262\276\271\014\277~\272x/\2479\020\342\n\271\325d\236\272\275\235\206\272\256Q\0079^\2215\272\363\273\204\270\203\013\014\272f\264\331\271\277\266\227\272\320B\254\271tv\247\271\322\356\232:sJ\2617\016\210\2329W\031\237:\002<*9\356t\002\272\013O\2359\270W\313\270\2623 :\026\007\2609\365/h:\3031\2749\000\344\224\271[3$\2719\330\024\272\247IL:\022&\3118\344\026u9\014\037\270\271\321U\3778\035#s:N\234F\267Q\327\002:l~\021\272\264gc9*\201\222:\010X\2558>U\3419t\333\213\272\007\251`\270\375\241\r\272\n\324\254\271\331\020!9\371\357\t9\216\000f:\t\276S9Q\204\2509\222\271\3028\r#\002:q\363\2449\331Os\272\205<~\272:U\0069!\267?\272\252\247g\270\350\3146:\242\357\202\271.A\0038l\024Q\271Wt\033:\207\324\362\270\321y\3349\364\315\312\272\227\346D:\021\004\374\271F\200L\272\310\206\2446\333\302\2469\007\267\236\272ez2\272\305\017w\271\240x\230\272S\227\247\271.v\3449n\230\2449;\311\3239E\254{:k\335\362\271\232\344S6j\302\3309w\325\2449\227n\350\271uM\022\272\307B\243\271\254\013v9\347\364\n\272c\356W\272\255\260q\270B|;\271\033\335\256:\210\345g:\262\301\3108a\032 7\343\237\2049\262\256\301\271\311@\2519\242\233D:\322\337\2349\307\033B\272nB\021\272\021\306_:\337\020U7\216\325]\272\341)\2359\355\r\3229\217\014\231:\326TQ\271\332+\0179%\025\013\272ipB\271\301Y\220\272\230\214_:\251\275*:E\226l8\274\25149\335\r#: ak\272N\345\'9\212&\363\270\0366\313\271k\320\000:Pw\3756\3540f9g\345\314\270\252\344\2279}\3753\272\010\005s:\201O\263:\303x\002:C2?9\302;G\272N\374\3518\223\363\236\270\273\002\2558\263E\336\271z\020\2019A\214\000\272^fZ\2728?u:\345\006<9{\203\272:\365@E\270\357\266\263\271\020\006]\272\300\233D:\304\'\017\272\351\255\2269.\354\035\271~\225<\272G\201^\270*\004%\272\330\004\370\271\334\260\237:\247\2272\270\226\rd8\335\262\316:\264\234\016\271\331\224h9x\202\311:\213\241\3739\341]\327\2672\026\240\267\256\322\3069w\246\25394\372\2228P\245\2068\340\332\0029\223\017\3549m5\207\271\345%\37789\024\256\2716\024\005\271+\345\1778\351\333d:D\353(\270\032\331\n\272\224\277\231\271Ae\240:\333\335\353\270\373\0063\272\265\366x\272\367]|\272\206\3733:\323L\2147\217?\373\271,\241\034:t=\224:B\262\224\272\202F \272\216\213\20786\253 \272\024\035\2159\366\324\2449}\371\2779C\220\3438v\213\317\272\2428O93\0030:\013\300\202\2717\327\026\272\223\032\001\272\323I\347\271=~T\272J)\3519\247*>\271\370\341s\272oS\201:\003\037\2779x\314v\270\350{\351\271\317\002N\272\321\267\3419\305e\2239]s\32592\276\223\271\300\t\2028y\261z\271\275u\307\271\277\032\3368\276_X:\317&a9VEk\272\237\221\3728\310\316\0249\314u:9Eg\034:l\t\032:J\223\2048\333[\021:Y\315\263\272\265<\3719\205k=\272.\244\2008\207&\215\271\017/\375\271\374\243\266\272\314\320\215\271X\266(:n\220\212\272$n\'\272\216n\263:\316\023\370\271\351\2235\272\365N$\270\327\225\227\271\210\234k:j\026{7 \235`\272\2113\35694\027\204\271*-\2567[_J8O\337\232:\220\006v\271b\3033\272\260\"\317\271:\330m:l\304^9\273v\2449Q\032]:\017\365/:\363;\2449%\361\t\272>\221\2369\214\252w:\3445\2049\003\270\2279\234\241F:(\305~:OF\262:\330%z:E\261\266\271s\021\241\271\214%?9\334`^\272\234e\311:Ph19\220\234X9\263:a9\365\353\2239K\273\000\272K!\226\271\366\177E\2724\256\276\271d,W\271P\244&\272\257 \244:\357&8\271\343\'+:\217MV:V\277\2169\230\325U\271q4\000\272\305\236O8$\221\232\272C\035\200\272\332M\2519R\362\002\272\214\014\233\272\007)\3469y\216\2639\265/\264\2729\210\336\271\303*N:#E\315\271\331]\005:[V07!\000\n\272 g\307\271I\035\317\270a#m:*\200/:\365q_\2725W\r:\372\242A\2715Z\'8\307\022\3659\005\027 \267\010\374\233\271a~\364\270*\264\0309\232\331\2329\307\215\016:qm\035:\227t\2639\326,\311\271XF\177:\240\3324\272x\030\264\272\317B\2457a\326\031:Jxr7\002\221\014:\371\373t\271\014\361\255:\372W\3559$\213\263\2729\034\3028n\205\023\272\232A88=\236\207\271k\373%\271\223J\2649e5\263\271\374V\021\271\354Oq\270\217\004\225:w\237\261\271@bv\267x6|\271g\351\3579\246\331\025\271s\353\2759}\262\226\271\364]2\271\311\213g\267\205\277\204\271^\246\306\272\276\255\317\271\016\352\362\271+\225\346\266\351\327\214\272f\367U9j\311^\2726K\267\272o\234\335\270b\334*\272\301!j9\302en7\031\256\023:v\363::\"\270.:\205\r\217:\255De\267\220\020)\272*\266e:\010\207\204:\260\"f:\377\323\t\272K\207\312\271s\266\03497!\321\271\351\3050:|\n\020\271\224\255\240\271\304a6:\3758&:4\265\20294\311\212:\273\236@8\306\341\372\271\316\004:\272Hui\272P\025D:\360S%9pR\234\271X\245\3408\331\301Z9\240\021\3219\225=08\277R\314\270\244\035\3608\342\244\226\271\025~\3279k\00267f{\026\271E\375\210\272\321\r\0139\225\223\225\272e\203\232\272\321r\2137\212\200\2048\226R=8\360{\r:\331-n9I/\023:\007\004\206\271K\234\2509R\367K8ON\252\271\3365,\271\372\216F\272\010\2026:Hj\335\271\030j\013:\373\033B:T\256 \271\204)\022:\246\036\2639\333\217}\272u\326-:\351\306e\271\033c\014\271\002\3513\271\327\t\'\272\350\313\205:c+7\272\357\371\214\272\274\357\r9\005\247*\272n\376V\2712:\204:5G\245\271\016\347\217:\341\313\270\272\215\n\272\271:\266`\272\2047\256\267\316d\246\272\340\\\215:\211\204\311:\347\344*9\177\322\030:\301\307\2079\233\2255\2715\300\255\272#\244\3428\3024_\272\3129\264\270\365\374\3769\374Y\022\272V|$\266\tu\034\270\374\320b\272\006\200\266\271Ex\326\271\312\224\301:\317\316\025:\315\026\2519|V\33581.h9<T\332\267\014r\3709\023\223\'\271\235\200\t:%\254\021\272\270\255{8E\034\202\272{\274B9\360\023\3329\0169\2109L\363B:\337\364\037\272\301;\222\271\276\206\2259D]\0109\323\277\245\270\0216Z\272\271^\2117\267\350\026:\324\242\2518T\372)\267/j\2609.j\215\270\210\203C\271\363ph9\364\226\340\271\312\350\256\272\344\013\22285\217@:V\340A9,\035\253:\231\366\375\271U}+:\250\352\355\271\243\275\361\271Um\3109\031b\3239\0262\223\272\025\272\2449\376Xr9ZT\006\272\237\340\351\270\210\"\t:\300\372\234\272`6\352\2713(\3449\353\321\303\271\216.\247\271~\311\2219y$\202:\244\301\3509\366\206\021\271\t\234\035\272\221\324\033:\265O\220:mq\013\271\331r\0019p\021.\271\032\035\340\270(\253\241\271\224\375\2168\310\202\3049*\242$8\003#\302\271&\322.6\017]\366\270\010\325\260\271\362\325!9Y,\3579\026\000U\272\265$<\272\\U\364\271x\226\020\270\374\343M8EF\0029_\037\360\2707\023\3568\250\312\305\271\200\376+\272\271\204\274\271\3575\3639l\026W\271\024U\210\272\275^\037\271\325\305\214\272\365x\3569\302\001\003\272\300}\001\270\344\276\305\271\315\207\2509\030L):\220\025\2125%\026\216\272\325\213D\272\221\341\2669v\260\211\272\2652L9f7<9\303\024\2508\226\364z\272\212@\2278\004\220\237\271 ~(\272\252h\375\272 \270\007\271\367\275T8\211B:\272\3723e\270\203\267\213:]E\274\271\177J)\271\343\363C:\005\360X\271\341\345u\271\031\034\316\271\200C\230:\032z\017:.y\221:\014\023\2719\204\375\267\270\326e\210\271\351\214\203\272\272\332\3569S\014\366\271P\314p:\002\205\3619\037\360\311\272\202\"U\271M7\274\272)\361)\272\0100\351\270\320\262\2439\037\216\255\272\314(\0228\265\024\202:\217\n\350\271jf\3079\223\327\2338\0206\376\270\365TP9\t\233\3239h/\0178\211\255\3038Q\225_\272\246\035\235:\260\341\3149w\360\252:\323\331\014\272F\212C9\275\306M\272\355%\243\271\377\360\2549\341\223\307\271\251`\2379\367\361\2469 \n\0179\230\224\3479\020\020\241\271\3774R9\245\360\027:X\354\':\007NN:\031\367\336\270\322\323/\271\275+\2119dl\0039\323P\302\271\350\356\270\271\276L\213\271c\275p:i\366\201\272-\345 9\036\275Q:\353e#\272\3422j\271uW\007\272;\346\301\271\313\022\264\271QX\000:\360\316d\272-!\036\272N\274\020\270\nLK\272\021A):v\252\013\272\214\024\037\271b\301O\272+\221c8[\312\020\271\234\234\2759i\250\3779\267^\377\271z^\3029\344\223D:0s\277\271\257C\0249gDl\271\331\306c\272\224K\364\271\307rr\272\020!\354\271G\330,\272\035k2:\237\013\3008\037\343\024:!\371R\272\243\ts:&4\004\272\203\220\2739\250\370\242\271-\227\226\272\301\223\267:\214\243\3729\026\247\025:\330\270\3539\322\243\216:S\262\2609x\346R:-\245\351\271\356_\3379.F>\270-\330\231\272\202\221\312\271\0070\2726\010^\004\271@\307\3049\300\253\2139\212\311G\272z\240K\270=\017\031\271#2)9\376\t:\271\2733\353\272Y\246\033\272\344S\267:\237\336\201\272\016P :\004\0058:p\272\271\266\346\331\005\272\307bU\272B\2149:a\313\022:v\001!\272\252\320U9J\200\3749x1\345\271&-g\266\212\2330\271\263\232\231\271K\360\266\272\377\241\206\272\317\026r9\177\234S\272\322[u\272\033?\032:G:\211\272B\177\3709O\023;\272\334\352\r:\204\034\3778\275\361G\272-\271\314\271\335d\233:\035\374\2079*V\315\270O\325\350\272\356\361K\272``\320\271\005U\26096\327\016\271\206N/\272\306\026x\272\t\255\2359\007\035\327\271\rEI\271\nv\204:\334\227\277\272D|\':\213\275\305\26704\340\271T\337\020:\032\270\014:H$n:\033\223\361\271^s>:\343\242\270\270$\227\331\271xc\325\271\322\312i\272\315\261O9\375p\036\272y\026+\271iM\206\271\315(m\271\231\270\201\271\2309\261\271R^+\272*\235\213\267\345\314\366\271\242w3:\203\210\205\272A\262\337\271\364v\3419.\266a:u\343\231\272@EN\271V\246\2359\007\023p\271\310\374\223\272\316}A\271\256\204c\272\355\333\001\272\204B\332\271\373K\n\272\337\002+:\232\016\246\271\276\224!:w\361\2148\211!A\272\372x\205:\256\371|9e\327!\272#\224~:\230\351*\2710|\013\272H\347\263\272\016\'\n\272\215\321\232\271\334\245\3758\026Nk\272\325\361<:\371p\030:\311-\217\272fG\3457\035\026\016\272\225\255\276\271\307\346\302\271\367vV:\267\202\026\272bR\2079\357\322\3719\032\024\355\270\322>\2149\302\366\205\272P\335\374\270\362%X:\327e\021\272et\331\270e\236*\272\2142u\271\000\364\240\271\261\256\342\271\277!<\271\005\361\3149\341f\2509\032D\007\272\266\246R:6\324#:6\205\266\271SS]\272\307\315\311\267\266\305\035\272d\321\320\270K\205\326\267hB\231\2717\'P\272\370\256\3679\270\233\211\272\023\200\t:\033\204\2069OOa\272-\266\014:\317\021\220:o\017 \271I\266\2019|h\267\270\337%\n\270\311p\304\271\372\361\251\271N\341\334:\215aH:O\316\230\271\350\033\204\270\020\311\336\271\216<\0369\244\032\2238#\232\2507\237\346\010\272a\250N\271\310\r\262\272\266\321\211\271\227\270\\\272\3743C\271Q\004(:\232\364\3169\220#\005\272\003\3570\272\202\263\036:\031~\3519=\202\2409\256\323\007\272\354D\265\267P\213\3669\373\222\236\272\242W\r:\314X\031:h\005\243:\254q\2569\026\373a:ipB9W\331\2659 \017\247\272\314\336-\271\263\"%\270\303\267(\270@\031\203\272\372\200p7WU\202\272\261\310\013\272\247\251\203\271\315\244\204\272Gr\016\271\245t\232:\300A\2459\244B\313\2715M\r9kA\3279~\222y\271\355\341\210\272\335\030\2119u\246\3339\346k\321\271W\254\204\272\"\2675\272d\020\0068\274\256\374\271\332\314Y:\321\234\035\271\221\356\302\271\350)\2669,\357\3029\002\344\2639\231\303\0109\361W\013\272\341\316~\271\357\346\206:\232\203\314\271\267\256\211\271_?t: \344_\271ja\245\27285R:\355v\346\270\271\365\233\272xQ\221\272sA\373\270\264\303\3449\347\260\t:\210\230h\272G\202}:\230\257\355\271+\247V\272\031\311\302\271\252X\t9\320\031\357\271\314\211\3718\321\341c8\223\213!\272\205\310g:\343j19\031J\250:\351\026\0108\204\322\2079\206\314\207\271\245*\272\271\227\321%:\203\306\375\271\210\266\3614\273\204\351\271\375}V9o\320}\272\375\202\264:\310\241\2709\253G\r\271l@\317\267\016@{:p\211,\272\305\235)\271\334\363<9\217\t<\270\336\302\2315Es\313\270k\034\25599\377\024\271\314k9:\240\211\2059\217\354M:\266Q\2278\221e\221:D#\234\272~\335]\272\260\361 7\326\363:9Gf\021\272\224\321d:\300\"\316\265\341\224\203\265+\227\326\272\024\365!6\371h\202\271\3764\210:/\302\206\271U\020X\270\340\022\250\267.\264}9im\236\271\364{\324\271\316\213\310\272\344\t\356\2710\200X\272\331u\0069?\243\0209\254u\t:>{b\272|\000\016\272N\310\010:\331s\2029\232\005\3559\221)\276\270\025\231\265\272\034\300\001\272)>\227:\275\310Y\266\013\003+\272 i\2549\000*\336\271\360d\225\272 \356\2739\345\307/:\364\214@9X\270\3658\2301t\270\020\275\23192\315\333\271\277\267\3429\301\267`:x&`\270\277\357X9\370\333 \272Z\212E\271\233\277\25199QM\272 \000G\266d\361L: b\2329\204\nW\272\233\004\221\271\304J\236\271\016\321\2229Z\273?9[[\000:\360\365\2219\017\213`\272n\030B\270:y$\267~\273\020\2713\216+\272NG\3479\242\004\3438\211\357\":\232\010\022:\016\257F:\027\277\2667\335K#:vx\334\271\353\014\322\272G)\201\272a\362}\272\277I\207:z\22668\302\247\3309\202,\3039D\0051:\225n\225\272\263\345h\270\335*/\272\3776\346\2669\325\\\267q\223\344\2713\272\3359\204<A\272\304\215\010\271NG\021:\206s89%\337\3079+\305\3038e\312d\271\255\3245\272[\323\3729\005a\344\270\001\240\217:.\020P8\364\350>:\250>`:e_\321\270\202\211c\270Vy\":\340\020\213:\274\002Q:I\033\2259-\236\375\271\300\266/9\250\345\322\271\300z\t\272\327\344 :Q\013/:4\003\331\272\023\374$\271c\355!8v\272\347\271U\241W:\310+\3269\231\275\2779\010\345\223\272\031\272\363\271~R\006\272\230\020\3569O\236\3119w_k\271wP\340\271\225)I:\371&\306\271\004&894\271?\272\266\371V\272}\364\025\270\373k\202\271\346\266\017\272\335\310\3709\217\204v\271:tO\271\213\030\222\270\311\221\314\271\030\204\021:\260\206\337\271\314\342\2769\213F\034:0\016\0179\241\005\027\266Osz:G\221\3019\234@\345\270\257\331~\272&6_\271\262Dh\272c\363\017:\035\000\3549\331a\002\272\263%\007:\232$,:L\3179\272f\311\023:\266\317\023\272\035s?\271\222\214\261:0J\3519r\276t\272\\\216\235\271\205\021\2249\021d\017\272mu\346\2714\215\3479\360\002\":\021\025!\271\301\323r:\311b\3708I\255!9\261\355\0219o\241\361\271OI\337\271\377\2179:\357<\2279\021\021\005\271I=\231\271\206\205\210\270\311\366e::} :)\r!\271\271\221~\272\017\376\010:H\022\332\271\231\307\3148\177\336%:<\206\014\272\212J\025\272\036\325!:)\362\204\272\270\266\203\271I\3555:V\345\001:1\364h\272\246\261g\271p\255\331\271\034\274+\272\235\336\3179\320\347%9\2260\262\272b\000/\272e\334\002\272\0215\233:5\324\255\272\022*d:\247B<\271\034\201\301\267\367\232:\272&\277\000\270(\222M\271\255\332\257\2719\267(:\332\306\n9\006\\l\272\202\314\221\272\362<\3029|\204\343\271\314\251B\271\377\334\220\270\214\023<\267h\262V:\365J\230\271\361/5:\272\010\3519Z\314\367\270\343\270D:/\365G:\014\213\362:#p\221\272F\2041:?(\356\271q66\272\357\353\3669\t\034\3029\245\277c:\233N\261\271\020\303\3419\224OU\272;\nz\272\256i\3049\0203;:\202\022/9\314\336\020\272\377\225m\271\353g\037\270s\304^\272{E\3059\320\0347\272\177\3331\272\017\347\2648J>\377\270M\233*9\373\n(\272c\343\2719NPX8\262w\r9Q\206\331:*\002\034\272\n\354\036:\006\320\002:W\r\335\270\024\32118\032\234\034:\240\311\3057\251C\270\271\030ix8\216\240\007\272\307<\255:[\360\026\272an\026:\262\247<:V\225-9\020\"\022\272\351\321\211\272\371\351\0209xZ$\271\th\2369k\017-\272`\304\t:\264N@:=\316\3249\rrX:fp\0259*\022%\267!\227o\271+*\021\271/\365z8_\244\2579\363\277M:9\312\023:\276\023.:\014W(\272\223\037\250\270\305\245U9\235\027\3109\217y\014\272\350\356\247\271V\305\016:\3270\354\271@}$\267\034\276\223:\004\032\333\270\357\t\236\271\251\206\341\270\230=\032:\317\343+:\340\202\031\271\252]*\272\302E\2667\251X\334\2703\033\007:s\033d:M\234\334\272L\016\3769\260\267\312\271\361\231\3029\215\324?:\332\022*91\346\221:\307\247\2148\346\26539#Wq9\316sg9`0\257\270\"r\261\272\017i\216:k\020\\:\313Uc\272\350\2722:?\344a9\025R\016:\357\260\3759M\273z:\254w\005\271\035\365\025:\\\244&9\tT\332\271:\335\316\271\000fX:\372AV8\274\037\":\'\002\313\271r\333<9\t\366\304\2674sN:N\250M:o)o:\236\336\203\272W\0379\272\237\177s8\177\347Y\272\306\245A:(\017\222\271v=0\271Z\006\0109{\032\035\272\206d\312:\251\357W:\367\210\0109\352\026|:\266\372\0228\177\000\361\272\'s 8\"d~\272tX\2259#\010\021\271\3365\363\271\374\333\272\272\227\237T\271%\347\n\271\332\2741\271`a\210:\263\n\350\267\341v\3278\247tO\272\304\260y9\327\277\353:\374\334y:QP\24392:\3429u\263\2228\206\200\317\270\351\370*:\351\335\3369D\235\030\272k\370\324\271\324\262N:l5\317\270\221*\3239\266\022\016\271\211\266\025\271\277M\254\267\263\212\372\271\007j\214\271\237*\302\271\272,\202:\026@\3669C!\002\272\325\326M9E\227\343\271\206&+\271\227kR:\360+\2129\366\266\306\2724\231\331\270\004;$:\361\001O\272\027\302\0059 1\037\271>\376\005\272\305%\363\271\260\206\003:HR\2709\351 c8V\361\276\271\264$\027:yP\01498\314\001:2\243\2458w\244\304:YQ\267:u\tu\272i\214/:\031p\n:\241\271\246\272\356}$8\226\007\031\272\375:\224\272\266^l\2719:\2418\270\246\2209U\222\255\2715Y\317\271\345!\372\271*K+\272\025S\014:9\242\336\2713\207\3619\243\360\223\272\2669M\272\216*\266\271\215\353\247\271\334\352\227\272\316\230\2429o\314\2456X\020&\271G&J\272\222\307\n\272Yc\3109!\324\204\272\331\215S9\2567\n:\3431\236\272\312719\361\303\2219\031^\3269\322\216.\272^\023\220\272\"\010\3649]\037\225:\246\242\2649\350\203!9\262X\023\272\236\003`\272}\205\213\271=<[\270HF\234\272\3670\3269\230\037\007:W\006\003\272\207A\231\272\'\201\2079`\241\2479*\372\3259\030^79\303\277A:L1\267\270\325t\233:\335\334\177\271\304\20339\217\247\205\272h\026E\271UO)\272\301\014\205\272\264\000\233\272\302R\3648:?\235\271\304#\n;o\244~:?\033`:\310\273\357\271\253J\340\270)\022\227\271\300\367~\271@7\313\271\213\225\034:\340\214\000\270\035/z\271\017\376\224\272\203\211\3579\320Oh\271\217%\207:\346\022\3739\322\322\216\271|\300\026:\240\220\272:\240ec\272c\257\343\271\262\202\0279\215\256\004:\377\317\2658\276\262\237\271\'Kd8\037\320\027:\324\023\001:r\226b\272\245HR\272F\314n:9\366(\267ww\316\271\301L\202:\223\363\013:(\237\\:\033M\031\270\270\370\2739Z!\237\272\033\312\27487[\37598\013\3739\353[\343:\371\310.:\237\362\004:\274]\022:>\207\3069\021\007\240:\213\025|\272\007\373\3367\'\001\030\272\242a\3258F\027g:G\215w:Ru\001\272=c\026:Aj\3449H0\2369\257\222;\2723\202\265:\016\3647\272\371\350S\272\375Lg\2706jd\270@\327\033\271n(\'9\274\375w:b\266[\271\353t\333\267\000%\351\271\365\377\3409\327\016o:8,\376\267\367\376 :P\272+:K\356\005:\265n.\272\256W\001\272\246K\3439\220\002\234\271\375\231l\272\300\006\254\263\234\214+\271|!9:\304h\255\271\235\257\3658\363M):\377\375\256:\235\234W\267\215\302\0178\206=\201\272\211\021d\272m\357\3179\\\032\252\271\321\225\016:!\372F:e\025\200\271\205\225%:\376\341P\272\244X4\267l\313A9&\253\225:\nV\3159\256\207\355\267\327\010\021:\200\235\024\270\036Y\0229)\035,\272P\210\227\271k\250\2068B\226a8s}\3458ro[\270aX\036:\242\002d\271\210HD9_\216\330\271\263\217\216\270n\036Z\272I\343\3059\202-\2559b\277\2139Ru\203\272\344\266\205\272G@D\267s\301\2709G!\2278\326\374\235\272bN\375\271\347\032\320\271\000-\222:\"^\277\271\303\017\260\271\212\035\332\270\303\340+:\017\3007\271\202,\2659A\322 \272\335cB9\302a\305\271?\301\253\272Q`\t9\022\022\3549r8\2179]{/\2726\302\255:\272\276\020\270\200\321\316\267a\307X\270\237\242c:\245R\216\267\007\217\t\271\255\213\202:::,:\256D=\2713\037\000\272\2432]:<9\210\271\313\344\2355\306\177Z\271 ]^:y\004<\271\355\355\264\271b\242^\272\366r\337\271\200\005\000\272\376?U\272t>E\272\2116\321\271\312\322f8\252=$:\321\357O\272\201j\017:z\245\357\271\217.\3678\356\235\n\272fS\021:\301s\273\270\263)\3009\226\314\320:j\030\300\271\324v\3739\220*8:\006\303\3619\264\202g:\325\345\322\271\030$\310\271\343\271\013\271\341\027\207\271\343\021$8\330fz:\014Gy\271m\t\220:Jb\0178\361jH\271\263\236\3139\371\304\016\271\352\214l\271\371\201!9Z\205\026\272\322\371#\271\367H{88\220\014\272\372L\'9\246\r\2369J\0162\271\257\006\204\271\232\337\3468\t\027G\272\340q\211\272\033\345$\272\204\300\2379P\376\3559*\037r\270\030^\365\271|5\315\271\346\240\032:\233n\257\272\003\233\2317\316\' :a=\341\271\254\3549\272\021\001;\271}\352\327\267\026c2\271\003 \277:\256c\3029OM]\271\237n\335\271\212\210-:G\277\255\270\177H\0239\342v\3449\312\251\007\272\333\234\201:Z\251\2229\226\314\005\272x\365\241\272\354\035\036:\212\177d\271%n\002:6\373\2579Fh\2569h\25719\370,7:tu\234\271\304_U9y6@\270\342\264\"9\334E:\272xr\227\272]-\271\270\361\326;:\216\000\201\272#\306\311\271\022\345+:\215\222t\271\226\327d:\355k\361\271\244\206@\272\251\314\220\271\303u\2459-\334%:\315\371\204\272U\217\370\271\213\347Y9\227\302\001\272e\342w9\364S\246\271)!\331:K\372Q:\r_\214:\3469\022:\004\273s7\253QM:\317Z\010:\352\022\":4\372\016:\247\273W\270\361\212\314\270\325\271\211\272r3\214\272\266J\226\271\027\375\355\271\317]38\023\263\316\271\326l\311\271\2015\200:\251\t`\2673E\031:\241\337\3649X\313]9\340\022\217\272%\230\3628\240\320\177\272O\374\0047\223\210\354\271\356l\2519\000\246\036\272i\264\23598\025T\265\254\346\204\272((\016:\351a\204\272\327\3762\272\307ls9\374:U9\016\n>:\2648\214\272\353\225M:h\362\233\271k\271\2109\275\240\2339\250{\2158\252\202\3558d\\B\272-C\2519<\t\231\2714Z\207\272\262[V9\377\250d\2720\312\3209\261\224!:KN\3459\0356\273\272\255\243\2729\n\311\236\272&\310\3749\205\177\3679\021\226\005\271Ac\254\2717)\271\271\265i\251\272\360Q\310\271\361/\014:\376\024\220\2729^\336\271\375!_\271Xi>\271\255)-9\255(\212\271\261\276?\272\30452:\177\365\":\242\205\304\271\245\270\007\272\375T\3359\242!\034\272\261Z\2469\257\227x\271\251e\2749\007\033v\271\300\250\240\271\226!\251\270\306z\306\272\276B\021\272\307%+\271W\343e9Ah\001\271\222\3746:\333\272>:\216\326\3549\247!/:\034\216y\271bMl\272\202\201 \272\233\266\005\272\333\244\220\271\351\302P\272c\277\2579\225g\271\2721\312\262\271\344\314\204\272\020E/\272\323c\3259\366h\200:Z\256\204:\230\010o8\265\260/\271>\277)9\313|\202:\204\006\270:q\274\227\271\354Q\273\271\272(\3769\326\217\\\272`\'\0209\312>v:k\313\302:\266-3\272\000\246(:\364=\006\272y\035\275\270\275\n\264\272|\303\231\271\017}4\271E\341d\271\305\277p:4\027v9\034\236\337\271\264\r\323\270\347N\3119\244\3514\272\373\260\324\266\366\"\373\270\311-6:\270m\2579^\265\217\271\016\236\016\272\306L\3369l.\312\272\203kh:\337\\g\270\312\303\3509\320\000l\271Q\274\204:+\307\2509U\373/\272\264\321\2408s3\006:z\332\n9ZM+9\227\3526\271\347\211\3628\007:A:\211\357\3659r*3:\363\336\0309m\204\2759\253\370v96\376o\272\025\2770\272\300Lh:\373\212\0038Bj\3779|pZ9\245\371\2448\177\236f\272\216\371\t:0\224?\271\254z\3339\266\261\200\272B\302\2109*\325\224\272\300./9R3\2739\237f\3379U\350M994\033\272)(\031:\267\017\2258\211}Y:\326k|\267\374\356L\272\303\276\237\272\237\242A:[z\222\271\237i\0269\261l\036:\021\363\312\271\316[\305\272\235;\3179\334\315_8\247\232\3259\270\322\327\271\367\234T\271\'\220\210\272\217\226\031\270LN\364\271\357+\033\271\322\027\2077 j\2668~\340\302\271EW\321:Ve\247\271n\227\001;)\317\277\270\002\331\2159]\347s\271\266\000\240:+\205J:.\033\001\272\321\250\22291\205\0149\335|\'\272\354\313\252\271\322_!\271\2155\013\272\020\260\003:\002\307t:\236h\014\272\360\033\2249A\324\243\2721{:\272\242\226Y:\350\014\307\271\377\234\3667\031V\3438\351y\\\271V\375]:\371P!:\322\200\220\272_\'\023\272\237\025e:m\024\'\272\034n\327\271]\002\3519EH\202\271:\372 :\r=\202\272F\202\0249g\0273\272\016\334\023:\367\242#:\t\004\202\271AC\220:\021\000\213\272\355\226\036:\027\216\224\271X1e:\254{\224:7\225:9l\243b:g\025\026:)\220o9\017\004\r9\264\260a9\216)\272\271\340l\006:\346\357\263:\236\327U\271\271#4\272A\343\2239\356\'\237\271YL\016:\273\326\204:\032\016\3709\010\212-\272\234\355;8~2x\272Y\226\006\270+,\243\271\356\307\3168b\307#\272\366K\034\272mTU:\206\030L9\342LM\27071*\272\326\243\3439\212\321\302\271]\360\241\272K\030\324\271\205\261A8\\,\300\267U[-:\376d1\272\361\236s:\342\030\220\272\242\224\025\270 \206?\272\224\020\234:\360+*:8\320M\271.\203\227:Q\263?\272{\037\005\273T\2427\272$\224#\272\035\366>:\2049\210:\257-%8-1\233\272T\353\353\271\327\272\245\272\342\340\2569\203N\3459H-\2258Yv0:\306\335*9\326\313-:1\277\272\271\320\261E:\236\212<9T/\265\2718\214\2149\2603[:z\300\272\272\232\'\216:\'u\017:~\336;\272\323\27119\225\200\013:\177\007\3738N\007\234\271u:\214\272c\316\231\272J\217\321\270\272D9\272\302\356\263\272\211@\311\271\231\036\241\271\002\264\377\271\315\025\233\270a\206\215\267,F\3377?\350\2079\355a\034\272m\t\n\271\362\237\025\272%e\232\271\352\020\341:\351\245\024:|\215,:\340\226\361\271\313\331x\271$\035}\272 Z\007\271]\346^\272\371\243_:\2018\004:\275\272\3108\274*\214:\227\"\2579,m\3459\254\277.9zz\263\270\223\201\206:\027\253\2629Y\274\007\271<\333\325\271\376\206.\272\227d\266:\3675\211\272}\352\"\272L\310\007\272G\357\210\267pc\3468\014h\236\272\206\307\276\270wO\254\271V\365(9\343;\3479p\360/\272\266Qd\271f\312Y:\362\270!8\221\1774\271L\221\224:\277v\3669q\204\006\271\374D\272\271\361<\246\2723@\0149\266-\3579\241\004\3029O\200a:xR\003:Z\362\001\271\244\266\316\271\214\373\256\271MIS:\025<\004:\232*7\271\211\302a\272\337\234\3427\271P\200:\356]e\272T\267\1779\355\025f\271:k\007\272\305\333\2359Yu\2078\002$U\272SM\3739\360\036\322\270\236\243\307:\324\354\017:\360\306\2669\251T\026\272\205\025d\272#-\276:\261\225\2379\255\357\37591\365\021\272\347\0314\272\321&\211:lA\3637\350\202o\271\336\350\017:H\23269\347R?\272\355l\2279\1777\3179\2508;:\304\006@\271i\260\224:\013-\001\273\020\001\3349\265\036\343\271\253\312\246\272e\'::Z\\\242\271\357\271x:\366nl\272|\246U\272\3275\306\265\202\206\230\272\370\311\204\271C\215&:\202\001\375\271\025[\225\267(C\2579v$8:!\221f\271\362.\203\271<L<:\222*O\272\200\201y9\001\322\247\272C\314&\2725P\315\270p\377\201\272V>\0079\336\3153:\340H\371\271\250\221w\272\346Uf9\277\275H\272K\031\n9\254\320O\272+\022E\272\375v\3639\337\035%9\257\377\033\2728y\220\272\317\321\3539\233x49\246\206>7p\232/:\261\213\250\271u\212I\272\370M#:iG\":\263\212\232:\254\337%:\005\323\201\272(\363N\271\275a\0229$\330.\272@\243\306\271\324\236\2259\321\232\016\2710\255\2337\230*\311\266s\t2\272+\306\204:\302=j\272f\263\032:!\207\253\271CwZ8\326\312\232\272\210M\332\271x;\003\272Q\352\277\271\367\037.\272\342\177\205\271t\030-\272NA-\272~\352n:\306\027K\272\272C \272\226\335h:\231\344\314\271\314\314\217\272\335\260\020\271kL\223:\317K\220:\344\224<\270\357\"\317:\364\212\3409\271n>\272\211\337\3559\226zM9Q\353\200\271\332\351\320\271\234C69\357\351\341\271)\202\331\272\025\210\316\271%(\274\271\245\204\3239-\276U\270p\246u9I\230\3579\274\024\3279\200\344\2369 C\016:R\014F\272mf\t\272\301J\265:K\250z\271O\375x\272\350\276\267\270\377\247\3039}\231\2069\177$\013\272\2709\224:\345\306\236\270\215\301b9V\327&\272\330\335\037:t@.8q\2350\271h&\206:z\254\345\271\242*\177\272\313\331@\2720\204\351\267\230\305^\272:\371\2657q\357\017\272\034\316\\:\332\037\r:\303T\3059h5\013;\236\201\234\267N\035C\271\247\237\265\270t\376\355\271\'Ge\271\311\345<\272*\253\006:\251>\006\271\325\017G7\376\272\3279|\232!\272T=\004:\227\016\237\270?\204\017:I\360%9B\003\231:n\266\3769\026y\2549\367\351\0138\225g\r:M\003\2659\247\014\211:\3134\230\270P\3156\271\334\023u:v\032\027\271\371e\004:\031\323\3439{\355\030:\263L\235\270\235\361\205\271BC\2449\224\3437\272\345\333\3548\367\345\204:\017co9\243\304\260\272\233PK9\256o\035\270\375Mo\272\237[\203\271\360\357.\2723\214E:\t%\211\271%\037\212:\316m\016\270\240\026^\2726\201\0149*d\n\272\241B\212:\254\014\235\272\234,\010\272\222b%:\362\265z\272\205\213x\272\230\360.:)\226\222\271v\270\0029\353\371g\271\235b\2449\365\355\231\271\266?]:\'x\271\271\3426\340\271\226\rQ:\225x\373\271\'\352\277\271`d\2259*\204\237:bT\r\270\004\232\2079w~\252\270\177\203g:[\265\024:x\216\235\271\263,\246\272G\215C:B;\3739j-\216:\223\246\227:\274\313\001:d\325\023\272\234\321\021:-\017\023\272\347\274\3439x\024\3109~\230\211\271]m\3718%\002\3778\321\203@\272gkv\272k\336\177\272Z\t\2608\026^\265\271\r\332\341\270\202eJ9\233v\222:\214\022\20093\236\2659\201\264\030\272\247M\230\2722e1:\243\005\314\271\033\337/\2728\206\026\272\324\354Y\272*\035v9N~w\267\344\271\372\271\366\014j9\205\324\026\270c?\367\267?\350\304\270\341\010)\272\304\351\234\271\002\031\257\271\227\337W:\255<^:-\215\031\272\356<\3058Y\307\234:\215B\'\272\255T\222:\337\010\002\271\027\300_\272\001%\317\270M\243Y\271\025\366\003:E\010:\272\3441\007\272y\347\3439\314=F\267X\035b:=\354/:w\301\2659\242\233H\267\262\320\002\271\022\304\2249\214\320-:\010\344\262\271\\\220j9SR\2268_\226\000\272>\345\002:Z\255G:G\347|:\213\217\3439\207\321y\272R\317E\272E\000\2469\004\255\256:\255\231\032\271e\'?8\035\271\3248\200+\267:8+\257:#k\270:\313\333\223\271\376L):\0232}:u\326\211:\231U\375\271\227\320\2219\000\217\2529-\311\2568\334\255;\272\351\361*:\2542`\272\224_\213\272\332\267\323\271\2471r\271>\214 \271\023\rS:\270g\3208\003\252\3257\2706\2329\000\327\3059\262\376\254\270\3728f:G\240\3269\307_\020\272U\0242\271g\222 6\375\302O:3<\265\272\0372F9_{t:\r?\202\271\\#\0019\207\023\352\271\276E\340\271b\336X:\031\323\032\272\003c\":\000Aa\271\250\202\017:\274\020\234:\316{\266\272\354\253\014:\340r$\2729W$\272\316\246z:\350\231<:}T\222\271\233;A:\330y\006\270he\260\271m\002\37069\351t9\335=\n\272\304\247*:\300\35689\242\321\227:O\353m\271\304\265A:7\252\240\272\210\2157:9\006\0049v\357\2569\213K98\2543O\272\374\372\332\271e`\002\272I\300(\272\325\361\032:\037o\3138k\355\021:B\317\0379\315<@\272GL>\272\314H\234\271\031#5\271\343\023T:\253sz\270,\032z:\233e\2479\233[J9\2728-\271&#\214:j\243/:\334\333\035:\004t-:K\320\346\271\321\375g\272\242\263/\272\376\235k\271\376\205\207926>:\357\303\225:Em\326:\353{=\272$u\372\272\271\1776\272\t\306\245\272\354w\2539&K\207\272O\332*:#F\3109oB:\272\177\264\256:5 \275\271\226qx:e\251!9\010\227\326\272\255\266>:J\321\3049<4\2777\376\000\224\271\316\213Z81\275o9\377P\30791`\210\271\371,\2119\324\246):5l\2009!\037\2029\337\253\3659\246\375T:\277@\313:\300J\276\270\343\200\036:v\317\377\2704kd:\247\241\2169H\364\2667p\312\330:N\002\201\271\342t\241\270\260\307[7\204\r$\265#\2026:7\267\316\271\301~\177\272<\377)\270\275\224\035:\024\363\2579\222\235\007\272\017\246\314\270\005I|:\005\264\202\271\017\352\203:qy\2608}\332\3739t<x9\021\360M\272\2717\202\272H\307\227\270\352\304C8\325\025\345\271y\273U\272*\335-\266H\333\223\271c:s:\372ZC\271\374\232\"\266\266|\013:\346\322`9\214\305\243\271%Yk8\335\226v\270\231\225\226\2722Hp\272\372\352\':\020\t\323\271\210AO:K\'\2349\373<V\271\353\227\221\270K!5\272\367\341o:\342\355\0139\020\223n\272\300\247W\271\030#&\271\306>\2718@\273\207\270fKb:w}K:*\302\350\270t\023\016\272w\272\225\271K\214\022:J\227\035:^\001a\271%\234\260:\302\307\010\272\013\254>:\026\362k\272\225\202K\271\315\333\221\271w\013=:\277\303\2039\260\211\3179%\001R\272\177\014*:\370\024\310\272\n\272\033:4\355\026:\313\300\":\2152\3219\0337c\270\367\367h\271\332\002\t:J\241f\272\241\013\006:\231\314V\272\355\320Q\271\342\206\240:\321\233\3579\254\177\216\271\3140_9\274\003\306\271\001\252\026\272\303\276\345\271Wmg\272\t=\017:\347\'~\271\3715\2119\3246\007\272\355U\211:\377\230\333:a\0263:\251p\225\271\370\216}:\024\337\2317\013\274\212\272ME%\272\255\364\3739\370\024\2539\253~T:1\333\3349F\275Q:?K\2378\262\222\362\267;Z4:\267\035\032\271\222\231):iD\014:\024\273\311\271\335rP:\204\226\3629\252\005\213\272\001\010\0109P\332`\271\322\360D9\236\355\262\271\010\301\331:t\357\2217 \257H\271\211O\n\272L\240\305\271_I\3069%\231g\272\t\373X8\323#[:\340\306\032:\000\236\266\267C\323\034\272\304,\362\271\201x,9\024\324\346\267]\221\252:\026\227X:m{\034\271\207\320C:9\206\037\272\267\352\313\271|\351\213\270+m9:\035\215\020\272\366\361\036\272\342\372]\271\235\231<:4\317\r9r\034F:\262\202T9n\\C\272|C\244:_\223.9\023;\316\271\026\"\n\272\331\232\303\271\267\373\224\272\342\305\034\272x\252\026\271\223\262\311:FO\024:\341\321y\270\305\356\262:&Y\271\271\276xg\271\263\315\3039\267[\3539\256\366\222\272{$}9\263p(9\272\037\253\272\\+\2059I\301\3019\317\265\037:\371(\002\271W,\031:l7D9\243\002,9\221G\3619\201\005I\272\253H<9.7\305\271 \374\240\271hz\2559\020>G:\365\203j\271\242\000]\270V]\317\272\334B-:\301\210u:\366@\210\272\301(\033:\333E\372\271dn\3356\264\0160:\302\264\312\267q\216\200:~\220\212:n\347\240\271\305\337\260\270/\236\3247z7\n\272\357\203\2419\337kw7X\225A7v\310\3219\330S89=9\006:\272\366\2468\022o\250\271\241\240\275\270A\263.\272\271\215N\272I\002\205:e\364r\272\226\266`:J\305\204\272\317\343\263\272\r\271\2129\244B(:\213\265\\:\373\r\n:\241\303m:\371\231\3678\275\361P:\355\024\025\271\241ZH\272\272Z\2549x\375O\272r\270\203:F\211\316\270\353\373U:\247\304\266:\372W\322\270y\031\2658\227\366R\272\223\365o\267\\\334\241\272\005)\035\271?\020Y\270yo\010\272\336&_:qU\2229U\343\3149\227\257e\272\037\177\210\272\265u\031\271xJ8\272\273\204\025:\023\370\033\272\246S\0259\360\315\220\270:;E:\014\2543:\343eT:\334\341t9\364\032\3749\262yJ:\376\233\273\272os\013\272@\177Z9\321\3148\271\353Oa\271^\005e\272\\\274\2617\372O\2439\245\023\2549Ofi\272n\377\200\271\2446\021:P\3217:\203\014\3679rV\254:Y`\247\272\244\325y\272q\306\3408\376\024#\271\214\353M9\360\313%9o\211e9=\037\3539\254\031a:\020\224.\272\010\226\003:\232\236\215\2717\363\t\271X@\253:\037P\2779\020\0011\270v\302\006:\310B\020\272\222%\231\271\261\271\177\2728\3409:\006\022\2307~fP9v\201\303\272\255\300\200\272\t\020\346:,KR9WR\006\272\022wO\271E\243\326\271\205S\206:\254\037J:\325K`\270\244\\\357\270\304\016C\272\016\010\213\271\305_\376\272\203s\350\271\005\360\2178\022+?\272T\372\240\272F\3347\272\022\264\007:\010\211#8>\031\013:\235s\316\271\265:\304\2714\204\333:\035V\002:\275\341\321:sZ\206:\221\237\240:\337&:\272\233\324N\272\2762\2339\001T\3769~\205\014:]\341y:e\3340\272J=;\271\342q88\361\352T:Y3\030:P\366\t:\\\364\305\271\266~>:\263\330F\272h8\2368\037\307/:\362\217(\2728\356\212:\236s\225\272\263\241\2129\033\2643:6m0\267\245\337\237:\316\223c\272\362IS:ef\031:v\263\0079\236 \002:\2053\n\272\212u\r\271\0274N:\322\376!\272[jP:+\234\032:\363\024\2219\023\217i\272\243\017F\271\211\202a:\367M%:\240\260N\272\234R\252\271\275\203+:\317\205N:\274\3524:\272Qb\272PnB\272\307\314\341\271g\363\2777N\021\246\271K\324n\270N}@:\357\222\246\271^\250\230\272\375\017D:\202\025\034:\307&\3018\010_l:\277wO8\235g\277\270\013\017\0349p\314\220\2671\233\030\272_\3039:*\036\001\271*A\177\271\312OI\272v\333\3658\243\352\2558iD\250\272u\273_\271\006\250%:\304\266$\272c\313>:\3510Z\271I\225\202:_\027:\272\3449\311\270\244\227\243\272d*\013\272\374A\3779\303\357i\271\tI\362\271\244K<9A\177\2039\010\253_:\230\020g\272\372\025P\272-K\000:\237\321)\272\361vM9_ \3679\"\226\024\272\201\362F\271\271\353a\271o\213\3629hd\2769a\275\030\272\314\274\245\270\310t9\271Jy\034\272\365\003\363\271sef:j+\365\270\356\351\037\267\211\333\350\271\003\255\2579\023,\304\2711\245\302\271\243\206\301:#\235M:\344\023\3559\332\004N:7\330\t:\315\206\032\272Fsa\272\307\3700\272A\343\217\272\246\377\0039\244k)\271\232?\274\271x\217\013:_\001\324\271H\256\3649c`49\217dQ9\234\255\3329M`.\271\324\022/\272\212z\246\271\305\036B\271\251\213\005:>h\026:\361m\306\270\362\321\2559\016\212&8k|\231\2719!\265\272\265]\206\271a\306J9\373.\222\271\352\341Z\272!j\3309g\300\2209\210_#:\334\3077:\251\373\214\272\315N\\\272\317\017\020\272\361\r\2538&|\263\271\241\'\2349\213\373\364\271[\376h\272\"\220\230\271\346\311\3149\035\337\307\270\366\316\254:\260n\0349\315\347\264\272\304\344_\270\366\355V\272x\260\207\272\026\203\03594>B6\353\214\036\272dP\213\271\254k\3748\305\221\227:t\335=:\245#\372\271e\270\2359\204\037\3719/:\220\270ZF;\272\340uQ99\036\210\271:\203\2409\367\361\3019I\377J\271=\233\025\272%\202\227\272\375\026\354\271\017\201E:\324\022O:\263\364\362\271\366\314\2039\0174Y:\032\367\217\272j\026\211\272)\001\2739\214\263\3058\207\007\3569\301\250\200:M\350 \272\226\013\303\271\306\203\334\271D\300\210\270>\240\3379\311!>9\007\264\257\2716i\2029b_\231\267\324\255W\271\254\255\2709\337\255\2328\270\007\214\272\373]\3608\267\215\303\271\344\240O7\376\365\215:\263\365\357\271\310\267\224:C\022\2269\214\364\254:.i\2458\377\375\362\267\222\322\3349\275\217\205\271:m\205\271_\022\300\271!Y\2449h\016$:\201\306\'\272Q\30028\260\324Q\271\311|\255:\365\250m9\330-\030\271Y\310\222\2712\237\214:\344h\':`\020\2049\365\263N\272\225\2555\272+\224 \272\3258\263\271\231\330\0229`\337\001;\'\203\024\272U\035\026\2720\362\314\271GE\252\270_V\251:AaT9\027=E:\211\202\n:\324\006\020\272\212\337\2419\347<\3579B\253\3749\034$\371\271@2\217:\2111\245\272\035k\0149\246X3\272\321\233\3079|\270\232\272=\301\3729\350\206\3609\237\377\377\271\243#\0269\271T(:I\322m\272\272\232\347\270\300BQ9\014\373\201\270\237#\224:+d\240\271\n\371\266:\373W\237\272\220\344s\270\007\353Y\272p/6\270o\'\2478\305\215w\272{>\033\271\361\020)\272\215\377\3677\005\025\242\272E\233J\272\315G\201\271R\2262\271{\037\270\271\346\257\206\272c\331\217:o\004\004:\014X\"8\263\375\000\272\244\222\212:>\277\2719`\301\3008W\233\r\2728+%:N\255\2517 \002U\271\021\236\2109\272\343\207\271\032\374\2429}\210n:\362JW\272\342q\253:\360A\342:%\214\313\271\300\302<\265\n\314\2509\"\354=:\313R,:A_W:H\325\3068\037\362\030\272\212\353\355\271\035|\310\2710\030\0319\331\r\262\271%\300\311\272\377n\242\267q5\3776\363\341\2669h\355\007:\216\035\306\271BF\205\270\224d\007\271\344O\005;\272\02188\231j\3009\354\243\2779\364T\3635\213\365}96\325\2559\360*U\272\375T$8\36504:\206O\336\27117#\272\005\317\236\272\344\341\002\271y\022m\271\206\264\3576\324\200W:\334\353p\272\337[E\272U\271F:\317\300F\271\212\260\014\272\276\233\035:CZH\272cI\2167\304\254\2439If\313:\032\010\3718G\346N\272L\233\030\271\311\325\031\271\036\230\2469he\3029\210\341\216\272\340\003{\271\212^|9\335\\\270\272\273\363\201\271\266\346\207\272\244]\3019\365\310W\271\277\301\331\270I(\233:v\2733\271\014\036\200\270\310\335\313\270\330\267\026:\341\353\2609+\276f:lc\021\271/\224J\270\025\206\022\266(\032-\272BV\2329.~\2129\031\352A:\340 \352\270\020\006}9\334\037(\271z\330\017\272\031A \270*\267\255\271\210\343\325\271\250\355\010:\212\243\3227\031\223\036:\206\313\213\271n\306\326\271\307\225\237:\203\004T9\334Vb\271)\364I\272m\332\213\271!\334\232\271L\312\262\271\037\242|\271f\300P:\342o\234:MD&\271\t\342:\272\326\215r9on\372\271\031CS9A\331?:Po\3179\017\371\344\270J\214\3009\214v\020:\t\256\251\271EXl9\242\265\251\2726UE8\207\211A:\247v[\272\217\026F9\353\221\244\271\000\002B:\223\010Y:\224J68\263\2142\271\340<\0208\241!\036\272T\232\222:-\n\231:\022\232\210\271%\253\037:\347\313\016::\003H:cx\331\271[b\0359\250\245\2277\r\371N\272\240\303V\272\220F\007:\300(\004\272\330vK\271P\347\035:<\236\2208\223\317\3769>\337\367\270\025\337\344\271\234,\305\267Q0\235\270H\216u8\315\221\210:\033 \3459\270\273:\270\370\352\3319[\363\204:\377\3456:\210Z\2478\220s\204\272/\266\3659|\233c:\272\006\3217%\317\215\272\351+0\2727j\2419U.\207\271\251\330n9\244\226\2147\226n\037\272\nhu\271\322\3101\272\223\335\2338\243&P\270\032!\\:\321oJ\272~\242\3149\352\244\037:\315\0241:/\\\2228\216\r\024:\026\202\351\267[\215|8\224#\2159\332\233\2239\222Hv\271\377\354B\272\274s\3149\004\300\2157\\r\314\271;jE\272\256\277\311\271\1775\216\267\233\252\2759\021n&\271\265EY:\265\322\253\272\255\355\230\271\340\3742\271\223\302\004:\376\320\2409Fa\t\2713\025u9\267\0275\272\242\316K7\353C#\272 E\006:\366\212\2149\375@\'\271\txa:Y_C\271.\267\016:\373\302p:F\026\225\272\236\346\0049\335\311\3049?\316\3258Q\245\2129\010&\244\272\225\303\2349V\3774\271&\365\202\272Tr\2219a%8\270(\367\23790#\t:0\272\002\272\376w\333\271\334\376\245\271\355\217\2049n4\007\272]\324\327\272\376\264\3369Y\320/\272\027ek8\337F\036:\340\034\275\271\252\253\022\271\212\016N\272\230d\352\271#\207\271\272\277\2165\272K+\330\271\330\272g9\211\213\036\272L\235\275\272\016\3125\271[\016\351\271\025o\262\272\320\302\215:\264\375\207\272-\320\2319\004.\274:\375\005!9\211\3424\272[\324\2479\265g\2359Gk\3349y\362\2619t\350L:=~\3157\267\221[\271q\r\225:\200J\":\'?\001\271\'\230\2249\000\261\2749B\005w9\203#\2529\330\243F:0\374m:\234\210\320\271P2J9\315$!\271\014\314D\272\345\302\247:\3005\3609\370\n\225:\013\037\3308\010/\307\271\264\317\211:\235\366\r\272r\230c\272\024\225\216\271\271\351\2049B\361N\271\226X\354\271\306\033\267\272K\3020:N\231\3147\346\232\272:\225\276\230:\270\022E9\310<\300\271\334\204\205:\304\347\234:\362\224\3008\232\361\010:\030\355\310\267ne\3009\305O\252\271Y\376i6\022L\243\270\303M\3569\377\320)\2726\027\3548\257\245\330\270\343\273t\272\277\261%:\335\252t\271[\312\024\272t\233\363\2719\354\r:U\347\2537 T\211\271\275\035\n\272\035o\331\271\004\2767\272w\003\2359\231!z\270\361\360\2519\264\366\271\272\217\n\226\2701\310L9d\366Q\272\315C[9\035\260\2609r\211\224\272)\254\0168e\215\2249j\315\301\267P\337\025\272\037\243\r:\272\222(9m\r:94Y\373\270hw\261\271\307^\205\271i7\2329\253\322\251:\313\030\2119\357~\2668JA\345\271\374\377\237\271\032\003\251\272\234\210\033\272e\021V\271G%*\272\203\276\353\271*\312\004::\213O8c\337r\271\200\326\2579D$\1779y?\271\270\010\023\n8y\200\207\272y8*:O3\311:\226w\316\267\215:\n\272\225\253s9\021\353%\272\252\304o\272\026\001#:\376\004\226:\315\222W:&-2\271\311&\350\271\227\352\017\271v\031\257:\204:\250\272\372\341\2269[\034\373\272wQ\3439\365\345\2229\300\243\214:@3\345\271\342\177\2037\'\301]\270Hp\352\271BJ\200\271\366\006\2029<O\3209\343\360\':\365\271\036\272\321y\027:\273\226\212:\330]3:\270\260#\271\2654\030:j\262\2539\340P\231\272O\237\026\272f!\335\270\202b\315\271$!\003\272\3448n\270\374\305\024\272\362\265\257\272ay\2508\177\362\305\271\243\222\3179h\232\034\271\222\327\032\272\024\307\003\271Kp\003:7\266\3148K\036{\272\352\335b:)\014X\270\3439\r\270\306\325\312\271\373\253\025\271d+\200\263L\216\3409J\254\3329Y\3342:)\353c:\310\211\n\271\037m\244\271\262e\025:\003\0042\272*\035\0329d\271\271\271\330\235\031\271\271\316\023:/\247\236\271\363BG9\302\323\3228\027+\034\272P^y9\032F\250\271[\232\2277\250\300\2769tif\271\001\221\2779n}i\272\367\243\263\271A\253N\272\266\371/\271\002Kh\271\343\027\231\272\227\'\303\270R\360\2409\212)*9\024\372\017:\301\350\346\271$\346R\272\243\004\":K)\220\271\2674b\272\031\304\014\267\200\250\201:\010\335\010\272\323*\253\270v%89\260s\347\267.\310*\272\273\247E\272\251W\030\272\232\220\223:vk\237\272@\234\031:\263\333\251\271\242\331\005:\346F\2769\214\312h90\317\3476,\240\233\271\016]k:\337\034\3479\261\270::\215a\217\271fhC\272N-F:\006\323x\270\314\324\367\271T+\251\272P`\203\272\226l\2779\3363\252:\251\307\262\271\241\264p:\201\257\313\272\222\367n\272\320\241\2308\035>\2408\252/\207\270\334\202G9\nh\3319\301|\3239 \360\035\272`ND:\225\214\3508\026y\220\271a\005\274\271\277n):$J\3239\315J\357\271\307\274\t\272@q(:\237\303\222\271\242\032\222\271\017\340-:\252u\014\272\343W\007\271\263\261\":\313\267\234\271[\337\352\271\374\377\212\272l\320b\271\366\013\2229\030\343\223\272\203\033K\272\'\362C\272\337\000,9\302\022\207\271\270\323\323\271\256\355\300:\205\365\033:\255\365\347\267}\323)\272\254}\031\272\236O\3309\027\265\0168\330gN\271FtW7\373\324F\267V\200W\272z\213\351\271\253\323]:\351Rt9\342\214\2659Hhb9a\017\242\271)\362\3479cLV9&%\222\271B\024D\271\246\363N:\'\212\360\2719]\2439\264\014|\271\375\356\323\265\030b\270\271k\317\240\272)W2:&P\217\270\240\251\3268\177{\016\270\210\271\2569D1\\\272\245\203!:w\023\0229/N\33690\322\271\271N\256\'\272d499\231Qi\270\242\216\204\272\213\177\014\272p\t\3257;x\2139\030J\0219\036\216\3019\010`\362\271\006x\0219\376w\210:\225\365\2108\221I\200\271\3323#:\260\315[\272\273Z\3129\253\347\213:\024\233\010\270\317G\221\271Q\"\3779%\314U\2718\345R:\265\037?:\226\243\3259\337\264\267\271\250\372\3659X\275\322\271bF_\272\353\177\224:<\007\025\272z\276\2049c\017=\272.\237~9\256i\024\272.,\000\272t@\23592\316\3039B\366\2628:\366:\272\247~\300\270\017\006\3208\243\217\032\270(\355\026:\261\371\241\272\266|\002\272MU\2179\233\304\302\271\371qF\272h\270\34783`\226:\345\025\241\271\0364B\272\010\032\262\270\177\261\2509\033|\366\271\017dV\272C2\201:<j\3619z \326\271 &\3609\360\322\3559\230\2015:\232\253!\271d\327\372\271G\242\025\271\247Q\220\271\222%7\272\203\033\2469\233\365o8Juk\272-\262\201\271W\267\210\272\262\004\2309|vG\272\263V\210\271\224\240\2229CL\213:V\221\r\272U\006\210\272\373i\2639i\213\000\267\034(x9\367\273\026\271>3#9+\007\225:\364\330\033\272\024\3158:8\270\363\271\357IF:\214f`9\3722\2569\204$\2739\323\361\265\272\364\205A\267e\311\234:a\027\0358:\245\'\272\006\003d\270w?/:E\273\031:\365\032Y\272\372b\326\271\371\274\222:\033\311\223\271x\301\2149\360\030\214\271\024L\014:\230G\273\271vYO\272\231\367\2409\267\267\2009u\017\3169\300s\340\270\202\206\023\272\240GM:\\\250\226\271\266\231\023\270\370\252A\271{\243a\271\237\330\3019\2212\3419\214\266\3146\034\260\270:\335\245\257\271\206\370\2039t\301\250\270Y\246]8\026R\235\272\207\376R\272O\2341:\304y\232\272\210\332T\272w\362\346\270\226U\264\2716\353*9\037`b:\263\300\n\272\227\361-\272\341\327%9\016h\024\272\203\275>9\004\3177:T\342@:;N\224:a\235\210\271:h\026:4\257Q\271T\260k\272-\241J\272\003~\036\272r_5:\340\335\240:\212\260\3429D8\2019C\364.:\3252z8\256\277O:\351Ze\271|k\3429\261)\243\270\022\3466:6*>:\245\323E\272\002\303\177\271\361\021\3147E\217\270\270nK\256\271y\230\205\272\2450n\271Bj;:&\243\312\271\300\241\346\271\321\036\215\271\2003\3039c\200}:\263\247f9\260\317v:\271\376S8\222$):\257\366\325\271\315\315\214\270\367eZ:\274VR\272\315\007\210\272!n69\363\253\2469\217\203\312\270\271\361\\\271G\342\266\272\305\274 \272\253 \340\271gx\'\272\310-r\272Y\2359\272\333\225\0349\300\204c\27286]9)&\014\272=\306\3419r\1770:fM,\272[g\3359\251\321\377\271\264\2756:\264\202\2108\274\021Y:\251\316|9^g\027:\337\216\202\271\375\227\031:\203g\366\271WX09\254\032,:L\257\3469:m\321:\330\345\226\271jy\017:\377o\270\271\003\016p\272,(\032\271\350&\0278\225Q\2527\301E\277:\323d\001\270\301\002\257\272\007Cc9=\013,\272D\275;9\317\262\033\271\330\033\200\271&\025|6Z\345\2439\037\201\003\272\216\"\3749_\312\342\271\347j\224:\\\377\031:\377\023\031\272\241;[:1\003\256:\211\253\3439>a\2709v#O\271\265\364S9a;2:\346\3432\270\"p\0019\336G\245\272\364ix\272\323\271s:m\237\2609`\261Y\272\335\366\25094\257<9\257ww9\324\260d\271\351@\034:\177\205\354\270\323\333\231:A\255\331\270\352@\270:\200\205\"\271\327\004\356\266\025|\3029.\017::0\366\223\271\336F\240\2720\301\003\272\225\304\2359\215\243\2579?\014\345\271\215\004c95\362\3419z\017\205:\2012a\272\006\330.\271Y\003\354\267\3351\2279\355go9\374\317\0378|B{:\237\0062:\317\260\2508_\213P\271\237_w\271s\361\025:\340\261\206:\217\370\2728&\247\362\270$\003\002:\375\222\2439\377s\332\271\240\264\n:\311\024\214\271v\206\3409F=[:\t\241,:#\212\200\271>\223\230:\244\257\031\272\336\304\250\272\023\205\3359-\333\337\271F\344\272\271\217g\0169W~7:\346\243\2449y\010\275\271R\365\037:`D\2129\033\247C\272\307\301D9\371\222Q\271d\330u\270xt?\270\231\023\000:wn1\272a\300\3139\266\220\220\270\017>\232\271\312ML9\017\010\215:\256\031\343\271\204\227\224\271cE/:\326\257\3519\tS\2509\330\334\305\271p\006\2459\221N\2169\327\n\3349Z\241\214\271\202\262\222\270\023\\\0168]\376\t9\303:\004:\323\303\216:\347\307\304\271\342#\013\272\244D\023\272\344r\3508/\210\253:\202C\\9\367j\021\272o\364\256\270\\,\312\267\235\250\003:\274zX\272\366O\336\271\271R\000\267UjL\272\205\232\237\272N\304P9rfJ\271\233\243\t:\034\323z\272\236\340>\272\234:\367\267\211/\3628.u\304\271\205\267\3119\214x\3559\026\315\017:o}>:\372\266\027\271\351\276\r9\'\342\202\272\342\317\220\271J\344\035:D@\016:[`\200:/\360\024:\017\275\276:`{\317\271\337\352\201\272\332\000\2316Pg\024\272m?\317\271\305\367t:\326\"r\272\205\230\2138\255\"L\272\003\234\3578`\276\3709W\036\3179\332\227\256\270\220\210\201\272\203\233\033\271\300\316\211:j\310\220\272\261\353\032:\334\276\271\271\362\345\247:\347\332\0359\032\357\3608\361\206\244\272\327nb\272\351]\013\272\021|\2538In\0369\304\023\337\271t\223\006\271\240\362\3539\n<\2759\336\014\307\270\346_\2039\252:\3349\346\300\2169o\376\231\270c\237\t9[4-9\316>\246\271\313\240\034\266\354/\250\272\340Z\312\271\335\243\0269\004\t\265\272\2234\030:h\033\3609\020\216[9\210$\n:\310`\261\270\365\325d:7\321b:f\245\013\272\212\241\r: \357\270\271\304\372<:\212\000\r:R\226-\271*\372\2618\320,M8\324\026\3057m\30279\271\253p\272\230s\2369\n\265t9&\230C:o\326J:\303\230\n:M\231\205\272rT6\271\266\303\036:\214{ :\227\003u\270j\354C\270\004\215+\271\3775W:m/@\271\245\2326:\274|\0269Y\367S9\343\230(\270Y\302g\272)\220\t:2u\006:\364v\2019\006b>:3\261\3659s:f:\362P\32489\014\206:\312dh:\276\224\037\266s\226\33796\014\314\271P\356\355\271\267\260\216\272\025\310\213\271\224\022\205\272\014\325\034\271\033\311\032:Kl\270\272\366\022\017\271%\341\2329QC\"\2710Y\2179+\370\325\271\241p\030\272\375E\033:\231e\305\271w\357h\271\252\022k:+\022\3335\224<\201:\2065u:\275\253\207\272\nU\254\271\215V\001\272\007\022#:l\350\2279\265%g\271_\250\3758*\276n9@\201\0028\316\327)\267%o\273:\236,h9C\260&9.\237\n\272\273\235\000\270{\261\376\271R\325\2339\311\303M:c\360\264\272B\3171\271?\314\276:>d]\272ki\203\271\0346\211\272\370\024\210\272\235\223\2779\367\313\371\267\276\n\262\2710G\246\270\327@\3549x\207\305\271\020Q\3009\301U\260\271\304\307x:\236\032\027\271z\212\014\271\212\311\3219>\253\007:\314\21439R\300\2339D\014\3019\367\263\206\270b>\034\271\221E\252:\333b\002:^\023\307\271\027U\3467#\207\225\272\221\n[9\224\022r\272\"#\016\272\331\270\037\272(Cv:\034\013\221\270[\022k\271Lp\010\272\307,\312\271\033\364\210\271JF\2449\235%J\272x\261F9\233\220!9\345\014\2349?\270\257\271Vg\312\272Jas\270\233{X:\322\350W95\332\2038\200C,9\216\23479\t\231\305\271\3025\0239Y$8:B\324t\271nB\3449%\316\233\271c\\\007\271O\315I9\242s\213\271\341\204\024\272\272O.9O\036_8\364D\273\271\3146\2309]\222 \272g\200\202:\370\300\211\272\023J\2239\360\260[:zj\216\271\200\246\322\267\343*\3779\375\325\3209\243JH:{\003|:\'H\306\271\257F\2429\312\266\216:0\342d\272Us\252\272\365\215\3209\254+\262\271\321\225\205\272\357O\2178\356\305\003\272\270wP\272\227>\2048_<\0349a\265\005\273\344^\254\272\023R\031\272\n\336\":y\035\317\272\356\365\3019\026e\0318\322\354\034:\224\304\246\2715\205\017\272e_F\271q\3317\272J\306\3269\027r\3119x\025\2009\376\2305\267xV\3529\270\232+:\3518\003\272d5\205:D\313\205:8\223*\270\262\275\303\271\237\305$\271E\265\2229\377\340\374\271>\247\034:\201Q\336\271\312\316?:\350\352\2109?6\341:\014\354\2029\025\204\2419\363\005\3728\215\303^9\342\014\0249u^\207:~[\036\272\0030[9\265\260\026\271\2066@9\232\322\216\2726\023\264\271\200k\3559\302vX:0\021+:\276\312t9\362\235\r\272E?\215\272\225\267\2719\304\341\203\270c\0160:.~I\272\026\274w\270\274\311B\272\225\3771\272\361\232\005\271\355\344\264\272\244-\n\272\356\332]9\240V\2569(\206\037:\332V\330\272\342_\035\271\336\276b\271\332\30609\354\316\231:\375\253\266\271d\024\014:+S\3749\326bA9\324\322n:\273\203\232\272\332\234\212\272\366\371j\271\037\347l\272\247:\247:\017\237\3519\337\023\t\271\007\262 \271\365F+9zCc\272\351$N\272\003n\001\272U5=9Is\227\2713\016\3717\232t\364\271\246\036\372\271 \242B:\007\352\3679\336W,\271\346\'09\227\340\370\271\030\327^9\36196\272\345\223\246:\234i\3539\210\021b\271\220\344\264\270W\222\0069\246\001\310:\352\006\030\270\336T\252\272_6\024:\300\274\017:\244R\":\343:\2159*\207t:\024\021\037:\2367L\272\346\2236\272\027\227\217:\024\240{\272\317\311\0049\300\313o:&\301\232\271\n,\177:P\225 :\034\371\'\271\023\273\234\271\271M\272\270\266Rf9\235H,\272\303<\206\271y\004_\272\226\234*\272>v\035:\344\343L\272\360\037\006:6\220\265\270U\214n9\323\250D:\3172\'\272-\276&\272\337\337\210\272_\3641:\305~\353\270F\225\0049Ae\251\272.,\0148=\205\265\2710\337X\271\324l^\272\342\373\036:\t\007\0109\255-\020\272\335\337\272\272\240\215\3129\rg\314\271\225\305\3279\r\254\t\272e\031\"9r\274\356\271\302\r\325\272\236vf9\356\n\322\272D%\23598\'\207:LY\3308a\312\202\272\n2U:l\310\3529\250\003\260\271j\003\r:\222h\005\271\334\316\244\271\205\\\234:z\374?\272\246\037\31095\216\301\271\274\"F\272\330\246;\271a\016#:\370\307\2658\212E4:XH\037\271R_\357\271\257\234\3039\355\210\3158uW\271:\253\352\0047\225\2632:\272\321\2479!\225T\272\250\376Z\272\230\035I9\326\300\025:\323mW\271n\207\220\272\316\243\000:\254\014d\272\344\342\037\272\323\304\306\271\356\034\367\271\026\014\3029\250\202L\271\375F\225:\327\223\2418\"v\240\271X\311\3709\035\022\223:z\030\275\270my/9\333Y\206\271\267\377>\267\000r6\271\257$\3618T1\206\272\252\366\212\271\017c[\270G\207s\271w5\2329\322\253`6\255\323\031\272C\014\2437\315\240\3116\223\335\310\271F\031\2179E\023\3409\033\266\2059X\240\304\271\025P\216\271\027\024\022\272\331\226q9iC\221\271\026\361I9p\021P\272+\027s:\343\366\000:;QU\272\374\256{\271m\344L\271\373\335\0228]\376S:c\273\277\271\263\373V\272S{\304\271\335<@:j\307\177\272\335\211\':\351\353\3138\025~\247\271\236v\334\271\272\356\250\271[J,\271\274X\3669lIJ:\251\215O\272\324\263\302:\233\352\204\271/\300\2018\247\257#\272\277\231\3329\347\037\314\271,\253\2519!\016\301\271\t\371i:\232r\263\267B\245\237\272\227z/\271uir\272(S*\272\221>\345\271\262\226\3249 \254B:&\241\3319\273\317V\272\242\321\216:\350\262\325\271\353\003/:\205\374w:S\241I\272O\032?9I\204W\272q\267\006:7\324,\272\227\226Q:\212g \272\3309\2738\035\306K\272\332N\301\271\377\250\3329x\331\332\270\343\232\242\272\317\341\3359tlJ:\314!M\271\250\334\355\271\340\336*:h\303^:c(-\271\014\243<\272II\t\271\363\327\266\271\t6\020\272\263C\r\270\315K\3438\235j\3609\336\327\361\271R\256\302\272\013\235\257:\224\200\37491i\2109\344\2332\2721\330\215:\245\013\263\271\261\243\2719\370[t6\201\250\212:\347\r*\272\340\265\035\272\221\345\221\271\241T\200:6y\021\272\3644\017\272\223\33049\262\342\007\272\2551\270\271\272#\3609\210d\207\271\365\252\216\272\225\226t:wG):\351}\215:\272\230=9Y\211\2038o\210\305\271\364\324Y\272\2448\251:\006\37659\344JJ\272\214W/9\376\005::\352\360\371\271\214\236\035:\327\217\202:M\337\220\272\227u\321\270>\374\3718x\266\361\2717A\370\270\363U\006:\271L\005:\357*\3149y\036\347\2710F\3419\247\26039\356\000\221\272\022+\2439\')W9\225\r\3578\314\201\2749k\220&:\004\351@:\251\227\2316=/@\272\307|s\271\345\337X:\355\024-\2729P\344\2711u\023\270\0069\342\271Q\t\327:\007\177\333\271G\210B:\301^\3529A\335\305\271\\\232{:\307\353\013:\346\254T\2716>3\270F\220U\271\346)\2559&U\342\271\206\345l\270\204W\'\271\207\224\326\271\230wY\272$.\025:\220\341\257\270\002\006<\272G\000\303\271E$L9\223\273\3049h\014b:S\303\":\317au9\205\360_:R\233*\272\210 P9r\005w9\0206K\272\206H\247\271\034\005\220\272c6\2109\350\324\206:X\207T9\377>\373\271\225\007.\271Wi\306\271\230?|9\235.A8>Q\3428w\305\2529!q\214\272\371\224\003:\020\'\2369X\006\204:;\346\004\2729d\0309T\352\024:\020\256D:\027\372z:F\232o\272\277\327\244\272\326\372\2779\255t\013\272m\341\'\270n\347\3338\031\204\251\271u\277\265\271i\332.:\352\307-:\335%\207\270\275\206q8g|2:\257\214@\272E\234\3029\216T\003:\230s\376\271\275\223\225\271\205H(:\357\210^9\255\237$\271\240\236\032:\245\342t9\023*\316\272\273\264-9\246\255\001:\007\216\3518!\260\324\271\330\\\233:\323\020\206\271B\027\0039%\223]\272H\276J9\311g~9\232n\3459p{\0269\204Y\230\271\314\326\230\271A\3177:\352q\3129\375\354\216\271\007@}:\006\205\022\270\026\257\324:\326v]:t\370x8\230*\2759\373`\005:\201}\346\266.\240v:\313\376\251:\020\331\2649i\013\026\272=:\262\271\346\306u\272\022\024D:\254]d\271!.\243\2712ib\272\013j\214\272=\375\367\271+\354%:\371\220\3439F}\2439c\007\t\272b\342\210\272\230Jl\2720\023\3578\363\237\202\272\271\334\220\270)\3547\271%\017D:\212\2571\267\243\360\024\272\346@\364\266{\311O\272\262^-\272CW\344\272<:\273\271l\206\025\271\353F\237\272W\201 :\25033\270tTj\272_B\250\270w\021\210\272\272\333p:\362\377\2328^.\201:\262}y8\035{\2039\242\357\212\2712\242\365\271^\257R:\221\nX\272\2642\257\272\274\026\n:\305\373\272\271\026c\2029\334W\":\232\335\036:|9\351:V1#\272X4(92\363\232\270\377\277\231\272\025\261P9\203(h9m\313J\272h\303m\272.\263\'\272P\237\273\270\\\365\303\271\373Q\362\266z\026\013\272\\\205\3077\214\261\2258\007\232\0268\376?\2419c\271#\272\370\351D9\260\034\222\272\236\244$\272t\231\3569\212\032s9\360j\0008\375\377.\272\357\266L\272\257d\035:\271\361\020\272\2467D\272\3660\r\272\026\t\3068\003\261\2009 \276r:\262M4:+\351:\271\334v\026\271\022L\035\272\244\331D:\251\272\207:\331G%9g~\254\271=\372\003\272\304\035\001\272S\362\370\271\361\010\0319:\254\225\2714\226\266\267s\251\006\271W\257N\272\373\302\031:\263\267\3618\002\016\020\272C\037\305:E\214\3069\342\013\205:pl\373\270P\034\352\271;H\2619D\301~\271\365\312\212\272\335o\2729\267\354\21183\224\20497\231\005\272\226:\2179\302%r\271iT\3409R\2019:A\003\241\2710p\032\271\r\375<\271\301\233\364\271\321\341\3569,\215\01791\002\340\2670\016`\272\357\356\007\271\233j.:\t\033\202\270\201\376]9\372nI\271\222\221\342:\206\036\2109G\211\3779Y\367;9\362ZX\272F\024\214\270\010a$9.{1:`]\204\272,\245!9\360\024\260\271\300pO\272\212\031\234:\335\342\3479\276E\3659l~\322\271D\325X9\374\010?\2728\367\262\271%\240\330\271l\307\017:\033\251\375\271p\356\2209\022\336\3079\343 \t\272\316*\3569\214\317\2729\371\224\322:\347\177\203\272|\322C\272\331\037\210\271\222\013J:1\022c:)l\367\2716\271\024:l<\213:U3\300\272\002m\367\271\226\320\301\271\237\217\031:Z\317\214\271\221<\0278\273\301\226\272\216\216\207\270,\263\327\271\261`Y\272\032\013E9\317\230G9\244\275\3277\277\303\306\271d\375\2749.\005*7\265FI9\324V\2619\301kD:\345\021\335\271l8H9\250z\2318^]B70\t\203\271W4\216\272\357e\354\271@b\322\272\007/O\271TP\013:\236\262\23483FA8\204\034\302\270&|L:\032\242\2428\337\327C9\214=\341\271{\031Q\271(Y1\271\003\344\210\271|\023s\272;4\242\271:\025\207\270\003\034c\272,\030\017:\327\340s\272\023W+\272\036\313\3338\363\1778:\025\353|\271\234\242V\271j\3217:\252=/\272\3028\0319\023EA\271>\240P9\242\374\243:\316\033\334\2714\353\2759\377<\001:\300\027A\272\356\216\232\271\214\220\232\272\215\354|:`\344\360\271,\274\010;\211)::\335\032\037\271N\315\265\270\231\340\2668\345\010\3039\257\351\350\271\325\360P\272\000\003\255:\325P9:\266]z9\035zj\271\311\360\2169\275\346%:\264\004\222\272\335P\3358\241\260]:}{\0229U\302\375\270!\216\3629\257\177E:Z\266\214\270\001\014\253\272\307\t\344\271Z>\2009\201Z\336\270\014O\036:\354+8:\246\215\013\272V8\3059IHK:6\356#9\327~\223:\014O\2048\000\357D:\242\202K\271\335\323\215:~\3723\272%\226e\271kpe9\177\335!95\361\361\270B&\2339\243\322\352\265\024\223\221\271\230d\2679\232\310\031:\302\254D8\036\373\217\272J\217\236:,,\235\271Z\307\211:\333W\025:x\27198\322]\3109\034\304\220\271\270\200\3328n\331\261\271\261\311P\272j\375\":Yc\230\271\035\323\237:\001^\2469\377\003\331\271(ZT\271)\r\360\270\264c\2309\371\253$:\340m;\2729\235w\272\202\266\t\270Txx9\223,\210\272A(\2009}\261b\271|`\2119\343\315B\272\203p\2619\277\327\2639\322\347\2229\222\213E\271\t\261\2279\n\214\2109^qA:^\022O\272\266\224\004\272\357B\3308\363\224\3309\326\306\247\271\220:r9\003|\3779\243\200\233:\376%~:\316\017\025:\200\037r\272\333\3660\272\230Wf\272\002\037\243\271\2514\212:\311\\\3759\321 \024\272\312*\017:\352\357\2659\235\342\253\272\370\302\312\271\260\230\317\271\277\237\r\272\3345\014\271p\326\256\271f\201\3769.A#5\276\3765\272\372\036\260:$A\2279\206/`6\243\211\2469\262A\331\271\352\224x\270\356\026\3329Y\335\201\266\345=Z\272Iq\033:$\013@:\237\320!:EP\33092\272\211\271\363\234\3749Q\324\020:\'\306\205\271t\322\r\271HH\016\272lv\341\271\302\307\365\271\"\330\2267\244#<\270\221=*:.\206\3679\370\307\274\270y\2642:\033\247m:\321r\301:4H\016\271\356\276D\272\2131\027\272 \016n\272\343\330\304\271p\250\032\271\330U\3119\360\222\005\270/2L\272B\216\317\271\205\244\3576\032\276\3559\315a\233:2J\3429\305,\302\270\225\014\226\272V\032\014:\264\322\037:\307\036T:s\372F:\206o\240\271\243$H8&\027\3379>m\033:N\266\0338\320\224w:\242\376\2449e\257\344\271\203\030)\270\377\213\212\272\255\204T\272x\375k\271\300\242#\270q4\325:8\253\2379^\236\332\271\227\256C:v\374\021\272G\324\037\272\241\275a\272\233Q/:d\230\0079\036\335\3538\301\306`9\271\325o\271o\360\037:\370!g\271`\236\3129\202\346E:5k\306\270X\252\3149\231\273S\271Oj\024\271&\005\305\271\031\022\302\270R\203B:k\271\025\271\335\005a\271\336\361\202\272C\223/\272\374\351\251\271<\306.\270MYH\270\352o\032\272\037d[8\341_\023\271\357\036\363\270\276\260\177\2719\226E\272\333\250\3149\234k\3069\251{5:u\220\321:R#\2039\263\312\2239\347\363\002\272\006LK\271*\302A\271\374\305\r\272=\377^9\326\243\016:\303^y\272\360R\362\270\346M\3559q\034D9\331h\023\272\207\236\215\272\306q+9\005*8\272$\032\253\270\'\022b\272>I\335\271x\241M8\010\275\301\271\365ap7j\3522:\237\347\037:\211\005\3769\241\017&\2720\237\233\271\357\365\36190\250\2268\244\357\217\271}\373\2009\260T\022\272\261\232\2167\272\r\002:V\366\2049\034\351\025:0\207\2769v\250\003:XW\3419\t\247\200\272\2460t\271K\006M\2720I4\272K\313 9\204\210+9Q\361\020\272\202Zz\271(<\326\2704\t :f\366\3539!\3169:N\330b:/\367\242\271S\251\2149\223\330\022:F\253%:\311\341y\272Y\335S:m?M:\374\340\267\271\315\034\336\270\361\203?9\304\034L:~\312)\271\237Y\030\272\242\235\001\272p\303\211\271\274\020m9\031 i\271A\0316\272=J\205\272L\240\352\271\337`\033\272p\036\3009\221\331\266:t\001\252:\035\224\0229\026\316\027\271\036z\3479\364}\234\267\2115\0177\277,|:*J\255\272\363-\3279y+\2149\354\371\370\271\027\304^\272\2647\332\271\371\002F9 \347\000:\205G7\271\225\247u:s\236*:6CW\272=\355{\270\304\261\025:,A\'8\346\005\301\271\251[\177:\275\033\3219\266\\\2459(d\2219\355\3372:\365\3363\272\027\344\0359\311i\375\271\260\035\326\272\326U\0228MC_\270\373\312\340\271\000\004\263:~\3573:\305\305\347:HnL\272\305\302\244\272F\371_\272\314\204\2349\327\370*\2729U0:\341\254j\272+\n\267\271\246\376\0049\345\005\363\2716p\007:\346&\2668U\332\345\271bmj\271\022\024\206:D`\2558kV\252\272|0P:\233\360\3778\263kl9\nj(:W\243B9\332\215\363\271\3358\242\271\244\036\2779g0O9\n\370\2359wY<\272\326\343\004\270m\0369\267\326e&\2725\222\3279\235\006F\272\2518\234\270haK\272\321eW9\307F\335\270a\212\312\267\220)\351\271}U\017\267\rS\t9H9-9\361\306;\271\004H\356\267:\306,\271\301@\3628\217\250\314:Fv\027\272R\235N\272\004\007Y9\2501\t\271i\034C\271\272\"\3168\021\267I9\177S\014:\3628E\272l\'@\272`=\3779\253\002K\272K\362u\272f\322\2458\033\226\0248\337\220\2739fN\320\271z4.\270\275p\3629\251-\2359\016L\0369\276\312\3627\0044f\272\014\366\303\271\356\\\2769\026j\':;\311\3559\207\240\206:(\203m9Dl8\272\352\250\2749\347\346\004\270\334\037\036:\225y\033\271b\022\3369\310\200\271:JQh\272\333N\3608\227\254\222\271\306Yr\267\375(e9\203\303{\2702\220\265\272\311\264\213\271\250\303B:\331\366\216:u\326)\272\373\031K93$\220\267(\224\2669o\n\273\272>.\3578\324\300a:NL):\016FS\272\336Q\231:\275\360\2418\362l?\267<=s:\273\001J:N\202\3329\0302\2059\273\246\3259\362R\r\272\277\257\27093\221\3469I\243\337\2714\254\3419\336\033~9\205\314 9\354\010\0169\277\317\3039\017\350\00094\271J9\325/j:\254\343\205:&\r\362\271\331\223\025:\231(\2179\n\207\340\271\230\272\2269\212\246\024\272\020\220P\272R\017\207\271K\211F:\253\241\t\272X\340\351\271\334Q\2159#\272\30192\376r:\221^L\270\032\016\2709\367\030\2119?\366\017\272\244!o:``\336\272(\223\350\271\000\007\252\271Z\340\3339i9K9\252\216\251\272\335\213.\271\021\344\331\271\306@\312\271\334fJ\272\300\266E9c\214\014:/\264\3709\274\204%\271\007\265\2449C^\2679K\356\001\271\202\340\304\272h\263\321:\001\226\211\272RVe\272\\F\225:\302\310;\272\313\032\3079\370\240j\2717\020\016\272@\274\2429\262\261\3469\033\273{7L1\2629t\247\030\267t\302g\272;\370\371\271\300\371\2779\004\264\014\271\3569F:\201~\3209B3\3059\346$\022\272f\306n\272\nX\n\272\253\250\2438\\@\324:\025\014L\270\247qV\272Q\005z\272\311\317\211\272f\025F\271\214\203\2027[\242\023\272QA\2237\357*\3128UX|:/\320\234\272\356D8:0\333\2679\255\326@:\261\275\315\270Zq\001:8\257\3728\307\t\025:H\221?\272F\222\204\272\224\305\0278\207\\\3008\204\213\3479>k\023\272\243\232\0077\322\224\261\2714$\243\272-\030\3059.\376\023:\334\325_9 0g\270\247Sr:\2563\337\271|?\007\272c\254/\272,\"+9\t\235\027\271\"\"\3059\224!?\271\327\334d\271\'\177\036\270\n\375\247\271e\000\302:<yy9\201a\313\271PR\2439\322\322\3459\236\032\221:8[\201\271\026\007,9\211\217\215\272\336\227\3119T\371\201:m\224?:\312#\0039O\345\344\271\232\270\215:B$!:9o\033\267ZFS\271c%\306\272\273\r,\272\204\'\255\272y\246R:\221Rc9-v\3369\365O\3479\n\323-\272\347\\\013\272\314|\004:uH?\272]\314x8?\031\3438\326\343f:B~_9%\244\022\271\334\337\3149\244^\247:\342\225\354\270\376\243\361\271\3416>:4\224\2248\2447*\271\306\007\260:U\310\010\272-\267\301\271\234\2028:\200\240\3718\301S\246\272S\344\030:L\267\034:\267\3264\272\327\235\3226\261\314\0358\022\n\n\271~\345\3559V\346n\270\322\223\247\270k|\n\272\265\177\3329(({83E-9i\372d\272H&\277\270\0350\2339\375u3:\224\370E\272\010~\364\267\333\251\243\271\251c\322\271\260\263\t9\223|\001:\231\363\3119\273\323+:%i\241:9\006\205\272w\210\203:\372\204O:%\361B9\016\253\243\272\333\261\224\271;\nA\272T\223\223\271\344\340\241\272\243\234\0139oE\3479\301\322\207:\330\324#9]\317S\271\271\304\3429\030\341?:\005\007g\272\254(\232\271<a\227\272\274xK\272,\236J\272\013y\2209-K\2338\201Ga\272O\024\305:\313\t\2619\374+\216\271\002\215\342\271T\320\246:4xu\270\321\014`\272es\036\272\377\236\306\271\'\255\3258\222\366W\270\2076\3249\326\334\241\270\255\323\330\270\313b\0378\024\304#\272\264\226\302\271\363w&:\332\214\2139\017G\3139\326\004|:\306wF:\200\332\3679\202\274\3339jG\3339\017\330\3159\214\340>:&\033\177\271\010\232\2469\216)\3019\370:y\272\213z\231:_\215\032\264\343\003\333\272\200\020\305\271\310\311\275:\242\242\2469\023\353\022:\300\007\3539Z,\3739\257\320\177\271\013L\335\271\260g8\272\202\327/\271\3572\017\272(R\212\272\255\244~\270\236N\237\272\025\236\003\271\345\341\260:\202\226d:\353\217\004:\341\366Z\272~\215]\272\225[\251:\346\362I:\272c\023\272:\035;:!W\215\272\326\332\":\013\227\031:\252\025\254\272\323\035\005:\202\314D\272\024\230\267\271\311n\3349!\022M\271 Y\036\271\274\265\2229n\254\2239\322\363\257\271\024%\035\272:\253\256\271\323N/\272\361pH:\202\\\033:\372\241.\2725\341\210\271\324\002\233\271\0329\351\271\352T\251\270^\016!:\242,\221\271\244\262\3109\365\202\3779b\262\r9\326\301I\272$2-:\303\206\2419\234\027\2639\211\017\002\271\256<\3019\321\335\321\271XlY:9\2141\272\ti\005\271\325\014D\272~08:\363}\203\270*\366\2709\000\2076\272ye\3059\031\3779\272\252\342\025:\373a*9\256\213-9_\352+9\343\0036\272K\006\3539\302<,8q\340\2039f\311\2338\203\34258\301\026\271\271b\034\212\272\3053\273\271\220\010\3669,}9\272gx&9\017+*\271\373E\3049f\307D7\025\357\230\267 \304Y:\022\314\205\264\262\243\232\271\2231\031:\035\317\243\272\004B\320\271\252\343\3519R\0274:K\275Y\271\265a:\271\216\rc:l\363\2729\274-\224\271\253\307\307\272\016\200\253:g3\032:\257\255\203\271vf\206\271\206\336>\272\016R\205\271]\022;7C\332\035:z\353\3409\014\365\3749\334\310(9\262\320\004\272Y8*:Nd\200\271b\264\3159\207S\271\271\220\2471\272\3651\2469\020\201\270\272\001\03496[+P\271\312\201\003:Y\346\2119\022\215\2028\317\217\367\270Z\030\252\271A\314\271\271a\354r:Q\222/7BX\013\272\213\243\035\272\351\037\263\272wDL:\3555\260\272\r\371y\272\246\320\3649\256\257\005:sH\220:\336w\213:\275L\342\272\023\010\227:z\334\21098^\007\271:\303\021\272%\225\3118\244\377&9\237iD:P\360\224\272p\017\210\271\035$^:\313\335\3449\334\267\253\271t#\0359#\221\321\270\271X%\271\034\374x96Lo:N\234\007\2723^c\272h\277\006\272Vo\2228\204\344G9\3417@:$\'\3229\246\341\2709\362\220\236:\227\257\277\271\314\201\344\271\363\2460\271]n\256:\',\2079R\"\001\272:4S8\307E\207:#\004\354\271*w\237\270p\253E\272\260\255m\271\2567\'\272l\333H\272\351\250U\271yb\210:=\253\235\270\0217\230\271k\007\3139(MH\272j\330\224\272\371\026\3429u\342\034\272\322A\366\2717l\367\2706D\035\270QE!\272\004]\361\271\333\016\3149<\001\021\272!\024D7\016\324\2418\014\016\2079\364\326\014\272-7_\271\311!\3379\315\210\001\272\016\204\0009\256\016\273\270\203l\0258P=i:\227\224 \272\203Vj:*\244\033\272uf\003:\025_I\272\366`\2079\371I\330\271b_\201\272\223\357\007:\024!\3219\354\177\037:\211\350\260\271!\330\r:kjF\270\227}79\312\203A\2726O\0239T\032\204\271\320\353\306\271\273+\226:\203\n\333\271F(\"\270\301e0\272]\336\005:\233\007U:\352\311\2169\200\252\235\272\014\302L9s*I\272\245f\300\271\341\261\014\272\361j\010\272\257\365\3508\343\377k8\341\361\3419\276\332l\272&8\207\271\241\247B\271\315\314O9Y\034!\270\263Rm\272\264\260\345\272\23335:\257\313B\271\035\264\266\271\272\030\213\271\270\006\0059W\336\2659\324\356\3209\241!!:\244\306S:y\212B:\200\023\3559>J\027\272\031\221&:K\2626\270=GL9!O\320:$-\0069\025\206\207\272^\306\211:\325\333\':X<\201\272\312\212\211:q\236\3719\205\351\273\271\327\324\031\272\365?&:\031a\2009\220\304)\272\0346\030:b\0144\271\343$\246\270\235\245g:B1\0059J\272\254\270&\315\3318\013\330K9\001\346/9\264\227\213\271\n*19\276\372\004\272\004\237P\271\273p\23494\010\221\272\245\307\30181z\352\271\322\331\265\271\217\356\203:c\343\371\270s\360\026: \250\214\271\257\333\0319<\354~\271#\303\324\271\003\302\013\272\373\342\220\271\036\241|\2703t\2259P\t$\272\247\305\030\272\254\177\3078\352\022T\2718\236\320:\000\243K\270\226i\265\272\021\t9\272_\\\215:M\303\202:\376\352\035\272\245*\201\272\241\036\022\272^{\311:\232x\017\2722f\026:pL::\003\236\345:\304\244\236\272 \372\3158\204-+9\254\232\2028{\322\2458iE\201\271\303c+\272\276\246R\272H\306\205:\236*J:\235\350\314\272\177}J9f\3142\271G\366\2729\265?P:\233\311\2528BXS\272\017\247\3429+g\0178\306w\2069\230\256\236\272<w\033\271\236\274\3609Q\235\206\272\224\003}\271\326\030\242\272i}\316:\277\303\022\272*\352#\272j/\021:,\003b\272\365\036\364\271F\347N\270\246\025T\272\350\31069\2053\036:H\034\2679\230\237\242\272\357\3200:\330\224\3369\027N,9\317\037\3679\253`z\270\313\'\001\273\262S59\315\2759\272\270\005\254\271-\235t\272\352\311\033\271u\200\3319\t\336\3409Xk\031\272a\234W:\263\277\317\271\006\\I8\275WO9\004\351\2178H\275\2119\026l\3529\006\272\234\2713S\2738#\313\2138\\\340\211\271\037\276\002\272\316N):\204\007G\272Qb\014:\004\313\'\272\200Z\346\271\302|\034:\004\3239\272TL\002:\247S\362\271\272\255\':\023u\3619C\301.\271\236\230\2359\025|\3669Ai38(\241h8\317\\::`\266@\271\320I\034\272\360\247\003\272\212W\227\2670/\3439\372Q\373\27018\2549i\251E\272\306\016\203\272\314z\334\271l\342\203\271)3H9UO\3228\337\242\t:\270ZT660\210:_\2338\272Y#\032:\226c\203\2713\322\371\271\027jU9\232\260W:\010\310\3419\372\305\033\271x]\213\272(\304\300\272\200\240e9Y\246\":\0074\002:\340>;:?\022\277\271\276\267\3229\324\312W\272\240t\2319\332b\262\271D\232\261:\365\346~8\2546\372\270>\200<\272\3003\007\272hW\252\272\016\306\27090\367\211:[\346b:\005\364\010\271\267\222\326\270\022qk:\201\220r:\267\307\2119\267PR:8\31699\274\343y9\2334B\2720\037\2169Z\314_:\273dC9`\237\270\271X5\216\272\017\211O9\234\370\236\271k>\0009J\260\2109\3114\2569\233{\367\270N\224&:\3356t9\212\027\217\271\3001/\272x\231\013:\243\0070:c\036\240\272.Pd\272j\025\234\272\026\354\2429\314 \3128P\346\3658&\207$\271)\366\226\272:\037c\272T\266P\272\\\303_\272$\320\231:\215\221L\272\353Z\210\271@\016q\272\233\031\235:C\007\025\272\315\330\3579/\31669\331\254d\272\016\373\222:jZ-\271\312.\3649\336\n\017\272k\307$:r\235 \271\221\264\3047\n\374\2259~\251E\271Xr\230\271]\241\0179\303b\2009GA6\2721\223\260\270 \245\2128\355:$\272L\303\220:G\356\3148\033*g\272\221\t\3319\001\270\322\271\352t\2549\311L9\271dG/\272\3201\277\271\202\261\260\272W\014\216:\021\230\2759]\321\033\272Ev\2739\264@D:\360\221\210\267\322\233\246\271O\030\263\2718x\313\271\033\005\3329\006\003\255\270\r\235M\272\363\"K9=\001\2269*G\351\271\026\237\2259\314CC9\313\023\367\271\305$\027\272\361\263\330\2700\345X:\227\371\251\271cU\2069$\346\271\272\002\324\2249\303\346\000:LI\3618n\317\001:\313\213\013:\273\266>:\311/\354\271\002+{\272\322.\022\272\375h\2759\205`y\271\244\345\242\270\335\006B:4\316H\271\302\031\025\272\253<\021\272\'\023\037:z\016\031\272c\257\244\272]\304\2109\013\212\3539\277\276\026\271\226\261\2079<\301\035:\375\223Z\271D\201\3029^\263j:\030\036\032\272\022\224\006:\202 M\272\n,S\272\016\264D:\204\243\030\271}\306\3669\276\276^\272\t\301\007:u|U\271\311?\202:\346\311\3568\006~\343\271UoC8\334=(:\356\314\037:\374E%\272)\323p:\233\353\2469{\034\000\271nJ\"\270\331(\372\271~\323\211\267#\212%\272B\204\2219!\337\3729\020\324\303\272\336\275\2238^\021\0049G2\225\270@\n\223:\n\344T\272t\222M\272\217\325D\272\216q\177\272j\034\3129\220U\":\332\325@\271\303i\2539\310\340\2277\372\360\022:\337\265\331\271\320V\224\271W\316\1779\201\300\212\271K\201\3109A3G:>5\025\272K\242\004:\301},\272\212w69\304\325\201\271\235\312c8\336\320\277\271\302\3364\267\341\371\205\271\236\312\257\271\235=\270\271\2730\230\271\340k\332\270\256\252(\271\262\354\2138I\236h\271d\250\177\271\027\254\214\270\341\237\013\272\303\021(:\305\030\3469a\344\017\272\234*\032:\315\323\3709E\327\341\270\365\000\261:\371A\2259\006\'\t\271\306%\t\272_\223\3759,\334\01692\r\023:\3527\0219\333\'4\272\316\215\364\270B\200E\272\224q::4=\0038;-\021\271\3751.\272\035\232\010:a\240\006\272\320\352l:/m\334\272u_-\272\241|\220\270\356\024\361\272\016\'\2756\205\327\014\271\372!+\272\360\255C:\354\2006\270AC\261:G\321b9\004ji\271\275\340\317\271\320\323i\271\365Ey9}\'\025\271\360{\226\272\350\332\023:\225t\0279m28\272_\255\2439\235W\2149\003\2378\272m\216\263\271\232\222\004\273\214q\354:\303\302\310:\277\315\230\272v\271\000;C\201\0349\206\351Y:\314\322\270\270\204\004\324:\3675#:\335\277\3549\025\031\213\271\262\263\025:,\2232\271\273\201\3679\270\014\320\271BXm\272l\332\266\271\245\352\333\271\204\244^\271\031\2502\272\201^\202\270\340\264\031\271\332\206\273\271\344\326\272\271\373\224\030:\017\244\020:\0355Q:\373\357\0248\362\302k\272\027\370\2179Q\nC9x3\316\270;\233\027\271\335>G\270\340Q\3737\rA\000:B\034u:-\270\':n\'\2138\222\374a\272\032)L\272,\262\366\271#\315\206:\267\272Z\272w\004\375\271-\333\3069gfM:\203\nV\272\360\350\344\271\016\2564\272\333\373\254\272d/\274\272>\305\002:\272\021\2149\"f_:t\321\256\2716E\301\2714\243\245\271u\021\251\271\323\204\0048C\211\3208\314\221\006\272\244\342\013\272\216\215]\272\370\301\032\272\354n\\\272\321\341\033\271\360v\032\270w\306\2579\2407\034\272\314\034\207\272ayw:\353\026\240\267o\023\2418\331\026(\271#\027\240\272~\25199\204\232\3217\361\214\032:,d\023\272~\234\016\272\365\031\033:\215$09\367\257$\271\305\257\377\270\345\332&8\022\275\266\271\313y\r:a\324\2538O\257\244:/\360!\272\330N?\272[tH9*\362\201\2725@\000\272\214de:\030\223%\272\370|\006\271\336\327\016\271\333\204h:\376I\212\271\347A.\272d\232M9\003\017\014\272\223\000j9\212\023Q\271\215\332\225\272uR\216\272\3567\2239\223\024\372\271\207\272\32672|\3029p\302O\271|\237\215\272\333\353}\272b\301C:\372z-\272\365p\3119{\310@:.\233u:\2479\236\266j\213f\272\345\353\3449w\030&:\345@V\272\201\005\3209\343\271\2649\223\030\004\272\236,\233:Q\016\017\272K\004\036:;\257R\271\340\361\':7r\221:;\253E\270\232F.\272q\370\2119v\227\255\272\235\205L:E\346\307\270c\n69\236\013\1779\307\032\2259\'\361~:o:\2045\205&\0338\376\253h:\263\20077v\252\027\272\037\230\2549\'\2571\272o~\0309\317\320j:\n\323\264\267\350\0105\2701C<\272h\2044\2718DQ:h~.\272\377\207s:\321\216\366\271\225gX\271\301n\0248\204\317\211\271\005\247\013\272\334\226M:\214\242\254\272?\374\004:<\311\3539\237\361#9\032\362\3109\300P\006:c\245\3119\212[\0169\325\203\2108\206m\350\271\003\334/8!L(:\224\360\236:+\021\'\272Z\375\013\272\365\372y\267\357\3412\271\0341U:D<V\272\340\241\3079\234\253d:K\321a\271+\265A\270\210\325n\271cib:\203\024\'9e\306[9\202^R\272Hal:\365\214\3029\343CM\272\305\314$\272Q\017Y:\231\221\026\272(\207\222\271d\274V9O\331\2229\335?\"\2711F\352\270\366<B9\270E\276\270V5\332\271!\353D\272\001CB:\005\275\253:\265\001\231\271g\232\3538\014\203\3458\224\233\243\272Ru\3129\332\276\303\271B\303\2548\277\204\2718l\365\027\272rk@:\233\331\320\271\323\220\305\271e\263\3219@\344S\272q\356\025:\003\315\200:Wd\2239|^\3037tdV\272D\310?\2722\274\001\272\274M2:\t\27698\022\347M:\356\231\2359\324\307>:\n\341\'\272\361\262\002\272\021\013\t:7p\257:F\341\317\270\345\276\2238\346\022+\272\351\333\262\272\003\236\026\272\375<\\\2670\276F:\212+a\272\303\331O9\2022\r\272\223(\276\272<FH9\337\027\2519\341\025\266\267\215\357\217\272\236\324\3337\362r\345\270\334)S:l\261\205\272\376\303\023\272`J\2129\246\300\3728\201Y$:-\021z:\324P.8\351\220\024\271\366\256\007:\0174\23296\220\276\272@4\026\272\352\353?:\034\035\010\2728\334\372\270S]\233\272\363\224\037:\257o=\272^\347n9\261\337\3239\200\207/:\214\242U8m>\31493\374P\272\344\t\0319N\265\007\271\200\274t\2722]\276\270\205f\031:\362\345\2157\262\340\3539;n\3678\204G#\272\336E<\271\323\245\2719\351\311\301\272{\222\2148\236\2243:\244\323\222\272h\267m:pL\2329\025x.7\315\337`:\017\352\\\272\030#\246:\213X\303\267\374S7:|\2663:\036\237\315\271\373\303\032\271<\003\016:pS\0258\213#\272\270xb5\271\241\362?\272\245@\t:0\257:9\023\233\311\27244\367\271\035\217\213\271R\223@:`F8:\0027\002\271g\275u:W\270\2629\272*\2029\361J \272\372\233G98\364\0328\034\373\21489fz\272\303\235\024:K\000~\272/\005N:bw\375\271^\234\250\272\032\004}:\241\356\356:\250\376(9\363h@:\2611\331\271\217\206\t\272\305\354 \272\347\245\211\272E\022\003\271\226B\023\272\025_09\343\275\221\271\204\223\3538\367\270\3639\344\366\27098\360\3359\334\237y\271\225\302\232\272RG37\367\214\0168xt\302\272\305%V\270?SM\272D\230\3719\3130\244\272d,Y9\016qB\272\245\206\036\271\333\021,9\276Ml:m\313\213\272\307\227\265\271\327\036\264\271\213c \272\223+0:\237F.\272BdM\271\230\251\200\272\347\213\0029\334\037\2509m\305\261\272\277e\341\267\2177%9P\305\235\270\305\372W\271<\303q\271S_ \272$\262\032\270e\241\216\271l\334\3049\373q&\270\263\025y\272\032,\315\271\030\313\3137\373S\3659A\334\3009\335j\007\2725\375\275\271\333\267\32799\020\2619\350\312\3238\030&\213:C\317d8\366p\354\271\354\225K8\2609\3229f\254\2218J+\210\270\202\230\206\271\r\0367:\345\024\0209H\365\231\271\251\017\200\270\325^\"\271\247\351#\272\260\312\347\271\375\206\223\272\375,\2768vm<\272\031\274\2519\020\202N\272\321!\212:TWd:\215\235\212\270\327\227\2619\214\267D\272\372\000n:y\023N\272z\214\362\271\005\024\271:\215S\021:\377\224\331\271\350\017\2469\007\246\247\271U\023+\272\332\312\213\272\272;\030\2727\333<\271\356\370J\272A\305\223:iD\3437\263\222\022\272h\014\0019\216\274\3709\211GL\272U\'\200\271\335\007\305\271\220w\337\271n\273)\270\350\377\3749\t|I\272\330\314^\272\335/\\\270\207\233\230:\307\262\3279\241\274X9\267]c\272n\327\2638\203H@:\263#\2736\225a#8\322D~:\314>\026:\357\223{\271\336\33269>\213\010\272\221\241\377\271\344\033q\271\n\216I\272=\305Y8\331\233Q\270\313\334d\271<Z\2369\356tF\272\307\260A:\235\232\30396\353j\271\345\201\217\271\217~g\272\233\201\37382\265\2607b\210890\217\24096\255\3128+\323\2329\\\021\341\270\217\332\2659\245\256\2059\340xM9\277\353@\271\254\367$9\021.\211\271(Q7:LR\337\271\\:\036:\320aw\272\201\263,\271\316\241a9\023\245^9\263e\366\271\013\021\376\270vx\223\271\345\315\007\272\222\352\205\267\345\241\0329\306i\2459\000[\211:\261\377#9\3568]\272\306\254\263\271\363\004s\271\374\351\241\271\344\233\2509\"\303\2219;\371 :\342\221\200\272f\234a\271P/\215\2713I\0259\220\250\3619X\231c:o\302q\271\334h\027\266K\025e9r\033\036: \275\323\271@BI\272t\000U:k|/9_d\3638\322\326\2009\307\261\002\271\230;\035\271a\327\332\271\362\214t:\343&\230\267\236\026\221\272\242\375\2169\341_q\271Wk\352:\237\275\2779Q\274\210:\'ZI\270\306i&\271+8\2419\326\037\272\271\001\366\005\271FiL\272z1[:\252bp\271\317l=\271\347`\001\272\\\202.\272\212^\257:R\257\3239G0\215\270U\364w\272.\270\3019\267\311\214:\216)6:\324\031\3719\360=\315\270\264\310\215\271\374\213\3249\347\227\307:\321k+:\355)\215\271\312S\232\271\251\313@9y#a\272\320\335\3179\230\266O\271\305~\212\271{\300\244\272\307i\2778\002\237^\272\341j\234\270R?_:\332\321\3619\025.\030\272\242\237#\272\267\261G\272\336sn\270\203\353\3429\217\352\027:\232\020\246\271g\276e:\324\374A:\307hL\272`\n\2659XI\3119\021\216\3468\003\377\2418F\355=\271\'\217\362\271\372N\227\270\212\000`\271\226;!\272\226\313\2129\004\256!:\350L\243:\020?!\271*P\266\270(,\377\271\355\234\267\271\353\334\2539\225\025j\272\204\2555:\337\376n\270\274\276\2019\311\376\020:|aU:\225lp\272\264M8\272\025$\374\271O]s8\347e,:\251wR\272m\332\3407\371x\220\272\373\210R:\027\233\0229\3420\021:y\322j\271\017\016\2679\326#\007\272\237\036\361\271n\'\2248w\263\260\272\317\025\032:.t\263\271\"\224C\272\036\263(9\316\201)9\2640Z9\215\244;8\311\337{7G\030a94\237l9\255\210!:\244I\2018\351\253a\271\204\014\363\271\375f|:\020\033&:\345\271)\272\251E\374\2700e\270:\300\234H9\320\352N9\207\353\264\271ris\272$\220C\272\312\017\007\2713\367\254\272\342Q|:\352\026%:\216Dm9\036\253=\272\252\361)\272\262\014\3139\205\336\031:\025d\204\271<0e9\023eC:\350m;9e\270\234\272\250\366\016\272\324/\304\272\217\372I\272\242G\031\272+\rS\272\004\272\22795\"\301:%(\036:\326\237\020:\207\266}\271\222\273\252\267\0050f\271&\350\030:\235Y\301\272\231\256\326\270\177\241\036\271\264\355f:\373\245\0349\206c\003\272V\220\232\271\233q\3309\361\022\353\270EK\3169\026iJ9\3662\217\272pT\3759-\347\374\271B\r\2409\344\33098\364\276\n:m\250\207\271\201m\247\270\276\377\232\271\033,\3619\213\031\206:d\301j8\375q\240\271\007\310\036\272\355\n(\271\031\365\2609\335\200\262:56\036\270}e\031\272\336\227g\272\227\017\3068\3431\354\271\351\301\222\272\270\025W:\266\340?9{\270\"\272+Sz8\213\230S\272F\201!\272\002=$:\263v\2268\t\204\265\272\314{\3019,\003\024\272\340\276\2168B\317\002\272\213\343\257\271\212p\305\271xWF:\371/\242\270\370l\t9\3322<\272\356\201I:\344R\241\271\347\225\2009\230{7\272\370\322q9,%\222:\234\355\2229qY\2219]\364\002\272\233\303i\271\207\342K\270T\342\r:\204\316\2757\223s\376\271\201\307v\272V\3124:\004\350\336\270\200Z6\272\341?\177\272\242\355P\272\316\310g\270\004\342\3579\023\253\357\271\370\370h:\224\221\014\2727\016\216\271\205\371\033\271\250j\3108\305A\2149\232>\024\271\255i$\272\265!\010\272\302\335\225:V>&\272\016<\036\272\315EH:O\240\275\271\244W\3159\371a\214:d\037=\2722\363\007:g#\0357_\254r\272\3324>8U\204\200\270\221\033\020\272\261A\007\272+\2646\272\3024\0309\224\245\026\2724\273\033:\300{Y\271\324\240*\270\2267\313:\200\214\200\2708\354\363\270\031L\3149\3347\3608r\177\321\271h\331\3057\345T\031\272Mo6\272\237B\371\271\017\013\3349s\341I:v\323\235:\374ts9\373R8\272\216\340B9\306\327\330\270r,U\272\225\256\3369y\357\006\2721\001\321\271\002\272\3468\201\017\313\271\202v\2217\231\214\3239\340\020\221:\303\235=:\344n\264\272\313\347@\271\207\022\2629\005lz8\301\250\236\271\223\226Y9\021\304\363\271\237%v9i\370\321\270\020-\r\271\244|\023\271i:4:\312\317\2149\335\213@\2710HI:g3\226:\322fg\272\224j\361\271\t9\363\270\252\362\234\271I\333\2349\215\3202\271\254D\245:\031\255\330\271\321U,:\232\274\0179\361\203\325\271\273iJ:j*0\271\265!G8\017\037`8\'\247\315\271\001\200\013\272\277A\342\2715d\335\270\014k\r\272\227\21099\204v\245\271\215E\020:\2273c\271V=`9;3\010\272\014\004\200\272\023\272:\272=s\314\271\217\370\3629\232k\304:\026k\237\272\317>~:\230\024:\272a4\254\2715Q\3409\345\0011\272\353\206!\271`\204\201\272O\004\014:k$\330\272\311\325\335\270]X\214\272\277\365 \272\034\374\242:\271\3314\272\335`&\272:^\3738\304\221\212\272\226\350\207\270\340e\226\272i\241\222\272*\202\036\270f\007\315\270\326\265c\271F&\3479\200\010]:\363\264\3159Q0\370\270dhV:T\237<\270we\2159\214\277u:^\330\217:\274\306:\272\213F\2229p\014d\272\323u\304\271\t\027\3759\032<Y:;\2006\272_@\213:\262\00349\207~\351\271?-\230\267_\017\367\271u:\2459\236\330\226\271DI\033\270\306c\3149\236\201\005\270\232f0:\325\206\226\272:%-:\351\351R:\200\314\305\271\274p\307:\036\266\2169\035\031\2739\374\264\2338\274\342\3479\235s\"9\245\000\000\2725o)\272\333\002\270\271\335ed8\242\372S:L\206\0209\035\023?\271h\016\257\271\233xo:(\317\2339\026\235\21498\314\262\271@\231\274\271\343\310\3059\354\r}9\347\023\2008\314l\'\272E\211\2109\367\237\2169H\276(:A\363\241\271\021\036\3538_bH\272\360\263\205\272\014\301f8!G\377\271\3554\247:`\332\3779b\255\2649H\230\311\271\237\263\337\2710sz:T!3\271\304H\2148g}\2346\377\03109\017\022I\272<\317\033\272q\251\033:\226\026\346\271\376\215}\271\252\262T9\214\364[:\004.R:\214\261&:l\303D\272\207\2665\271\211\372\353\271D\\\236\272\247/_:\375Tn\272\203o\205:\3048\034\267V\025\224\272w5\264\271\026\r\271\267\221\326+:\226\2727\272\013\274p:\005\240\241\271}\363\202\272=\244,\272\352\025\302\271\013S\3629\363V)\271\356\332\3648\216\023\2757]\241<\270\351\222\223:\351(\342\270\273\034\254:^\205\224:-q\031\271\362U@:\351@\373\270\266\014u:\311\217\005:\241\275w\272\200\"[:\363\003\r\272\304\210\232:\225\202\3678\022\206\206\271\204\036\306\271\361u\201\272\312\245,\272\272\030\346\272\257\351\2039\200\202H:\215L\311\271\253~2\271:\255\022:t\377\347\271\312\332\3249\207\336\202\266\260\310\325\271\373>d:\357MN9\200,u:\004\200\221\272\270Y\315\270\242-\2169\221h\003\272\021\255\354\271Y\252\240\272\304\350\014:\035\375}\270\355\004\004:U\364W\272\321o\2149\330`I\266\004^\032\272\277P\010:\312\234\342\271\014\'8\272\220p79f!\206\271\250G\302\271:y\001\272i\352K\272\014E\214:$\34759\313\313\270\270\220W\245:9\275\313\271\217S\351:\216}\010\270\031\241\226\272\354\035*:\325\331\256\270\247\007\265:4v\370\271\032\030\016:\267\\\3049K2\220\270\356LM\272o\255\207\272d\260\3669\361\217v:c^\3548\312B&\272B\014\2579qR\020\272\213A\0309\303\200\005:\326z\240\272\223\254\223\271\373\267Q:\3430=\271\036\220\375\272\234\236\357\271\202\2452\267\371h\025\271\014\335\271\271\004\205\035:\312\306T\270\320\236\347\271\254,[8\361\345%9Y\277\001\271%/\'\271\220\307\2259\3035C\272\n\317T9\243\203 \272\273\327q9\257\343b9\314\0234\2724@P:(\303b\272f\234\2659Zj\312\271\305}\3149=\270:\272\376-\207\272\266P\231\272\264\033\027:\207\250\3009\253\316\2509\036g,:\220wB\272\264\273\2368\n!0:\217\3668:\316\220\256\271Q\366\377:\212r\003\272h\222\350\271,n\203\272\362\301`:\201ok9]\240\241:\243\313\024\272\177F\025:\263\037\020:\364\231g:^\300\312:\022\021,\272>\210O\272\232\310\022:\237\233\2159\274\376\203\271\267\221\3339\264x\2209zG\350\270Y\\\234\271\265\203\2739\340\303{\272\227\0211\271N\207\27695\372\3007\024\224h\272i\033\343\264\020\222\217\271H$\237\270\325W\227\272=\3128\271\225\377\200\272\317\\d:\034b\000:)\231\321\271|\324p\271\006,f\272\243%\304\271q\244\':`8!:Jo\2079bJb8@\367\002:\026\322\t\270=j\3007\234\th82m\3317\017H\\9G\026\250\271\214\353\264\271A\217+\271J\323\231\270\037\341\241\272,\345\365\267\242\261\022:\327\006\201\272\260\037\026\271o\325\013\2729\\\253\271n\323,9P\245G8\26451:\212\370~\272{\365$\272@\323\242\271\300\221(:M8#:B\025?:M\230\273\271\"\314\207\271\ru\t\271(\340\26782\243\3129\345\274\3639\254\353\274\272d\"):\315\202\3049\342\006_\272\307\256\375\271n\214\205:i2\203\272];\0349\017\321\014:x\302\254\271#\366d\271\346\315\021\272\257\214\201:\2337\3728\245\177f\271\225f\2419\367\372\206\271V\226\016\272\203\001\267\271\033B\2209\032k\n\271j\006\2339i(\226\272\004\3508\272\227\364\007\272B:%\272hLF:\222\336\2449\320\315\022:\313\261\t\272\226\314\275:\352\31309{:\321\272\234\363\203\265\315\340\2159\203\262\024:9\007f:\266p\216\271\270\357\3459\254\304\024\272/sh\272\220V\021\271\213\377C\272\232\362\3479\276k\034:\026=u9\220\262\3368\261\262O\272Y\340q\271\313\367\\:\274^\35490uc:\007\356y\271S\006\266\2713\013b\2723\033\3468(\251\356\270C\330\3439\002\3562\272}\342G:\310\306\265\272\004p99\020\022\2279@\235\2246\034l\332\270\363\325\025\272\305\236\3448\310\325\204\272To\365\271Z^{\272\325a1\272\001\013\032\271Q#\203\272\220g\270\271\\\005\247:\323\343]9\246a\3358\303\305(:_\250\344\2659\003\376\266\013)\027:\210\264D:\3731\030\272,\026:\270}\205\2539\373/\347\271\037@\222\272\020N\202:g\034\223\270S%\005:?+]:\233:C\272\343c\2579F\267\245\270\224\323$8\321\312\243\272u\013 \272\362\226\003\272\217\217[\271TW\211\270:\030H9j\200\344\271\350B\201\271\350\2076\272\361T\035:H\20369h\177@\270\360?Y:\326?T\272\251p\203\271w?\0239\374+\0369\337\210\377\271\371\346\027:|\344\2129\177\275\306\271\000\253\342\271z,]:\321)r\272S$T\272s\272w\272\031\333\323\271\320\036;8ir\253:\n1l:\205\234\3009\317\023\351\272\341\360 \272\233x\016\272_\006n9d\030\265\271\301]\212\271\310\247(\271\366O>\271\302\240\224:\223\332E\271V\324?\272\231\223\005:\332\321\210\272\305\315\025\271\276g]8\032I.:s\346\222\272\337 \333\270\273l\035:G\020\234\267\363S\227\2712\t\360\272~\234n:*\231\273\267\245\370W9N\357\244\271@Py9\355(\204\272\256\"M:\256\255W:\2745\346\271\2144\2219kt\264\271\211\267\036\272N\200\3248,\035T\272\250_\270\271RD\007:\030HA9\363\313\313\271\350Lc:\013\367!:\020vE99\351\3209mUQ\272\213\271\0359|\n\3748\032\270\014:\337\030\\\271\220wJ\272\372<\366\271?\274\201\272\3202\220:l\322\2509\256\355\001\272\261\210\n:\216\256\020:\3415+\272,\3517\271\324;\006:\244s\n;\314\037\020:|Y1\270\307]\251:\205\275)\272\273\013\231\2715\357\216:\030\245\006\271P\020\247\270\022\3658\272\351\317\027\272\222\0319\271t#e\272P;\243\271\353g\350\271\252\016\365\271\rI6\272.\325L:1\266\240\271\362\276\205:#\251\3549F\256\322\271\262\246\2379\010i\0078\361\244(:*\202\004\272\320\365Z9\244\326I8%\332\234\271\014U\3558\371\260\251:{S\2449\257\244e\272\365z0\271\003\200[:\300)\363\271\020&\343\271\267:\2478V\360\300\271f\201\030:e\r\2339\024\345\232:\201/\032\271.2\2728\362\264\025:mt(\271\334e\2129\336\035\270\271\267;\r\272d\333\t:\221[\300\272\333\273\3738S\325\3646\246a\2739\3432\001\271;\010Z\271J\272\031:\316\251\2709\020A\r\272\221\200\244\271\270vt8[\243\260\272\335M\2178\237\320\3428C9h:\3349\025\271\023\005\277\272F\003\310\272\371\256\2479c\314\216:l<\3049\231oT9\210E\020:\310\"\3149\247\254\025\272\342\342\r\272-\223 \271\360L\303\272\200\016\220\272\312]\224\272\335\375\250\272\t\243;\272\315z\237\270\233L\2309\267M\274\270\267\261%\2702\013\246\270\211K/8\377\224\0378<\374\027\2724\343\3449}%\273:\374\322r\272\322v.:\337\310 9zqL:\275\037\216:nO\016\272f\'\3649\016(b\272\363\362\251\271\246\241\370\271\227t\2459\375\303\315:\314\361J\272\024\235\244\272\020[\000:8\344\205\272L\341\345\271SA\273:vY\214:\373\316\307\271\276\224/\272\223\260o9\021\273%\271s\210e\272%,\3669\361 \3159sg\2619S\250\353\271\332\301\256:\371\254x8u?D:\2022q\271v\224%\272\307\271-:\307O\252\272\320\014\323\271\241\240\033\271i\031\020\272\274\335\2229\r\177\013\271\013\316\024\271\377\263\304\265W\023\004:\253\346F\271\204\0337:a\315\2118E\"\2057ez\34691\004\2049\306\271+\271\303\214\030\271\340+\2039\311\020(\271\231\226\010\272\342[\3059\213\207S\272\325x\3649\007(>\2722\216\201\272\207\266*\270\241{\222\271\366\242\030\271\373$\335\270\375\'\340\270\215\251]\272\275\034v:\334\210\027:_(9\271\245;\372\271\356J\032\272\322\347\2569}\232\216\271\3047H\271\031N\023:\333\333\267\270\333Q\3128\211\001\2279\236\226\220\270\006\324S\272-fI\271~!\216\272\222T\233:=s.\271\222|\024\272ki\2519r\206\':\366\305*:\231\313\2138\312c\345\270{\251\205\271U08\271\307x\355\270\007\214[9\225\270p\271\341\006;:\276\247\027\271\242\257\3709\221\337g:dQ\2348Xh\025\273\240a\2049my\354\270\324\3009\272D\242\276:\312\000\0038\tF\275\271\277\254\230\271\355\035*:\3679E\272?\261\264\271X[\3429Fu\2458Y\227\215\272\264\035\255:!\330\3069\003\305\377\271q*\030\272\177}A\272\017X\r\272\312\222\3719e\203k:\302\r\'9\317@\004\271\324\004\032\272o<\036\271eX\226\272y\th\272r\242.9\357FU93\177/:\341\347\2308\354ed:\004\364\2379\225\375u\272\360D\3429\026Z6:3w;\271\227\"]:h\251\026:b\0201:+\337\373\271\230\305\3618\363\262\203\271\231\346\2729\033\231\":\244O\"9l\265N8\035\020+:U\307\212\271\251\375W\271b\350\3769\311\345\277\270da\231\272\360\224\t:t\035(:\376\372\032\272xGN9\217\275\254\272!Xw9\266\366\3107\304H\':r\321`:&\360\244:E\201b\272Y\346\207\271Cy\013:\222%+\271\216\260\333\271\370-\346\2710>\2049\236&\356\271\344]\244\272\261L\3268Y\212\2738\305\372$\272\227 \3609\300T\271\272b\313%:\273\224^:N\016\2139]\307\021\271\212\205\304\272\324\306\344\271\244:\2259\017\274_\272~b\010\272M\373\213\272\362\302\203\270\326\245\3059n/\n:\210\357\2229\375W\3468v\022\213\271\234\360;9\006VU\272m\264`:<\020\2626\001*T\272\351\221\211\272\376\264\203:\3334\252\272TF8\2720[\203\271n\356\231:\037\225G\272\3353\203:Y\206O9\334\324\210:\314r@:\271Ek\271\255\250\027:\245S\t\271\364\211X9\030\277\2359,\244\027:\257e\034:\023M\213\271\021q\237\2710\375\231\270;\241\244\271d\004\3619\204\214\347\267\252:\277:8{\271\271\361w\3609\332\315Z\272#S(9\306\232\235\272\335\203\035:\333\234\3349\355\253\255\270\211!o\272\347\254(\270%{\306\271\036?\2119\225:Y:\231\205Z:Blc\271\027z\3209\200n\2727\242\356\336\270\335t\013\271\371\237<:z\265h9\270\177\2769>\025;\267)>\36088,+:\000\362\357\267\331R39d\243\014\272\217\3719:l\017J9\370\014\344\271\335\252\036\2715\265S:3K\3609\235\007\237\2679\331(6U\326C\272c\233\211\272|k\2779\257\3640:\227\364{\2722\242\344\271\356\034\320:p]d:bq\336:l\024\3619]&\261\266\013\240\2278=\030F\270\210(\325\270\010\224\330\271\315\246\034:_\244j\272\232[6\271G\230I7\354\302\032\271!s\317\271\213o\235:I\301\200\271@\323Y\272\321\331M\271\374\242\245:r\244z\272\226\276\307\272\214\222\022\271\322O\3335Zy\211\272zFi9\306\204\3408><\370\266+\305p\271m\370\232\271W\321\372\271b\345\3029\273\304R\272Aw!\272\034\035\2129y\230\2609p\373-\270\266\031\330\270\231\206\0069\324*\032\271\033\357#:\225\365\3458HyR:\'\245\":o\262\2479\273G\2239\366\365\310\272\0104\201\272;\207o9-L\032\272\366\037`\271\343x\002\270\222\204\2349\271\361\3279\206\\\321\272i\341\2439\r\027\006\267\276\273\3528\023$?\2718L\266\271\303#\304\271X?i\272\231\237\245\270\266r-:\231\202U\272\365pv\2713\246\204:\035\236o\271\2514\202\272\331\006\177\271\030=\211\270\354\202\3359\245\371j97%\023\271oX\'\272\223=\304\271\316\236\032\272\235\331\257\272\013x$\272\247T(9b\260[9\335\0101\272\305\253\271\271\234\3005:\365P\367\271\257\353Z9\302\327\212\271\356`\203:t\355#9\025\025\2649E\003\2209l0\337\271\021?\261\267\322\377q:\374\326{\272Z\010::\223Q\265:\233\003e\272c\tn\270\372\251\3259\376M\230\272\344\355\3508\033\016j\271\214C^:L\303\002\272<\266):Bq\024:\202\311\224\272v%\007:\275zF\271\210\222\234\272\213Q\2109 cA9dy`\272#\233\303\271\004\017\3259\036\277\336\271\000\360\301:\261\250\237\267\310\\\323:\366Y\3179B\375\252\270\350C\000:\325\035D:\214\306+\270\234\326\022\272\301\210\023\271]\302_9\330\300J:\361\260\242\271\343Bm:\237\014O:\2546\016:6\343\2159!8\3769\245\366$:\314-,:E\256\'\272r\017S8U\260\003:H\256\2607\305\266\241: b\375\270[\305G\272\365o\357\271|k\2729\254\355\2259%\361,9.\033\205:\365\305\2709`]\026\267\3356\200:\177\235j:\204^f\271|\375J\272\211\323\233\272\340HQ\272\272\374\2769\272\273|\270\273b\3519\204\262\013\272$\236\311\271\3457\343\271\246\252\'\272\336\262f9\310\263\010:w\0269:\311\215\340\271\020\262\224\272\032_\3227\311\327C\272T\326\2729\357\366\2239\345\211\216:\006\037\204: \261\306\271\234p\2629\005\272?\272\352\014\022\272_)\206\271\266\3518:\315\022\355\270gX[:YY\002:p,\3239\030\021\365\270d\242\221\271{k\035\271\r\005\307\272\n\232\332\270\025\257?\271\216i\2116aX\225:\312\273\016\271\024\253Y:\207~$:\2013]\271\305\353\303\271F\311!\272\353@\221\271\376\000\3778k\344\266\272@gR9\354\024\020:\300\300\276\272J\311@\272\226\034\2349\253\203\234\272\177\tr\272\005\034$:\231ex\270\277\221\\:\265\273X\272{\014\36491(\206:\210\212\242:=\024\322\2719\246\002:/q\341\270(w\\\272=1R\270W=\262\271\010@\036\270\256{\017\272;\230\220:f\334\324\271\231\246\301\271Y\023&\272\220\217\2237\300\3718\272\264$\236\271\025\276/9\'\251^\270\336\206\2709ql\0179\325;\3279\n\265)\271\330*w\271\326\241\2329l\033\2439\314p;\272sup97\333\3358}\327\244\272\\!\220\270\227\031\027\272\'(F\2710\246\241\272\2410\001\270\345\346\0058\225!8\271\373(\300\271F\335\3349\345^B:\375\276\3307\n\215Z\271\206\322\301\270|\030,\272!t~\272\317,\317\272\224\344\034\272\311\237\3539\3419\303\272\210Ka:\027>\031\272S\314\005:\2274,8\351\211$9\343k\007\272\361\247\n:\376&\351\271%\034q9R\243\220\271@\342\3609\242\322\010:j\013X\272xBk\272\322\361\0218K+\210:B\243\3339\200\346\3259\267\204\332\270\324\240\t\271\236a\241\271;O.\272 \037:\272\254\360\2119\215\265\211\272\251\313!\272\000\253\033:$\316\264\271\243\001\260\272\016c4:^k\252:[\314x\271>\272\210\272\365\306F9_\247|9\021\311\205\272*.\020\272\243!x\2701\273m\272\260\351\003\271U\240\341:k\037\016:pht9Z\325Q9lM\207\271\031\3312:sm\2729U\265\014:\337\337\227\272x\275I\272\0056\016\271\3359j:\304\224 :\362\311\034:\2567\210\272\240\014\246\272M\264\2119\2043<9\020N\220\271\204\003%\271 \272\2379I\3640:\021c\0169\306h\31193\371\2669\265\3474\272|\246u\271\340x\2758\205i\3079h\t\2639\337WE\271\203\016\021\272\207\355G\272I\265\245\272\214\311\237:n\220\024\272\361]\250\270\237HT\271j\242n:\377\276g9_w\3339\210\262W6(\003\2449~\t\237\272u?\r\272\346\023\2149\212\2076\271\355\313\215\272\271\2124:.\321<:\243\367\3079\377\332\271\271\375\346::\333\322\210:t\177\010:\267\375\3536GX\3438\202\202\230\272\025\010\271\272\\\026(\272\371\345\021:e/-:\271\342Q\271\222\332\027:\033G\256\271\214*\025:\000\234\3169\274e\217\272R\351\3019\240%`8\335\034I6\347\221\0249\362*\261\271\\W\221:\307\r\2728\260b\217\272&\342\027\270\314\0036:<\007F:\025C\2309F\321\231\272+_\203:\224`o:f\003\215\271\371\252\316\271\336\371\032\272\335y\005:\003\244\200:\010\363*95\\\2039}\233\310\271d7P:\371\265\2079\217\374\203:K{a\272\027\205|\272\352%{9\221Np9\204.\22698\363\310\272\303p;:T\315\017:D4t\271\377\336U\271\204\\1\2717\341\004:hH\2078\023\325\3249\364\267\246\270\340\226\3159E\372^\272\332@\3519\334Y):\346C\030\272.}\3258\365\321\355\271\331Qp9\236p/8\233\371G8@\030[\272/\006\2408\0357\037\272\361\035\r9\345\213s\271\005\335;\271 l\231\271,\017\305:b(u7t\203\211\271\357/\365\270\270,\017\272\017\250\004\272\353\0134\272\233\225\2729Z\342\371\271\351\r\362\271\207Yk8A\021C\272\021\3157\272\212\342M\270\217\357s\271\001\335\027:V\211\016:zq^\272\025\210=9\366%k\2671\021\3529\007\320\2539rx\030:\017\222\037\272\365\230\002\272\302\016\032:\270\260\0209r\307#\271\347?S9\212\006\26496t\3338\252)\2227=pm\271\'\360\222\271\037;\232:+\no\270\365d\347\271\313\342\263\272\375\324u:2*\3138\224S\304\271\231j\03597_\301:UIy\272\362~\221\272C\376\200\272\324\316\264\272q\235\232\272r\2421\272\017;M\272\373#D:\321m\277\270]:\215\271k\t\023:BV7:<8\3038\264\273\267\270\362N\217:|\260W:\2161\364\270\337\267\3009\213\032\326:\223\367\0309*\353\310\271\010\36148T\252\3479\250YY:\370\344\276\271\304\023\3379\034W\2618\017i\21485\326\n\272\034\005f:W\252\032\272\235v=:\262\203\3748`\354B:\022\215B\270m\2421:\373$p9\365\035{\271\350\217\2169xS\2769_\014\320\271^4\n\272\230\'):N\326.9\035\004 \272H\017M9\224`\203\271g\033\0029\027\001\225:\2457X\271q\020\2669\252\202\2169=]N\272\363&\317\271\225^\233\271\367D\2749\255\211&\272\036\301\003:\234\304\2329ZY\010:Ua?\272\305>\232\271\276X%:\210\341\310\271\345\000H\272K\205\211\272a\205\n:\237\002\013:a\252w\272\351\017\016:\022\327\233\271\377f\225\271\277&P:\000\351\3209\354\301\270\270\037\204\232\270w\262z\272,\02369\033\021\0179\372\244\014\271\354;\023\271\317-\005\272QS\354\270(+u:\223X\'\272a\271=\270\256\373::\373\314s8\365\3011\272i\330e\2718\331D:\225\026\2768|K\372\270\177\364{\271\263\266\3179H\270\3369\3730\2169\235\271\205:\3750\035:\336\2153\2710*\215\271\251~\021\272\221l 9\231\344\023\271\217Z\241:l\354\251\271}\213Z9}\337g\271\035\247R:\241b\3338$\267\2209L]k9DEU\272\301\t\26691\n\251\267aQ\324:\254\247\302:!\224\0348\257a\0169\005\336\027\271\302\243\261:^\333z8\277E/9\251\361\020\272\037\364\320\267\313>/\267\320U\21290\013\222\272W2r:%\225\256\271\377E*9\264<[\272\300\316\3729V{k:\323\323>\272\347K\35396\330\2629Avm\272\004\000\2669\206\314p\271\216[\0069\367<+\272-)\323\272\007O\226\2729\301a:\303Mp\272\3641\226:\002\266\0339\205\214\21795\247\222\271\340\023`\272\215\366\0139\014|\027\271p\312\255:\344I\257\270\241\354L\271\023\031\0229\231+D\272S|\213\272\236\303\032:\340E?:\262}\000\267>H\003:\354FJ\272w\360\311\266,\225!9\210\203a\271,\374`\271\334\345?8,u~9g\207.:\031\224\364\271\365\375\2439i\020\007\271\177\024~:\347^c\271!\343\222\272\233]\275\272%\324\272:XN[9\314\311\226\272\004|\2609\033\003\262\271\223&\010\272W<\3347\277\023w\272q\034\203\272\265\302\006\272\367\376\3229)C\006:\'\367\3519\031~\3048\301\035F\271\353g\200\271 \263A:\037zw\271\374W\361\271\243\'\311\271\350\003\2118\324-\3018\267]\002\271\214\345\261\267u=\2779\314\325\2468G\333\3459;p\006\272\353\331\362\271\277\024\3269\005\346\233:\306\322*:\364\361D9\342I\020\272\007\212\324\271\314u\374\271\375\306\3149l\342\2729\303\315\244\272O\t\3669\277\317e\271\215\'\r:0g\017:P\232<\2723n!:\004\300X\271\336\'\3649\322](\272\346I\037\272\010l\275:\304\254\177:\022Q\036\270*c\3709\350,-:I\341\237:w}f\272\004\037q:\0025\2369)(\261\271\3711\277\271B\215\3329\326\310\2519\211\3004:w}\"9\n\366\217:\362Z\210\271\364\246\247\271\020\213\034:\376\323\240\271g\205\265:\027V\304\271\3268\332\271\231\314j9\241\203\2439\235\010o94n\3739\'\337\2029\374\335q:\332;0:~\331\224\267\215\n\025:~G\273\271\014&\3228\340\257\272\271\313\206b9\017Q\2459.B\226\272\351\354\227\272M{\303\270\227Z%\272[\345\224\272\335FX\271c3-9:\222\2629\223H\305\265Rb\020\272b\300\r:s\2236\270\200\205\210:\"j\037:E\232s\272=YD:\006\310\2039\343\224-\2713\273U\271Am>:\026\355\026\271\324\nv9$\004s8.\361g\272\250\375R\272vi\035\273\225\320\340\271Q\314\2109\375\013\274\270\303~\247\270w\355\240\271\251\220\301\271\314\035\376\271\216;\004\272dqz:\342\023\237\271\251\020\024\272O\332\367\271\301&f\272\2512P8\363\200W\271hvp\272\217Z\253\271\254\337\305:\201\314Q\271\340.\353\271\375\257\r\272!h\334\271dq\002:\233A\204\272\333V\321\271y7,\272B\373\2679\t\220\037\272\366,7\272xh\370\270\217\252&:\211l8\272\226\344\357\271\215Np\271\370ry9\303\314x:;\3471:\017\361\262\272\020\214&9\341\r\224:\365\255K9@|\334\272\204\'R80\301L\272\312Xj\271S\314\223\271\330\346\0059\\g0:\017\000\341:\023\266\0139q\022\275\270R\264\3268g\347\2419\261L \272\022\335\3079\310S\003:\357\352\241\271\350\227\0109\201\317\203\270,\006\2139\267\030+\272w\207\026\272\353\320\362\270\013\360\0179,\243\322\270p\323\033\272_\212\3059\326\356\210:\333$1\272\275Kx\272\"-\276\272\026O\237:1\236\013\271U\354\033:\376:f8\211\310\305\267u[\2269\001\007\003\273\367\312\245\272\360\376#:\2376K\272=\036\2228\314!\2439g\236\020:9\265\331\271E\364\223:\344\027\2479#\014u9\215\352\0239\n\240(\272\267\321\2539\367\267\276\271\340\271\231:<T=\271+\224$9\320\032\206\272\177Q\254\267r\343\031:\204\306\334\271\367!\2739I[\321\271\341\277\321\271\030\246\273\270\340\201U:\312b59ee\352\2716\212\330\271\331Q-7\334\227\0309\355#!:\204\271\"\272\006/6\267\256MH\270\256l\2279\363\304\314:\323\350\2159@\355?\272l\350{9\230\r :\0105\350\271\002\n\3408Pv}\271\325\234\222:\243\332\037\272\2707\3349\301\301)\272\335\250\220:\357 \2359\327{\024\271\314\275\3244A>E\271\204\236\3759\343m\026\272V\365\20290u\014:\252\2428\271$nu\271u\30379\016\333s:p\236\014\271{\0254:\2254B\272\372MT:\364\302\026\272\344_\3158i\233\233\270\030\345\205\272`\003\2779A\333b\270\342Z\244\271I\303\260\272\250\\\2568\013\36288g\277\351\270~\272\002\272\350e\2779\342:\2729\265\270\02188t~\272$]\0047\230@\205\272\002%\337\271\265\013\001\2718\263x\271nl\257:/\366\370:\266A :\204\253f\271\341)C:d\024/9-z\2678>RN:\377\314\3359B\220\2069\374l\304\271\2724\3339\246F\271\270\247<\002\2727e\r\272\013\372\2439\322H\276\271\n\326\2349N\244U\272\234\366&9\233\014\2649\343\014B\2726\316\202:\021\33499\236N\243\272\300*\031\271,\021\3028\035>r\271\303\017-:\374\022\2309C\034\300\271\243\037D9\216_\0279\315\200S\270>W\2049\271QC:\367\224\r9XL*7\344\\u\270\026\177\307\271\214\216\034:\336\347\246\272\203\257\202:\005\254\335\271\217\340\004:\366AH:#!\267:jX]9\351\257\2368L\365\3537\014\035\027:_S\3129\371\252\302\271c\376\333\272\260O\000:\004]\321\271\237\345L:t\305-\272t\024x\272\002\312]9\007x\201:\234]b\272\255%\014\272FL\333\270\365\260\2328\177E\212:\352D\251\271E\246\2779\365\265s\271:\032j\272r\274e:\210\262\2428\213\242\034\272\206\030{\270L\t\2158\363\034\3527;\375D\271\305\\\017:\372\340L\271\237az\272\374O\205\270\215!?:\225\363a:\256~\010\272\367`\240\271\022y\3569\273t\205\272\376P\306\271\302\372=\272\217q\247:h{\2349\003Rk\271?;7\271\227\367\0139\215\272\215\270o\355\254\272\275\346\21688\360\2659\226\306C8\272)\343\271N\200\340\2718\tT\272\265\024^:\372\3176\271\327\226\372\2711bD\271\314\266.\272\370\375I\272|V\2669|\345\223:e\021@\271\256\2651:N\304\013\272\313|3\272\035$@9\213g:\272hK\\\272\322\3508:Z\366\022\266\273\204\221\272\325*\214:\013wU\271g,\372\271\024\"o8\243O\276\271\376\027\262\2716Hi:y\310\204:\356\233g9\303\037.:\277b\2209\004\007,8B\"\031:t\021S\272L\002\252:H\235\2369e9t9\252\231\2459\262\353\002:k\350\3769\007\025\0019\321\224\364\271f\262\3079B;\226:Q\303Y\271L\3065\272dh\034:)L\232:\230\201\324\272\334P\3439{\212\\\271\214$\3748\242\003X\271?W\2659\014\314\201\271\031\225O\272\004\013\002\271h\037\202\271\320\211\021\272\353l#:\223\000\200:\355\215_\272\036\343n\271\230\350=:\204[~\271\277?\2178\340\250\2349R4\2279U\317~\271j\303\2769a\250{\271\222\341\246:\022\023\3328\324a\220\272\340\353\257\271\372\002\211\272\203\211\2629)0\330\271\303\377<:\377\226\2338b\335\025\270\177\355\026\272\243\260\216\271\261\024\213\270B\253$9G\300F:\310<\002\272D\272O\271q\271_\272\240\037\273\271\341 \201\272\305\241w:\344\"B\272\t/b\272-52:\314%\002\272\263\333\205\271\250\250m:\215\014U:UIN9\340A\377\271\207\205\210\271J\242Q\272\271\004<:D\202\203\272\025|\242\271\000O\3119\344\337\246:\310%\213\272\356\231>9\274^\235:\310\340\350\270\302\361i:\320\000\213:\371p\253\272\334p\237:0\272\246:\241\333\3449\227\303\220:\214v29\373w\211\272dX#\272\307\017_\272\020\022\r\271\007I\331\270\226\350E\272g2m:\302-\023\272TL\307:\270\211\261\272\330p\007:\271Ng6Z4\006:\206\231`\272e5\315\271\270\221\225:\226\357V\272\331\314U:\242\036\024:\377\203\t\272.\256a:\013\366\332\271\355W\205\272\200`\215\270\n\331\262:\307Cd\272\206\032\312\2714eB9\301\350\t:aHZ\272\327J\207:\017\221\001\272\246?\000\271\342%\n9\225\341@\270GD\02161\233\t:\266\276\347\267\366/\2107\244\316@\271V\364\34497\303\030:\376\263\350\271ka,\272\007\203\261\271\223\3660\271N\260l:\303\347\2338\257\275S:\002\313\254\270\016\322\326\271\363#F\272\367I\255\271\003\357)\272\307?\3559\360\2114\272\251gv:\016\343\023\272\004\360G:\347\257\217\271\331\334&:\276\224\n:\304\233\314\271\357B\014\272kU\235\2700r\230:\003\020\3419\032\027F\271\253V\3039\306\2440\272X\244`\272\350\345\021\271i\036\2337\374\025(\272\231\262\3529uQ_\272\230\266\026\271y\243+\272\223\214;\272\260\013\325\267\035\025s9\250\336\35291\232\t\272\036g\3568\026\217g\272\355\376C\271Q \"\271\312=\205:\275\023\306\271\014#m\272\025M\2269\204U\0209\"ZV\272\230\221\3328\201\036\001\272\350\313+\272\n\255\003\272\333\306\007:\277\202\020\271\325D&:!\005~\271\260\202\366\267\206?(7V\023\253\271\335\312\3409\030\202z\272^E>:\035r\021\272i\260\250\272\247\365\3559\201P\3009\313\250\233\271N!%\271\010k\0247\017\203-\272x\023\327\271S\223\2268\257\376A\272\t?\230\272\272g^:\310\271\3739\032\211\345\271\002 \3649\005~\022\272P\332\210\270z\000O\270\362\374\020:\345\320\3159R\374\021\271\321\220\034\271\030y\230:~\254\020\272\036\273\030\272\r\321\215\270\373P,9\335\004L\271\270?t9\014\246\223\272\\\0147:\331\275=\267\234D\242\271^\2074:r\'\300\271\223\3476\272\374\"u\271o\217j:R\241q:\360q\213\271\314h\3479\240:\0027\372\315\0109F\257\2009\265\031\335\271O?\3238uY\006:\0104\025\2714\26149+\251y\272\276\272\2749\351\342\223:4O\006\272\311%\210\272\362\000l\272.\305:\272-\177C9c\352d\272-9-:\354\205!\272\312G\003:\301`\3078\025C\2129\321p\373\271\232(\230:x\000A\271B\267\213\272P\365s9\344-/\272\023X\3319O\301v\271\363O\323\271\302\221C8\320\344\016\272\021H\335\271\370X\n\271\373IU\272.\303\3027+\201\352\271G\257@9\371\312\026:\014\307\252\271\303.o\272\021D\276\272\257U\343\270w?\005\272\265\256\272\271\266_\273:\000\332\021:\025\363_\272\263\201\023\272\334\224\017:\327:*:~\n&:$\2424:,\263G8\233[\2349B\t\262\270\214\315\3479\014\2617:Z`\004:+\302<93\277\236\271I\032 \272\351\265\346\270\366\232\"\272\376\361\374\271\267?\036\272\266D\266\272\264\277\0109*6\2509\362\tW\272\207\002)\272\217\00148\226\221\3309g\254\2209F\264N9_G\264\2725t*\272\025\316\2419\323\320@\272~\'\235\271\323\023\035\272}\2440:\312e)\272\250H$9\333\371`9j\3553:]i\214:r\263\014:\227p\2359\013\337\2619\271\356\3749\366\037\306\267e\r`\272\223\031;\272\232\275\250\271\3358\336\271\337\010y\272\226\342+:`\346\301\267C\272\366\271\266L\2659\313\347F\272\217<\2129\200\236\3429\240\217\000\272\3200\3168\243g\006\272\000j\260\270\3579e\270\2427+\272\356\370\026\272u\307\254\271\375\214\0379-\312.9\027oK\272\262\300*\271\332\370\0168\316\371\223\272p\342o9\266\365\t:\3754m:\360\242\2258\254\231\35698\276`\271ay\014:\027\240\210:I\273\3069Bz\2449`O\003\271EF\031:\256\256\300:\n\373\3059\200]O\271\330.B\272_\003\026\272\235Q\203\271\253\333\210\271m\343\3477P\352\005:\262\312\n\272HLp9TM/:\235\027\276\271\310\341\2419\276Z\203\272l=\0207B+2:^B`:U\304\201:X\007\234\272h\202g\272\013\216\014\272\233C<:!\032\020:\032\266\202\271n\\\250\272z\235\006\267k\356N\272T\375\2259\356qO:;A\0268!\236%8\005\220z9v\360\253:\210\324\254\271\3450\021\272\377R\2329D\234\324\271\036\323x9\245\003\010\272S\312\271\271\003u\212\267\025\001*\271\217\270\022:(6e\271n\344\3429\272\200\007:\010S\2649\205\016I:\r\320Q8\362|\r\272U\351\2008XJ\2539:\024\340\271b[\306\270\232\002\2628kD\214\272\005\311o9]\330\026\272\202Q\235:\331\320\014\2724)\3638\232\336\037\272\3103.\272\351\223\031\272S\310\30797\327p:\006\334!\272q\356v\271\327J\t\272\277\222(:7\326`\2726\265\244:r~\2369\202\032H9J\225t\272u\360\001:\341\267q:\300\230\234\271\216\020\362\271r\036\215\272\340[b:\203\'\362\271C\365F:\310\273\347\271\303\323\305\271\341.\245\272\273QM:\321\251\244\267\333\365%:\341\356\276\270qd\030:\007>\006\272\257\367I:2R-:\"^\271\267\267\310\356\271R\325\3159\351\2175\271.Jv\270K\370\002:\261\201\3669#\366\267:c\216\021\271\212Jg8E\022\266\267\246y\010\272\204Z\3579\376nL\272\347\177\025\272=\352]:\233]6:\335\261\006\272\324cD:>.\022\27061\223\271\241\246_\271(\027\2108\327Y}\271F\270\3339\311Q\337\271]J!:Y\232\235:\340\275\245:\023}\212:\034\004Z:\004\210f\272\253\005;\271\2044=\272(\367}\271\313\206\246:\032\023\3429\240\013\3169@\2204\270\ti\026:*\274\225\272KZ\215:\017,\2128\224\342\225\270\273\326[\272w\320\3377a\244\345\270.\223\2529\327\317\207:\223\271\331\272\335(\3068\322\350\2479c\363\3427\245\254\364\271\235\261C:\250\244H\271Y\246\200:\232\274\2309C\'\016\273S\357\332\271\315\327\0319\202;\366\271\330\304\271\272O\3307:5\025\3069\356\325\2439\036\340.\272\014\017\3169\030\344\211:\213|d\272!\237@:A\341\222\272\352\317\270\271\373]\376\270p\301\0339\177Y\023:\r\031\330\271\260\300\377\271\377\223<\272\246\031U:A\355\246\2706 \214\272^\343\242:\320\221<\272&\376\370\271\253\203r\272\274\324\3179\251\036\023\271\210\\\014\272\027IB:\250 \212\267q\221 :\025\022\330\271\226\202\330\272R6\n\272;\213\330\2719\275d\272\227\2601\272\275\334M9\324,d9\032\276\3679\021\004\3009\3771\036:5O\023\272|\313?:WN\2057sq/\272\251\000\3218rY\220\271\026\353K\271\250\331\0029&\271\006\272Tg\217:\372r0:\340\376\330\271\372\370\3378o\260\303\272S\213]:\237\227\226\272\006ic9\006\237\"\272\260\307\2549h|\262\271-\036\002\272\243\0242:d\235\3727\316\343\226\271\302\356\"\271\226\'A\272\342\3461\272\036\005<9NT\330\271\320\351!\271,\347\333\267k8\216:\273\356{:\364\277\345\2702\365g\272R)\27090\022\270\271\036\021\244\2721\266\250\271Mp\\:/\013\001:\367`5\272\353\331>9\342i\253\271\354k\21486\370!7\343\376\3018\025\275\263:\271v\032\272\342\010\005\271\256\376\361\271L\301\"6\237_l\271\333\252\013:\031\327R:\242\253\255\271\217A\3708\245h~9$t\2518\304gB\272e\2056\271q\276\3348)\301\375\271$=\"8\207\362\322\271^\335\001\272\310\3163:\2519R:\n\353\"\272\253|\2458\244\372\t:\256V\244\272D-G9\321\317\221:\326\002/\272^s\n\272\226>2\270DOb\270\205\n\344\271\303\263\216:\362\265\253:\360\320\211\270\320iC9\301}\"\272\027Q\241\272\346\346\345\271|\006F:\002h\363\267\340z\3109\233\217\035\271\022t\272\271\215\023\332\271\350\371F\271N*\200\2728.p\272\356)l\266\262x\3539\234?\3169k#\014\270;\320!98\007h8In\2579!\243\313\267D8\2129\377\324\304:\272j~9s\262\':#\325\257\271E\255e:\234\03279\232\241J:\035\262\330\271\225\371p\272\0035\2108Q\335F\272i$e\272-\233A:2\"39\347a\227:\346\207\374\271\004\177\230\271J\233\3249\014\203P\272\355Y+\271\225\367k\272\270\021\314\271=\364a\267B\201\303\272\210\331\003\270\265H\201:\322W\226\272Nc:9\373&\030\272\032\323)\271\310;\203\271\366\03449\373\223\3779/\037\034\272%O\202:\253\034V\272W\035\014\271p5\261\272)\217\2009Q6z:\340\334Q9\037\355G\271E\037\310\271\233L\220:-\356\2269\026\351=\272xaT\271\226\221\037:+a\2269\244\211\333:\356\032\202:b`\3779\227\274\2538QP0\271\262{\3759o\342\246\2707\025x\272\275\202G:\326\027\315\271V)\303\271\346\234|:\nC\25094\245\005:\232\224\3149\tu\025\272\2656>\272\341\273W:\305K\021:9\247\031:\233q0:8\2728:-C\204\271\244=\004:\002\020\350\271/\014\034\272(\234\2019B\020\3549^\005\370\267\0213\2219\006\337M:\363(~\271G##\272\266\037W\272n\267\212\272<\241\034\271\230\333\217\272\315\235\2359\003\201\3649\225\257%\272\250\337\2409,a2\272\275\036\264\271\361X\031\270\322\032u:\020\22509\035\204\324\271b\340\305\271\264t\0209\235\367\351\270\335y\224\272$\022p\272+RX9\003\320\3559\271\341\000\271\354\217\250\270\227u\342\271\242h\n:\010\302\3069m\241\016::\r.:\230\207\276\271\210\252\225\2720\311\263\266\203\2705:$\211;\2728\373\212\270\275G\260\271\310|!\272\356M\270:\242\375\211\272\351\324\2039\373M\003\272Q.\215\2720\361F8\226L@:J\2138\272E\332\0279\223p\223:)\000\215\271#\321\270\272u\257\2228\3109Q\271.\341\"\272Y>[\272W2\2307-d.\272\344Pk9\036\007\2459;\035\014\271\302\245\235\272\277Q&:\221\002H:\'\346$9\030h_\272sR\2035\216D\215\271\306\3134\270\245?\206:;\036\245\272\2362\0369@\003\2019\334\2272:\244\310\0149\351!>\272Z\262;\272\263\027\235\271\2678\215\272mD\235\271\232J\2119\025|\265\271\331\"\034\272\377\225\3258z\364\2449w_\2458:\205\254\271P\230\214:\016\023\016\272\216\224\024\270\233x\026:\2546\307\271^\001\3549\235\020\035:W1 :\367@\3319,\332\334\271=\377Z9\221^#\272l\353\2069\335T<9L\n\226\2707\366\353\271\236\027\"\266(\025\3059\034\224\240\272r\206\343\271\037\333\310\270\340\252\217\272\310h\205\271Gd\240\272\324\307\271\272\345\333S7T\021\007\271\237K69\355o\017:\355\374;:Sd\21290(g\272h\350R:\303\204s\272\374\324f\271\265n\3158\207M8:3\312\014\271\021`/\272\013\025\004\272\353\310\220\272\365\204\3449\337\330b:\"\375^:F\336\0209\254\310\030\271\317Lk:c\300\'7\260\000k\272\316\017\276\271\006u\207\271\333r8\272p>[:\205\203\250\270}\213\006\272x\024x:\344\215\271\271\271\001\361\270\274\350\2609\377\223 \267\360n\2249\367\232\020:\325Yv:2--\272\365\374\014\272u\310\036\272\2746;\271Ip\215\272]\271\2249\234\310!\271{Ok:;\251\215\271)\302(9\231-\2659\350\3432:\373\267\2049\233h\3279\310\030\0029=\304\364\271\326,s\272\024\216|9pV\2209E\235.\272\007\373\2279\"oQ\272\007\020\005\271\2174\252\272X\332\036\270\3151%\272\"\204R9F\300\237\267\251`\006\271\224\000C\272\257\336a\272\267\222\322\271\236\340\027\273..\010\271\364a,:2@s:gr\2729\247da\271k$\2369\340\360\235\267\331\231E:\361\341\305\271\301\205\022\270\253%;:\376\373\031:\036\000b\270\366\244\241\270\274\312\2669\014\272\026\272\315\302\031\272z\346a\272/e\3039\324\223\2359\204;D\272\271\213t9\022\265\0168\355\337Q:KB\237\271\251\3375\272\035\230\0059\322\020Q\271\336\353\0029\331\201N\271\371\021{\271\014\031%\272c\272\2049\335\367\0309\202R79\254\027(:\374V\000\272@H\203\272\245\374\2329\346-D:\321B\207:\027e\010:\335\355\2548\032\\\323:c\376\252:+\253\305\270\r\213\021\272\034\346\0228\025\\\374\271\005b\346\270\347\310\0249O\235\237:\275;<\271\021-B\272s\222m9:L-\272\366\353H7\325\234\260\271\177C\023\272\256\017X9\300\301\262\272\374\021/\270\220\033\266\271e\314\2039\250\226\270\270\221\021\3279i\347\2139\264\327\200:\273R\314\271\261\322\262\272\263\245O9\t\324\317\2715\243D\271\035\236\275\272\307w\205\272D\226\303\272I\306\236\271]\035\3348DT\272\271\017\222\033:[\2168\272\320\324\330\271\343\313\350\271\241\351\2459\026\206\3159\010\317z:Iy7\272No\0219\024>\320:u\236\2379\202\2052\270\256Gd:\251\265\2466n\022\351\272I\316?:[\'\016\272fR\362\271\267\351\222\272\216y\3749\267\210\320\271\376\237w\270t\233\246\267L\357\3407\333\021\3607\320\245\277\271Is\217\272\1772\345\270\221\316\261\271\034\216u\271\356K\207:$9\254\271\010\317\321\271{\306.7\230\345\264\271\037B\223\271\377\360\2569\025\325v9\371g\037\272L\216\220:\351\251 \272\021\352\"\271\3519q\270\\\260\256\272U\"\3079\024\353\3579s\330\235\272J\333\037\271Y\301\250\270\254\345\2749d\304\230\271\261,y\272\272M\2529Mq\205\272m\021`\270\206\004R\272\347\244K9`=\250\271\253\337\2019K\n\025\272\257\266b9`D\3508#s\201\272\244\216\345\267\305\005}\272\234\344\3569\257\316\3439U\'J7=\260\2369R\333\2079\304\331\2449m\'`\271=J\314\270\374\025\2759\334+\374\272\366\372Y\272XD\0068F\337>\272\365\000\341\270+q9\272\252\221\3129\2072\263\272H*\275\2714wH\271+\n\2339&;\035\272:B\3139\030\207\367\271L\032\001\272x\007y\272t\377k:\0066\2538\277@\336\271+w\2279\021sV\272\031K\374\271$\266t\272b\035\273\270\215s\006\272\364\035\2749\247\375\2138\031\217\2719cmP9\343\000\017\266UWD:\2036\030\272\255\213\002\272\364\367\314\271Y\330\204:\360~\010\272\260\000\001:\261z\333\270\231\255\2439\207\003\205:|\227\261\271#\243\347\271\256\t2\2728Z\267\272\337\302H\271\301{J\270WN\033:\256\205\006\272\251\273\214:\037\363\\:\356\013\347\271\253\335Z\271\376p?:\313\367/:\273\371n7\361\223\2479\266#\003\272?\r\037\272\241\255:\271Xt\016\272\353\202.\272C\233\027\272\246\23139\231\327A\272\375I19\275R\\\271\230\25209\3469\3159\335\'\3379\304N\357\271\276\260@9\206\032@\272\t\371\345\271\006,\034:V\031\210\272j\207\200:\2327\344\271\0032!\271d\027\2429\336V\0049\331\337,7N#N97\302\315\271\303cR9N\212\n\272\251\316\311\270\216S\3639\313RL\272\325\354\2339C[\2708\245d\361\270\361\201\207:\324\030\3439 \256\t:\341\213\253\271\374\000=\271\026\0059\270\235q\2629x\275r:p\023Z\272f\220\203\270\246\207v\272\366\306\3047r\010y\272\030\36559\325O\332:\020Yw\272f\231$:\244\200\224\272\235\3249\270\243{\2359 \261\"\272\260\277S:\356\241X\272Fy\216:\311Z\303\270\327^=:\331\303e:R1h\272\"\221\3238mM\3159\272g6\272\363X<:my\355\271\365{\0369L=\210:I\000O:8\237\377\271\352\361\016:\026\256 \272\212r\227\271\226\350\301\271\037!/\271\362\256I\271ot\177\2713\311\032\271\326\353`:\007\254\230\272\201\334\3259\301\242_\271\n\332\374\27194\300\272m\177\2309\347?\213\272\327\276\2239\231wV\271z\337r\271\274C\300:\267.\376\271]q\236\272\273>z:C\200\021\272\023\3135\272\310V\007\271QtG\2719\030\347:@F\020:=(k:f\304g:\004~\270\272\370\017Q5\263\316\3759\200\204)9\235Q\224\272\325e\220:b\'\366\270x]\342\270\"\203\t\272\206\004\267\270h]\033:\346\'8\272\3707\266:{\235\2019\271#3:=]7\272\307\003p9,P\t\272j\010\243:\034\3030\267z\025\3409)l\3259B%\010:\311\375\215\270\244\233=966\2639:\330\353\267\360\261H\2718\300X:\350p\204\272\034\217\3239&\316j\272\265k\206:\023\342\245\272M\2327:\365Bv\272s\n\177:\003o)\272\213\310\2559\3655\23599\357\003\271\317\230\206\271\235\326\2309\220Y :\257$t:\023\005\2349^1\210:\256\204M\270\303\027\203\271U\344]:`$[\271\377\225\030\272\215\326h9D\326O\271\216\362\353\271\211\350\2029\223!h9\305NL:\357\017\232\272\36012\272\327\037\2119(c\3009U(:8\233\226*8\037s$9qU\225\271\365U\026::\267\260\271-\272g\272t~r9H\305\2719\332\312*8\354\341\2239\0272j8\256\037\004:v\202\2649\300G\014\272\232\222\3309Z\303\204\271\225*\t\272\"\274\0368t\016\300\271\373\350\2758\010F/\272@\"\277\272C_\230\272\252d\331\272\245\260\2468\233\214\251:\314h\3449\240\361\233\272Jx0:\265\314?\272\006m\3758Q\376\2118\310jH:\233\320\206\271\264\366\301\271j\0218\2727\326U\272Z[t\2711\225\335\271\221\330\023\272\205\230\034\272X\242\301:\354c0\271\304\022%:\364\230Z6\333\204\234:\317\244\':\335\203=:\336f:\270W|8\272.\200y\272\261\325\253\272U\204\\\271\347\264G\272\215\007\216:.P\3779,%\036\272X\220\3049\213\361\0339\262\225\3029\302\214\3319\264\210~:j\330:\272\344y`9\032\345\3719\037\301J:-\0019\270\341\321u\272(\234\256\2717\200K\272\003t\3109\206\331S\270\016\327\3617It\2249\313\342`\271]\016t\271\024\2175\272\004\301\257:\003Yr:\370Rr8\033\232\3248[i\0068\220y\3149F\2649:MR\210\271\031\031\0379\225\334\031:\261\006\215\272\212,\2159\034\013-:\326\27669\250\370):\376\361\001:`\372\2629\373\262\201:\312\204b:\257r\024:\255\007*:!\231\253\272?\267T\271\220\006\031\271b\202h9\350\371\213\272x\303\\\272\313Md9-\372^\272\027\240D7/\270^9zG\262\271\225\001#\272o\001\3009:v\2239X\337=\272(\226\344\271\372K\013\271Z\374\2148\200Wy:\316i\211\271\013\251^\271<\016#\272\262\251\211\267a\007\272\2711/\235:\246\323\0359>\351\237\272\250GS\272o\371\352\271\356\032\033\271\361FR:\\\267\330:o\230Y\272\007\177%:\205\276<\272\231\205\353\271\352\256\026:\207[f\272\016\347\3739R\2349\272\035\327\0309\362H\037\272\333\375\334\271\210\305\2048eDK\271Nn3\272\253E\303\271\227\256\341\271\373\204j9UR\314\271\273~k:\0015n\270\236\013\":\345\277\\9\276n\2719)\3071\271Yd\203:\2162\2129y\223\374:8\214\022\272Sv\032\272\344\342\272\271^\006\205:\210\257J:\340\023U8SS\237:=_1\272i\367\004\272N\314\2339c\017z7e\243#\271\250\366$:\364`\3009\021a\323\271qhp9\306\035\2729\301\252\2219w\204\031:O)\267:\365\333\003\271)f\276\271\340)\037\272MaU:Q\354\'8XU\0279\215/\030:\251\003\244:\'\311X\272\271N7\272z\024\223\270\352[\001\272&\342\013\2723\276b:z\370b:m34\271\030\255\253:x\021I\271\311\371\3369\316\256\2729\245E\314\272+7\005\272Ev\033\272G\203]:\363\267\2519\025u\203\272\232\255>\271:Fq\272p\327\316\271\303\013\20290\006\2268\"\241C\272}Y\326\271\354\216\005\272_b\323\271:\271\252\271W\356\201\272\321\343\250\266H\216\0358W\023\217:\364,\276\270\177J\231\271D\030\334\271\314\010\2219)\346D\272\016Ui8\237A\26491>y:k\227j:\256?\036:^\225\3509v\240A6\331-C9\337,\201:\332v\006:\246\222\353\272\216\0368\270\301\355\337\2719\334\3629\256\350\3169`\356\216\272K\002\301\267<\244\212\271\257\302^:\276\311\337\271\206W^\272\035:5\272\326k\2369\022\364\3138\275\222\354\270\264\031i:j+:\270L\3203:\373b\3209\362\306\226:\310zP\270\335\034\0278Lh\3538\215\354/\271c\267\2768\203~,\2727\306\3539\233\277\023::X\240\2715h\352\271K\234\020:y*e8qS;\270\330\273\3608\232\347\253:b\212\013\272\273\375F9\367\254\0358\357\377\343\271L!/\272\363/N\272\314\324r\272\025*\223\272\\\256b\272\342G\005\267p\257\217:Q\235 :\220\347\017:B\365Q9\340B\302:7t%8=|g\271\2323\0069\306\21328\236\337\032\272\204\375\3057\201R[\272a\211\017:\365\032\371\271\322\273m9\356B\336\271\240D\266\272w\213\363\270\335\203#:\266\2647:\304\360 \272\205\'\21678\3367\272\016M\204\2713*I:3\234Q\271R\377\000:dSb8r\276\215:t*\2249g\222\3219\253\204\217\2728\2627\271:\034\253\272\244\343\177:aK\004:\245\254\0029\3203\3029\2438\3649\236D{:\240\353\2569a\317\270\272\204\032\005:/e\3577|\004\265:\327\242\3529\275%\204\272\325\017\231:2\365\313\271\345?\3758\222\272\t\272\211h\373\271/\354\273\271f]\033\272v\247P9\220\314J:\000^\220\271\201\365/:\036Jh\270\232J/9}\n\t\271KM\0209sc\310\270?=?\271\337\343\2229t\234!\272\026*\007\272\241\rJ\272\311\223\222\271\3501\276\272`\233\004\272\353\245\255\271\235F\3539ahZ:\024\2027:]M\3219nY\021\271\327\021\005:3\357)9\004\357\3329\260\306\034:M\227[9\237R\001:\022q\230\271H\010\2349>\223,:a!>\272\334wg\271\253V;\272\322\367\364:|\254\001\267\366\221\350\270\026\240\2309\250[\236\271e+\206\272\200^\225:\356\'\3049\325\002\206:a\331=:N\214a:\314\340p:B\300\000\272x\333\3379\261\023\210\271\236\002f9\327\030\220:\220\231E:\364\312\005:\306\224U\271i\257\336\271\207\345(9\235I\030\272\214\305\001:\354KV:q\310j\272Z\202\3269\245\3017:g2a\271\014\255\'\272\376k\3159\tk5\271\347A^\272\036P\013\271\\\335\325\270\305\222\271\272b\337\225\271\2256\202:\335\347\004\271J\251\221\270\273\316\2548G\314\323\271\357\032\014\271\252\271\033\272\356&\002\272Z\211T\271\351\210\035:\030\035\255\271\323\006\3329}r\241\271s\264N:e?\305\271\374&T\272\024\273\211:7\272\021\272\3328\"\271,\251^\272<F\030\272\247\260\264\271{m\200\271{\000|\272a\\\220\272\247y\222\271\027\017i:D\373I\272U\351y:\003\333\240:)\376\275:\214\225$:v\007\267\271\332\221=8\371\335B:\222\303]:\013\0304\271\340K\t;\341\371&\272\030\020\224\272\342\\\225\271\374\356\033:]^\270\270\300z\2579*\"\3238\202iD8\372\250B\272\356\304\316\271\275\215\0049\321M\2728\346\033\3259\266\207\334\270\232\221h\271Vn\2039\242\247\305\272\346\021U:\372S\363\271\376\300\230\270\234\311q\271\256\375\017\271\377\267\023\271zY]\272;\330\227\2709\000|:Y\312m\270\373\254\022\272\023P\3009a\360P\272\2653\353\271\360\3374:E\355B:\t\222\337\270I3\033\272\216Z\35094\351\320\270$YM\270>\305\315\266Wr\005\272\210\3567\271\371U\331\271\375vc9\247\362T7\032vO:v\223\016\270\263\317^9\321\034|\271\251;\3119V\027\013\270#\254\3729\310\376\034\272+\374w\271\005Sk:\313\324\2279\245\203\2718\013\226\2679\014O\215\271\200y\3639\034\362\361:\000\\\2739\374\2665\272\255o\004\270\344$\3417\265\247\2319$\343x:&.Z\272\n3\3739&\337\373\271\270\036\300\271#\031\232\272@.\200\272\n\324\n:\310C\206\272M\210\325\271q\263:\270\213\000\2708\372\007+:b\301l:\356\203\217\271\322m\356\270\204g\024:&d\211\272\321\250\n\272\355S\2309\\C\256:l\330\035:k\207\3748f\305>:\220\276i\272\340\324{9\006\026+:jg\244\271\014D\3349G\351%:\353\226\000\272\213V\3629\335PY\271\364\312f\272\215\240\212\271o.\236\270i\377\244\271\000\230+:\232u\2419\356[\0268\272\277\035\272\314\021>:w\020&\271\257\300\216\271\217\354\2168$>r9\261x\177:;?\":\007;\326\271\2445\220\272!\t\017\272>\022\357\271\344w9\272\032}V\272\341\321\033:\267\313\003\272\263m\3108Y\000\2319F\316\2129]\251\021:\013\3657\272*\344>\272n\177e\267\312\n\322\271~\367@:)\013\025\272\226\331b90\251o9\331b\320\271\021\266\0009\344I\005:\016D\232\271\204,\002:;r>\271g\021P\271\023\025\254\271\000\212u\272\206\000\347\271>\333*\270v\027\3139\356S\250\272\3163A9\346\020\257\270(\370\214\272e\204\222\272\264\n\254:]3\2108\033\225\002\272\244Y\031\271\323p\035:j+\3579\251/\21497\206\223\271w\265W\2708\223\352\271v\2224:\r;\276\266[\334\261\267t\357\0269\347\235\024:\335\210\275\271\317\032x\271\027\351\3738aK\2159\257VB\272x\340=\272\005\373\236\270\375\004\261\271\205[\022\272]\255\337\271/\266\363\2704\026s\270Z\257\014:\376\350\374\270\t\274\203\272\356\342\312\2718\232\017:}\370\223:\367\301L\2718\206\2169\304\351m\272\373\017\320\272\021J\024:\323~=\2718\276\007\272\227i\004\267p&(:/^\330\272\212\242>\2726\233,:Ko\213\271\277\020\342\267\277]w9\273\322l\272N@\251\271\r:\204\272\217z>8\010y/:>\373\037\270B\304\210\271\020\201\216\271h\306\232\270\262^\2419\257\016\243\270y\231-\272\211\3507\271iB\304\271\272\221x\270\227IH\272\341n\\9q\32248a\027\256:\374\351\224:\310R\025\272\222\t\207\272).\2049J\350H8\356\322c:\275\333\3069\274:0:\224|m:\211\020\037\271*\230\005\271\227\010\244\271\372\377\367\271=\036\026\2724\214K8y\r\213\272R\000\270\271\0066\251\266=\3566\271_=\301\272w3y\264\250^n\272\034\232t\271W\333\27797\252T\271\276\017\347\271\003\313\272\271\372v\206\2719\337\3179\331\233\303\270\005z4\272\030\337B8\206U\273\271\223\t?:\251\010\261\272@\306\3529\024Y?:~\007\010:Jk[:\200\340\367\271=\244e\271\263\307\242:\341n&\272\272r\313\271\345\\L\272RJB:\362\nT\272!A\223\267\0047\2029\"\254\036:+=\2078\3440\010\272\316\266\243\272[4|\271B\363\344\270E\00769:\034o9\363\033\367\271\357\237\364\270\211\277\361\271.\201t:M<\2459\225\322\211\272\377\007\024\272;_\307\267\361\333\2327(\023@\270{\243\374\271\0343\213\272\356\216\2239\352\025\261\271i3O\272=\2153\270\363\362\272\271\320\360\001:6k-\272\317\342\324\272\266\300\252\271(\366\2579\343\001\020\272\000\230}\270{\207\026\272\305\366n\2725PS\272\250L\016:\325\022\23298\310=9\334!\217\271\006\233\2139\227\344W:\201)\026\272\246f18@:\017:\023+\0029\357\001-:|\024 :A\371-\272\023\026\314\270U\203Q:\251\253Q8$^\355\270\300\270\210\271\307\212\214\271\273\207/\272\2013\0149\353#\224\272.\3550:\27603\272\000\212\217\272\243EA8\217\367\332\271\253!\374\272\331A\217\271=\t\026\271S\302<:\201}n\272Q\321\214\271\346\264\365\270&o\227\266\316\312\33190\"\"\272\373fh:\362\205u9\002]\2169^[\214:\035\360E:\343(\273\271A\222\370\271O\310\3559\205\001h\272\231\320A9W\200U9\362+\2168q]\002:\326\243;\272T\030\3768\330\026~:)\332\323\267N\014\250\272\206l%\272\026\305\242:X\355\020\2728\277\263:\262\306\2667\205\014\2528\275\225|\271% \026:\026i\037:\244\324\253\272\362\324w9\352\274\320\267\023\364B:\321\377\003:\217\331\245\271\360\364e\272j\362\\:U\306z9p~\026\272.\341\236:\230\023\215:\2041\256\270\260\226\273\271\267;\3049\233\206W\271\267\006\2519\242\334\001\267Z_\3419\340\213\353\271!\221\002:\003\215J\271\014,\245\271\001\016y9\374\362\350\271\366\2660:\354CP\272\036\273B:\316\277\312\267\'\207\216\272\313B\3129\373\304>\271\000`\356\270=\364\3619\314\304\275\271\235\317\247:\267E\275\272}\036\0108X\274J:;\350U:\227\357M\272$\377\247\2719\217c:\027\344J8\375\314\023\272\273\266\000\272\000t\2079{\350)\271\265OG9\021p\r9\333\341\0029\366\325\030\2726\241\306\271Vz\3059!9\3729r\233\320\270)m\244\271Tt\226:\327\314=\272V\211\373\271\220\334\260\272\232\357\2326P\016\2449\232f\032\271\277\356\206:\031\212v\2712u\233:\214\235\030\270\330\031\023\272(\'w:dZ\373\270\003\362\016\272\355\016\357\271\375\246^\272\220\247\n:~\303\324\272\t\304<\270I\376\366\270\363\036\2529BG*\272\266\003\2309\311y\3459\343J\3619!\356\2179*L\2208\355d\005\272\244\r\305\271:RS\272!\365\036:\263q\235:\376\236\2649\004\230\227:\346\004C:/\270\243\271\367o\217\272uu\3649\227\2535\272\240\017\010\272\202\376\233\271F\003\235\271\337\312\3278\014\004M\272l\344\264:\025n\256\2712\224\265\271>\312\2269\tw\016:e\177\252\271dG\256\271\305\267\2239\305h\3159~9\277\270\"\27609R\030m:BN\367\270\366R\224\271\r\303\2049\267\\\232\271\361x`9;_\032\271HU\353\271\374\002\2049\240\34257\2412\333\267\357#\210\272\021\346S:\027\017\270\271\030\016\207\272\003\'\230\272\275\241\207\271f=k\272\335{\221\272\233~\3609I\202\3479\022\30389\274\242\005\272\024\220|\272G\002\227\271\351\232V\2706d\034:\324\274\0219\212\367\2109\034z\366\267\'3\2028\341\200s\271\247(\0169w\33729\270\260q\2721\266\t\272\250\031\225\271\331\276\n:]\315\2049\036\266\t\272\223\200\2619\263\022\2339\024{/\271\246\362\257\272\205\032(\272\206\025P\272\241*\325:\303=\256\270\237<\333\271M\325u:\261\267q:L/\242\271\001#\205:\352\314\327\270d\347\27291\033\216\2714a\232\2714\220G:\365\2055:\363b\006:\334\361\0139\t\27608\374\005\341\266E\006R:\330\307\252\272\355\211Q:\240\243\237\271\205\216L\271z=\201\272\030\223\0369\2060\232:J\247\020\272V\215\005\272\326X9:\217\337):\217\020:9ha\3049\361\017\215:hl\314\271x6i:\t\177\3119/\262\3479\370\033\3768`%z\272_\262\0319\021x<7\215?7\272\350\022\037\272\237\317+6\323\t\2069\232\370\306\271y\322H\2725\244\377\271\342\237%\271\203\013=\272\323\0048\267\274\346\3578\317\375Z\271\005\\\030:\3413#\272\322\314(\2719\236\347\271p\271\205:\221\364\200\272 L\2479s\025\311\271$`0\272W\002\314\271\322\214\030\272\006\351#\272OB\220:\360S}:\253\301\0348\024\3432:b\222\264\271f\203\034\272\362\377L\272\'\0246:\354<(\271\335\013\t\272\324n<\272t\206%:\261\342n\2711\002\006\271\3308\216\267\267\236\003\272\236\004*9\376\202\034\272\234#B9:\300\227:\350\247q\271\350\205\037:\027\223\225:V\003\"\271h\276\3608\274\337\320:`\010\240:J\304\270\271[\376\325\2718\254\3229\202\316P:u[\021\272\210\233!:\261\364\321\271\0038\2579\357\372v9\201\036\313\271\364x4:\320\315\222\271\0257\014\272\\\033\333\271\265;N\272\237\'p\270\220\035-:u\023\210\271\331\332\240\271\377\372\356\267O\321-9#\227\2719\026\304&\272\355o\221\271\201\365\031:\317\344\2039\241\214\2708U\"x9\002\333\000\272\225\224\212\272\3171\026\272\274\266H\272Z\316\371\271\344\030~\271\362\032\204\270\276R\216\272lPx9\365\277\2339\213%\231\271\263\351\234\2719V\212\272)\006_9\253\230\233:9\200\227\271x\243\323\271\347)]\272\344U\36798\007\2609\'\216\217\272.\234\316\271\017\013\3546uj\021:\010O\2266\013?\266\272\005\204c\271@u\2339\027\230\3678\307\254I9u\027\210\272\344\367\027\272\006\007u:\221\340B\272E\362\n:%\262\252:\242\333\005:\275\326\305\270\335\307&\271A\206\2317\r\315o:\217>H:\340\221\013\271\270|\216\272M\310\216\270}\037I\267,\nZ:\023\330\227\271\367\202\27585\t\2569\243\225\0169\276,\031\272\177^2\272\331\356\243: \211p\271\370\241\223\270\240\260l9[s\201\271\301\313C:5\325\267\272\210\340\206\272\277\230\345\270\006@\232\271k((\272\272\251\000\272O\3413\272\211}&\272\n\036E8\343\305\210:\266/\206:\206gN7\nn\200\271gH\202\272XJ\2529\324\226\235:\205\347\327\271\322\321*:\364]\240:o\367D\272\2116\212:\023&\027\270:T\355\270\305M5\271\023\234\033\272\257\014\251\271A\347?\272j\030\000\271}\231\t:\345\244a\272\027U\3649\265\305(\272 E\243\271\3029p\272\263x\225\270\n\274\267\271\343u\t\271Z\201c:\267\306W93G\t89Q\215:\325\365$9\tQ\2419I\272\r\2715h\3069*\271C\272\007\363d:\335.\2739R\317\2469\032\017\355\271\3379\020:\307\207\201\271B\214\3528we\327\271\336IB\272\300)\005\272~`T9\201\035\3718b?\002:\314\372\213\271\276>~\271\302Q\2059@\362p\2711\262\3039\206\225\3419$%\2658\350\271\027:xW\'\271\333\354\3569p\306<:+\332,:\230\335Q:\3719\3178?\033\2709\363\014\3479\t\246\2439\203yT9!\375\2628\2059F:\204\244m\271\227\241\2619\216) \271\214=\032\272\'\235\024:\203\215\3359\\\241\270:\2716\210\271\007g}\271\311-*\272nxY8C\232\231\272-!\252\272\3109\244\271\245\210J:\020\377]\271\256?\2239p~\346\271[\227\2379\024J\2759@\336\255:\0337\2539\016\232e\272\361S\257\271+\257\035\272\"\214\202\272\335\302\3409F/\023:\362\374;:\344\351n\272\034E\037:\372\241O:\351\242\037\272\020\0213\271>\213W\272\020\315\247\270\224\221\3479NrM9\262\334\3459\201\336\000\272\262N\337\267\345\366\267\271\250\231\036\272I\220\022\272j&\2219\007\316\005\272\003NE\272\250\203\033\272\302p\361\270N<J\271\304\'\314\271\304\020W:\276\274m\270\353\241):\354\316\2309\351\212\013\2720\204\204\272\333T\3108o\362w8\220:\310:\377\222\336\271\274\031\2049q\033\202:\211\352p\272yl\241\2719~\016:\034E\2259\302x\212:\202\"\2079Y\017\020\271\232}\3709R\203\2249\345\376}\265\260V\216\271~\017\270\271\223\357=:c\327V9t\243\0109M(\2159\202a\3718^\235\3045\244:\024\272\357\200\3549\316qk\270\360\005A:wv\271\272\230\261\243\270\254\216^:\267u\256\271D\367\2039\225Q\3729\336\310\036\272\353\2504:m\274\254:\210\240c8\206\014\002\271\035^\334\271\001\342\327\271\025;\276\271\3001\024\272\305\217\3109\343\222\257:\026\364\20691\"\3278S\377\0029\250\016w\271x\273*8\264\301\234\272\"\302a\272c\272R\271_J\3478\331n/9\n\363\2129\330\357\031\272\315\t$\271\267\031\2119\267\020\3238\t\243S\272HP\265\271b\215\232\272\\\"w\272v\013\326:\327\222\210\271\020\232{:u\274\220\270\223\353\306\270\356\335C:\214^\272\270q\327\212\271\310\236\000:~\274u\271^X\221\2724/H\270\000;\0339\006]\261\270\235\005\3149\366G\330:\227E\2769\373\334\357\271\363\266\344:a\233\226\271\260\1777\272\201\252\303\271\004\006\224:\212\234\306\270\363\357\224\271\014\024^9.\261\034\272\244\332\2249@\331\033\271\317m\2478\314\356\3569\363a\2059\267\215$:)\31329\016:\0009[\273\2519{\305[9\305B\215\272\361b\3348y\342\301\267\002Iz\272\346-59\032\212\271\270\272\226G:d\213\002:o\004\002\272-:\010\272Ro9\272\356\000\3009Dh/\272A\340\226\271\327\226D:\273\0232\2725\217Q\272\334\247\255\272\352\362}:\n\036\017\271\251\2215:\322\270\023\272\255#\205:\215\201G\272\322\211V\272B\317,\272\022\244O9\333/\"\272\376\202\264\270\337\265S9\226\360\2429\022\324\022\272\326\247\3759~(\253:\033\256{\271\326W\214\272\t\027\200:\310~\212\2726\013\'\271-\252\0169\002\022\2108`\336\227\272\347\323\246\271n\200\307\271~&+:\204\027\311\270*\344[9\205\356)\272j\315(9,pz\271\250O\002\272\363\tq9\234\344\2369b\347N\272\304\366\000\271\203\302i\272\'=\r:\360\3355\2714\302\3408\317n8:\234\342#8l\3746\271}\033\201\271\263g\206:<\210\263\272\025\232\313\272\372\3526\271\355\321&:\273hx9$\235\021:\227NI\270ua 8\324W#\273\266\022m\272\343\345\207:/\365m:\235\177\017:\316\375A:\223^\017\271\t4\2329(H=:\357Mv:~\010\3118\031\210\257\271\'\'=7d\345\253\271\312\342\3309\243:\3579@\322\374\271\222B49\203\026\256:\307Ls\272E\342\2019|\266L\271,\354\3207\255\3442\272\301r\024\272\215G(9H\263\250\271\017\235\267:\377z\n9\243Nq\272\264\317\0219\346\2204\272\266jU\2721\356\32599\022z:rD(:\365:a7\326\350\262\272I\\\334\271\331%\3178\030\347\217\272\353C\013:p\355\3058\275+.\271o\275\024\272D\301\247:\320\256H\271\023N\3509Mb\001\272w\030\2109\307\252\030\272j\2505\271m,u\271\033,\2349\311\341\206\272\326r\3749\033\363\221\270i\324M\2719\324\311\271z\230\030:\215k\037\271\327f\014\272?\320Y:\342\253\201\271\265J\376\270YO\372\2719\235\2038\007\302\275\270\357\306\3179\220G\201\272O\277\013\272n\017\272:\212\032\0209\233\221C:-\2778\271\255+s7\315\261\t\271\374\241\2137\304\235\2529EcR\266\220sv\271\377\032w:&\222\034:z\340\372\271\355N\3769AX(:\356j4:\314\356\370\271\375\343\3569R\004\036\272\214/I:J)W\271\325\230\2168\210V\343\2709\354\321\271\027]V:O\237\t\272\001\225i:.\256\026\272\335\362\214\272\031\202\242:\277fO:\270\217\343\270\223\221\316\271\021\207\2268\254\332^\270\n\244\267\271\305x\\:mnY\2710\327\334\271\355`0:\274\r\032\272\006@\304\272\211<U\272\030\231\2428\023\200\007:dO\255\271\377\365\010\271$\222]\272b0\201\271\321\220\3659?\257\020\272\026\177\036\272\262\335\243:\227\233C\272\325\017\2749\035y:\270\266&k:%\363\2149\331^\3218q\005\2379\177\314Q\272\326\371\211\267\376\033\2739^\033\027\271\215\374\315\272\toR8g+\320\271L]\2139\025\370\027:\035$\340\271J\327\201\272\273\255\204\272\264Fr\2727\020\026\271\025\214\252\272Z0\237\271y?\206\272h\313\030:\327&\211\271B(d\272\031\262F9n\276\365\270\256\270^\272\310\367\231\2706\236\3569l\215\351\271@\374>\272\272%\345\271D\347\033\271\0318\2118\311\036/\272%\231o:9\324\203:M\276\002\271*\224\362\270\273A\261\271\257\030B:\326\032\000\270\352\033\2019c\243\030\271\335g\252\270\224.\2369\334R\215\271rO\0079\035~\332:\303\211\3318\255\313&\272{\007\227\267\032\025\n:\361\300\264\271\347\203\246\271\216\274\2609\222\"\3728\302\036\007\272\233\325c\272_+\222:g\347\200\271\224\27018\331\361.9\264\346\315\265v\213<:u\014{9\2625\265\272\336\256\311\272\317\223\3259\30740:e\313/\271\217\355\213:\240\026\3759\215\301\211:\027i\261:Y\351\2329\3277U:0\226\214\272\003$\2419^\026\201\272\245\221\310\271v\2220\272\025\221\t:\255\261/9\300\305`\272\277K8\272\267\243\002\272Vb\3339>\224\215\271\021w\022\272\336\'\360:P\n\003:\000\3551:I3\213\271vYZ:\031\340\237\272\021\341F\272s\302R\271\023\261@:qj\214\272\314F\2329\205\027\2069\235U\007:\205f\254\266\177\025\2269\251P(6\256f\2179\232\363\264\271\260%\301\267V<\3049\032 \003\272d./9\377-\211\272\002\032%\271[\245\307\270\373B\0037/#K\271jg\3349\301\350\256\271\343\250M:[\265\222\272\016\364c\272\357\311\034\270MC{\270{\265;\272\026\301\366\271\3604\234\271\204\212\314\271\252.\r\272\314\226\364\271\250M@:\307(\3719\007o\026\272#\037\224\272\0009\221\271)\272;\272\273\247!:\313u\251\271\255\325E\271\234\254\375\270\363\006D\271~\212\":L\2228\272$\204\207:1\231\020:\026\372M:\twf\266\375\336\221:b1\006\272\370`\251:\001\242\000\272\257U\227\2709y\2459\256Z\024:e\271\2308y7\003;i\'\3778\375m\0059S\'\216\272\272\234\3709I\031`9a-\220\270b\217\204\272G\264k\270\321\244Q:\212j\321\272\007Mf7\021\277\031\272\362z\2479\244\230\340\271\202i\3019\245\302\2049\301\307b9m\255\352\270\244\313&\272\341\350\n\272\315\313Z\271m\335\3519`\\\3369\273\201\3309\010S\346:\304&9\2711,\3679-\201\256\267\014\264\272\272\317V\322:\016A\2129\361u\3779\177w\020\272\216\266\007\272,\177A\272U\217]\272@\242k\271H9\0369\005\014\2779\013\343\021\271\010\304\243\271Dr\005\272\320\26269\003mS\272x\311\3669\244\261\3009j\024s\271x8\2059\272\321\014\272\306_5\270\274\2471:\377[u9d\325\3629\273\371i\272\233\335\233\272\221\254B8\237JD:%\354\t:+\201w\272\026@m:\'Y\2479\225\316\3249HFE9\360\341\332\2705M\366\271\364\020\t:\224\350\037\272\230\202\347\271\201\n\3328sr\305\272\365\36009[qc:\021\334\3309^{\2529\025\032\3249\032\3204\272\024}\032:\357/\2159\345.\324\271eC\367\270\032\2230\272\226-\033:fM\3629y\334x:\244\364t8\336\366\2339Y\276\2349\014\366\210\272\327\310\024\272\320\357(\272]\344J\272j\033G:\351BV8%x0\272H\377\025\271Y4Q:Jl\2219\222\311\302:8\363\216:\317\372\025:V\222\201\272e\317\026\272d\303\033\272\233\226\2779V\017\3069p\247\366\271_?\2639\320\347*\272l\020\223:,\231\200\271\332\212\0049\324\271?:\211b\277\271\214\336\207:\351rF\272\216\022\\:1;\2729\0327>:a50\271\254\207\221\272>_\245:\224\232T:\260\363\260\272\267\225z8\244\3645\272*\316(\272\337;M\272u\357E:\031\271\r\2723\310\234\2717O\2069\nd>\272\026r@\272z7f:^\020\205:\370O;\272?\342\2658\271m\022\272\003\017\037:\343\201\314\272%\253+:\263\270\2769l\031\204\271C\344\034:\005-\2359ne\237\271D\220x9\001\245\n\272\322\251d\272\345\203h\272\"\353d9\260\215\2428\t\200c9\332\240\2639s/6\271B\324\314\271\nYN\271\215GV8|\326\2329z\310%9i\325\3078a\255\265\271\337=_\271\324l\3429aG\2359\242G19\245q\\:t\037\3758DB\023:\364\354\\:`\271\252\270\022\004\2148\234\241\333\267\330\377\323\270G\345\3348p&\002\272\263\2762\272\261\300\3419`n\3549\351\037w9\232v\002\272\000\264\2258L0m9\211-\272\271{\346\010\272\210\344/\271U\376\212\272\375\3652\272\256G\247\270\216r\007\271\013\270\032:\261\343E:g\334\2329\001-\237\2713O!:\260@(9w{\3209\236V(9cp\211\272X\240\016\273P\331\0228\320\223\212:@\034\030:\"\246\3619\256\337<:\274p\3077\354\024\3339<\332\r\272j\321\242\270\242\305\016:\302\0267\272\203\202\245\271m\005\241\272<<\343\271\215|\360\271\355yV:\254\324\241\271\323\2478\272-\013\246\270\301\307m\2711\356\0249:\001,97\217):\255\223\3009\024[7\270\375\330\361\271\025 N\272\204\215\007:\337\312^9\317\315\2738\224\031\306\271\320)3\271B\371\351\271B[\2108\325\0022\272\346\177%\270!\340\006\272\005 j:\001\177T\271\361\322\217:H$w\271\261^g\270\025O\211\272.<V\272eX\032\271\335_*:\257&\2658!\232\024:\353\311\023\272<\374\303\271\377\355i8\202\022O\271\356\342\215\270\211\251\251:\t\033\2169\017\342J:\265\376}:#\306\n\271>~\3269g-I\271\337C\2729\030\"\025\272\300\017\031;\030\300\221\270i\344C7\376\206\205\270\276m\211:\202\234\365\270M!|\272v\331\236:\253a\2519\264\354`\272\341l\2439Y\325\\9\207\375\263\272\336\210\3767\377\215\2029R\245\2229b/l9\356\243_\270\025e\2119\220L\3359BKw:b\310\0229\342\031\024\272\025\'\2069\320\007\023\272\353\327\3169G>\253\271g\323\3469\221\036r9_\355C\272\024o\203\271Q\033\245\271\301\255\022\272\266\031\2059d\003\\\271\214\357s9.\013\355\271\266g?:\266\362p:\216\001\251\270\312\276\3609\256\205C:o\31768X\302\21790n\2469\204hR9R\323C:\213\033\221\271\276j\2519_\357\004\272b\342\346\271\372w`\271R\270\3749\035\377\332\271\211\326l:\222\333V:)\026\006\272\365x\2608\263O\211\271\351{\367\272\243@\2449\000\340\2159\342\366\0059r3>:\340\2577\270\266lf:u8\036\272\337\240\222:2\307\251\270S;\206\271b\014\2669\227f\3319\241v\341\271\031\006\220:\033\020\017:\275\327g\271\224\212.:\2357\277\271|3\3239\310\334\354\270\270\321\2139\302\353\216\266[r\357\271\342 \253\267\377\032\201:G\3220\272z>\2509-\\\024\270\2179\203\272\334_\305\271\215\002\2659\026\356\n\270\343\270\303\270\247\250\020\270m\220\206:\204>\255\267G\236\005:R1B\272\263Q\346\270P\004\221\272\373[\r\272lpH\271H\270\3028\256\356A\271)2\2369\367+\223\271\rJ\003:p9C:B\022\024:\350n\3378z&\233\272G\274\207\272Sf\346\271\003\364\316\272\253\340\312\272,@=\271\321\20659\266\352\2509\236\334\3159VE\2259\023\301\377\2700\256f\271,\367.\272C\356+9@\320\2479\204<\3569\221_\036:\273j\0029\305\273\3049\374\017m9rb\224\272i\031\033\271#\341\0259\331\007\3638\033!\3569\3070\374\271\242\256L\271\257\343\002\272\204i\003\272\030\226\222\270E\357\2118>\232\3239\327\266\321\2708\257\3179\304.\3239*Z\3728\273\353&\271fyB98\014\0309\t\311\254\271?TO\270\261\263U\271^\246q:\035\024\226\271\235v\331\271k\256\321:\006o\257\271=gA\272\232\263\234:b\210T\267p\320\031\272\311u\022:\211@\'\272\275\254\332\271G\374\241:\331<\022:\254&\3779\271QU9\001\326\371\271\222\316%8\336\256\2238\3215O:\023\217\2059\n\372\2509E\276\20198<\371\271\224GE8\270\203R\267\030/\023\272oA\253876\214\271\215\366r\272\300\216H\270\036\270\334\271^\336\3759\217#\020\272\r\337\0309\013Ne:NEa:=N\2479\320\253H8@*\2619=A\227\271\214)\2559\365\211\2129\201\033\236\267|\230\013\272\236\343\037\2726K\3239\330s7\272\357\257\205\272_P+\272\270\275\031:\233\251\236\265\377\367+\271s\025\3059\2574j\272t\347:\271\275\254\354\271\233\300(:\237\253\\9\006g\322\272\367}\017:\230\203\\\271@\326r8|\02739]\353%\272\247\025<\272\351l\222\272Z\224\334:\032\017\3608\313k\3409\340\237\020:\216\245\323\271g\3224:\277`\004:\315~\014:\3770\252\270{\24279\375\372\206\270Oy\227\271O-\000\2717\237\2359k\313\3629\340%\t9\360\205\215\271\263\355z\272#t{:\032\214\t\272\034\367\363\271.\326\2739\227\221\025:\031V@\272\350\335$\272)\265\2609\356_\242\272\357\246f\270t=\334\270\236\375\241\270\354/K\272&;\237\267\261\372A\271(q\013:\272\037\2729\214\004p:\006\270\'\272\337\307\3539\034k\010\272BN7\272\265\013K\272\230v$\2725\217F:\232\244\363\270\262\243\2477{\257\3758v\037\241\270\371b\235:\253)a\272\264\270\2429\227(\2039\342\t\2379\223\224\032:\315\177\203\271)\332\352\271\024[\353\272\354#p:\313\234\2239\002.n\271\325k\025\271\004\251N\272F\315?9\016<\021\265@\006\334\270yhi\271&\326g9I\003\010:dq\t\272\n\260\3179\204Zj:\223&\002\272a\032\3768\311\214\000\271\375GD\271QFQ\271\236-\3439y\356o:\305\356\3259\317\265\2579\357\025\271\271\025;\330\271\231N\357\272\215y\t\272\031yc:\324\332&\272\331,B:\000\323\277\270\327g\204\270\325Z\013\271s\301\3459\316\360\351\271\033Zz:\262\226\234:#\231\3679S\226\2339vI~\272/=>\271\334\022\266\271\243\323 \272%\321A:\177\026\303\272H\310V\272\213\257\252\271\025:\366\271\354\376\2529M\210\274:Qn\3579\017p\3529\030\346\322\271\270\240\300\271Y\337\224\272$\276R\272\001\250\033\272\277H\321\271\004\304\0269\000U\3139\236\025\243\271\234\247\250\271\225\n\20791W\275\271\240\335\222\271 \034\216\272F\352|:L\r\2768\327\264\226\272\221\352;6\371\250z\272@\346\'\272rd\2129\361\273\3418\032\277\002\271W\216H\272D\233\005:\346\2355:\306\210\n9\226\037\215:5\014\3129\376%\3349\313}\2067\260N\3649\346\346\2038\312Yk\272\327\035\2559P\326F\270\n\261$:D6\013\271I#\3669\363\253%\270E:s9\226\3317\272\365\001\322\271\021\202\3358\254\372*:\307MA9\240\343Q:HW\\:\312O\022\272u\305\026\272\261\325\341\271!\312\000:[X\2059>tJ\272\007]\027:\373V\211:\365\237_\271\340\236\315\2712,O\272B\346\0319\230i\203:a7C9\350\007\234:\037\235\2738\326\004\220\272u\\D\271O\332t9\366\365l:)ap\272\245x\213:AO\003\271\257\'\214\272v~#\2727\201\":s\023=\271\353+\304\270\261\003\230:t%\200\272\207\311\210\272\\Ji:$\331$\2722&K9u\253\326\271\332#g9\245\342A9\260\0043\271\036\314\216\271\353\314\001:6\212j\271{eT\272\024E\227\271\004\355\010\272yu\255\271o\370e:4Sx\2723\365\336\270%ZU8\333\236Q\272\205l\t:\204\327\300\270Ik\035\272\215J/:\357;\3659WZ\3009^;\372\271V\375\2778]p\27086H}\272\216\256\013:_\307\0239\267\350\2439\307\352\035\272\013^\2679Qp0\272^8\025:\035N\2749f\262\32397t\3329\337\277\226\272\200\'\201\272G8\3029\023\245\023:g^O\270\334\336Q\271\244Un:R\006\004:\346[\314\270\005E\0229\316\206\2129\227\341\341\271\215\267\323\270\355\272\027\272y\261\267\272\240\201\016\272\275\361\230\271\265\272\3159\347\005\234\272hn\244\271\320s\004:\244\337x\270U\254\3449F\265u\271\250M\017\272\202}3:L4\256\271m\261\":\274\267\226\271\252\331P9|\326\31286\026\01789\t\200\271q\036\214\272\010\360|\271\220\336\003\271\024\370\230\270\031\206-9\271b\212\271\346\224^:\377@V:\363h6\271\003\025\000\271R\331\33794\341&\271v\214^\267\005\324\031\271\023\345y\271\207\302\203\271\255\202:\272A\256;\272z\376\266:ns\2429\037\030\022\272m\216\273\271\216T\242\271\260\215w\271\277\246\2069w\211\3348\230\200\201\272s\254\2068\362tj:\\cq\271\036V\2728S\002/:.\0107\272-\301+\271\241p\t\270d\342o:\355\321&:P\357\002:\016\276$:\217\342\252:V\274\274:\035\324\261:VP\3529.qC\272\016%\201\270b\177\2159\273\247\006:\204\324\327\271\r\251\200:\356\177\204\270\201T^\271X\035\2079Lf\305\270\320 \3618\363\326\233\272\030|\2729\351\210\33689#\0049\023\226\2128\257\024\222:uE<9\241(\2046\005\221\232:\324.H:\374#\022:\245~\007;\375\200\317\272:\222\355\271\035\356\003\271g\353\2727\243\347\236:H\n\002:\357Y\3148\207\033R98\r\214\271\265\267\0369\006\2564\271\323M6\272#6\261\2729\217\323\271\303b-\272.\326\220:\202p_\272\206\355\025:#\036\2208\236I(8t\000\013\272I+!:\300\247/\271K\355\2629J\327\347\271f\005k\272\346Z\240:9\020x\271\327=\2718a\264\\9\267\313\3539\274C\225\271\233\3644\272\205\036\037\271\021\250\214\271\211\222w\271E\331 \272\340\3151\272\230\307\t\272\306\273\212\271\273\202\266\272<9\003\271\236\374\3728z\360\203\272\262\367\242:f\262K:\357r\275\271J\000.:\241X{\272\370\232\231:\021\241\031:(\2206:MF}\271\350\302%:2\322\3218\351\331`9\367fL\271\035\254\2668.1\2769\362\216\n\272\210\200\022\2720\202\'9[\274b\272e\366\n:m\207\'9\256\207v8\3574\2007F\035\004\271\025\370\214\271]-\237\271\324c\3558\254\237\000:u:E:/?@:\344\222\273\271\232\014\002\271z\356\031\271\032\273u:\314\354$9tJ\377\2718\255;:\353\332\023\272v=&\270\364jo9\236\t\001:\026\372\014\272E\324\026:\377G\2479._\321\271\213\330\027\271\250\226\301\271|#\200\272u\317\2457\322\232\034\272d\200\221\271w\00229\007=-\272P\345&9)\216\370\271\177*\33762\220\0309\242\337r\271\270\35409\024g\010:\377\205R\272\212\302\205\271\036\035\n\271b\037\273\271\026\177\002:\316\267O:p?\3619 \366\r\272\360\237\3729T\032\232\270\226\331\3709N\342&\272\325pg9wR\2167\005\330\003:\323y^\272\275\326\250\272z\255E:U\0327\272\223\301\2019\r!\2029\271\240w\271\016Yg:=\010\014\272t\003^:bEQ\271:J{9\271\211\254\2709\2365\270T\207\307\272\007\336#:\004\371\3449\322\314\2719\004xF\272\020_S:a$\006\272\204\243\3059\234\353\277:t\232C\271Z\262\3759\375\344\r:\315\265T\272w\211\216:4\037\202:\321\022M:(\355\006:\320G\033:\243\r\263:\207\344\2019\275\265\247\271\203\236\317\271\004\216n\272\023O5:e\336;:y\203\2739\224\033\2149\320s\177\271k\340&9\354R\341\271\344\022\234:+\307j\272\350\320\2329\300\271`\271\335\245\2279\367\217\027:\243zH\272\305\035;\272\263t\2428A\233\2559A\326\215:t\301\266\271\000\324\260\271\271\253\274\2722X=:\034$\0369U\010h\272\244\275\010:\352\365\'9\354;\216:\024\0145\272\016!\354\270\353\236\306\271\253N\345\271.=u:\035\010l\272\352M\235\271\335 \241\271\030\252\3329>!\203:\356m\304\272i8\363\270<\302L:p\032\017\272\230\214\335\266\n\336\262:\215Q\3619\014\2245\272\226?V\271\010\264k7\027\274\202\271\311m\325\271\030\347\0169+q9:\313\014\026\270\013\235\235:\324\3719:\275\346c\272#\265\371\270\032\360\3444\303\32399\217\035\034:0\212\214\271\214pV\271\247\316\004\272i\311%9\342\2656:\206\316\21182\353\3109K\267\202\272~\344F:UJ\223\272\227\310\3558\344L\333\271\003@\036\272\211m\310\272\020\200\354:Q\347M:^\023~\272\310\314d:}(\204:\362\002\271:\223]D\272\213\003S\271%\031\332\265\301ru\272\274#\362\271(M\354:\363C\3158\354\363i\272\350U\001\272\237\035\216\272I~\3759;y\210\271\020&\257\267\320v\270\271P\377\207\271\303Z\226\271\245\205\033:\275PV\271\275\265\022\272{\010\30389\372\t:\326\344P\272\010\315!\273\340\346h:\006\3033:\245b_:\220;<\272L\345\344\271\033\000\2749v)\2568\332w-:P\311V\267F\301<\272\360\324\241:|\000\3619\237d99*.\3138\332\2427:\300ew:U\037Y\270\307\261\334\267\272z7:\331\266\246:\333\326\351\270F\014\0339q&\3569\340\332\234\271;~b\272ax-\272\204\363\2139\002S\3038\267\340\231\272Z\220,\270^\347\0239\341\361::\360\354N\271\016\323j\271\267\240\360\272\013\2048:\2661\244\270J\242\037\272\321\323\':-\2330\272\233\221\002\272\013BQ97\253\274\270\217\262\311\271o\252\0069\303\235\2279A<:9\264\316\266\271\211\231\013:3\222\201\272[\037\303:)+-9\224\230\030\270\307\336\212:\207\203\274\271\246)\3138\327\257\032:\262t\205:n\377\"\271\210f\021:\200\030*\270c\010\276\271\317\223\016\2724\264\022:\376\257P:\220\374s8OY<\272\204\376\206:\310\214=:\2403\376\271:,\037\271)\334\0269\335\\\241\271Y\222\364\271\031+\2308\252\204\034\272\306\370\3139\034\301+\272\316#\3019\025\365\3508\004\257,\271\211bD:.\365\036:\224\255\2379\206%\3049\204\375\265\266_*\345\271\302\322\237\272\342\034\0249\342\031\261\271#D\2649\t\\\2349\221\334N\271\234\246\3429\'s\032:Y\000\\9\004\236T\270A\0222\271(O\2369\354\r\312\271\250!e\272\010\327k9\260!w\272\003\366\2579)\230W\272\'\346/:\026S\270\270\364\337D:Q\247\2329+\314\322\270C\373\310:Ah\177:c\274\320:\367\256.\270\235\222\334\271_G\024:\241\312?:\333O\234:\224\350\231\271j\325&\272\270\217\2569w\010\2359\355\344*\272\330\264\3107\301g\3258C\311\034\272sId\270\200\030\t\272\273?U:\363T\2428\366\245\256\271w,\266\2729\243H:\234\225[\271\351\322\016\271[p_9q\337Y\272\373Z\014\272\305U\253\272#%\267\272\261\016\036:;\330\244\271\243,\'\272\236\367\'\272\t\213Q:\327\027\33686n\0249.M!:\006\342h\272h\211\007:U\232v\271\252u\214\271\372>6\272\352;\025:\033\037\3418\366\367\r8\215\365\201:\017!\321\271Z\242\3359;\371\3549\\@m\271N\310,\272\3069\\9\034\362\203:7\330\203\271^\316\2419\254rl\270&I\274\272\211j\207\272a\322U:\224\312?\272pg\022\272\221\250\232\271%T\2379\237\232~9:\365\200\271\227\235\256\272\\\316y9\3724\335\271\002)U\270\244]N\271.\233\302\271\'u}\271g1J\272\212\231U\272\275\354\2149z\001\266\267\314\024J\270<%\237\271\351\244\237\271\274$h\271p\301T:\265\226\3559\030\262\277\2717FC:s\34799\233\342\t:(\327T\2722\315g:\305\002D:\315 c\272\310\356@\272\022(\332\271\034p\274\2715\261\336\270\364m89b\277N:$Nq\272\267\336 \272\341\366o\272\022\330\220\272\210\206\005\271a\022.\272\013A\003\272\244^59\361\301@:\260(b\272f\003U8\215\221`\2716\237\273\272\263\216\t\272\210\314\311\271\355\320T\271u\351\033\271Z(!\272\202\3474\271+\025T:\t\323a\270\026\005\034\272\343/\330\270\326\254\3109r\2179\2721\321\2329\311s\3569\231/x\270\333J\312:l<K9?\250:\267%\372\0229\334\200O\270&\301%9\022\315\327\271c\320*\272r\024|:@\216g9\371\240\301\271|\270\251:\005M5\272\356\211\3529E\3608:\023/\014:\343\3753\271\226\021+:h\252\3759W\201\241:..\2708\236x\005\272\360\301|\271\261\017\331\271\310e\2667\365M\241\272\204\227?\272\331\331\004\271\322\204\307\271\030\322\2759\017\244\243:\032\350\3329\007e\312\271&w\022:!u\362\271\330dc:0\372S8r\006\366\271\021\224\2439\270\372\3279\215e*\271\345Wt\272\256rh\272Q\021u\272\256%\202\2729\337\003:\212\272W9.J\006\272\204\255}\271\037\314q\272\360_x\2708\264\213\272\233\202\2528\356&\3359\016LA\271\262\220\2278\372\337\033\270\346Y\227::\004\3769p\313\034\271%\277\224\270\t%\277\272w+u\272\363Ls8\031\351\2069\343)\024\272\246\300\361\271D\300c:\021!\266\271\320v\237\271\367\013X\271#\002\222\2714vk:*i\250\272\265%`\272\334\275):\264J/\271$X\2259\370\335^\272\265J\265\271\330\222\002:]\362\333\271\272\241\311\271m\330\177:2\0215:\t\032\026:\t\005\313\271\245\314l\272Sj\2309VQ\216\271 \273\204\272\304^\201\272\\\317\032\272|\272\274\271\353\033\307\270x\243)\272\026\021\017:\267G\221:\273\204\2369\2337Z:\267\242K:J\245\315\271\377\207\3038\215\0013:Pt\210\267\344\254\240\272\352\355\261\271J\225\2469\005t\2149\213\020\316\270\330\231\343\270\200+\231\271U\206\217\272\353\263\003:x[\254:\254`\021:\250\251\246\271(\177>\272\251\004\023\272\202\333\270\272\224_\035\27280\370\271b\273\237\272\t\343\251:F\200\206\270\255\373S\271\307|&\272\251\317\t:84\205\271\027\363\241\271\233\177\022:\321\305:\272\213\354|\271\305\n\3379\325\247Y\272\240\217::\032VU:qQ\\:\022\230I\272\300K\004:\316\374\322\272\231\202`9\317\235\0009\207P;:3\'\2639\326\007\244\271\214\341\276:\300-\205\272\344\005\227:^\026\236:~}i\272\r\345c7u\351O:\304\237l8\277\305\"\270l\275\353\27105\311:\370\003?9\026\227\203\271\223\253\3119\336\335S:`\222\227\271\370,O9\021\274\2469p\'\330\270\344\230>\271\360bE\271wY\3129\273\241\3448*\336\244:=0\202\271\014\257F\272W\225\010\272\251\305\3709\225\252d\272\2532\3538\273\315\2108d9g:\306\017\3747n\356\344:\002c\035:\261\344\3078\307\345\2179x.\205\272\207a\'\271\261[\024\271ts#:\365\213\200\271\201\240\2028`\231#\271\362\036\2456\215\254\0378,\243\215:ZZ\\\272]\363\3619\031f\3049\366\333\2509\220\003\021:\375\006\2269\342Ah\272\225u\3759(<9\271[\257N:\251|\212\272\320\336Q9\320rr\272\215;\3549[{P83\325\016\272\371\235\206\271TJ\260\271$\372\201\271\031\007\007\272?!l\272/\006P\270\210S\2259\337\367382\254\204\271_\371\016:\364\t\0209x\242\302\272\r\t\224\266\221\367\3628\233H\2659\177\024\025:\3041\266\271\301M\030\272U,\t\271Hqt\272\005$\212:J\000\37297\373;9\007\345X:\261\315\032:AJ\3339@\365\'\267[\202\3429]\302!\272yC:\272m\363\311:f=\342\271\265\234\327:\257\214\203\271\235\177\226\272^\327.\272U\022\2359\370u$\271w\265r\272\216\363\0169\202\343\3478\'\217\032\272?\310\233\272I_\035\272:\362 :q!\2629\212^\265\271sa\0259\3461\023:\016K\230\271\337\340\3469\3155\255:\034\376\\9\376Z~:_\324\2269\352&=:\316\220\031\272\256L\000\272\364\241\27594\'\200\272\262$k:\232\010\212\272\2721\00292\266G9\020\213S\270vl\t:v\206\255\272\001\224\024:\275\201Z\272\230-\225\272!z\217:\217g!\271\252\026\372\271\341L\2729]\025{9y#:\271\222\325K\267\361UX8\240\203g9\215\325\376\271\234\2577\27259\206\272\236V+\272\354\305\2019\335\260\2039\022\321\370\270\234\007\3559\'t\023:\356\024\037\272\267\003\240\270;\301\016:\201\331/:#B\255\272\370\002\217\272c\337\3029\277S\2329\332\337\026:\334(2\272~\262}\272>\177\235\272Y\234]:\360\374\013\270\361\242\2218\276\326\0139KHg\272\246\366\2359,rW998\2679\203\004i\271\260\232\3549\356\246E: c\3459:h\003:/\362\2539{\r\3749\t$o9\340r\3538\336/?\272X\222\372\271Ci\2468\030;\247\271\022_\030\272\016d}9\036\273_9k\304/9\207\343\325\271\270\357)\272w\000\035\271\031\241\2109\220P\226\270s\r@:\305\027=9T\246\210:p9\217\271\304\321J\271\376\277\2729)\007\2269\004\206\241\272\302\201\3509toa\272$\305\3169\224\347}:\2307\241:\265\347\2129V\033\2559\364\355\027\272\034oe9\002\221&\272!\245\217\271\231\332\2209\352\247\304\2727\010\241\272\330\202\234:\022+\372\270\025\263\0279\252z\3479\353\305\3749\000?\005\272\270\205\3659*\345\203\272\"\263\2509I\312\027:\023\234x\267\256\\G\272\337\232\241\271\303\343\014\272\277\3009\271\266\021\213\271\223\350\337\271\246|>\272c\3221\272\2015l\272\227T\301\271A\363\2239\033_\2669.&Z:5\276\222\267\313\"\333\271\200t\023:\256\354\3135H\317\301\271C\304\027\272\311\274\2139\007fE:\020\367V\271;\237u\272X\r\237\272-\275\210:\310P\273\267\265\245\227\272*kP8Z(T\272\360\320D\271\302\341\220\271\237\312\257\271,\374!\271s\311%:\003\371B:\266\325Y\272\217 \010:\272Q\3428\234Hi8U*\030:=M\0239\242\227N\272\0210\215:N\371E\267%\020\370\2710p\2038\275<C8:\366x:\345OV\271K\253\2468D1\274\271\t\243s\271t\031\265:\256\215\364\271\200q\260\2719\262 :8@F\2713\026~\2729\324\200:o\362\3539\316\351a\270FM\344\271\313\355\177\272E\001(:\345\327W\271\346b\246:\254X&:\014{q\271eL :-\343\3468\017\264\232\272g\241C\271\306\037\3437\361\025\374\271}\347Q\272\034\210\2149\311\027\003\272\031@O\272\274\257\231\272\274\220\212:\t_\351\270\364@\2759\t|\310\272\202\02227\267\335<\271\3702\r::0k\272a\272\3449\263\032F\271\321D\2329\252\370\352\270h\010\3759\373\002r\272\374}_\266\">\301\271\376\245\3148W\315\364971\200\272L6\034:\3652\2729\216\333\316\270)\334-\272=\r\307\271\363\013\2209Ljw\272h\300\2739\376B\222\270O\27709P\344\247\272\201\260k:\267\021\211\272\317W\317\271\237\276\033:\270\023\246\271\277\202\260\272\270\032\221:\025\333f\271\336\332\0049;\177\213\2728\334\3148[\264\033:\374\304Q\270\304q\341\271\353I\223\267\235\232\271\271\376\335\2349(#h\272<\373d\272\005\036f\272M\250\27682\355\243\272\363\006\267\270\025\366?:b\201\3319\2657d:\263x\247\271\246\007\0378\362\016%\272\317\337\2268\221T\214\272\272\246\010\272M0,9\263\333\0139\315:\3419\010\034\325\271\353\333*9\304\377\220\271\035\242\2039\361R_\272\330$\2049h\337\341\270@\372\026\272\354\245F\272u\206e:5\227\27090gB9\223\217\314\270E0\2129H\374s\272N\214\212\271f\361S\272\301\301+9\257\207\035\272\306?b:w\272q9l\032\016\271\333\322\n\272\331\2357:\371\205X9<\353`:g\224\021\272)\343z\271Z\360\0139\245\032\3429\266\277d\272*\326\033\272 8g\271\256\301A9\3042s\271\356Z<:\270F\34399S;9t\234g\272\226\350k\272\351+\025\271Fk\2139\313\252O\271\024q\2039\242\234\366\267\352{\3029n\334\3178c\010\3449\201\2455:\327\006\3649f\247+\272\352E\2439\303\032\021:XO\220\271\315H\302\271\277\300\2177\240\341U\272\210\013\3769\365\255\3769\224!\343\272\244O\326\271\304\207\2349\347\037K9\356\273\217:\005\013\236\271\372U&\271\307\\x9\016\037\2159\371\'P\272\332\351\2439!d\2338$\236\237:N\256&\271\333\326\3739\220I\2158K{+\272\270\270\017\272G\316\202\272\327\336t:\214\321\267\271v\374\2769\220\022S\272\210\t\222:\263\225\2009\030\317\241\271\260N\014:\245K\2119Fb2:t^\3628\221\2447\272]Y\254:ke\023\272\317I\3359a\037\2209S\335\210\271\207\3415:Ru\026\271\255\177\005\272\364\337{\271\363\244\216\272\266\267T9\351V\0269R\r\375\271\241\220,\272.\0309\271\275?F\271\022h\037\271\036)\307\272\3472\2369\355\224;:\322]~\270\375\210\264\272WX\352\271\007i\0109c\002\241\271\347\312l\270M\343\365\271\300*&\272\243\355\3508Yi\3128d\305 \272\201\006|:\326\324F9\023\337\017\272\003\230\r\272j\321\277\271\306\366\2669\331]\002\272\364\002\375\271\230I-\272\316\207\3628\030hu9\316\224r:\024y\001\2728\032D\271D:\202:\347\177T\272\205\356V\272^1e\272vb\263\267\370\030\253\271,\276\351\270X9H9\006\313\3547\032\302\203:\037\000\3119g\337x9\013\352\3269r\025\032\272\3745\333\266\036H\0357\374[\235:\332\024a\267`b\225:\202|\021:J\2707:\233\212\3638A\033\2359\254\004\010\272\026\207\352\271_hP\272\003)T9\026!\3129\360\377$:o\001\2738.\375\2709\266G\037\272nJ\2209\357\016o\272\\K\0359\034oC\272`\002\0327\247\026\2579Z|9:\361\264h:\016\274\237\270\240\014n:\270\223\2069\350\306\3559l\311\027\271\326\035\331\270\006\36089\177\'\017:\266\374u\272\372\274X\271\337\177\314\271\263Q\2569\031!\221\272\204\376::\317g\003\272\2619_\272\361\016\2069\245\345\3379\034\353\255\271\255\335\313\271z\237T:\355\005\2129Dt\204\271f\234!9\200\321\376\271\007na:\227r\376\270\265\343\2559\001\253C\271\220\016\202\271P?\274:\255\331i\271n;\2639UcI\271C\276\2659\251\207\013:n\237\234:\215\200]:\255\332w\272\372M\3449\230jW:l\n\267:\335r\3669\t=\034\272\217\246\230\271\255\253\341\271u\317#\272\204b\021\272\227\226q:\275\250\0069/\333\235\270w`\0368\263\204\244\271*\346\246\2719 \246\271\021\225.9\000\375\022:Y\332\240\270n\200\020\272\226,\2419Y\016\023\272\325s4\271\276l\377\271\2527I\272\216\321\220\271nrd:`\306\035:U\373\024:\221/\262\271\361\304\221\271\337%\352\272\263\026U\271\'^\300:\334\357Y8\242vN\272\276\3467\267\327[\2439\016|\347\271\004\240R:\353\345\032\272\'\254v\271P\230=:m\207\335\271Z\240\274\270\003T\235\272m\233_\270]\030\377\267\206\241\254\271\251\346\274\270\344\373\2019*\037\205\271\246\235\2479\326\222\325\270\215V\255\272\246n\3549\265\335\336\271>Z\377\271\274\003\017\272\365\314?\272!\224\264\271\245\220V\272\207\377\031:\026\223O\270\n\027\265\272\226Z\363\271\016\334\n\272\313L\232:\263\364/:\377\213\024:E\330A\271\003g\0009\231y\315\271\361\023{\271\024\267 :\010JQ8{\021\2126~\004\322\271\220\206\3109\336?\2769\244\217\3769\372\364q\272\321\016e:y(\242\270\231(\2329r\264\236\266\207Lm:\005D\317:\253qG\271\024\24669\371F\\:J\263\212\271<\222;9\221\347X\272a\342\3309\305\035\2369N\020\2318\337\365\2309\004\325I9\212L\231:|;D9\242\341\027\272\354\210k8\3410}9\205\244\3749j\301\3779)\001\036\272_)\\:\372{\205\272\377v\2419\031Y}\272\233\344\230\271v\244m\272\202\224\0369=,c\272\317\r\017:F\352(:\201T\3059\247Q\2349\214\314+\271\250\003\2228>;\230\272%\221;8_2\025:\322\"k\272L\311\215\272\315\372>:\201\266%:Sq\251\272\254\002\3309dmf9\307o\353\271\243\333\3008\225\351N\272\223\030\031\272\306\332\252\271\266l\2709\331m\236\271\323\361\343\271\371\004g\272\201\221\255\270\375\354&:\363\212p\271{\342\3458\315\tM9\242\330\030:\177\257\3258)\336\3409\301\245C:\344M\027\272\365P\215\271zZ\t:}\310b\272\356H\013\272\214\367\022:\223\213\246\272d\231Y9\026\245h9\3022\002:\203\230\33297\357\0349\344\017%\272\276\235*9D6\2368\306\355\273\271\347wI:X\252\2708\263{\361\270\334 \213:\242\303$:\031j6:vYS\271\007\367%:7HG:L\3527:\333dN:\212D\356\271o\264\3548\243\316\005:\255\"\3759\361k\225\270\347L\3678\372q\024:\010\225\004;\033\373\3159\036HG:\365\364\005:#vf:\261]\3668;5\t9z\020\007\271\216O6\272\3044O7\227?e\272U4\027\2721\240\r7\365M\022\271\341\\\252\272@\333\214:\276e-\272\006`\033\272\033h\002:EV\3769j\250\2619&X\3579\262\001D7\364j\322\271\276*`7H\266\370\271\254\343\203\270s\340\026:\023x\26195/\030:}\251\203:\345\030\250:\316r\226\271\305\\\r\272R\271\274\271\016a\':\212X_\271\360\323\2119#ho\271:\002\212\272\253<\"\2724\205p\271\210\302\027\272u\001\3059\362| :6\201\241:Q_V\272p\357\3159\222\361\02797[\023\272\324\342*\272bL\3258f\301\":\223g\241:\226\006\025:\236\307\310:Z\217\014:\237\216\350\271c\212\007:\3276\317\271e\341\272:\371\230\2459\314\303\212:\251t\2719j\027>\271\356\354!9m\243\263\271\305\232\250\271\363\240\3128\005\n\2749\315E!\272\"\377\2349\327\324\010\272\362\362R\271\2508\177\2709\377\362\270x\317\034\272.\345\3478gE\036:\277\271q\272\027V\017\271\0312\2629\351\205\263\270\226F\203\271\321[\201:\037\022\02694\021>:J\306\3239\365\236\\\272;\2465\271\'\221\210\272\305\262\3579tLj\272xB\3729c :\271\243\276\3079\364\347\037:\027\346\211:{\275\312\271A\241U\272\372\307)\271b\303*\271TZu:\201\304\010\272\210\333 \272x0k\271u\254\3409k,\016\272\027\257\033\272N\375-\272\364\005\333\270\372\321\320\271\275y\2408\322:\350\270\344\372\302\272E\350\266\271p\03178\372t\2659\262\272\3179VE\201\272\220Q\n:\307\252j:\355\376\2768\371\003\246\272\214\223\253\271\016\261\227\272\222\243\002:\234^\373\267\241\224\324\270\212\221\361\270\271\203\0059\2440!9K%p\272\0010\3649\377=\341\2726\272L\272\205\003Z:\014\023\2319(v\0359 \214\336\272\304;\262:l\374\r:,\016\2059\311\036\203\2710X6\272unF:X\373\2317\245\326\317\271t\365\2519\353\347\211\272_\022\342\270(\032y\272\350\222\2158Z\r\250\272\224\247\':6?m\270\300\177\265:A\327\21298\330\005\272O\243\025:5q\200\272\354[\2449W\223:\272W\0234\272\254\264t\272u\224,\272\266\304\3119\273d\016:h\220\243\270hv\340\271\\\271\0169\344\271\3719<\241\024\272T\323\211:$y\266\271\202\024\t8r*\017\272\2033\2727\352\245\022\272\225\360\3329-]\3577c\312]:\225\276\016:*\337\001\272\374\234w:R\335W\270\317\255D\272a\253\367\271\375\004(9\253\354_\272\3756\016:\322A\3549\365P):\237F\033:\374\347\213:ne\312\271\027\017n:\371te9\037\270u\272\320\265\353\271\026q\r\272\315mF9\322A#\2727/\322\271\r\004R:\367\264\2458\273$\216:\236b\233\272=^e:\217\303\3048\357\031!\272\343\037\304:\210>T9\373\377\\8\013\313g9\r\311u\272f3\314\271t_!:\245\266\321\271\270F\3219\305H\277\272\024\372\327\271A\21149\n\352\017:{%\017:\010\016\345\270\243\301\005:e\36699\234\236\006\272\"\242\3568\201\342~\272\346\345+7\344X/:\206\2778\271\216G\2609\342\372\364\270\274BX\271\227\253O\27276w:\216\210\204\272\371\311k9y\206r\271\274\266\212\270\363\3721:#\233A9\372\237\245\272\262<\t:*\314,9\2562\2109\374\371!:\264u\3429*\\\367\2716ys\271\274eF9\261!u9\313\034\221\271!\230\247\272\221\010K9\"W\274\272\0137D9\0356%9\227\327\177\271\362\224p\272Z\014\373\270\354\255p9d(\306:\250\3164\272u\341y8\233\000/\271\033]\033\272\210\034\3419\314`\323\272J\342\3519\004\006\022\272\357\231\2079\026\325/:\231\330\004\271A\315[\272\026q\021\272\377PW7 \322\244\272~;\212\272~\331\2569\217\026c9\001W\311\271\3706\2738\306!\205:nK\3729H\367\020\270I\233\220\271]:p\271}M\304\270\327t-\272\004\205\016\271\211\027:9\222R]:*\371\2626V\267S:\005s\213\271T#\222\271\340zf\272\t@\002:[\235\3508\206\361\2728`\027\2779\214\027\254\271\356p;\272~U~9\304\017\3409\023\214|9\313x4\272J\017,7\235\223\3129\010B\222\271\r\201\360\270\244M\2119\222\256\270\2728[\227\270\0376[\272\225t\211\271\276c\3059$\232l\270y\306|\270pE39\001\261&\272o>\t:\251\210\0009wn\000:F\366\2237M\311\2319J\275\021:=\225\007\272Y\275E:\241\225\3648m\252\327\271\277\200\256\270&\r)\271\324\271\3449\331\356M\271\2010m\272\344\r\010\272\377\305\345\271\232\274p:\005(f9\270\362\003\270\372\353J:\215f\253:u\365X\272\221x\252\272.\033\250\271IH\006:\242\343\335\271\\\357\3449\372\302\205:\210]\220:\315\030u\272P7\3418l\264\2049\366\317\277\267\257\344w9^\200\233\270\006\255\3279\277}\352\271\345\306u\271\331F\n\272\214\235\3079V\373\244\271*\345\006\272y\267\010\272\017!\3478\3146R:\302hD9\177\360\0279\302\337\006\2728\222\035\271\355\343\037\272{\372!\270\242\360]\271\316\220M\272I\277\036:\222\366\3628\001\256\2749zY!9\226\212\220\271\354\253n\272Q\206V7I\016~\272\255\223\t9\350\001w9\254\303W:\246\202V9vi\303\271:\332z9-\373\0049e\322\310\271!\224\n:\205m\342\267Y\034\270\271\334\204\2609\251\271\201\272\3558C\272v\037\210\272\270V\273\271\312C\3649\352\037\3209\r\252\353\271X\002\224\272,\277\203\272\227\210\035\273\334\244c\271\000\376\010\272\024=\2337\3167Y:7\010\206\271f\240\201\271\302\022\325\271\237\2458:E\2721\272\343=\352\270\247s\006\272\304\251\327\271\321a\340\2717\010\\\272\3748\013\2729\316\230\272\320\212R\271.\263u\272\262*1\272r\030\n\271\230\r\2019\2565\327\271R\3417::\333&\272%\316Z:\301\357\315\270\007\033M\272\241\352\026:A\213\352\272# \2359\354\236\"9;\364\2668\242\371\031\271\004\267\217\272\351\t\277\266\214\010\223:l\322k:5\264\263\271n\022\004\272\340\026\271\271OJ\177\272\224\367(:$&\251\271\205*\2308\204\243x\272\241\327\331\271R\362\026\271er,:y\222\n\271\260\316\3359\030\017\r\272A\300a:=Z\3479F\353\273\272n\3229\271M\364\234\267\014\221\3409\246\242+:\305EC:\377\026\237:T\354\031:\342\025\2669\373\032{\272\200Y\223\270\235i.\272\314\354#:\245n\2638\242\350q:*\221\2719W\3160\2720\205\355\270\264\214\0078\365\341\314\271\004T>:S\313\3049\025\252\227:\213N\2609\346\336J9\014\3779\272\237\370\3749\330\254\3118\253\211\2519\264\001j:\361#\003\267\331>\221\271\2310\'8\262E\2219\356l\0029y\334\2379\273\273\0278\021.\214\271/|\036\272\376\275Z\272\362\306\221\270\201!\244\272\030\336^\271\303\347\3519\271\'x\272C#\2138\256\222\3319}\361\317\271F\301\263\271\027|\226\272c,88\255\252\010\271\347\034\2638\334\230\"\271:\266::\333\270.9S\230\3267\216\221O:I\037G8\036\245\3048\302\264\354\271\263\227\2779}k\2719\007\033 \272E\263W9:m\201:\3046\037\271\241,\212\271\217\231k\272\324\032)9\031q\200\271\316\352(9\236z\3169?mR:{\277\221\271\362M\010:\366\364\2539\215B69\203\014\221\271\363\210\n:\372\243\022:4p\237\272\034\223\212\2716\371\0268\244\345\375\270_\365x\272,\232\3159\316\304\2718A\001\001\272>\302\000:\200\255\2449\360q99,\210\005\271\220vC\272\234\215}9\334od9\323\"\206\270\034U\320\271x#y9\246\220T\270\352^\216:\001|\210:\014\356r\271\377\3154\272q\247\3018\217\223\276\270<\242\025:\223K>:\340\232\371\266pD\0169\252\215\204:0\223\25693#$8UPF8D!\331\270I\331\247:\247\253\234\270\264s\224:\326E\251\271}\346\032:L\327\357\271\354d\3329\316[\216\271\201\200,\270\225R\217\271NDl9\360@\024:\024\340\364\271\377l\000\272\342\251\3369t\354\035\272\225c\353\270\034\344\310\270U\225\222:\225\337\3408\\LC\271\300\363\223\270F7[:<\343\337\271\301\212\021:\256\225\2629\252\255\3028I\242\265\271\205E3:Enj9\230\270\324\271:\220\0138\342\374o\271v\336\3137\346\022\337\272\"\275\3768\330i\2317B\311B\272\221]7\271\205\300\3008\342a\250\271Y\365\r\272Q\177\224\271+\227d\272x\364d7\364\363\0149\265\316 9\322\03349\030\212\016\272\014[\221\271`\320\3369\261\010\023\272\303r\037:i\211\203:N\341\216\271\204\3009:\205%7\271e{\003\272\361\312n\272\343\343\036\272N\227\242\267^\361N\272?\235Y\271\037\233Z\271Qq\2759\304\331\202:@\177v\272\210\016C\272\263\0210\270n\211\231\271\024\276K:T\247j:\327(@\271<U\344\271\276\215\215:@$H8 \203#\271\237g\217\270\210\230\017\272Ghg:L\207\314\272EQU\272\347SW\270A\334\2239W\233a7\3546\022:w\000\020\272\245\356L\272\263\236I\272%a\2149\341\363\2329\355\3368\272/\361\270\272;\346\326\272\337\035>:\023&`9\207\253<:\305L-\267\307\235\3568\363\230\361\271Zg\2419m@/:f\225\206\272V\356a:\205\374(\271\366\277\2048\241\022V\2726\330\004\272^Y):\263\035j9\020\344s9\333\r/:\307\277\273\272\0145\251\272\372\317\325\271\335aM\271\246\016\025\271>\355\007\271\016\311J:\006S\\8+\022\242\271\306\366\210:\032\272\3409\026\022\237\270g\000F\271ck\027\272\230\252)9\3100\2119y\026M\271\375c\3119`\312&:\236\370\213\272L\202\232\271\273V\032\272\235\303\022\272I=\3367\233\222\0078\347\261f:\372\211F7;\353\020:\3716P:\215\315\244\272\323\207p:\267\233\030\272v;\316\271\301\264\211\271O\233\3139;X\2229\332\364\313\271\265\317\014\272\217L\343\271>\366D\271\354\326\2749\362\31649\tWo:\214\274E9\276\324\2659\244\'\t\272\335\005\3559\321![:+\0164:\017S\240\271\262\202\3328\r\252\340\271\217\303\3718\330\326\333\271\021t\274\271\251\021[:b\346\031:\272)\21190\323\3077)\035\024:\265\t)9rV\300\270\024\337\203\272\330\224\314\272\237fW8\314\230!\272\313M\2159_\027\2078\251\336?\270\352N\374\270\227j\2609~\316r\271\177\243@\271l\177\003\272\335X\2629\006b/\272\312\264\0149W\212\221\271\312\247\3479\243\337\3169\221\237f\272\007\365 \271\203\271\2459\315\3520\272/\001\353\270\020\234\3019\261S\323:\221\371\274\271Y\000\n\2727W-:\3636\3229\327\247P9\010\306?\270p\245\27380\325\227:\357@\001\272\023\212Y\271b\016\367\271K!\355\270\276:w\272\271\264\321\271\250\350\302\271U\035\026\272v\376\3349a\257\005\272\326\033\231\272u\262\205\272\021\355\242\271\304\331\2139\026<\242\272\000B\2469\321\257\3778\243V\020\271\232\207\201:N\021\314\267~d\2169\320\306d8k\260\2769\034\2468\271\247b\3748r\231\342\271\316\r|\272\217\205\346\271-\343\371\271\032\001\311\270\030\023\r:\240j\301\271\030v\036:\250Wb:\276\326\215:y\271\232:\212\030\201:\341^\2618\304U=\272\303\236\310\271\214G\371\271\226#F\271EG~9\032\343\301:3\376U\270\032\317&\272V\227#:\302b9\271F\001\254\271\tOa\271\331\272\016:\362\200(9+\244\204\271\214|\036\272\263K\205\271t\002\2659)\331;\271\376:|:U\236\013\272\022\007\2249\270+ :\204\233h9s\201\261:g.\3449\263Q&\271eC\'\272\247\027b9m\375z:p\243\2568\260\226\016\272\202L|8gh\256\271\231Z\2229K\234\n\272\371\264G:\351D]9\263e\025\2713\272\2238\205\253\373\271p=g\270k\316\243:9\321\213\271\271\201\020\272\000\312\273\271\320\276v\27269F\271\304\342\3669\347\224;\272\204\003\211\271\272\221|:\361\324\3458K\225\003\272\230\273+\272\001\331\'\272\037\256\3079JE\3769\031\301\3159\374\3619\272**#\271V|\254\2723/k:SG\2518\310;b\272\253L!\272\263\3042\272\236\343\024\272\210y\266\271M\256q:C\335\331\271\271$\346\270\316\270B\272\022\376\206\267\202L\t9\2322\r;\245\2450\271\002\334\2269L\226y\272\225\000M9\007\341\2538*\256;9z\367\3239\234\013\3639\251\300\2349\243s\022:\377\'\311\270\374\334\2108\240\275&;3du\271\354\247\232\271b>\255\271\033Y\255\271$V\035:d\254\251:h\350O9}\2504\272\"\326D:\254S\277\2723f\27293\031\24492\255\330\271\241H\235\271\236/@:\310,F\271\333FM9i\023\363\271\323\3036\272?T\201\271\021\3435\272\370,29\267\370b\272e\203\207:\234C\3038+\"U\264\206vF9\217\\\276:G%\2669A\332f:3P\2617~\246\215:\315\001\244\272\202\224a:\241Y\220\271}M\375\271:#\001\272\240\300\347\271\324\354\231\2727\026\204:\252\204@:\311\031r\271,\273\253:\333$$:,\336\2669\204\342#:\267\302O9\340.=\272\177\372\033:n\255H:x\355\2025\245\330j9\213\364\000:\312V\2358\276\310\366\271\314\036\264\271\272\352\004\272R\023>:\177\326\006:*\235\253\271\330\207\320\271\316\324\257\272\342\222\367\271\264K\272\271\242R\230\271\360\271\010:5\204\360\271\254A\3519\034c\337\271\247\232\014\271\2326D\270(\265\031:W%\3369@\254\3109\2534\026\272\231)\031:f\010\3179B\020\354\271~}\313\271L\237\3619\246Oi:\251\262+\272\210\177/\272\004\210;\272+\031\022:LB\"9L\262r:lM\320\271\007R\2679\264\213_:\032\022\"::np\271\3426\2348\246\335\200:\364Lr\272\004\311e\271\333{\001:\032N\034:\003\273\005\272q9\234:\207|\3469\rY\3748\217\001\201:\212UL\2723v!9\316dt\272\227\352\024\272\007D\006:\252\271\2439\260\302\321\272\221E\230:M\335\n\271\3477\t\272\372p\0029\033~\0229S\346\0016~\2359:S\\\014:~\034\016\272\272\325@9{*\2239C\272\210\270v}e\272$\260.9\250q\3049\200\241\014:\3658!9/R\001\272T\246\n9\304\035-:\021\013S9\241:j8r\351\204\272V%\010\271\300\271\037\271\350\234\347:\205\364\217:\026y\022\2720@\2619\260\356\021\271\315\323=:\225SK9\2179\233\271*\324v\271\204=U:\263|*\272M|*\272uJ\310\271X,T:\252\334\206:\315XS:\r\300#9\324#\2329\010\000\250\271Ky\003:F\301\3079J\0351\272\305n\315\271\375\362\326\271\251\334\3138P\020\206:\333<F:\232\365K\272\242\243\327\271Y*s: \020S\272\3061*\272Jn\024:\3369\3069\262\253d:\313\331<\271\350\312-\272\372L1\2727\204\315\271\214F\2069Z\205A\272\235\265*:\301\263\r\272\013\273::>{\215:\213a\341\272\016\323\037\272q)\251\270>\024\324\267+{d\271H\003,9\346#\3349V\210-\270\323\035\263\271\177\356Q\271t?\2679K\372\0269\222\32429\342Vm:HO\265\271gM%\272(\017\233:\234+\224:\341\0324:2\322\370\270\265\354[\272\276\300\0038}W`:Tg\354\271%\264{:\303{j\270\277\260\245\272\004\367\242:\254\360\013:Y\310\257:\037\230\3708`\021=\271\257q\367\271~j\275\271\007~f\270%\260\344\271\037k\270\272\240\020i\272\305/\005\271\305F\305\271F7\0179\346\301a\267\244\236U\271 \206I:\335\224\2119\365=N:\321\254\267\271\231\331\263\270\234\236\244\271\231\241\276\271]\335\206:\256K^\267\270\324\265\272?\334/\271]J#9\016\267=\272\3369i9\034\246\0179\265\033\220:\357\366\21195x\005:\204%K:\217J\021\272\\%@:\243N\2048\353M=:\007w69\356j]:\303\3421:\232\317\026:_\n\3459\375\233S\267[fi\271N\326\005\272\035E\t\272\241w\271\2729\035\2369ll\2009\270\223\2109\376\320*\272 g\021\272\336fC\271S<\274\271\351\214\034\270\027V-\272\\\315k\2728\363\315\272\245\260\2549=\207`:UV<8\327A\212\272R\350\2719\006\0211\272\367A\3569m\204\245\271\363Qa:\311\354\311\271\216*\216\272S3\262:\223v\0078\336\216\0239f\010\257\271M\030\35198\301\031:\037\321\2209X4\2159\243\335\020:\217\240[\272h\247\033\270\322\312m\272\030\272\2019\021\272|:h\322\3229\242049\345\002w:F\301\263\271\034>\260\271\214\202\334\271.\256u\272\351\327\370:\267<\3009\237r\2268\207s\000\271E\274\232\271\215p\205\272&\034h9\241\271A9\202\311h\272#\240\037:\245\341\2239\314\322a\272\345.\3329\234!*\272\227#\010\272\323s5:\025P\031\270b\303\027\271\343\230\204\272\'.\304\271F\315L:\334|\3539L\007\2329I\314f\272\002L\2549\034I\026\27294f:2@\326\271Vn\2539^\001\3139\373b\3338W\351\3478\017\341\003:\306\277l9+Z\3669\202\246 \271\374\265\206\271j\341\3469\376\002\0239\000\351B\266b0j\271\261uG:]L\022:\246\313\3424\302\213\374\271O\252\003\271.\022\021:\217\"\010:\225\314\210\272\177\335K\272\3664\370\271\270\366N\271\306\024\3429H\003A:{H\2618\3348\036\267NS\357\271L\307\003\272\322G\3408R\315[:\017\253\202\272\300\330\256\271iJ\212\272\366\266\2759\034\310\t\272>\356)9\341\221\004\272\262\277A9\021r\205\271k\306\022\272\314\023D:\203\027t:\344\306\266\270\327\360K9\375\366\2609\313\022a\272,h\2209)T\2559\363(\203\270\226\t\3779\215\"\022\270#\3021\271]G\3738\336\005b\272\210\033>\272\213uh\272L\2158\272\033\367\014\271r \3379$\253\0329\365\251\277\272f\020\003\272\322\327\3579\316\002V\267\250\265\022:\332\265<\271\026\210\332\270/\215/\272\232\334b:\377\344\036:\317\r.:YK2:\007\201491\267\'\272\215\216\2639\323\324\3729.\346~\272~fL\272\223\342\2249\016\377+\272\365\t\3228\014_\325\267\227\"\2648\031sG:\350\035\3528\367K&:Hlv8\215\311\233\271\321\243\035:\016\332\3279M\035\214\271>L\235\271\365\n\217\271t\310W\271\207Q\215\272GD\3609\030\211\3359\303J\313\271\224\032\3507\300\274_\272\264\241\030:\231\203D\270Y%\005;V\350h\272\022\251\3639\232I\317\271\322\204/:\313]r\272:\306s:\353\221D\272\024a\2579\252+\230\271\220\257\2039IU\366\271\277\313w9\032VU9\016\301\'\270\341\374\234\271U\364\2149\321lO:\237Q\\:;}\2519U\372\3309\025L\t\271\240\202{:\377k\031:(\020L8\200c\030:\264\201B8\030T/7<6+7\311\003<\271\030\330\000:\n~]\272\3726\035:\000<\2509\253%]\272?3C\272\212\274\3029\231\205\3729\354\243\3707R\354\032:\275\027\035\272@OR\272\360_R94\256\251\271\270\224D:\276o\3449L\242\016\272f\254C\270\3574Y82\221P:\331\307\224\272\246#\205:\257\330\267:e\375-8\320Q\236\271\277#b:(-9\272\207\315z\272\337y\303\271\014\204\2209\314\205!\272\275\353g9\303\221|\272\224\035i\267\006i=:\237YE\272\336\002!\272\350\334R9\2573\202\270c%\231\271(\t\314\272\241\315W8\374\271\330\271\255Fl9\027\006\342\271\352\222\237\272$\243-\272w\357\037\271H\235\3519j\340x\270\002\014q:u\236S\272\234d :\037\233\345\271\232\234\312:\361L\3519\356\210%:\212b\2449qJ[:Se\357\271\351k\2309\003\365\000\271P\235\264\266xm\272\271\205K\301:\212\226\214\271\313\245.9z%A\272E\023\311:V\335\217\272\254\t\3338\310\330\240\271\313\351W\272dZ\021\272\355\036|\267\023l\200\270\244g\':T\201\227\272\235g\2279\000Ph:\365-\004:q\233&\272\3577\233:9:\2429\347.=\271C!\212:+5n\271\202F#:\310\227#\271\215\2344\272\302\'\307\271\361\002\2049\364\363n:\3764\2759\nF\2659\302\373\\:\311F\3249Lm\223\270t\004_9\'\312\217\271\362\234\2238bfR\2728\210(:\3366c:\313\235a9@/\002\270\252\327R9E\204\200\272KeN\272C\307\246\271\304i]:U\341\003\2719\275\020\272\240\360\016:\333o\2379L\\\2418*\332Q8t\274\303\270\r\n\240\271_\262i\272\325\245v8Y\203y\272\361\010\315\271Lz\356\271\210\325\3017\364\246d\271\255\272\3049\354?\030\272Xm\016\271\2214\3039\225\231w\272^\244\322\271LrU\272~\216\2339ulQ:\240\201\024\272Xk\353\271`\310$:\223\261[\272\223XX\271S\310\322\271\362{c8\020H\r\272F\223K\272\316\264)\271Ds\n:\215\375\222\270\336\242\233\271\221\017n\272n\010\023\270\303\240\2259J\370B9%&o\270\200\320\354\271\332\035\366\271Cc\0349\346\2458\272\374\274\013\272m\237\371\270\353\361%\266\237\370$9\033l\334\271\275\321\234\272\334\345\221\271\333\322&:\026\267^\266\320\246\320\271$\314\034:[s\3239\206|\220\271\323?\014:\217\007\3069\375\351\010\272\357\331\2709\313*\003:X\034:\272\026\314\222\271\262\242\01094|\225:8w+:\254\264H9\003\333q:<\3024\272;\341\2568\277\260\017\272\372\346#8]5\226\271\014\330\324\270M\222!:CO\n:\0361\204:\357\226\2149\340\304s:\271\244\3126\232\255\334:\022\t?\272-\231\3209^A\000:z\245f:\315\374\346\266(\025\243\271V\247\212\271h\330\241\271eiR\272)d\2568\324\r\2778\367_\3269\301\355\275\270\353\275\271\271&D\263\271;\212\224:\'\021M9\375\341\036\271\353\250\\\270{n\212\272\024M\253\271Jr\261\271Gm=\267\006\275U\272\234\241\250\272;{\035:\034u\2109\204\230x9iXv:]\325B9N\351\2778\363<\203\271~Fo\271SN29^8\0359\220\300\3429!\311\227:\301,\2229R\315\2369F\320\'7_\014\373\271%\035\005:v\014M\272\303\271\320\271\264\026\2339\213?\271\270\212\"\0349J\002o:z&.\272Y\\\213:\301>\2349\024\023\020\272\346j\31395\213\0029\004\217\263\271\033B\204\270f\262\332\271)\371\3549\325\273\2639e\202\3778\341\216G\272\r\263\2049\"Fz\272\256oE:\346\334\375\271\206iQ\270\006\'F:\301\324W\271\252d\2438\222@\3319o\376\027\266\017:-:\305?\347\271\220\251\272\272\251\236w9>\313S:\344NT\271\3063\251\272!xJ\272\370\200\335\271^\360y\267\354\361\2218C\273\234\271\320\233\030\271\311s&:{K\350\271\024>\2469\006\2151:\335\305\3439\354\0034:OB\321:\254:\2579\241\\\000:\341q\222\272\255\2269:*_\3148#A\375\271v\232\375:r\321\256:\022O\0149\t\022\25383\322\224\272\016^%:?k\362\270M\236X\272\275\t\3418;]\032:Q\307|8\277\322Z\272\030{\331\271J\320\3139\256)\006\273\000B~:\266\374g\272\273\315\236\271\374K)\271:3\030\272\014\002J\270\3366\207:\010\353\344\270o@(\271C\343\2239\202o5\272\211\002\020\272\371R\3559\225nh\272\237#h\272U0+\272\220r\2758:z\2158d\321\3408\026\210E:\270\232\213\267S\021\235:\314M\022\272N\027\2669\264\25138\365\214\006:N\002\024\272\363|g:]|\2709\316\204\243\272\301j\021\272Bl`:h\314Q:\231\276\023\272{\036\2429S\n\030:\345\266[\272vW\3308[//:\321\365\2279\216!\2019s\365{\272\220*%:C\256w:\372\014\304:\027\262~84Tw\272\346\232^\272\221|\001\272\357p\215\271\245\360\211\271je\2579\360*\007\272F\031\022:\235:\206\270\211Z29jxm\271B\302\036\271\023\344\306\271R\314:9\242\307t8\332!K\272:\267>:\352&\027:\234\001<:\212\364\032\272wFy9\347\254\2128\013},\272\351\236\3749bH\\9\216.n\272\014\321\343\271\022\273\312\270\267\"\300:\034@69\037\351\2369\031 \37794\001N9wy\2769\003\002E\272\003\247\212:\377`\3579\225\214&8\235\260\0139\265\253\3059\210\276?:\013a\021:\010\212\213:\223\20399_s\002\271cEO\272\"\304%:\233MX\272\016\300#\271zk<8s,\2279\352\244]6\253Cp:O^X\272\371\222\0049\r\003\3069\217\352D\272O\276\372\271*V\3719\000\275Q\272\230La\271\237\220=:S\002\033\272\341f\342\271S\3272:\371\357 :\332\362\\9\253\351P\272\235\005$:Y\253\0378\226\265\213\270\007\362\013:\004\3605\272jt::\321\255\262\270S\224\t\272\252\272\037\2717\\\204\271\216\266\211\271\005\343\2539\317?\3329Nu\n\272G\227):]\360\222:\031\235U\272\021n\016\272+\223\r\272\036\341\276\271\335\223\221:\201p\215\272>\033:\271\226\312\261\271\356\004=:o\335o:\002\335+:\350+\2579\323R\241\271\354\247\2129f\205\335\271N\347\034:\211\325\234:5>\0359\024)d9\3637r\272\0071\000\272\204 \205\271\216\010z\270\220\216\353\271\303c\202\2711\367\226\271\237\037\3068\344\355\237\271;\32759E\037\3629W\237)\272\313\257;\272v\310\3417E\357\001\272S>\325\271\212\023!\272\231d\244\272v S:\201a\243\271WZ\2238C\303\204\272\342\330?7\004\341\3679\305\001\3349\233\326E\272k\254\2338\331;\375\271\302\030\202\272\324\256\2309\330H\372\270\354\335\027\2710<\030:\355\273\214\270\202\006\220:d\242\004\272\257\267\210:P\372\3619{\322g8\335\350~\272\326\005\n:h&=\272S]\006\272\014\257+\272\266y\2328\tk\326\271\251\312\0318\334\340e\270q\366\007\272\350{\367\271`\260s\271\273\363\013:2\252D:\226\376\016\272\325`\2369\275/K9\357\374\3419\\\025\0239\177\207\2209\253bA\270\366d\261:\233\234\027\272\373\255/:\267\035\264\271\273\232\252\271s\207\0178f\345\331\271\3438\354\271\253\331\270\272\343\020\003\267y\035\3738T^\021\272\3777\255\270\034\363\025\271L| 9,[\327\271\357*Q\272W\227\032:u\030\271:Uj::G\r\265\271\232\177\3019\017&\236:<\200_9\230p\t:\377\260\3439L\315\010\271\226]a:\227\355\032\272\376\307\0258\305\243q:cU\013\272e\365\2569q\323\271\271\030(\326\267\ty0:\213\270\265\272\237\313\2139\237d\225:\202\302O:\247\337q8H\\G\271!\243\2759!5\n9\'\027}\271z&\347\271\265\337\2679\237\376\245\271\365\362\000:Fc-:09\224\271j\247\216\271\000\262\210\272j(d:\nM\300\272\363\272F\272\0212\207\271@\205j9\343\246\3509\374\263\242:Y\255:7P\234\2708\235\016\272\271\202\271\004\272\310m\201\272\337\373\216\272\030\317\3179\355\022\215\271\204p\t\272GT\200\272\232\262\351\271n1\223:\356\323\212\272\225b\002:I\352\301\271T\351\226\271\332\266\000;\342\365\315\266\255v\2319\211\275\223\272\343Y\014:1\334\3448\261i\277\271\204~\206:G\304J\272\256\'(\272\315D~:\207;\\\2722!\3258k\351\002:zs\341\271\344\225\3617vSk\272\247\245i:\231\343\220:\210\370\3349\301?\026\271\352A\307\272M\016\255\271\350\2360\272\2756\2368\30573\272\207\262\372\271\256\266z\271\001\301\3209\307\362\2578Mm\210\270O\267)\272S\377\036\272?\364\033\272\342N\2769\345\021\004\272S\370\2739\312\226\027\270z\303\3738\352\254\3738\306\364\007\272j\267\014:y\2118\271\273D\3479\366\033\007:5\366\3509\362i\356\271\273\225\227\270\373\227\2659\021\375\3026\020;\033\270\375T,9(u \271>\334N:\316\215\2758jW9\271\0035D5q\245\356\271\034\374>:\321\022_\271t\211\243\271\301\243\2769\262D\262\270\024\221f\271c\236\005:\016\325a\272\3155\2448\243\316\304\271\214\360\032\272B\3467\272B\304\206\271\3133.:\316\257\020\271z-=\270\247g\022\271\266\003M\272\206\0071\271W\207\326\265jY\246\271\2435\r:M4\003\271H\3372\272\257\366\032:\212k3\270\352\221\0348G\275\025:3\365\242\271\366\346\211\271#\324\2608\205\306\3139\213j\013\272x_\030\272\027?\3737\312\375Y:\3144\251\271\226\327\2179\355\235E\271\003\302\004:\\a\023:\034\361\r:\327\246s9:\335\2539\302\r\027\272l\376\361\270\374\263r\271\233w\230\272\314-\t:\326\367\020\271RX\26684\324Z\271\024:.:/2\237\272f\323.\272\230\025+\271\022F\037\272\273\244\n:\261a\r\272\224\324(\270\007\032[:\246\340+\272Cn \271\350)\t\272\327\2165\272f\346J8\231|?\271\006\225Z\271e\006\211:o/U\272\204\266\024\273Ys\007:\300P\2149\023c\3268\204K\2427E\0109\272\216\361Y9\256\376\234\272~a\2439\213\n\2759=\024\232:\363_\232\271\333XW9\202\206f\272\373\317-\271\277n\2449P\211;9\302\326\210\2721:\244:\245\215\003:C<x\272\254N]\272\240\361\0209\343\3001\270\242\201\275\270\323\233^\272\025\226\0149\256\264\t\271\274\203\013\272p\374\3339\356^(:\010\355#\271\027|\3759\340R\375\271)C\3459%\235\025\272\3005\26396\022\237\271\340iD\270\372\255\2359tER\271\3379;\272\276\250\3349\301o\230:1\257L8P\217\300\270\221\333\n\272X]c\272y\331\016\272\013\250\000:?\352\3529\305\346\346\270\323\035\3649g\253i\272\275F\021:\234\344\3719\036\317\033:\265\373c:\234\242\370\271\272\306\002:\321\216\214\271U\001\316\271\272\312-:\355\353\3127W\351\3648\234<-\272V\265\367\271p\210\3719f\362\207\271\006\220I\272i\204\002\272g\271\2649F\213\027:\350+a:\3108\2349}\033P\271f\033%\272\240\330\1779\350\276\2769vW\266\271\t5@:^\310h:\205/\223\271\tW39\344\305\37498W):\376\022\000\272\234\\\017:\217\022\3578R\002\252:\344\236\0279;=w\272\365\337\324\270I\240\2319Ni\220:\321\213\345\270\356+\3429\334\25579H\001g\271d~&\272}\331\244\271\\\262M\271\032\n\3618g\201\005\270L\017\332\271\022\210\373\271\010\034\254:\262\246\0219\212\365\005\271g\326\3258\240\200T:d\205\022:\007[\2219\244\317\253\271\270 |:C\341\337\271^\221%:\300=Z:\361\007\356\271\260t{8\200\366\266\271\263RM\272^@$\2724\017\220\267%\013\346\270h\252\212\272\177\007\2318\020\021\277\271\033V\270\267:G\351\271~9\321\271\262\222V8J\266\'\272\304;\017\271s\375\244\271\247\244\2129Q\222i9Q\'\3079\203\372\363\271>\355\3419\341\334]\2726\213\270\271xy\235\2722\250\2019?\306\201:c\003D:\t\000\2228\331n3\272\2329y9\016\2067\272\013\026\243\271+\373]:\027\361\252\270\350\367U\271\217\375\314\271\004\013\025\271\"\004p9\365\246\025\272}\364\2728\2451\034:\345\350e\272\350\253V\272!\301\271\271\323\254\2446\214\177\2068\224f\3629\266\372\010:\367\244`\272\r\304\2229]jD:\340~\256\272v\352\262\271\030\276\007\271%\315\202\271\346X\356\267\3164\2009\242\026n\272\233\326\245\271Q\251\3348\341\210l\271\024U\3658\360\322Y\271\374V6\271Gy&\272\327\260L\271\306\307\035\271sa\255\271\252C\036:%u/:\353\342\225:\376\001\243\271.L<\272W\002\301\271\201\343;:\362\324S:\244\027\2728\355\220O:\235\241\330:\262\351\003\272\016\001\375\271\032\313\032\271Y\375\2719\211\326\3058x\367\216\272\2179\227\270o\003\2749 \030/:lH\3279\304U\n\272\360\376y8\371\332L\271\022\022H\272\014\251Y9\307\007\034:\206\rX\272c\014\275\271?\253\3309\223\354b:\301\352\2677*\000\234:\004\223\016\272\022\016\207\267t\211\312\271\316\231\034\272\370\200\314\267m\356q8\216\"V\272+5\317\270\0307\2149\270\372\235\270\274\024\333\271=\355^\271\333\375\3627\324K\372\267Lx\2368\300{\361\271\337\261N:\255a\2109\263\314\002:\033\222\036:b\215F\272\253\214\227\271c]\006\272t\025\334\271\3333(:z\221\2749\014\177\214\272\032+y9\322\310,\272d\037=9&\r^80\n\3409\347\177{:M9\006\272-]\3759\273p\2469\001h\2147U\274\023:\t>\t:\351pj\2722fY\271\"\322t\266\032#\3639\302\251\0279\364y;\271\034\327\"\271\332\302j\272\361kd8\233\372\332\271\366BY\265$\375\024:\362\232\030\272z\375r9\360W\241:*\256\027:}j\t\271\352!_9id\013\272\tWM:\260\210\310\271\262\246\3729\212p.\271-\023\366\271w\341\35391\277\177:\331\000\030\272\372\354\2469\206* \272}\372\247\271\225\266>9\030q\3048[\322P:sT%:\203h\220:ND\3228f\352\003:\317\247\"\271Vu\0049\300\343\351:\014\246K9\016\214\007\272\303\313&9\333\356\033\271v\224\241\271\270\207/:\no\253:/e\324\271\214o\260\271\202~[\271\260\257\2509\231\267;\272S\323\277:\016\004\t\272\247\013\214\272\026ZP\271\330\3627:]\344k9~\236B\270\005\035n:\3707\2679\264+\006:\250\361\366\271\305g\037\271\324c\3159\247T\2629[J\2209\360S\022:\215\256E\272\242\0324\271@\021\002\272\013G\260\27208Z\271\267\326\2279mD#:/t\r:\362KA\2724C>\272.\033L\272:\372-\271\354\247\1779K\010;8U\0108\272?\367\\:\374\323f:E\332\200\270y`v:\006\231\251\271$UC\271=\002\3059\336\013\t:\000X\261\272f\004k\270\251\242\257\271\266Em\272p\242}86\232\2619G\r\300\272m\247>:\301\305\330\271g\333\n:\324k36\371\376E9\t9\2779\203\211\204\272\016m\2379\004*\3049\313\t\213\272i\036\217\272\30278:\226\002\350\271\266\343\277\271\034\370\2249]U\237\272\350\366#\271\356\212\217\272\334\351\266\2712\243\225\272\326\261\2659I\274\177\271\220\017\3077\316\2507\272\321{\223\270I\310\3248\365~\264:\247\321Y9\306j^:\213\022\221\271\220\276\t:X\\\211\271\347\224\3009\321\275\022\272F=\220\270t\371$\272 >g\270\365\305\022\272\360\2463\2722\367\355\272\320\003=\271\361\2122\271\327\233\2129\217Z\275\270\td\3107WD\300:H[9\271\210\014?9\354\024\025\2713\333r8\313]\333\270\241\2170:\247\370 \272T\215\353\271\262\336\274:\327\003\377\270\341e87\213\305h:\n\224\306\271\352u\021:\265\006\341\271\224\322B\272\245\325\277\271\201\274_:\324f\035:\024\360G\272,ip\272\027\006]\272\337\210/\272l\3240:W\\@9\216\244\261\272J\255g\27256\032:\377\r#\270\2074\020:\225\037\332\267\207q^\272\023\n\022\272\231\370\2649CS\0357KF\3679\214\030\3169R\323P\272\005s\222\272\224\265S:\3145\2369\335\346\003:FJQ:\276Q\0329\334>P9\003.`9nS<:8bD:\330Wg94\201Q\270\337\254\207\272\250\023v\271\036\232M\272\371/\304\271\260\361\340\270\350\032\020\272\207nR\271\034u\3119\222\000\300:\256)\3149T\375\255\272\213\004\013:t\025\025\272l\365B\267\352\335\202\272i.\2279\320+u\272\021Dc9\217\003\2049m=\3068\355J\2549O;\2158%g\017:\346\351\3709!\272\2479\335F\325\271jf\347\270k\225i:\251\0059\272\326_k\271\374\274\234:\t\275\3739\364\005b\271b\253[\272\203\200\312\272\246\013+\272\313s\265\270\200\030\3649\241\203\230:h\3753\272\360d\3055;9X\272^\270\005\271##E9\201\333\231:p@\020\272\224\202\3719\036\226\2518B\026[9\014\237\317\271?lb\270b8\210\270\266\360\':#\031\301\270\247\205f\272\206\023\204\27164\327\272\366\234d\272\347^}\272\272\371\3318\303!\010\272\021( \271\322\030#9\331\336x9(\211\270\272\362({\272\333\366X\272\005;\2509\343P :\231\355\251\271\316\025\340\271v\006L\271\323\302k\271\215\250\255\270S9\023\271w\357;:$\205\2109\311\000\272\272\005\332\252\271\260\337\365\271\221\315r:\275\377\224\272\000\272\274\271\314b\2328\314\030\375\271\226\237\2519\"\030\3749\357\315\3446\232\004\220\271m\271\2629#\206\205:<\265\0229\205\335\355\271\337l\2238\001\220\2319B\'S\272\220W\3539\034Q\227\271or?:\2518\031:\025\360\236\271\347\035G:\023\240?:3\233\032:\373[I\270\221w,\271v\222\016\271\353\000\205\271a\205\232:\337m\020\272\232\331\2478 \343\2368\267q\203:r\360\364\270\214\3431:Foe\271\262\351v\271F\357\3009w\260U:\304e\025\271\337\240)8\264\222\2649;\231\004\271\261`~:u;\304\270\357\n\027\272\232R\310\267=\337@:\352\003[\271x\315m\271\246\361J:R\020\213\270\236~K9_\217\20284\202\232:v;\t\272\n\",\272\211n/9^\356,9\004\254\304\271\243\030\3245{I\010\270\310\232\2359Q;\t\271\230\010\3149\255\372\2138\366\324\227\271\016\223\r:+\257s\271\204\244\006:!\250\251\271\205\027#\272?\216\2628BF\365:\035Z::\371\203\314\271weH:p\315\2558\267\340\272\272\036\227^\272\250D\014:\235\331M:VO\326:N\255S\272\354\343\2039\307o\202\272\211\313\2759EhN\271>\217U9\345i\0309\316xQ9G\204~\271\232\333\2309\347#\215:tJ\2309\272o\203:r\242=:o%\372\267cA\3748iV7\271@1f\272\351Y\34688\207\354\271\333\313\177:)P\346\271\226A\031\271\3453N\271G\331\2149=\312\036:\037\233\003:\n2\3759\207_\3018\037\034\307\271\006Ef:\340\262\331\271\221\001q:\352\250W\272\222\037\2519\360\307\263\270\223\0263:s:\007\27275\2719\237 \2269\300\273\207\272F\315\266\271J\014o9\"\375\2159W\031G\271=\316\234\271\344l\206\272\234(08\273:\250\272\253\003\2779\343\274\2308\030\220\3479S\341*\272`\024\206:\343\345\030\272\026\241\322\272\231\267\3249\263\265P\271\221\263\n:\256b\2648\204\265\334:v\007\035\272\372\237?\271DL\2538\024%\030:KXh\270k+\240\271~If\271G\322\263\271\007\241\207\272\250\331o:c<5\271a\352\016:7t\331:@\3715\272;\275d8]\352\t\271\247\366\3279\3711\2339\006\225\3279W4B:\377\250m\272\r\302\213:\357\231;\271\263\026\2109\277A\0148\033\177\237\271e\266\26281\006)\272T?\2739/\242N:\203b\014\272\003T\001:\216i\007\272\026\222\373\271\202\020\212\271\342\312s8\343\337\033\272UP \271X\027\205\271\006\252G:\371\206\3649\'\034\3359<\037\2449b\376s9\211H\343:@\330*8\347ov:\206\026\215\264\233\216)\272\322\335a\272\323\216\3079\246E<:|\305)9\226\014.\271\343\212\1778\362\341\000:!Wm:kgB\272\004\220\017\272\352\377\003\272\200\204h\272\272\372#\270i\010t\272\226J\307:\\{L9\315=4\271d@\232\271\303\343\r84\000\237\270\204\223#:\246\313\022\272A\212&\271\341\210\005\272\027T\244:K\236\216\271 WN\271O\255\3549\374\366\034:s\325\017:\366\375\201:\250\363\237\272\260h+8\357\377B8Kx\346\2718\356\304\271\312Y\\\272\003\346\243\271K\362\312\270,\273\2019\360}E\272h<E:\375>\215\271}\276\000\272\275\250\017\272m\316\3019\001$\025:\252~\016\271\264o\2407i\001s:\262\265>\272:\306(\271\274\204\t\272$@\3629!_ \272\223gj8\007\007\355\271\250\020\320\271\006\323\034\272\306=<7\364.\0069\263U\031:\221X\322\272x\335\000\271ued\272\206\366\035\271\303_h\271\026\227\206\270\313\240\033\272\212t\263\271\301\217\252\271\236\271\236\272\032\233\3458/\003\2358)\234\2729\361\261\005\272o\255\005\272\350\274o9\350\333E\271\337\031\3009\204\263%\271T\023O9K`\2159\0355>\271\013r\022\272\310$_:\234T::\0063\241\272\277&\3517\207\'\0178\317\334\347\271*<7\271\307-\037\272eZ#\2721q\0009\303\247\352\2717\360\352\271\210\364{:\246\305u9\235+^\271\177.Y\271\222\177\016\272\373\332\271\272_\232?\271y@m\270_\350\205\270P;v:\032\313\017:\266w\301\271\247\320\023\271B\223\231\272\213\211\362\272*\362\213\272\257\355\2309%\301?8\320\325\3519\360LZ:/\247\3429Y6a\271\262\310\020\272Kl8:g\353=\271ZU\235\271U\2004\272\201\007\004\270\033\345\2448\362\270\205\272\314g\1778\267\313,\272(\305\022:\374\207\\\272WRi\272\336\231\2358\003j\272\271\374qO\272\313[?9a\"Q\272\351[49\226]\342:\354\216\2209sV\3039eI)\2726j\360\271\024P\n9\360\213\0208\3007\t:\303\312%\270i\223\3278`\215\217\271\212\320\004:\265\36449\3442\237\272\030\024\3229U\n\2269\317_c\270\366|p6u\030\016:\251\021\2719\364\033\026:T\205d\267\357\3441\272\007Q\003:\2540\264:\2201 9\016_r\272=\252\202\271\177\t\273\270q\241\036:\345\303\2119\213i\2639Z\036\302\271\362\367\201:\327S\013\272\\\340#\271\247\255$9\313\267\3269\227\032\2329\277\375\227:`\'\"9z\346|\272\376\233\227\272\307\255~\271\203{\0268\013\n\314\267\253q\266:\314mv9\231\314@\271v\24418^\351}\272\270\356\202:\345\341>:\347gm\271\025\276\017\272(\r\031\271\363\207\3009*\360d\271\222/?5\025\311\202\272~\017{8\336%\273\270\351\010\3377}\370\332\267\230\205I7\213\367\350\271r\275\3029\374\364\023:\202\361\251\272\336\366\005\272\345\033N\271D\36089$\222\203:\276?G9a\\\032:\326\367\005\272Uac:C@J9\t\205\263\270[m\217\272\371\215T\272y\020\003\272\322\356\247\271Y\272\337\271WS\217:\335\251\202\271\353l}:r\260k:\262>\370\271\330\006\007\272\n\277,\272!v\213:=E\250\272F\243e\270\333\025\030\271\312_]\272T\272R\267\311\352\373\271\236\217\2679\020\240\3338G\035/:\233\000\2708\333\003j\271n\312\002\272uX\353\271){x:\303G\"\272\323\212\322\270\0218\207\272\r\353\3278\020\005x99\362\327\271\301\351%\272=b\277:\220!\036:\337\365\253\271\363\356\3078\306I\013\271G7\010\272\262\003/:\340\343\032\272\216\260\306\271\217\030\3568F\364\347\271\364\257\213\272\177\266\343\267\034j\3428\231n\025\272\300\350I\272x\2523\271\255\320>\271F\314\3779A\362\251\272\'^\357\271imz\271P\t\020\271A\240\340:\341\332V\270\363\033\0139\266\265\0349K\007\274\270\002\255\250\271^>\312\271L\366f\272X\212\021\272\337-::\364\3522\270\256\336\022:\256\3052\272\300|]9>\177\235\270\014\35699Uj\3759e\000\024\272H\372|9b\331\025:\334\035\2779t)#\272\266\233~\270\261\310U\271a/\3659\331\367T\271\005D\225:\266\016*:\356\233\233\271v;\224:\323\235\3509\t\213\340\271@\033\377\271\251\201\004:y\256r:k\266w:*Xd:\177\327\222\271\377\373#\272e!U\272\355\235\2679\232\250\254\271\266\335Y:\206\335\270\272\246\007\223\271.Mw7\221\215\003\272_\376\246\271\326\031\t:\016,\232\271\204\213Y\272rAn\271J\263\2469\270\267\033:\035<\3639\311\300\234\272\256\351\270\271\277F\222\272\324\233\3618\237\177\2668\234\222\016\270\017#\2648\276\322\3318\230\230i:0\225z:yF\3259\022\245,\272\t1\224\272af\003:\234TA8\277z\225\272\373\344#76\344\031\270^V\3636\371\224K\271\000\253\255\267\025D\025:[]\356:\327\207O:9\306\3149\016\364L:\025I\031\271\0140\026\272\332\365L\271\313\0033\2716\310e:\375\36779\356\030\3438\2346\224:w\007o\272\370\026\007;\264\367\022\271\265\024\262\271\227\227\031\270\343\'8\272>\344\2469\214l\264:\236\263B:FN\241:H\252\227\272\327\2324:\262k\r\272T/\256:2\\\225\272\343\311\257\271\027+I:!\024\t9z\3033\272\334\232\337\271h\t\273\272\233Y%:\0067;\272\321T\013:i\364\002:\215\263\"8\237\217\000\272\326\3214\271\334n$\272\rG\350\271\301\274v7RP\006\271\223\263\2309\340\036;\272\355\206%\272\277\005\3249\336\346Y\272HP\250\272\277s\212\270^\345\215\272\317\252G\272\202\366\020:o\210\271\272\373qU\271Z>\001:\325\004\034:\335F\206: 6\303\270L\\;\271+d6\272\"\'>\267!h\3129\335$\3239\004b\260\271\337o_\272.\3742:\372\256\261\267\267{-:\311{09\355\003\364\271\320\226\007:\031\310\3659$j\177:\331\333i:\320\t)\272Q\344\257:\261\273\270\271L\270S\271\255Mc\271\003\363\276\271\354\361\177:B\226\022\272?N\2577\n%|:\320#?9\200\r\035\272\234\r\335\271\343\026\220\270 ~a\272\2460\002:\217^3:\006\362G\271\244\361\3319S\256W\270d\001a\272\244\217M9\036,\3369\360\312\017\271dx4\272G\\\006:\317ia:-\234\255\272\030\310\021\272L\254\365\267n\270\203\271\021\355\005:\253R\371\271;Y\2439\201\2651:\227\222<\272fc\242\271\2101\013\272\334\024\2329\365\312\022\2719w\0329\tAs:@\345c9+\031\217\271\3713\2009F\300\216\271\232w\264\271\000\000L:NG\005\272\352\036\210:Ys\2758:\301d\272\374X\223:b\235\0209v%_:\"\202\264\272]*\t\272\262\265\360\271\002\002\007:~\227\010\272E\227(:\'\032\t\273\364\252M:\350\253\004\271\224\363`\271\216v\315\271|\244\2169\346\341F8\371\004v:6P7\272\234\223\035\271\304\242\3618JE\002\272\220\245\326\272P\016W\272{\310\030:\2602&\271\354\312\343\271\364W\340\271\215F\360\272\264L\332\271\257*\335:\270\377?\270\202\204I\272_\002\010\272\374\237\024:?\225\234\271\026\271\270\271M\324\2749\\\264\22595\251\333\272\376\324\246:\275\277a\271\nFp9^U\210\271k\315\3529y\241\3719VX5:\233{G9\351\337\235\271\n\250W:\330\375Q\272\230\272B\272\250\013n8\364b\241\272\nU\3258\2062\n7\321\245\024\272)W.\272\213\306\034:p\244\r:\\Q\0369e%\265\271\271\005*9\271\013h\272A\27479-(l:\321\340V\270\361M\275\271H\006\3479\360\023^\272\320>3\272T\341H\272\034&\200:p\275\223\271`\314\021:\021\370\365\271\n\217:\271\245^c:k\376\000\272\013r \271\215\223\256\272\245\314\213\272i\270l\271$\014K:\244\301!:\202\373\037\272\000\337h\272hs`:\177\361S9<\0335\272\304}\007:\344$\203\272\311\316\3669h\027\207:\212\343\241:\300\251\3159\223h\374\270\274\323Q:\007\005\273\272\232;\306\271\n\325H\272\242\362:\272\013\254e\270\203m\2049\301R<\271\210\353Y\272\317\3225:SY8\271\362\317v8\000\350t:\177M\3359)\010\32780\017\357\271/\256i9\364\370\3718gF\244\270\033q\241\272z\331\2666R\232\371\270\004>K9\347\266\3159\372\311{9\270\370\254:\355\340\3377\2322\016:\007\373\027\272\237\275\270\271\377\"\3569m\201e\271U\366\301\271G\3679:,\246\215\272\007\027\024:$\346\344:\220g1:K\225\201:\34373:\001\315\221\272T@\232:A\310\222\272EI\\:\307\005\':J-\301\270\311\221\303\271H\216\27695\256C\272\234\026\206\271\226\217~75\360,:\373\273E:\000\361\321\270\341\364\270:^7Q\270z>%\272dE\230\271=Ao\272x\017C\271$r\3248cj):\006\331\206:I\262\363\270\325@\001:\0358l8O\033\247\271\025K\227\272\230\202&\271\257\331(\272\363\262\303\272\216\347*\272n\r\3748\330\223\311\271\267\303\221\272\240\032\006\272\243\363@:\355\005\3307jP\360\267\177T\207\272&\020\214\270\371\376\236:\326_3\271S\324\362\271\010O\035:Iqj\272\267\230\2669\201q\033:\340% :\032\260;:)\010i\271\325H\3049\272{j:\330n\212\271\342\230\2459\205\256\200:\036\025\025\272<|\357\270\\\000\2139QR\231\270\200\365O\272\\\260Q:r\374\253\271\014\324\272\271~\241\223\271\"g\0137u\211\2105\316q\251\271\323\356T:O\232\230\271\203\343;\272s\361\035:\025\300\031:\233-\0379~\206\251\271\266%\210\270e\026\2479!~\003:,\024\320\271v\311\005:\222[\205:\341\0318\2707\006\202:\321[8\272\027\257\213\272\272\210\267\270\020\014\2039\355\204\220:\326\221#8\323+\004:\351\375\003:5\'Z:\007p\025\272\202\032\220\272\217Q<:\352f\213\272w\200^\271\233\361\250:\346\t\244\272\320\2570\272\314A\207\272\206\373V:[\026\3019\243\376\002\272\020\3761:\340w\2069SB\265\270\010j\305\265\234\003:\272HM\037\272\255I\344\271\303Ed\272\025^49\022\300\221\271K\037Y9\210\257\314:\027\325\216\272\227\353A\2716mW\272\313\033\246:\326\032\336\267\235\351\203\272\036\351=:\216C9:OF\023\272\315\311\3609^\301\2709E-\n\272\021\267\3229\204\321\241\271\354\263\246\271>\201W:\350\212=\272+\223\024:\037\363\210\272$\021\3767f\031\2759`0J\2725\300\206\271T\233\224\272\372\325\216\271\271\302\017\272\024\223\0138\263\027\230\271Q\213r\272\3648X\272\'\346\2058\010\000g:\326\254\336\271\352N\002\272t,\2169,\342\026\270U\001\2339 \316\025\272\271ZD\271.\',9\354\204n:\247\331\271:\025\322m\271+P\215\272H5O:\246C}\270\222\376\2669\261\014<:\010$\2279\332\002`\272\353/\367\270\345\277\304\271\n\270\3059=v\2209)\224E\272$/\225:\325\202>\271\036u\230:WF\275\271k\244\331\271A\37559%dH\272\334[\227\271\307kU:\365A\"\272\346Q\2417T\221=\272Q\201\332\272\264\007\"\271\024O\3469\303\3401\272\321lH\272H\261L\270\374g`:>?\237\271\205\260\016:\367\350t\271Z:\241\270u\376\37291\204\215\272K\303\001;\003 \037\272\252\335@9~x\2719UWz\272\202\247\314\271<\27369+\247\3669\342g\2009\365\214k\272j\202\0149\226f,\272\027X\035\272\240\240\2679\027\203\206\271q\031\257\267\235N\200\271\373\256o\272%W\361\270\265\324\320\271\"\010\245:\263!\030\271\017\200\267\271s\253H9\271\350\204:\330\357\t:\261b\325\271A<\207\272\345:3\272i\005M:4EJ\272~\233\233\272\223\331x\2715>o\271\035K\0219\005T$\272y\235w:\254)\3369\333\344\017\272\213S\001\272O\264\277\271\372%\370\271\202\204\333:\343t\177:\221\221t\272\336\257\263\271\223P\3469nQ\246\272\200\352\306:W\315B\272\240\253\342\271\352\000;\272\327\205\2568w\266\177:{w\265\271Z\347\3509S\351\3568\257\037\275\270\033\230\257\272T]V:i\331H8mB=:\332\006\334\271c\346\"\272\237\26069uoe\271\346\024$:\021\306\244:]\031h\271+\262\254\272[O/\272{\025R\267\036\252\032\272\221\322.9]=J99b49\223`\005\271\225\245/:\037\251\260\271\360\340\2439\376\203\3449\245!\216\272\237\213:9\024u\016\271\3760\310\272\250%#\272u\316^9\235<\202:\223\366!7\035\177\027\272\277\177\211:?^^\2728\220=:EpV:\t\206\260\272\004\037Q:\201\365\212\272\277\210\0338o\010^:\323\210\34532\352\241:Y\207\3509\313\247\':< \305\272$\265Q\272/\211~\271\317o\026\272\231\227\341\271\346\327n\272T 3\271\263VC\271\324\253r\272\2664\034:T\'N:\017|\212:\003dN\272P\340_\272T\325\223\271|F\3768\032\024\02689\225\007:u\006\2567\363\340\263\270\354\306q:`\375M\271\332\236\002:\360\017e9\003H\034\272\317\355\232:\226\010.\272\311\300\220\272hN\276\271\266\310\024\2726\360\243\271\213\335\275\271\206N@:\030\261\\:W\333\177:\037s\3118}\304A:\245l\3647.,\223:R\225\337:\327;\317\272#\200<:/\314%:\027\316F9\366\310`\272\243\374\232\272(\314z8\355\342\342\271!\314u9{\370?\271\332h\242\272\302\003\316\271\227\337\323\271\002I\212\272\031\323\214\271\330\'\2349\010\351\3449\221\251X9\347\345\014\271\212J\271\271o\370\360\271\376\337$\272e\356\3337\006T\335\270\032A\2209.\350\313\270\266\314\3079\377\331\2209L\034\333\272:\204\303\271\370{e\271D\023\001:\300\244Y:(\031V\271M\311~\267-\312\224\272\004\2761:5\233\000\272\271~\3628\337\305\245\271\'<08w759\213\\\271\271[\354\235:\331\035d:\315#\237\272\"\325\22199\247\346\271~\273\305\271Z\320\3759\001\342\035\272U\227\223:1\273\3617\231l\0009\376$\2047\354\275\205:x{X9o\374\0349\240g\202\271*\310\024\271i\3774\272\327!\230:\036\212x9g\220\2469\276\331\017:D<\217\271Xz\203:\3418X:\025\017!9fl\2667kkC9\n\203\233\271$\353\r\270V/\215\272\340\324 :\243\025\332\270\305+\2039o\333b\2725\360\021\272\316Rh:\233?\270\272\233B\370\271\372\246\0019t|\235\270>\360s\271|\010i:\027\2432\271\302H\023\272\336\2360\271m9H\267\251\220V9\226\213<:\355\036\006\272L\212\025:8\027\026\272\337\220\3228\342\035\003\271\227?\267\271\260Y\\\272\374\273\225\271$\001\236\272\305Y\304\272\374\371\2209C\004g\272\304\"\246\271\363>\206:\204{\226:k?7\270\305g\2649\317\235\3759\351\212i:5b\032:=\337\013:\250\315t8\223\322\037\272\225%\203\271\330-2:^\257\246\2716\313\232\271\212|\2269\364\336r\272\237p\003\272\364E(:\\\313\r:\240\361e:=x\026\272d\215\036\271\342\260\215:\353\335\210\272mC\210\272\303\372z\272\337Hh:u\356u\272^x\212\271\337Ta\271i\254L:\202V(\271\2523!\272\350\027$9$\235\3248K@!9\256\322\2109[^\326\271\3004\000\272$\347\274\271\310\367\261\271,\007j\271!\216z:\253R\2658c\336*:\232\030\204\272\356\n\224\272\253\n\261\271\334\274.:\266G\031\271k\177W\272Ss\001:\207\rA:\375\227\3328\300^A\271/\207\3669({\3469\236da:\230\322S6\376\346\2037f\337\2418t\343\367\271C\36079\330{\3609S\311\360\271\247\325\205:t\303N\271\373\232\3028\252,\3776\343>\033::\311\226\272\342\334h:\224\033A\271\247\214B9boy\272\217/I:\016\223\t:\270\371\025:p\342\2139\246\031\3539g/\3779bd\365\271\026\"59\235\305\3409H\374\200\272\242\373\026:h_\2339M,\267:\313\r\r\272\272\243\007:,\267\030\272\244\301\034\272\331\346\'9qK\3378\3400t\272\344\313n\272V!\025:\035\033B\272\303\241\200\272\207\351T\272\327\007T:Y\026d\272[\252\370\270\340He9\256\344\261\272x\222E:\317z`\272Fy\224\271c\'68\316\024\2268\207\016Y:\036\345\224\272\004\346\2158\243yt:Wn\0139\353\320H\272\231\313\250\271\016\031\320\271-\242\3118\2613\2119\304\353\n\272fTP\271\013&\213\271w\327~\272\201\315\3409\263\267\3169\014b<\272)\373\006\272\235`\2249\007\332~:S;\206:o\262\30796\233u\272\361\332\345\266\026\216t:\236s\0369T\036\022\272\366E.:ry\315\271F\177\254\271&\313\242\271\236r)\271\201sA\2728\320\266:~\277\256:\266\0146:\376-\276:\030\224\336\271\301d\3618\346\313r:\311H\035\270\225\246\2279\005\354@80\244C\267\307C\016\272ulR7Ub\315\2713Qb\271\346Bl9\270\250\235:\206/\215\267\354\321\2409\272l\2259\222f\007\270\335\211\3379\354\200\2229\021\006q9\013H\354:\375\034Y\272`\310\3039:\010\3519\375\3301\272\225.\3429,\345\3249\360\245B:;\300\240\271\023\267j9\240\337D8\335\2670:\317\022\214\271\345{\031:\237\022\204\272\026\254\223\272\277\354\214\271.h$:\322[\017:\347Q#\271\346,k\271\311e>\272U\205\'\272\211F\367\271?(\023:\037\365\247\272S\253\224\272\372)\'\271\236/f8\027,\276\270\212\017!\270S1\272\271\336q\204:\261\376\003:\342\370\227\272\"\022,\271OQ\264\271\222u\034\272m,X\267(.\2039\212)\2419\t\036\314\271U(\000:\215G\3249\322t\335\271\200\270\022:7\263,:\255~%:\334\242@9\244\362\354\271)\321\337\271\374\030.\272\363B\212\272\220\244^\271\372l\002\272Gd\023\272}\335+8]\025.9\331\001X\270\r\200\263\271\\\211x\272\240/u\272\222u\371\270\3375\340\271\034y\2159\333\r_:\311\027d\272\224Iw\271=\347I:1\345\001\272\342\337\004\272i\3315:O\363@:f\260\3758g[\216\272\2146`:\251\301\024\272\030C\322\271X\2079:=\251\2617\013;\2357\326\215C\271\326\226$:\216\364h\272\017\320\245\272nlr\271\202\326\377\267\326\034\3508\005\003\":\027k\243\271[\203@9\252\366\001\270\205\230\2708\000$1:\317\211\263\271\236\225t\270\370i6\271<\244z\272\221\346\225\271a\373\2309\256\036\224:J\234\035\271^\365\267\270\304#\234\272c\322_\272f\243\032:\214:\r:\315\366\327\271\326r\223\271yR\307\270\006C.\271!\257\0059i\352\3769\005*\024\272\216\306\0369\\2x\272\300\307O\271\353\376\017:L\272\335\271\005\311\":\t\274\2169\315\335S:$\355\0248\377\036\346\271az\3439\010\305f:\004\027\3468rx\037\272i\265\030:3_\002\272\377(\027:u\352\3609\3100\246\267g\273\236\272\307\323\2519\221\242\357\271u\333\346\271N_e\272\357\307\236:C&\233\272\260K\213\272\354\303\027:p;\030:\231\227\333\271\341\306Q9\033\026b:vE\037:\321\373\253:\245q59OqI\272\3502*\271\334\373\0148}\213\3109)\262\021\2728\303L8f\226R:\235k\n8\034/+\272\365\315\\\272\364>\025\2729=\204\272\312)\3728Z\262\000\2712\242g:\243\250,\272\217\372\235:\322\222\310\271\001\365\2379\242\324\240:x\203\253:%\372\033\272\177\267\267\271\374A\2249\340\214r\272LK\205\271=\255\2659\303\362\205\271\325^\006\272\365\210\3368W\244\335:\005.!\271\354y/\271\302\335\245\271{E\241\272\017Q]8\243\326*\272X\324\316:\325\377\2249\234\352\235\271\204\320\306\271\rP*\271\241\0220\272\224\222{8\2709\276\270$\371\000\272O\304\273:\002(H\272\277a\224\271\225F\003\272\024\350\226\271\320\251\2518FG\2266\003\247\201\271\337{E\272?R<:I\21489\274\327\2379(\032\034\272C\274\331\271\016\272\036:\274\223\355\270F\004\237:\212z\313:DWj\272]#\3028j\177\233:\255P\t:\311\347,\272\260/k\272\244Z\374\271`\362+\272\333\247\004:\324\275Q:Z\177\023\272\010\261\221:7z\337\270D\335\034\271\250d\351\272\373\205\2629\023d2:nx\353\270\022\372\247\2717\240S:X\222|\271M=\250\271\\\376\2659\352\217\217\272\000\022\020:\212\n%\272\245\264\355\271d\365\234:\321Nr9\275*B\2721\26679\241\'\3309C9W\271\272\000\023\272d\027\3018K\212(\272\004\257\0029\242\312\272\271\264qa\272\376g\31097\3600\272\363l\237\271IHa:\033\322\310\271\203\235$\272\247%\016:\304C\2779l\360B:;\346`9\256\032$9p\212M8\227\001\n\272\274@R\272\260\313\2779w\000\257\270o[?\272r\014\305\272\343\247\0329<(\3439\340\321e\272\021\273\233\271\317S;:\274\341\332\270\266;J\271p\271\315:\341\377S\271&O\0369Q}7:\362HO:)w\2229\252\244B\272\030\002\3009\2305\362\270\376\373\n\272~\301\276\2725A\3218\247\325\375\271\277S\3168W\001\344\271y\21079\360\234\226\271\221\00299\350\000V9i\335\032:\265{F:\246\210\240\271R:^9d\363\225\2711\024%\272%\311\262\272!\215\264\270\344\204E9\r\371\024\271\324]Q\270^y\371\271\033\017B\2722\332Y8\376)\036:Q\234\016\272\212S\340\271C\213\3749\363\321\024\271\235\360!9\206S\304\271a\003\2169\360\013\333\271\017~\233\271\361?\362\270\335@V\271QV*\271$LL\270BA;9b1t:\360\2019\271\264\250\2259-\300\2448U\305a9\331\311\000:G\244#9\211QF\2727CW\272p\252S\263\035:\312\271\271\\\'\271\3259 \272\177v\3309\333D\236\272\377\255\203\271\314\330\030\271W\001\363\271\020Z\204\272\2658\207\272\200\032\224\271Z\351k\272\321\275\372\271D\256\232\271\244zN:\201\223!\272]\3621\272\347\254k\271:\361R9W\177\213\271\0013N9E\241\034:Y\357q\272\341\232~\271a\311\273\271\350 \220\272\207\002\r:\014p\3029\203\364=:\253\361\217:\320\264\2139>8\267\272PV\2509\t\024h8iJ\3268\023\035\216\270d\007\2529\230\361\2709\356\262\3606\206\255\026\271\221\03639\000\271^9\366\241{:\'a\272\271b\026\242\271\362\346\3739\332\021\220\271\r\341!:\272L\207\271\3102\204\271\263\231L\271\272\325\221\270k\006\2219ul\n:\253\001\2069\226\013\254\272\375 \r:\245\254\3579\266!\360\271w\0302\272\306\\\212:\223\230\3119\252\272d\272\033\377\034:\347\357\"\272\271\324\272:I\211\334\271\027d\2518\347}e:\317M\237\2706?d:\250\203\3718\364:7\270\232\034\3119\031\003\r:\"#\226:\255Zv8\212\326\2659\032\310\033:\335\300\3439 \305\202\272BC\2029\234I\253:Z\006\2419\203q\231:\223RT9\254-T9|\334\252\272~\213G9\037\240Y\271a\247\3618\356\"\261\271\250\305\264\272G\343M9\226\254\025\272J\026\3379\3323\014\267\2509\316\271\014\252S\272\256\324\206:\217\201\'\272\201T\203\272)\003\200\272$\320\267\272\244\t\034\272\235\251\"\271\004\345\001\272\2708\210\271\225\253\3368\3762\303\272\031\276\034:\275~\3049\215\366\":\260GR:\232\305\2578\005I\224\272\227\37559\321\027\3028\262\202\2709\253C\2419V\026\0048s\365s\271\205\341\200\272\035\226\020:\367\376\355\272_\355\337\270Y\332y\272(\300%\272Q\324\274\267T\303_:\300\024Y\271\211\024k\2710D\333:\304I~\271\036\250,:\374\227\002:e[):o\273B\272\344\023\221\271\230k\031:\367\242\343\272@\345\3059\212\243:\272\275\375\230\271\330\235A:6z\346\271?O\2049\227\215\22092\365\257\267\366\210`9V\"\034\272\3553\352\270pe\010;\034\267L:\333\r\210\271O\340\263\271\353\t\013:\231/X:\342a\021\270\347\332\030:\275\274h9\352\267\0339\221eD\272lv\005:Y\354\0379q\035\311\272\346}\0019\240d\332\266\2414\0179\371\333\237\270\254bJ\272#\203\225:n\272\3709\031\257\215\271%\241\3459Z\305=8\367T\2009\213H\2429\241\333\001:\304\017\003\272\375\300\315\271\r\322)\272\320b\010:\003\031;:\317\272R8\254\340\320\271\031\353,\272\235\223\024:-\0074\272\355$\3247\"\001/\271\024\301`:\034\203\305\271yC\2519\205\207\361\271^\024*:\014y]\272\003\010\025\272\233\306\354\271\205\225;:\r\2778:_\325\3739oh\004:\361%\026\272\323\232\2179]/\260\271P\323\024:\265\363Q9\232\001\226\272#\332\3749,]J:]\252#:A/\202\272\343\344\337\271y\305\014\271e7v8\201U(9\242-\035\272B\362K8r\003\031\272\204\033[:rAU9\342\266\3079\177\321\366\271\256*L9\336\2717\272\003s\326\271W\342\016:>\025@\272\262\363\25394!7:\341\263\2669O<U\272\'\252\245:\307\036\2748d\"\300\271&\3662:O\351\3259H\256A:>\373\2239\347\307z\272\302\204J\266\305\310\271:\346o$\272\257\025\255\270\326MP:\2068\220\272\361y\250:\375O\n:\3503B9dF\215\271\034\031\022:X\345B:0)\337\266\177v\257\272\346\247\2528\332\206\214\272\210\213.\271\2411\206\271#o\031:\2568\3627\231:\0049\274\004\3108\232\003\3767]\352d8\003\253\2709\330\030\350\271\235\336\007\272\372\236T\271\201\007\336\270\322Xs\272\201}\235\271`\375\002\271:\376\254\271\240\223\010:S\231=:\334\303\2359O\211\2209S\"\254\272\315\222\313\270.\237::\365\373y:\367\334\260:5\275J9\250\213\0349\301\335N\272\020\214\2755\306\274{\271%\205\014\272\276\027y\271*i\3519\2706/91\206\002\272_RP\272\264q\221\267#\033\'\271\242,-\270\307_\262\2670\241\210\270\010?<9\344\201\235\272\226,\215\272\273\356\013\272\306\241@\272S\207g\272Ae$8\022\325\333\266{c\3549\211\310\021\272\251\010\237\272\262\355b:\262\177\205\267\343\244\035\272VR+\272\0005\013\271$\236}9\340{D\272u\355Z\272\2449\025:N\230K:\276B\2178E\224H\271\365\037\3128\017\242\222\271s1\254\270\010[(\2724J\317\272\033\251h\271v-P9\013x\201:\362@k\272\236\365\006:Z\304\2329S\022\302\270\340\357\346\270u8\213:\242j\031:Z\265+\272\207]*\272\272\264\2008\340f\222\271)\333\026\272Z\311\2359\240\304\267\271\252\3441\272\322\227K8\323n\342\271\202\227h\271v\032]:K&\2557\024M\215\271\233C\346\271\323\347\027\272\365\275\222\272:e[:\302z\020\271&\275%896?\272\363M\345\270\n\255\3369sL\244\271\351\212\204\272\337\021\26599\354 \272R\036\232\272Xr\0379\266\322F9l-m:\343\275\363\271!\254\254\271b\022F\272 n\3056\210u\251\272\250\337n\272s=W\272\327\004\331\272\010\014\0139\220\331\243\267\270D\3108\214\373\3449S\231~\271\231\031\274\271L\203<\272\026\023\205\272\316\310\227:\324\315\233\2716\355M:\016\235\233:\224\200\201\271\005>\n:\317\274&\272\207|\2248\212\245\3059\327\'\274:\013\253x9l\354\026\272\207G!9J2\266:(+\3249m\232\2158+\212\202:\304\372\3048\244\307f:\244|\275\270\243\265\2429\0238\2766\266\251\276\271g\034.:l\303\266\2727\205g\270\215\031?8\r\316\007\272o\243\2759)\024\244\271\361\302\2719\275\341\0239\327>.\272E\304t7\353\306\210\271\247\213\220:\277\177H\272\275F\3269\202\275!:}\225\3228\255cl\2717\020e:n\363\003\272\010rh:\026P>\270t\342Z9.\337w\271\300y\247\271#\233\260\270\236V\2258\002\017*:\007\225\342\271\374\26509V_\234\272.\245Y:\356O\3449\221l<\270\262\302N:`\301\361\2716#\0339\344)N:\350\213\3248Z?\210\272m\235 \272\214\315\2569\225MF\272\371\300 \272\006\231k\272\2248.\266\257a\317\272\333_\2648\033\263\315\270:\367\201\271]\253\025\272\'\3006:q\363\3628l;\3507_\276=\272\271\313\r\272\013q\344\271\276\014\2469;\004Y\271by\362\272m\'\215:\367\263\257:\370GE\272P\327\354\266lj,\272\t\347#\271Ts\0279R\340\223\271\033\217\245\266\376\357\332\270\240(U:\300\2519:\t\376\274\271T3\2309\030\360\000:r\202\231\270\346\214\2109\320F\033\272\240^\3779]\276\270\2716b&:-:\034:\201\031V\272\354\245\3459\342Xw\272\001\226Q\271(\236k:\205\261)\272\363\031 :{d\201\272|\335M\272\024\362\023:\307\002l\272 V\006\272\322\037\3119\307^\2669\027\312\3638\333k\2329\366\202\"\272\013BY\272fs\214\271E\t\2028\376Sg\272\265\302\316:\034b^:\207\004\017\272\000\204\242\271Fy\255:\200J\363:k\260\206:\204\3478\2713\000A\272\365\276\220\271\007\200z\271P\010\016:\222b\211:\325\332I97\033\2379\266\026N9\"E\3569c\250&8\265N\262:t\301\010\271\n\232\257\265\311\243:\2705\272\016\271\324\367\275\271E<\023\271QS\215\270\316\371\2069\240\375h:b\364\030\272\344\270\2308x\177\t:Xs/\267\325\244\212\272\177+?\272@\204\2219\306J\032\272\354X\232\270S\260\023:w\231\241\271\3315\333\271\341\223\n:\033\225\013\272U\214&\271uz{9\251\217j:D\257(\271\247Y\32480\206\271:\342\002\021\272\000h\2429\214\224\277\272\360\312p9\334\333\227\272\020\332\262:\364\031^9\3135\017\271]\354:9E\216\223\272\255\003\217\272\330ZO\271\027\306\2018\211\235\2369/\033\020\271\"\341\3078\202F\365\271{\027g8\010\366V9\333\311;\272\263\336n\272r\324\3529|6\2627\273AH\271\032\327\230\271\033\211\236\271\371^\014\270\037\303?:}\342\017\271\367\335H:\362\256\2209\2542\205\272\010DY\272\002$\235\270YHR:\332\354\310\271\004yS\272\371y^\271\017m\2529:1\3509B\374{\271\227\001?\272[!X8\222\210\2219>\244\3409iF\373\271=\232w:\273\207\2419\341 0\272?\2462\272\016?\2059\335\203\244\272\334X\357\271\t\336\214\271.\225\354\271\255#d\270\t>&\271\324\276H8\035\037\0229\322\306\3549\026\243@\271\343\212\001\272d \206:\026\335m\272\022\017\020:V\373\201\271\241\241\351\271{\352Z\272\007\372\360\272\255\t\370\270\364\20639\r/\027\272\302\312R:xU\266\272I\347\023\272{:\367\271\266\271\":\273\210[:7\r4:Z\255\3529\255t<8\271\221\"9\272[i\272\367\220!:$\302\005\272\347\301M\272\242\351\32694mT\272\021=\211\272\230`\026\271\275\227\022\272\225zy:&\320\3669V\335\241\272\347\200\2179\335q\200\272\337\026\377\271L\272\3249<UE:a\314?:\262\271\3049#y\001:\010\371\177\271\322\305Y\272U\006\"\272-\0069:&\237\251\271:\027\2439\223\363z8%8\207:\265\013,\272auP\2719\336\001:\2106$\271U\2327\272S\364#\272k\023\3729\206$\220:_f4\271\003\240Z9\202H\3176\225\032\354\271\217*\235\272\265\233\205\272\214F\25792a\3469\302\361\2508\324,@\271\241\242_\270r\234\030\272\234Z\216\272*\2250\2711\027\024\2722a-:\302\241\026\272!]\3418t\234]\272|MJ:~ZG:e9\357\267\243_\26693a,:!i\356\270m\347\221:x\270\265\272\002s\246\271\317\200i8;\304\272:\177@\324\270|\333\213\272esV9s\223\000:\303^\\9\237\306c\272\346\017\3466\201\rJ\272\310\014\017\270\334 \005\272QYs\272*\036$\272\310\214G9\021K+:\233O\311\270\362\032B\272c\266b\272L]w:\036\320\274\270\037.\3517\366\213+\2710\263b:\327\347\224:\330\000\301\272\226\"?\270\257\rw\267#l\215\270s\347\200\271=\323\234:\300o\317\271~\032\030\272YVy\271tI\3419l\004K\272K\003P\272]\226x\271)\213\001\270e\371\370\271Y\371\3019\260F:8\\\tR\271=\277\355\271{`\2779\257\003\n\272\2409\3079R\274\3219\223`\260\271I\232\335\271\335iF\267\275\236N\272\'\231\035:\037\344\3648O\270\344\272\346\017\2719r\005;:Jo*\272{\275N:\014\305\2748N\350(\2706\213\023:6|\3679\r+\0179\257\332y\270T<\002\272\\\344\177:\321\014B\272\222>4:\001\342\300\271\265\311\3249|\350\021\271\211\3352\272\275\241r\267\002\331j\272\310r\027\270>\000y:\233\336\2359\375\271R\272A\233\004:\026gI\272\234~\006\272D7\217\272\272\220&:MG\0348\277\200\227\266xO\276\271zK\255\270C\207\014:4k\2527\260z\244\272\234JQ:n\314\243\272\270\027\352\271l-t:\362(#\271\276e{:\335a@9^T\3308\0317i:\016e\204\271+\265\013\272\203\357\233\271\301\23167y!d9\232\017\212:\347\207~\271\363\372\0249hC\306\271\024\257\2779\'\205\210:R\321\010:\nh`\272\312\260J:\260:u7\210\236\247:\232it\272\241\210N\271Y(\223\271\372\221>86W\2449\275\000\210:Q\263\2628\302\342>\272e\210\2478\002\211o\272\304O\273:wI\205:\226VZ\272\023\n\n:\367\002\372\271\214\353\254:<\350q9Kg\235\271\314pv\270*)r:\241\276\020:r\325\320\270\277B-\270\244d\3629\347\300\037\271\236\272N\272\223\013\200\272v\225e:\370\276\2619<0{\272\261\t\305\270\342M\221:r\240\020\2718\372z:oh=\272\200Z\364\271H\221/:s\242\236\271\325R\233\270\360\262q:\271\330h:\342!\024\271\037>\2269\0102\2568B\231S9\222\336$\271\036\n\212:\256-\2539a\334\031\272\264\364\2409\357\212\2479u>\205:\2437\030\270\206<\2419,\323\357\271\323\2110\272\003!\2539j\n\020:\362j\\\272\365\217\026:AOl\272Kr\022:\017\2006\272V\362\023:#\224\214\270\254\266;\272\270\231\3019\0239\022\271#\2014\272yC\213\272Q\351\2639\210\374\211\2709\323\3769\031Y\3648\203\330\375\271\260\204\336\271\002\006;9\002\253::\306H\3518\365\346\3309I\334\001:K\344\031\270\313\035\032\272\177A\3169\376\277\333\271\373\333\232\267qZ\333\270 \272\2778=\276C\272\376n\3428\020\332&9\361\231\257\272\355t\026:\267\243p9\"VB\271\207\203(:\357\347j:\221\251\327\2727~\3718\2473?:\n\"]:\360z\002\272\211\013\337\271\353\327\206:db4:\316\\\240:\256,\3409\243T,9y\226\216:\020\357\2529N\205>9\255x)\271\373\351\220\271\233;\3109\374\20309~\037\313\271=.u\271\303\247\210\271Q\201}\272\300m\026:V\007\2419Y4\027:\000m\212:\362\323P\271\376\337\003\272Qfl9\241q:\271-\346\2068\341\237~:\336\213y:?\242\004\267>F\255\272m\36348~\327\034\2725)\313\270\r\235\2569{\334\200:\362(G8\273uQ\271\347\026Y\271\357\025\300:\307V(\272\t4\3369\024\321\210\271\204\275\3309q\224G\272\230\337P\272b}\272\271\357\270s9S\'[\272R4}\271\371\376\3009\001\247\3349\252\n\306:mC\264\270\314|\2729J]p\272U\244\246\271O\231_:\270\253\022:4\353\021\271\215\303\227\271\255\372\232\272.\320\323\270\236]\0248\251\255\002\271\310\316\025:\200\362\023:\333\334\3309\226.%\272\275)\361\271\034\307m:@\304\200\272\315s\023:hv\211\2719\303\00495\222\271\271?e\010:\301\033w9\202D\200\272\270/#\272K\256c\272\231N\314\271\n\305\020:\010\326\3409\304:=\271q\332;:\350\222\216\270\213\265$\271H\335\366\267\273!\356\271\177\2540:\310E\221\272\334\21339X\027\\:\232\373c:xJ/9\273P\2669\200$\2069E\335\004:\257\321\2559\014\354\276:\235\215\n\272\334\250v9 A*:[\313\267\271\230\020\366\271\305\270\317\272\2122\342\271\361\003\002\272\247\266m\270\233\226r:\335b\2338m\373M:\373\236^\272\n5\274\271\323\320\372\270d\260\027\272\226t\265\271x\355\341\271\361 \327\271\344P\313\271\260{\3459\006\26149\344F\330\271\223\272\215\272\303\252\243\271vkE\272R\334\2318K\325#\272\'\261.:K\237w9\345g\266\271X\271\3508x#\315\271\212\327 9\n~@\271y\032\r\272I\245\3709!\352\341\270\310\247\3349\332\340\267\271&)\"\272\300\013\026:\251\253\362\272\222h\2308#v7\271\365\003\2146wF\"\270\227Y8:?5+:oj\373\270v\250\007\2716\262\002:\361\312K\271\231\033\2139\314\341\004\271\255L\203\272\201\263\177:\342J\244\272\324\301!\272W\021f:\224x(:j\2461\272I\346\2469Y\277\3049\026\260\025\271\346\013\355\271z\375\201\272\227\030\26695\201\3319\353h$:n\357U8\214\017\2669\340a\255\271\261\361\24390G\t:\310\t\267\272\265-d:S\301\2339\010\3066\272\007\004\025:#&\303\270\3023+\272\232\357\245\271\255\371\3719\360s\216\270xV-7tD#:.\017\2669\335\330>\271\022\230\325\2706f\3729`!\337:\346\226\212\272\363 \r:\345\250r\270\216\301\204\270%\010\253\270/B\343\271B\372\231\270\024\333\267\271\022\274*:/\347\213:e*\3548\243\231[\272\326kF:\346\014\3568\227\355\026:2\\\355\270`\014\20298\213\2738\nJ\004\272R\016{\271\"\332W9?\014::\230D\0249b)\030:\277\340u\272\361{\3727\"\231\2149\247C\205:|\232Z\272v\242Q9\022\2618\272\330\357E:\302\230\251:o\372\305\271\021\016t9\227\213F:=H\2377+$B\271]\370\3279\006\260\247\272\214r\206\271\177\341\272\271\270\rH\272\316\350b\272j\030\2329xH_\272\223N\336\271g\361o:\0172\2708g\342\0008\254B\031\272\020e\213971\2217\214A\2039\205\334_\271\344\325\0319\244\2739:8\032\013\272G\n+\270\332\243|\270T\275-\271\265\372\23082\253\000\271\265\362<\272\377x\361\270\312E\2479*\204\224\271\302\274\\8\245\030):E7S\272\266?a\272\313Q\244\270\313G\000:\243\273\013:+\212\2679~RL:\273(y\270\353\304\032:\232K}\271\277\312\302\271\277>@9\234\032\326:K\267\203\272\035\227\223\2726I\2448~\221\2329r\314\230\270\252=\321:\3176\246:\216#\337\270\330\026o\270\374\233\346\271q\273\000:\350\336\177\272\316\371\026\272\213\004\3179\334q(9\225v\004\272S\005\034:\265\360\221:\263\315Y:/\304{:XD3:4\346\3459\265\236M9\347\001:9\316\013\026:\245\032J\272rq\3429\324\246\255\272\263\376\3339\2249\250:\200\364L:\336\304\0038\223:N\272cF)8\357[\307\271\330j\022\272WAz:\355\210\362\271y)\370\271?U\007\272\264Z\326\270>\252\2479\235\234=7\r>\257:\177\361\210:\310a?:\355df::\005\025\272\036\317\024:\017|I\271\300j\0109J\032\3064\243u\2317y\325\3249\330\267\301\271G\002\342\271\026.\2719\030Xw:\311\263\021:\027\306}\271\302\262\002\272\306\027\r:\020\323f9N\315\261\271Ee\2578^t\312\271\274#P:\300\374\027\272\243P\3738\212\231\320\266\003\217\3359w\205P\272d?c\271\346\031X\272\234\376\031\272\375\236Q\271\240\366\"9l\3151\272\334,\245\271M\266\2629\0203\346\271\326DT:_\255\233\271y>\244\271Y\366X9\3467\3469\234\026\233\271\020\310\201\272\221c\032:\322\351H:\271\355\206:\027\242V\271d\241Y\271\303\335\022\2717\306\357\270\265\366c9S\224\203:r\337E:W\013\0319\250\257\006\272\346\304\2449\252>\3455\363%\2329\342\"\227\271\340F\024\272\271\377\241\272\353\200\205\271\026\3648\272\224\t#9k\352L\271h\320\225\271f\245\302\271\032\201\3678 \364\231\272L\005\307\271\350^o\272\275DY\272d\000\0178\301\325i9\330\027\022\272 \3400:\327\252\2579\262\025n9\360\r\3409\301F\316\270\250X\3737}(c8\002W\3019\305X\366\267y\217\232:+\320\3229\253Xe\272\026\272\3639\276\265\020:m\010\026:#\232~:\227\\r\272dz#:\374<Z:p\247E7\001\016\320\270\033\363v\2713XP:\347\360}\272R)\221\271\355\"0:\216\246\236\270\264\272u:\344d\032\272\335\335\363\271P\234\020\272\227A\2627\315\374\2609\002)\\\271\357\242\367\270\376\326\322\270\345\235\t\272\325\252;\272\026\3544:\010,\005\271\264Rg\272_\031\223\2675+;8\303(\030\272\322\322S9\033\351@\272\3153\\:\233\214\032\271k\356\270\271pu\264:\356cs\272\375\014\254\272\250\010\20196\264\3646Q\306\0219\214\250*:&\306w\271\032\362,\270\005\254\263:*\213\216\271\251k\235\272\373r\2169\304\333 :\253\260@\272|R\002:\357>a:\017\177\005:\367\355\2629\277{p\272G\003\314\271\274h\224\271\254I`8\324\350x\272\035\2406:K\007F\271\234?.9<E\262\272\246\271\32094\305\n:\233a\":E\252\2279\303\004\247:\005+\321:cbg\272\315mA\271>7\3049\243\253\2639B$\'9\374\355\332\271*\t\014\272\312\306\320\271\320\277\221\271\274L\222:\271A9\272\032RY8\253J\013:\273;~\271\341\352\2629\3201\2609\261\201?\272\375\267\037\272\200\000\3079\201\234?9\203u\206\2718\261\'\271@\251\001\272\263\273\307\267\367\220\\\272 \002\222:E\362S\272\031\277\032\272\0206F9\335\302\3569A\207\3559\002\372\013\271\004\007\021\272\036\225\204:%\276\026\272\334\263\304\270\003\275L\272V\335\3269;T\3738\"P\302\271\313\332m:\376\244(:\320\234\3019|\036\260:i\021V:\303a6\272\006)::a\235R:\257\033Z\271\005Y\2249\010.\2368\024.\205\272\337\222/:\0368.\272\241\000\2219K\000\26696\202\255\271\016\207\3729t\250\2679\225\376\366\271\033\230\034\272\242{\253\271\260\005\2709r\244\"\272\007\350\2458\025k\3439\024\300\003\272\217\334\004\272|\266\t:\377S\3507Q\033[:rE\3439p\032,:\236l*\272\353!09g}\001:\025F\2169V\032k\272\251M#\271\264U\020\270\316\t\3679Wc\370\270\304\317/9\303\027K\272,aC:yv\020\272J|\303\271\370s\010\272V\323\253\272\300\236\326\270u\271h9\210N_:I\020z\271\033NH:s\312\3249\\\241\277\271+\342N\272\003W\036\272:\224\036:Z\207E\272\365\352\2739]\230\212\270\340\267\010\272^\335\244\272\335\316u9\356\335\263\271\223\311\252:y\264\242\2717\374\031\272\360\333\2059\347\017=8l\373%\272t\325\345\271at3:iw#9\263\006%\272\301\327Z\272\3548,:<\n\034\272k@::X\0038\271\0008\003:\350\253!:\357\317\005:\363\262\2109Ot\2079r\277\224\270\215f\3728\341\023\327\271\'\341\3657\327\364\240\271\364\302\351\272\312T\354\266xM#\272\360\312\255\271\0227\2439\215\261I9Y^\232\271(j\t:\354\006%:\246\352D\271\033~\3248\321\254F\271o\231\210\272<\245Y\271i\207\2468\246\217\3729IX\303\271\3649\006\272\026y0\272\302E\0309\032\032\371\267\333\252F:\260L\3359\234\300\3019\037\366K:\347\222\237\271\222\212{\270yJ\2079u#\2139\234D\2779nrw\272\366\224\3738?\274\261\270\202\327O:\305\314\2609\231;\265:d\226\3327F<\374\271\020\017\302\271\214\345h\271[U[\271\207\t\3458\364\354\310\271\227E\215\272\246=\3049s\300L\272\001\313\2539h\nK:\257\222\301\272}\317\271\271\276\006\277\270F\377y:e\'!:\360\223M:*+;:\3529[\272-\025X8\347\r\033\272\346\030\3239oz\203\271\021l\n:s\220\365\271\205\263\243\267$\312\227\272\211I\177:\300\255\361\270+\365m9\224*q:.\327\262\270\210]r:\034J\3509\023<\350\271\206H\341\270r\217D:\010\345\3158\337\226\177\267d|\2158;\014\2777p\354\3708?\254#:\246\022\253\271\2231\0208\\@\2748\217\250\254\271\360\367\340\271\032\005\216\270Eb\237\272\223\314\310\270\227f\350\270my\':\227]\273\270\263F\3548\r\246\033\270D\036\017\271@\363\376\271qj\2367\355\310>\272\370\247\2279@\0344:\034\355\2678!J\036\272<F\2019hC2\271x\245\0359\027uU9zv\0339\242\210<9\342\\N\272\212m\021:\226\214\346\271Zg.9j\373\3208\347\014\223:\\e\2628NOm\271\276x\263\271*1\3359\233W\0208\036\005\3668\246\343v\272\311\020t91\330\2639\223\036Z\267\rC\264\271 \031\3248\253a\002\272*\020\023\272\356\366\016\272\353\331T82\030\263:\221\031\022\272i\233\3668\023\210c9\362x\031: \347\204\267[\245\333\271\361\320\244\272\001\270%\271-\255;9\243a\264:\327\371h\271\334\032)\271\311X|:\237\207\342\271\3124\2478\331\217\260\272\\\224c\271\356\037\335\271\246g\n\272a\306N:l\276\2379L\264S9\376\321\257:p\210\3119\266<8\270X\017\0059\274\232c\272\363\363\245\271C\366\021\272v\373\3239\244\033\376\271\317:\224\271a\276\025:f\300\3067\332\240\351\271R\233\0169\210\316\3239\026\207\245\271y\304\022\272\376ur9\227\366\2669Z\353\2478\370\326\\\272\272j\253\272H\035\254\270\204\373\224\271\010\321\000\271\241\305\224\271\270\346\3129\236@\337\271\003\371D:\255\002\210\271v\205\2349\305\242\273\271%Z\2619\244]\200\2720\310\2609Idn9!z\"\271\210\253M\267\345\254\032\272a\\\2507\223\n\3619\306\"`\272D\371\251\271h\306l\272\357\202\0058\253\344\270\271\230\371T\271\000 \325:k\3753\272\370\214\257\271\351 }:\247o\023\272\377;;:\340\253\275\271s\rj:\024\324\245\267kB#:#\323\3538\334\323\3179\303\016\'\272\000>\316\271\364iT:y\335_\271\242\303u:\003pR:p\010.9j\352\230\271\225w\n:C\363\237\271\316\324h9\270k_\272\201\254\211:\214\230\030\271\213e\241\272\235\021|\271j\223\2719oj\r\271b\233\017:\031\272\0309\271?I9wv\321\271\311\271\352\271\333\001\000\272\277rB\272eN\252\270\257w\025\272iK\2017x\033\3609\013\265b9aI+8G\016`\271\350>\036:\324=\000:r\322\3778\304e\2039\257\326_\267\307\026\343\266\\F\364:\252\367\317\271\365\013Y\272\2455\'9x\365\000:\201\341-\272V\321\3579\223\376\3529\217\254\2459C\207!:\341|\241\271\243\227%\270\027\207\035\272\323t\002:m7\023\270\214\202\2069\020\247/:\226\320\026:\364\333\033:)\236\3459\030\307\3639\017\354U9\365v\343\270\21502\271\262\314\2048\207\2554\272#\034\0149\224;\022\272\274f_\271\315\003\020:ge6:\222\2659:\000\311`:\360\025P\271\260\327\0029\275\225!\271a\224H9\250\313\t\272~\275\217\271<&\2658\337U1\271\007Yk9\2424\246\271\234\364Q:\006\032)\272x5)\272\341\307\252\271\257\253\3558].\345\271\331m)\272\222\1779:\240`\020:\356\277I:\263\276T:\243\241\236\272\264(\200:\372\351\231:8\210M\270\027\003\215:6\357\023\272\025\367\370\270\222O\031\272\326\201V\272\344\366\273:\025\275\2459L\2211\271\372\331\030\272\215\220[:\351\301k\272T\367\336:\333\001O\272\274b8\270\256\"\220\271\2644\265\271K\354\221:\304|\0009\261\020L:\306\214\322\271\006\303\352:\227\030R\272K\233D\271\374\002\264\270$\023Y9\355\316\000:\031\267\364\271\005\233\001:\377\256\255\271\2369\003:\206&5\272\315\356%:\323 \317\27187\235:\036\363F\272\366\263&:\2308N\271\223\22039\376\004K9\273r\336:\354yC9\240\264i\272\276\210\223\270\001r\342\271W\323\3368\r\330A\272R\233\036\270\034~\021:\306\212\3629v\001\326\271~\377\346\271D\006\3178wv\211:\367\300/9\223\3748\272\326\030\2219\016\367`:\251\367\2779)(\327\271{\023<:\340/\257\271\013\273*\271\354{\3418\322g\020\272\3177\346\271hr\242\272\250\333?8\357{*\272#\320\270\272\372\367\212\271{c%\271X\037\220\270\216_\2709lR4:\016\235\245:+\242\245\271\"\t[\272\230\202O8E\213~\272\261\016\303\270\267\356\244\271\2550:\270\rq\371\271\004\276\201:\031g\005\272/\235\':\277\030;\272\340:\206\270\362\250z9_<\025\272,\231(\271tH,:x\372\370\271e9\025\272R\275~\271|\000k\272\353\246\257:\204C\203\272\2547\2379P\344@\272\370\037X\272:\213\0039\342\000\0248\342\203V95\373\366\271}\013E:j4\242:Va<\272%\355\004\272\257\026\260:\273\234V:$e\235\272Xi\362\271\023\222\2049\257\2776:{\007\357\270?c\0309\\\205\3009\376z\0018\277h\224:P;\002\272\270\"\001\272X\"\231\271\252nM8\374Bx\272:nA:\320\202.\272mX\010:|\371*\272\300\252\234\271\013\031\275\271N\033U:J\374\363\2719\355\332\271\255\253Y\272\362\362\260\267eN\354\271\364*\333:\242\t\2519\257\203\200:\372q\374\271\236\024\223\267\3217#9\352\021\034:\366\333\030\272-\251\245\272\365\204\211\272}\232E\272gi\217\272\016JP9y\'#9\351+\235\270dt\021\272\376\rI\272r\027s9\345y\361\270#;\202\266\016V|:eV\017\272\245\236q\272\335\274Q6\263\353\2359\254\262\3559]\327\0219&0\0377M\r\244\272\013|\347\271Dr\306\271\035\212\254\271\323\2639:\332[g\271<\346P:\241\277\214\272\340\325\035\272\261\370\t8\001\255\221\271D-\037\272\316\350\265\272R\007X\272\237\370\3278\232\225R9\177\007P\272\354~\'\272\242\340\3429\005W\271\267\262\372@:e\370\204\271U\007\3059\246\025\26786]J\272\322\354z:\325\231):<O2:\214\220%:\336\362\3269\364\234\3029\357C\"9\361\275\2124\017\305!:v\365!\272\274\310\2009\350m\\:9:9\272\323\310\016\272\320Hv\271\206/\0048\347\270-:\306\341o\267\232\020\3309\215\0211:\257D\2269\313\243M\271X\263\010\271=K8\272\rbT:\024\363F\272OE\201\272\014\350\227\271\362\263\351\271s\243\0358J\024\231\271\033\243\027\272t\236\377:\261\024V\270\272\377\217\272 \'\235\272?xS:JXw\272\204$-\271bHN:5\244\014:\014\212H8\232\343x:\351\341\n:\235\371=9\340\360\032\272d\276R\272\035C\0367\242\321\007\272c \202\272\207&\016\272\357\363z\272E\360c\272,\014y:O\277$\272\234\322\303\271\002\237 \272T\241\031:z\224\241\272ex\240\270\211~\3039 .\005:\242\t\001:@C\2179\313\366w:\tz\2217F\345z\272\256\027K:\033\304\273\270T\213\254\272\311\322u\272\030\001\267\267-$\3548\374((:\344E\030\271\335\"\3209|>\203\271\217\2372:\0302\0356O\276\272:h\351\2458\346\214{\271Ww\325\272\010z\350\271\213\344*9\226\'\214\271\r\330$:\234\237\303\271-\355\022:\353\0049\271\371\202\2129\\M\2469\346F\221\270_l\024\272m\013T\272\274v\305\272\rhz8\030\311\021\271\211\356:\271\255\032\204\271\262p\3769\376H\177\2720\355\0179Z\007\242\271\245q\2359\002\205\3579\244*[:\225OR\272A\027\312\271\311\001\264\272P+\026\2709Rl\272\356g\t9V\256\236\272\356z\3529\366\344\363\271x\223s9#A\006\272%:\2767@\237B6\205\223\211\272,\331\211\272e5@\271\265\347\0149\031q\036:G\'\205\272\240\271\233\272\300\277\0319\205\332I:)\202\177\272z|\r\272\010\333(:o\272\3148\254\002\244:N\240\207\271\300\210~\271\2765\022\272D\311\3349*\320H9\210\227\2529z\350=9\353\255i: & \272\320\002\3029\025i\32794N\2159\021\310+\271&\217\3769\255G\265\271a=\224:F\306\':T\243\245\272\224r\205:\247\2114:\n%\334\271\270#Z9\211\250\t\270\354\002x\271c|\2649\014\026\3449\021dY:}\004\212\270c^\006:6\223_\267\023Y\0238\2030\0319.m>:\216_8\272r\235\2468\355\207\216:\'.\2679\243\366g:\002-}\272\2401\201:\252\230\210\272-\301m7yp\033\272]Kg\272\342\361i\270\317\224\3349<\016w\272\307\253s\272\017\200\261\272i\334\'\272\260%\225\272`N\212:?\243R\272\213>\312\271\261\254\3779X\226\222\271{0z\270\2353Q\272\306\202G\271\253\204|\272_\305r9C\0031:\310\251\247:\001*\3269\000\324\2379=\321\2018\356DW\271\325_|\272\346A~9a\024R:\220Q\3629\212\366\037\272M\231@9\037\304\2748F\245\334\271\255kf\271+\210\262:\271\031\2449\220^V:\325F\241\272\230`B:\215KN9\\*o\271+\320\240\272%\207\2079\221v\2469a\262\245:\341V\256\27172/\270\353\211\222\271\222\032T\271\'\232j:\363\355\0379\005Gx:\320\020\354\270\002U\30395\367\2219!<\0338kFh9\247\236 8j\010\351\271\031\273W9\272\242\2018*\021\237\2713P\014:\017\211\2228O<\2569\325\244t\272\353s\022\272\356n\207\266s\322\2218M\301\36387e-\272el/\272\232\250\n\270\375\177\265\271x\001\216\271a\234\301\272\375\373\2679*:Q\272\364r)\272a\021-:\354\273\213\271\033\022\016:\032\376y9f-5\272tg\020\271\310l\2339Ye:\270\312\\\2609\267\223\215\272\033#\324\271=\355\302:y\244\252\272W\350\37392\350\350\271\373p\224:\213\023\n\2723&\027:K\305v:rE\353\271\033\205g\271%\036y\272k\014\2439y_\3068\207m\2049u\017\265\271\357P4\271\243\211\277\271\227\343\002:\361\244\2778:!\007\272i_9\270\343U\3479@\r8\272\360N\236\271F\204\3049\220\324\003:J\033H\272@\200\312\2718[T\270\322j\003:?\245_:\257\006y\271\244\344\260:\004\326G\2725\200J9p\001M:5\344\0369\353*\n:\357+\2648\226\374o:\254\034\306\270j\320=:\272C\025:\322tv\272\237\336z9\344\3058:j\375\t8\355{\342\271\262\007\017:\0019%:\364yY\272\325\376;:W\237\214\272\306\245^8\236G\026:\342\014\2119a\324\024\272=>\\:\350\273\236\271[\342\010:\261\346\2609\245\023g\272\233$\017\272M\335\216\272\373\3735:C`\202\271A@\2539\362|\2679\272k\202\271\232Y\'\272\313.\036\272\361\007\234\271\000\230\2169\330-\3357k\007N\272|\222\017:\340h\265\271(\353\215\270\t\3710\272=\237\3129_\210\234\272o<\\:]#+8`\322H7_\247p\270\227^\275\272\203\027m:\004b\025\271\341l\026\272\325T\201\271\213\330\200\272\276m\25397\351\341\271i\311\234\271J\224X9QV\'\271\244J09\003j\2549]\252\231:\\X\00589c\2549\351~\377\271\336\257\020\271E\357\226\272?\215>\271\303g\203\271~o\337\271\326k\231:\272\007\256:\206G\275:>\010\362\271\333\254V9\236\253=:\027)T\272\035`(\272)\200\003\271S`\3118\3603\271\271\217;\3529\337\306l\271\225\20419\362\215\"\271\361r\204:wh::\204IN8\tuT:)$\022:%\336\215\271A\265\235\271\320e\234:\245K\207:\260\330\254\271\363\003P\272cY1\272fHA:\203\224/\272\215\363\3239\251\006\3669\001\311\255\271\347\246\23199\000\026\272NOI9\344\353\356\271hcb\272\224\034\'\272\031\374\002:7&\217:\306\34299/\272\0229\014\3218\267\261\264_8\275,O8:\217\0207\222x9\267;\374\213\271f\"\"\272;\261\204\271o\037\222\272\025\276\257:!\371z\271\254C$:\351og\271\212\341\305\272A\352\0369\322x\355\271r\317\2337#\1777:LA):\216b\244: G7:4Iz\271\243T\2609\344~\2048\225\233\025:\341\356&:\276\030\247:F\023\333\267\256\014Y\272\322\277<\272$\345R8\320\312=\271B\277`9@bN9\347\352m\2716\211`\271\035\010_:~\222q\272M\365\240\272\254\265M\272\220c\3579\210\274\014:\302\206S\271%\257\2759\005vA9\033aS\272*u\220\272\t\366\2679\316\217\235\270)\235\035:\355\243\252\271\346\225\201\272\227T6\272\340]\2659+b\3559\010\005S\271\266T\001\271O\345\222\271\342`\3469\316\227\0359L\217\001\270\353\241\017:\357\250\2459\245\000\2649\244\264\377:\211\272%:\320y\t:|}\025:\311\251\216\272\304\230X:\026\263\2759\247\267c9\355z\212\271\037\210.9\261\361K:\244B\3249C0\230\271\243\2743\270Q\'\2579]\036\000\272\202\317\313\271;\364\004:,\303\3518\232\301\024\272\363(\341\270\250\002\020:\377\313\3047\267Z\351\272\244I\227\271\262\227L\271d\000\002:\266G\3329\2166&:\203g%:\016\207q\271\212\341\2639\235G\036\272\"#6:\207\020\2769\334r8:V\242~\271\032@w9\240\024\204\271\204\271@9B\367\2148\033W_\271.\004$:\271\225e:h\225\032\272d\362\3719\237Uc\2729\320;\271\273\252\0028j\037\210\272\322\267\202:\301\013O\271\330x\202\270\2207O\272\374v\344\271)\276\237\271Ts\226\270<0a:\2111\t:\237\337\247:\200\331\212\271w\254e:\242\364\3756\200\"\205\272F6\371\271\004\026_\272\365\351\n9\023\027\0009<\312J\271\177q\360\271\306\210\233\272\313\321V9X\375\201\271\224>t:\325\272\0349\211/W\272\323\264\204:\276\347g9\261g\202\272\364\302*:ON19C\017@\272\205F\255:\311\350L\272(^\t:\335f|\271]\356C\272xb\211\271\370`\2758\340\007)\272I\016\2059\r\232\024\272\211\t\3439\304A\2129\275\237\364\271$`,\2726a28Oq\004:\304_$:Tt\3538\364\010W:\275\273\3029\214\313\3119m`\213\271\347KE\270g\035\304\271|\337\262\272\310\371&:\227\177\2029\265\334\347\271\241Ji\270\361\2067\2728\357\2479pO\216:\274\3300\272y?\261\272\355\006\2148]\271-\272\341u\2279 \014\3409\252\327\343\271\036\234\212\271\364\374\333\271\033I\3409\013\326\333\271\336\313\320\271\244\036H\270u\365\207\271\223\354n\272\'\263l\2722\377\215:\214\255\2069\"M\231\272\360!\3229~\252S\271\345\3018\272\311\233=\272Z\\+\270\013\n\271:/\203\3479\204,\033:\305\'X:KBh:\376i%:\203\024\010:rp\3719\201pJ\271a\372\000;Q}\207\272!\210Z\272\225`$8)\352B:\377\004\r9\007\354C8\311\347\020\2728\211\237\272\200S\3439\021>\016:|<\3058\327l\257\271z\342\36085\270\264\271\230Ou\272~\301\252\2711\355J\271\002Q\2319\327\360\314\270\033\365\232\271X\327O\272\302\016\3356r\200m:b\251\317\271\255\2105:\362\314\237\271\225\245\231:\027\234\n\272\273d\017\272%\247u8>\316\3107\301\25688B1g:\020l\271\271W\3231:\227H\3668]r\332\270^c_99\355\217\272\027\306m8\262*\265\271\n\243r9\316.H:\326\334\003:PL :\023\006\013\272\300\254\2449\227\332\353\270!\303]\272]\321\2739\207b\247:\302\r8\271\\\236\233\271DW\3239\324\340\2669\347E\234\272\320\017\013\2709\246<\272\341\306\\:\366\353\2159\374\323\033\271\226\257\3169\235V\3559\242@\021:A\250\0069wF\205:.a\022\271n\271X9\021\013\266\270%\216!\272\333Q\304\271\022\301\004\270?\241\3779C\237f:\342\034`:\333\260\0309\341zV:\377\373\334\270\237JP:\253L\206\272\006\0204\272\306Si\272\345\353\366\271z\304\2558\223<\026\272\213I\275\272u)\3778\221\27639XTz\272\354\355\r\272 \213(9b\n\n\267~f\r:w\215B:\006t0\272Qj\206\271\013~\032\272\234\2728:7`M:4\307\227\271jw\2058\334JY:c\232`9-\361_\271\242\320\247\2716\202\2129o\302\213\272i\264\0259\341g\2138d\257\005:\350\205\2119G6\022\272\340$I\271c\025\264\270\"\315\2528\212\370\003\272\215\257\017\272\365<\0078\273\345\355\271\335xe9\337\205\224\271\325=\215:\325\230\3008\313R\0019b&\2149\002\035\263:\274\320\351\271\234$(\272\230\n[9Y7\n:\375\374\224\271@uV\272?\373\2439>\223\261\271\331\027\357\271H\341\273\271\242F\262\270\370\020\2459\222\246C:VM\026\272\267\\\030:U/b9\347\202\020\272\304\316\211\270\2315o\272\365\341\2677\227\221b\272\026M\3009q\336\3269\364\017\3549\250\257\000\272\341\010\2039\027\362c:\306{\216:\217\332 :7a\2259\276r\2339\327\340\2179rQ\'9F\221\3439Flv:#x\036\272\265\036\2369`u\240:C\311\356\267\272\240N:\177\313/\270\347b\014:\374i;:\356\226\205\272\227gj9[\376\035\272\361\262\2149r\'\3328\267\256\2519\334<\004\272\017\034\264:p\243$\271\243\261\027\272\031o\223\270)B+:a\303\341\270 \312\222\272i{\310\271~1?\272\2547\250\270\371b\272\271\020S\021\266\367,\227\271-\0233:\033\325\223\271\254\270.\271\340\001\344\271%\207\3779\351\037P6k\003\2059\373\275\033\270\251\241\010:\321\314\005:?$\257\272\300~\037:\224\304\267:\026\330D:\226\346\260\270\215\255\024\271K\370\3329\300\211\310\271\005\205\002:\253\025\2039AL\":\027\252X:\310\342\217\272\236\337\320\270Q\246\0169\334\014\2379\257A\2349\251\314\026\272\2347\342\270pRa9\337\237\2369\347\267\261\270\034\325^\271c\032\\8S\323~9\014\210\240\272\224\206\214\272\307]\272\271\364\206E\271\374\307\2449a\001\002\272&\363\02690\354c9U\\X\270\313\r@9\302\004\3608\014U\230\271|Ri\271\0037\2679\265\331$\271\361\201\263:\227\3021:U\301\2539\254\241\3409@\"\220\271\275\253\000\271\356\327\0358\313Kz9b\030\21299\253\2009\210M\3229\327\264\3738WC\2469\010\330\020\270b\033P\272\236\236\'\271\377\326\2239\322^N\272\032G\016:up\223:\230\345\306\271\334x\007:K\030k\271h\032\2449F%\331\271\006\316\036\272<\227L9[\216P\272\321\347\265\267\274\271\241\271\024\274\025:\321\337t8\333\2129\272\265\257E\272\\2\263\270\215\304\243\271@\265\":x\330\223\271I:\311\271k/\253\271\260p\327\271\300\247\006\272\222\014\025:;\254\n:Yw\305\271\327\234\253\271\211:>:\217\r\326\271G\020\004\272\303\203\006:_\035\000\272\246\356\274\272\324A\3718\276\005r\271\033v\0258\301\340~\271\352\003|:P\206\223\271\350\265@9\037\002{:\021\261F:\233\247;\272\372\013\313\271\343g#:\276c:\272F\"\3238\370\361\007\270\352_\347\271j\353*9\3247\255\272\322\351\0377\344\263\034\272\017D\243\271\257t\3569(r\2579\360\217\0019+\006\266\270L\362E:G\377\2608j\234\242\270\030\263\315\271\2424\2737\032\241\210\272\316\351O\272\336\237\243\267\275 ,:\376\313\2249=,\2369\370B_\271\225m\360\271\004O\013\270\346-\2149\241\275\037\271\220\"\006\272\274\235 \271\331\266\2269\351\0209\272\202c\376\271\323\211\2349\034\316\3639\022j#\272X\245\"\272\314O\2149!\327\354\271H\304\232\267\215\206\2229\246\352\0329\301\372+\272\027\340\316\271_w\2709\350\206N\2725\301H\271\224\334\010\272$(\2179\345\261\r\272\263J=\271\235\223\2549Zn\2639:\002*\271\0044.9\377\315\325\271q\243u\272\223}\310\270us\006\272#\302 \271\3221\256\271\275pg9\253\233G:`\177\021:Q!\2419mD\3379\272C\n9U\373\235\272+\242\235:2\001\246\271\241\324\3118\033+\237:[y\031:*i\354\271Hk\344\271\020\363\0378\362\236\000\272\360\233]8\336\313&:2i7:D\356\2529\2449\004:u\221\006\272\333\274\2328\034^P\270Z!E\270\026\370\2728\004\t\351\2716\214\34179\377\0228\337\200\0079\305+R:bF\2609O\327\3078\3713\377\267\036\362G\272\327\273\2748\230i\2439\0223\2058}\'\214\272\346\027\014:\223f\364\271\rg\034\272?\013\3649\322I&\272\002T\267\271\227Va9y\031D\271\337\332#\272\235\211\033\270,T%\272\0168%\2719\021x\271\314h\254\271[_]\272\245\212\240\272\243\n\034\272\267`\204\270\303z\013\272X\016\3039\261,\t:\244L\031:\216T/:vZ\016\271\273\212y:\002\227-\271O\232\272\271\010[:9v\265V9]\374\2268`\313G\272{\036<8\272\326^96\2450:\3772E\272\022\"2:\370g\306\271^]@\272\313I\017:H\210t\272\3521\211\267b\"@9_\304\2539\303\"E:\377\246\036:Vn\235\272ov\223\271t\244\325:\277\276\226:\006\223J\271o\006\330\271qT\3408\265\3121\271\002\207\271\271\010d*:\036\016\202\271{\321\235\267e\353D:2[\254\271\026\226\246\270w\307?9\303-\016:\335\236\263\271/fK:]\017\3708}b\352\270|\375\0049\361\242\242\271J\236\237:\267\221\2369\346\245(\272\372\322\343\271\244\247\2679W\364\331:$\024\304\271B\247\266:\343K\217\272\347e\200\271\035\256\3153gr\034\272\314!_:\224\267F:\016\353\3048\007$Y9Z\\\024\271\375LR\272\300(\2509>^\3659}\324\3049\232\333\021\271\275\367\237:H\372\250\271x\350\244:\035\016\031:\331\202\35494\270 \271\"\275{9\037\231\223:\307w\021\272\350\027(\272Yw\032\272H\034\004:\216\343\212\2717\372\324\271v\3024\272\370!P:\225C\003\272\036\363P\271=\213\225\270U\276\207\270U\353\221\272\270\207%\272\211\225}\2728\345\366\267\027f\3669\177\315\013\271I\342\224\272Eh\253\272\022\023\031\271P\375!9\364\354\r\272\316\334\257\271\033\233\342:\007sQ:\226\006U:S1L\272i\361%9\251\2664\272\305;\3658\223\213\301\271\247\331\2678G>u:\215\036\216:^\353\200\271\033\000\231\271\3447\3618\013,\312\271\327S79\020\256;\272\217\000\007\272\302q\344\271\234/R\272i\031\n:\247\324\2579Wp!\272.\0048\271\224\274*\272\350)\230\2729S\005:J\021\200\272\r\302j9\264\360:\272\252\331\272\271\'?j\271s\214*\271kq\007\272W2\214:\242\t`\271R\307\225\272\301\003\n:\220\374\010\272a\034K:\243d\307\271\306\243\244\272m\274O\270\001\272\230:\203\226\243:\335\362\217\2723\37398\006\236\3328\342\023t9\036.-9\177\n\263\271v#\267\272\220?\2269\324\213\221\271:h\256:<\2003\271.\335\005\272\312@\3017\017\216\3279\333^\247\270\300\207\005\272f\022\330\271M\266\204\272\243\311\014\272\330bk\272XE~\272on\2339\357b\205\271\254\001F:_\306\005\272\215E\3509n&\3228\353\002\360\271\233d\3459\027s48G$\30698\023/\272\301Y%:\344SZ\271e\305\333\271,7\002:?\231Q\270a\335\3329\305\357C\270,\337\243\271\010T\001\272\227o\271\272\311\360\0249\007+\214\271K\234\005\272\010\003\253\271\350\310u:\253\350\307\271$\026\357\271\314\344J\272\326&\224\270+K\2679S/D\272\357\010\211\270\300\277>\272\262\267\316\272\362!\253\271D\252\006\267\246\324=9M\177L\271\360\3235:\273`\3259\344\005\3409qw|\271f\036\200\272E-\221:\353\270\233:6\366\2527\360\210\020\271\246\\\034\2720f\372\271V,9\2701\0323\272\006\262\3149\306Y\0049\n\017\r:\317\357\034\272\255\315\320\271\342\333O:\342\245.:o\301\033:!\263[\272\250\356\253:\037\n\345\267\305>\230:pU\032\271~\037\312\271\225\200\236\271\260\255\2349v\030\302\271.\203\264:\247\340\271\267\236\236\271\271z\253\370\270\033\313\21694\236\025:\351x9:\210\337.:\240\025b9(\005\2228l\330\2049\302O\247\271\337\331\3339\366\177\221\272h\245\200\272D\263\020\272\245\227w\271\376fT\272\037!\245\271\363rx\271\000\242U8sAr\271\325>\3419\372\370\245\271\321\020\221\267\231\207\031\271\236\025\321:\247\004\034\272\224\026\3419Z\240\010\270\233l;\271\205\217\023\272\314Z\005:\353\033\031\271\237K79\357\032\275:\203\2615:\370\037\020\272#x\027\271K\365v9C\013\251:\356.\2708\306\252a\272\262\373\3609\210z\030:\244\003\333:\013\206\242:\0320\3409\353\371&\272\303;T\272\203U?\272e\\\21683b\262\272\364\013\0019\005\346\231: \321\351\270\215\300c\272t\004a:h\202\256\267\374(\3058=m\026\272RG\n:#m>:K\273\177\271s\304\214:\025\'\207\272o\211\210:t\r\243\272\376$H:}\335\':\234`\3266\030;\2419\254S0:u\341\306\271\337\2505\271\257H\3138j]#:5\261\2108\222y\025:\367G/:\000:\026:\245\231\0079kd.:\327\362\263:\016\326\257\271(\305)\266\277\350\237:g\230\203\271D\210\244\271q!\2029\030\260\2629\305.\206\267\251\222\0348(\343_\272*\366\251\272\027MV\271\376\007#\272\234\3349\272)\206\210\272\346_\014\272\326e\0109f\004\0169\322\232%:<\343\237\271}\002>:~\2529:+\361\2439\016vQ\272{\265\003:\013,\224:D\n@:-LT:\r\223\00697c!\272\204\304\362\272@\003\3179\037\320\255\272FdX\271\254<\205:\303\335V:\025\364\2169\215\036\"8\362KX\271;\022f\271v\262\007;\232\352I\271^\225\344\271\332p$\271#qu7\215gZ\272J7\251\272+\303\3648\006\215-7e\003\010\272\300\274\256:]CG:,\253\342\271;+\2328+\375\2469`{*:\351#f\2729\342?9\303\345_\271\235_b\271\353105\275`0\271\234\205\210\271N\340\003:L\265\0238=\206\355\271{\r\3449u\023R\272\212\334i:lvs:\322!\211:\225\016N:\332\354\n\271\255\304F:\014r7:\365\022.\272J\271P\271\300=\2368I\244.\272\337\006\0137\000\334|9i\2753\271Q\356M\272AG\201\271\212Q@:\352\216\3528\237p\000:\033N\256:\213%\3349F\002B9\335\367\337\270\343\322\016\271\207>\2617\210R\"\272\354\366\367\272\017\302\030\271\325\343\t\271\216\320\316:\221j\254\272D\240\233:\315}\2709B\000\325\271\227\343J9\262C\026:9?\021\271\2675\353\272vS\006:\213\267V9\250o\3449\"\205\302\271\177F\202:\361x\001\272\323_M:\255X\036\270\321\242[:7\233\3759\213\t_\272\310\034\3008y}3:\236\265C9\350\213\223\272\263\\\321\271/\237C\272P\203\235\271\367a2:.-\3209\\Y\003\272\010\355\311\271\322W\3329\353,\020\272\t\316\0379\343\202\"\272`\221\2479\363\221N9a^\200\2725\304&:\357\317\267:\231f\341\271\226\031\221\271\217x\264\271\302\226\21690\302\032:2\350\3239@\324\030:bbs9\205\2550\272\0331\374\271\332\356\367\270BA#:1h\030\271\314W69\257\301<\272$,\022\272]^\3169\330\261\007\272\03340\271p\272(9\313\223\2169\263\\g:\324\372\331:\326\330w\271\266*\224\271X\220u\271?*59\3278\331\271;\n\016\272\301B\327\270\254+\034\272LI8\272\014\231\2758\337t\016:\363\031a\272\347\241p\272K\177\3109\311\252\003\272\253k\201\271E]\3559q)F:\031\314<\271\246F\3749\242N\247\272\002\317=9\001l\3279\2052\362\271Vny\271a^\241\2724N;:\216\241\023::\314\201:_\377S9\002T\004\272\2734\0368\227`\2258`d\232:\254\277\020\271\342O\035\272\373\275`9\353\372\324\272\000\276z\271\236H=\272\227j\313\271[\376\3279t\236a:\242\270\275\270\246\211\005\272/\210\036\271\262\341~\270\231\354\2366\037X\035\272\233\345\025:{\253 8C\034,:\237v-8\313h\3037\362p\346\271.>\276\270m\346\2279\334]k:\236\264\341\270\245\243\371\271\326\025\037:\\1\3419B\262\262:\244\022@6\202\'\320\270\320M\3127tP\013:\206\240[\272J<\210\271k\037\371\271\313,\224\271~\016.:\203K\2229a_\2239\247V\014\272\257\207\220\270a\3738\266G\203\0249\214\021\362\271\276F\'8\266E\24093\232\212\271\2741\200\271\332\223/\271\216\302\204\272.\352\223:F\336\266\271\350V\3439Y\313\301:\346\332\004:NbC:\031\004\242\271\324+\211:$\224\2109G\021%\272g+e9\217*\005\272\213\353^\271\3651\326\271q\327\017\272\016\225\2249\230==9_m69\300\277s\272\370\216\3227\316\032\\:(\214\032\271\271\t,\272?\034\315\271s\000\207\272\001\242\0369\251\305B\272v\227\204\272\225\241\037\272\257\272\236\271a2\340\271\000\214\2268\335\327E\272\250Y\360\2712ny9\026*\3719C_\261\271\315iK:\0064\265\271^0\302:\306\36749>\210)\272!\266F:y\200\2309\207 \3518\2226\234:\202K\240\272\372.\014:\223I\3259N\221|\272\270j98D\257M:e\211\3507\027\375b\266j\340\3249\216[\223\271\304/\3009\347Zo:\331\334f\271\205\251\024:z\250?:H\203@\271\253\330=:\274\375\201\271\275\027R:K\262\3029\233\341\2549\016!\272:{t/\2708\211\027\272\264\004\223\271\222S\322\271\271\250\270\272\266\242\2539\202\242<\266Wt\352\271\356>\364\271\014\331=\272.{D\271\200<\231\2709D>:\026\016\035:\3423}9-\376\3739gu\305\271\212\177\2378~L\304:\376%\3249\374t{:\013I\247\271\337\223L\271\t\232E:\r$\0257\367\346\006:\255\234\231\267\245\242\202\266\272W\241\270\315\016y\271\017\363\001:N\223\0219\334\377\006\271/\001u\272n\3651\272\363d\035\272\347\246\025\271\307v\031\272\251\354\0019\036\214\3749\035\245\301\270j\365\314\272(\325[\272\024}w\270\375\367\221:\347\221\245\271\234\364\010:\374\224\270\272\327\021}9\277\220\2779\373R\016\270\376\334d:}\270~9\267]8:+\347\300\272\315\337$\272\223S\3358\223}\350:\255;m\271\347\264B8\260\226\2309\315\030\020\272\377\227\237\271\357\367b8\251I\014::\265n\272\n\026\3549\325X\003\272\005\371\347\271\367\3377\270-R1:N\241\327\271IB-\272\016\26139A~\2129\2528\013\272-\365\316\270>\321\255\272\271\317C\270\354\303R\272\020Q\235:Q\204\217:\343\245L\271@[e:\375\002c\271\021\001q:\275h\225\272\027Y\212\271\241\226\000\271nz\r\270\307c;\272\206fz:\231z\037\272[\020\n\272\277\342\204:l\252\005\2729z\220\271>Y\3528h6\3029\345\3654:,^\340\270\315:\313\267Z\252\3279\333\035\3218\274\215\0009c]u\272\320\261\231\2720\\\205\272\267\31289hSj\272\236\351\2379\200\335\301\272U\024.\272\'u\3569r\026\237\270\216B\205\272-\351\2169&\331\3569\210\201$:\020\350\313:\350d\2479\270\367\325\271C\206\330\271|\357\003\272;\202\3149.\033\"\272\230O!:Q\r!:I\241\257:\036\001i9\272\276S\271\345d\024:\r\310\217\2722\027\033:\226\003\023\271\'\351\031\272\372\010\337\270 ;\315\271\016\257\003\2728\273\036\272#\274\2729L\005\277:\214sE:\310\232\317\271,@c\271A@\253\272\213G\002\271y;\021\272\\\000(8=\372\374\271\203\037\2109\271\264\020:\367\244\3459\326Y\313\271\033:\210\272d}\010\272.\263E:z\027$\272\001\247$:\025RP\272\264\335\231\271\270\020\001\272\303+\377\271^\273:\270\303\r\367\270\321h\2228\237 F:\333\375S\271\207\217\2559;\200\":2\247\3019\237\'\356\271Z\333~:\365:\2519\n\321\204\267\301Z\0169^\243\2218?\352\222\272\023\324\001;\302\23038|\377R\272\005\241\2659\247\352B:\010\373\0039\214T\031:D\356=:\227mw8K\026\n\2716\035\014\272\270\363\242\271\035\347\265\272\313F,8\372\264\302:xF\177\272J\033\3469VQ\2229j\001~\271,\301\206\272\017\225\244\271\260\216\230:Bc\2508a\216\201:\327\265!: \035g\272\202 \357\271p\345\203\272\224\356\n\272\316\2247:R\372,9\036b\242\272c\n\210\272\271\272N\270\022\361\216\271\262\"\035:q\034\2529lV\217\270\025\335\001:t\307(:(\310\304:\240\330H\272%\261$:\351\"\240\272#qO9-/\3439L\374[\27126\0319u4\021\272\n\261.:\324U\035\272\331\373\206\271\264vO\2724\021\024\272W5u\272\332\317\330\271\020\271\027\272\031\270\261\271\373\250\2628\261U\214\271\333\314n9\311\231\212\272\315\360\2119e/K\272\302\261w8t}\2768\234\300<7\325X\2218\004\341\3309\032x\220\272k\r\3279\375\316|\2710Zr:e\2600:`L\026:\226m\2559\203\227\223\272\263E\321\272\210)\254\271\362\340\017:\330\224\341:\223\002\316\271\n\3713\272\227pI9\340\220\005\272GNP\272xqk\270C-B\271\025&\362\267M\233\037:\243\315!\271LJN9r\377\023\272\317\303\010\272\340\364\203\272\022\221\3119\36217:\374Y\211\271\272[ \272\036*5:\212\3665\272lC\264\272R\207\3257\315\354\002\272\034\203 \272\356\034!\272L\003\3779\216Fg:\311\246\0278\207\267%:\366\320<\272z\377\240\272H9.:\030\263\2279\330Q\260\272\361\2517:o\316\252\266\340\251U:R\225\203\272\344\210\3519\214\321\202\272\254\325\223\272\023i\351\270\373\232\220\271\301M\004\273\271\260V9\350\350\345\270\205\204$:s_\3659w\355\"82\2256\272m\024\'\271J\330\320\271\026\304\024\271\375\227}\272O\243\3259\261\231\033\272\262\374\273\271 \221\201\272\207\276P8\215\216\3049\201o-\272\222(\201\270\321\264\364\270#\010\2558j\036{:!L\2156u\324K9XSV\272\006\0171\272\005c\326\270\260\016\325\2701\344i9]\340\37199x\237\271]\014\023\271=>#\272.\003\256\270!UB\271B@\016\272\032i\232\272 \240\3039\0069\3179\0066t:\3568\226\272R\270\"\271\201w_:H\367\235\271^\3522\272?029\374<\031\271dg\262\272}\252\257:\253\327K9\237\345N\272\2320\222\272I\216k4f\255\000:\212\371\031:\3663<\272\270s\343\270Mi\006:\004u\275\266\250\324\0329m\267\310\271\325\311f\272\374d\260\271\351-7\2727\206\3529\340\216\2679\271\202\037:\t\376\306\271a\3012:T\371\3039g\246\321\272k_x\271\025\\\004:\364\234\236\271\312\313C\271\317k39~|\3249\360\365\366\271B\234\022:\350[\201:\214\276(\272\317\246\010\2720\257\3309\005\324#\272s\325\356\270FSO\272J\347\2119\270{\3149O\362P\272\230\036\2509T\226\003:\3029\276\271Fn\027\272\307c\222\2709\343\231\271\247\366|:\005X\032:\255`\3468\247\250D\272\367a19o\r\257:\311\322\204\270:G!:%\246\000::\246\3668\302P\276\272\234\255\200:Rt^\267B\247\226:1\341\3159\245\324\231:\232\371\301\264\332\351\023:\333\333\2268\"S@\272wV\343\2713j\2579\035\314\001:=\035\272\271\252\020\2549\316P?\272Z\313L\271\237ZW9\341\224\221\266w\010]\266%\r\351\270\306\232\005\272\227M\004\272\230\213\250\272 \3479\272\3769\0349\334h\250\271\352\246\003\271\254Q\2469\322\035w\272\242w\2618\352DA9J\215\022\272\324\003\207\272S)\2667j\212W\271*\3076\272\022\234\211\271\233\331\n\270y\244P7\026@j:\366\35227$\027?:\265g\3419\330\3125:\363\033w\271\235\203C\272\304\004\004\272\3123\2239\027\276#\271\200\217\021\272\351.\220\272\370=\3709^\026\361\2716I\261\271vX*\271\255\300\2369~\017i\271S@1:\367c\0029\256eG\271Hvq8\214\326\330\271\"\235\3609X\224i:\037\336\n\271\n\244\253\270O\020\013\271\275\371\202:\342\023\002;8\331 \271\034yO:e\271\2234\244^\033\271\2538\253\2718}\t\270\365\331\244:\353\246\024\270\201\316\006:\250l\262\271\377\333V:F:\2017\334\037%:\300;X\271\325|\3339\310\006\3739\334>\326\271}\335\231:x\377d:*\212\273\271\tP\022\271\347\207\2339!K\305\272\206\337\354\271v\25179\031.\250\271\274\321\205:\236d\0079\251\346\010:(\222\3009\'\365\316\271z]\030:S\237\300\271\345\221*: \312\002\271@\215\002\27099\006\272\307y<\272\352\215a:\252\203\3348A\234\301\270\222\346\032\272\361?T:\244\3346\272?\374\363\271j>`\271\244\tq\270\252\3413\270q\232\265\271\240\031?:w\376\3419\2512\0169X\341+9\211\336d9\227\233\243\272\"\315\277:\265Q9:c\223\026:e\276\207:\001f\3559\317\013\2657\331w\3119\013\332\2728\346U\222\271\331\246\235:\217\337\026\272\311\370\006: Y\225:kX\0069\r\026\263:U\302h9?\"\214\272\336\356\221\271\363\031\217\271\243\232\200\271_\372\237\272U\343\211\270N\001a\272\262\252\211:\334\001\244\271\313\347\360\270\374\211\3322\333D\2329\003:!\271h\3177:\342\350\0319\2319\0208}\014&:\361\226e:\340\t\031\272\n!\201\272\373\307\243\271Z\030\243\272O\333(\272C\240%\271\255t\2549\026\002\264\271D\334\2679{o\220\272\336\n\232\267\246x\267\271)\212V\271\327\266\2049b\353\014\272fu\222:\333\212d9\355\375\337\272phm\270\333)2:\255\303F\272\254\236\014:\3262\244\272!H8:t\313:\272j\212\021\271\260$\252\271 y/\270\3444S:\333\'E\272\rV^\271\322y\204\271V\346\217:]\000\031\272W\320\3379\311\nN\271|2\205\271\024\362\"\272MT\2669 \003[:\0060`9\016\376_\2729\332M\272\271\305i8\210\233\034:X3*\272n P9\313>\363\271N\034%9+\323\313:\341\007\0319H\277\3359\214\345\230:\254\312\215:w\025u:_\221;\272\315\003\263:42f\271 0\302\271!\350\273\272\244\262c\272\n\237#\271|o\367\271\030\311\223\271e_L9\031\253\210:\216\"\013\271R7\211\271i\272\264\272h\36349\355JK\271\312\034O\272BN\244\271b\033\3249\217{\2639\212s\276\271?\332\2559\347h\024:\320<59\307\37129#\362\207\2721d\223\272\237\034\3039\305\257\002\271aq\":\352\222\2459\305\013\227\271\364\230\334\271;<\202\272\037M<\272\324\246\3519\244\234T\272\013f\303:\021\234I\271\346\261 \271|I\3108\276\014\023\272\312}\227\272\022u\3078t\245Y:\362\371\0249\210\261\003:7?-9\352\030\255\272\321\235\221\271\250\003_9\376\305=\272\0044F7r\360\021:\215j\216:S\336\':l\026\217\272Yq\3529\316\035\2319\"\340}\272\255r\215\272j\225\223:\017\316\234\267\324\274\2709E\271\211\270n\234\353:\334Z\034:K\321\3069\254\036A\271\216E\360:\337Q\335\271\347\304\206\267\"2 \272*[\000\272\030\2476\272\336\006\\\272\316\363g\272\260E?\271Bl2\272\255\252\3229\017\3533\272\360\351\026:\311\271*:\036Cl\272\014o,\271U\376\027\266+\341\210\272\303\001@:\\c\343\271\221\036\t:\360v;\272Oh\273:\031\014\007:M\317F:\322{+\272-H\217\271\244_&\271\nD\262\270\207\231\2348U\246\205:\351\374\275\271-?P9\007N\3479\251\365\312\272@\t\241:\217\213\031\271`\024\017\272T\255\2269\250O\032\272R>\010\272\362ur:d\361N9\336\236|\270\223\305\312\2711a\3029\310<\321\271\003J\244\271\263\211D9\301\036\373\271\033\023O\272\312t\217\272\r\272,:\226l\363\271\013A\345\271j\257\2159\206\245\004:\247L?9\257\2407\272\027\264&\272y\0357\271\025%\3479\303b\2509\302\356B\272L1\225\272\235\033\3629p\301\2309@\344\227\271_-,:pQ\003\272\361\241{\271\022\332\213\266}\241\027\271\246\206\374\270\022@\310\271G\223\2368\311\007\2158G\240;:&\213&9\266\277\022\272\276Yv9\361YQ:\370j%\272\026K\r:\007\366\t\272\237\250\314\272\246\206.\272\r\247\226:\374T/9\231o\2259\340;\203\271h\227\2458_\346\370\271G\265\014\272\027Lo8v?\306\271\2357\2177L\036\032\272\222\005\0379@\002\2709\300\t\022:\2375/:\257\340\2648\007\266\246\266Nz\027\271\023&_\272\033\013W9\245\2257\271\037u\266\271O\311\225:\302\177\3269J\251}\272\017A\255\272\235}\212\272d\023\3349\237\246\"9\325\223\202\271\324\315\3539\001m\r:]p\253\267\253\236$9\263V\3269 f\013\272\203\256\2419\263o\0359\275\316\035\271j\215\0229fb{:-\363\274\271\223SW\272Ed\020\272QJ\3048\010Q\035\272\000\3043:p5]:g9a:L\353J\270\320\007\245\270\256\321\2329\271\253\362\271\257\310L\272\326\345\023\272)J&\272\234\372\361\271D\025\270\270\267\354\026:\243^D\272\035=\3409\255\225\227\272\370\272\245:\007(\253\2719R\321:\024\210g9,b\203\271\225\354\240:\242P\024\270QS\036\271\227[A\272\317\237\2725mJ\234\2725\017\234:J\004\333\270\372\036+\2724U<:\336\021\3348\212\004\3559\267\233D\271\365!\211\270\236\002\2729+6/\272\265\21527\023R\017:_:\020:\341K\3679\002\374H\271#K\2328\376\361\253:\355j0:j\233\3748&\177\2129\246H.\272g\365\275\272\217\353\2268\211\21499\224\304W\272\312\315E:\361\256A:lt\t9_\232\3629\021%\2309w\256\201\271\342HB9\354]\3179\324fZ:j/\372\271K\0208\270l\270\0009\tO0\272\270y\2229\350\231\205:{A\300\271-*.\272\317\346<:\005\364\203:\230\003\201:\300\177\376\271qS\233\2718\353H:\373\205\r\272!;,\271\351F@\272}\351\232\2715\200%:\026\003\201\272G\036>\272\264\22189\215\335\211:\2229\316:f\200x9\034 \002\272\334\313J\271\210\016\320\271\230\315I9\266\0104:\2058\341\271\245F\004;j\177\032:\321-\330\267g\024/\265\247\2040:\214R\233\271x\344\3329\370B\000\272\261\275\2109\006\326\2469>\320\3747\232:\330\271\367I\2508\270+#9\360R\035\271L|Y\270B\322\241\272\030\254\356:<m\233\271_\210\005:\343s\222\271\013\001u9m\027\247\272\331\256\3529\033\220\3349\"\334\270:\273\035A9rF\0148\356\264\202\271t\355\224:\332\375\354\271\336\300\3509\307\226M8\376\272\204:\0071j\271\325\223\027\272\333\212\352\267a\345O\271\210\177\235:C\360\344\272v\247T\2714\272r\272\236\210\3549d\323\2059\313\326\343\271A\2228\2718\323>9-\354c:\024\271\026:d\330,9\265\221\276\2710\004\2317\017\256\002\272?8\223:}1\251\271\275Y\232\271D\027\3707\246\375q:7\216\3739\366)\177\271\355\237\253:m\013$\272\364\327a:6\001\035:\334\272\203\272\320*\2429\022\342\024:\336\342\3249\322\204\017\2726\245\243:o\215%:\243\315\341:\222_\212\272C31:\223\036\0239\217\225\2747\273\to\272\016\235\367\271\332\225M:\357\304\235\267\"\377\3159&\\\002\272N\300o9\t\245\3458\213\310\3409\312wL\271\233\026f\272\247\t\263\272\3363-\272\302D\3339<5\231\272\244\222\3658a.\2369E\320a8Q\266e9\026\301Y:\364)\2619\002\345\361\270Yu66U\235\3579$\177\213\272\215:R:\322\332Q\271&,\017:7S\214\271g\200\3327\006\327\223\270/\222\236\271\236\342D\272/>\250:\"T\031\2728$,\272\tQ\036:$\274p7,m\306\271\3713\221\270!\177\3318G\234\260:\014\216\036:j\316s\271\335w\352\271\270 \035\272&\243\203:x\201\3259\263;\311\271\361\037\3569\\j$:\215c\037\272yXL\272Z\247\263\271\357Z[\272\307j\211\272\022(J\271R\250\005:\204ca\271\307\000\2217`<\240\271\300\2535\271\033\256\306\271\335g\3259_\243\3358\343\3110:\347\222)\271#E\3139#{\034:x\364\216\270u\370\253:\313\336\306\267\351 \336\271&U\t\272\"}y\272\207\005\3769\373\016\310\271\nk\3059\203>\016\271\277\351\203\271\266\210 \272\223\310\221:\355\342I\271\255-\037\272A\230:9\335\307d\271\363\233|\271\256\322j\272NK\233:\362\023a\272\3066\2529G\305\022:\'K\221\272\265\272\0069L\37349\2676\3429\002\335\n\272\333\240\225\272*\n@\271\353TL\272\361@\211:=N\3759\033\356%\270<\310\2019\033\033^:\340&T:\316\035\203:j\332\363\272\346\225\2479]?\232\272\"\271h9!p\2309\002CZ\271\354\212\3419=\032\2429\020v\3549|\021\276\272G\263\324\271\361\203]:9]\253\2712v\322\270\276\3560:\363\302!:\355\361D:\330^d\270\001\254\3149|V\233\271\207c\211:\313\352\024:^$\376\271tF\245:\241\017\014:\034\3428\272\260\036\330\271p}\210:\020\017Q\272:\226\206\271\032\362\3109\336\304\002\272\025P\341\272\026zU\267\034J38\262\232\2549\241\202+\271\211\237\333\271\352XR9\256\346\"\272\334\375\2059\205%G\272\341q\376\271\313\035N\272a\263\277\271\375\360I:>\235\3339\322\201i\271,R\240\271n\270\245:l<\037\272\026\361D\271\1770\2029\001k\027:Q4\037\271\262\365\222\271\200\002e\270.\216\217\271A4\037:G\267\005:y\017o:\000\277\3549\027w[\272\204\323O:\321\035\030\270\377\212_\272\032\266\2079o\246c:U\006M:\371\355\3278\003\264\3119uW\261:\035\221\335\271Fh\213\272\253\364\265\270\231\207\n:\247\035\240\272\002X<:\215&\360\270f\233\2608\032\366\2009\304\377X\271}\231\2046\352\260\030\272\317\242M:\261r\001:\227\330\2439\357\233L9\360R\2519\014\243a\271\372\235\257\272\212\013u:\330\254\021\271\222bT\272g0j:\360\372\245\272\240@\2469%\2314\272\r\323\317\271d\247\\\272\026\221\025\272~+\310\271\234*c:\351h1:\250\271\024\272\275\367Y9t\377\3408td\216:\214\300|\272\234\341\2549\340\217:9vBT9E0\225:\270\345\345\271\366\026\2009\301pv\272\2513s\272\376r\3059\300\276R\272\200\'\236:\223\300$:d\253\305\270\301\201x\271\245\320\374\271\256\315\022:\247r\263\271\317\207I:\010\330\300\271\2170\342\271w0Q:\'\246\215:\232\202\313:\227s\2038}\033K:\236\216\263:\236\333\201:\351a\251\272\370\004\304\271S\262\3439\2060\233\271\2350\2719\263\237\024\271\021_h\272\201(\027\272k8\320\271b\347\003:\260si\2719\301w\272]\342\3319\005\034-9\314\246\2709\000K\033\271\306\341\343\271T\241J:\202\001\300:+\240\346\271\253\325(\272\31619\272\361\003\3009\336v\324\271\305\275\3718D\217-:R\347\203\270\210\244\2459\227?\010:2\0370\267x\001,\271 \340\3006\014\217m\272\356\336,9P\255\001:<\352x\271\024Z\271\271\316k\333\271\363f\020:p#\2318t\202@\272\361\314\033:\356\335\0309\013\353\022\271\215\304\236\272\375\010\3548-\356\036:\217]S:\274\316\221\272\310\244>\271P\333\2649T)\031:y\3130:k3/:\177u\\:\355\202W\271\010\t\315\271\310\366k:\177\251\2079\030\350B:\244\317\210:\337\223\227\272\024\301\003:\233\373(:.\213\222\271\241\032\000\272\231\350\213\271l\346\3369\037s\256\271\034\327c9\\+o\272\316\002\027\272\303\207\017\272:\312\322\270\216c^:6\361\262\272\215\346\014:I\263(:;\373>\272\214\276k\271\303)K\272$je:\3432S:\371s*\271}\237\3209\363\207\3549t\177e\271\366<\014\272\273\r\220:\334VG\271\274\"i\272$\257\315\271Y\032\325\271\223g\372\270\231\001\2359)\215\241\272\013\366\363\271\2571\303\270\302\331:\272\2246\n:\361{+\272{\274\245\270\377\1778\272s\330\3419\273G\234\271b\263\3439\270U\221:x\024\205:\341\260\351\271(Q\24698\227\322\267\352\274A\2727>}7\266o>\272\367_\\\272\206\020U9A8\322\272\374\304\027:[7=\272b\303\030:/\366\2769\300\237\251\271<\367\3029c\001?:7(1\272\244\357s\272\304\313\016:\333\366:\271\223\242\2109\265\202t8\211\223\245\272\375\013\22481\260\022\272\227\313\2148\001\206\3459\3707\2059\016\206\202\271(\273.\272\221d\3558\307\334u9\224{@\272\327\003\34497%Y9\014\013:\270Ja\010:\253\200k9\270|=\272\337\363\356\270\311D\3679\016;+:\225\026\210:\226#6\270\261N\271\272\355#\214\272i\217\222\272\304\346\006\2729\271\016\270`8r\271\333\310\302\271\021\300\\:y\"-\272[\356\037:VH\t;\330UA\271@\3730\272O^\002:\347\317\2779\225p\325\272\351\210\t\271uFT:9\023\214\272.\251\332:OA+:\025]b9*\345M\272\03218:\027yU:\231\301}6\371\265\345\271V\014\2779\317\034 \272^\310\007:~\035n\272\367\177\34090\356\235\271\370 1:.\242Q:B\000\366\270\030():\377\025.:\364\214\3349\210\033J:\033G\236\272iY\221\272\231[}\272/\347\016\271\265\201\351\271\273J\\:Kz\004\272:\361\3068\360O\204\271\025\033\234\271\210\231\r:\226\203\211\272\241\375\3219\361s\027\2727\027\3429\221\230H9\317\034\0269\254t(\272\274\241\234\271\244ny\272o\376\005:\306\347P:\325\026c\272vMM9\372e^\271K\223\2259\274\210\317\270\230\33519\034v\3207\361\211A\271\264\302r\271P\231\254:\331SX\271\003a\356\2703~\252\271\302\237\205\271F/[:\r|\325\270\217\241y:\352\365\001:\034\205\0369\267\024\233\271\273\256\034:[<\0049\032\277\025\271L\364::\230\255\r:\022\345P\272\225\3654\267_.t\272\005\263\3479\262\203\016:\356\207\223:\324?\2759\372\257\027:\301\246D\2715\230\363\271\372_\356\271\215\207\2168\276\3036\272z=\3369\"\332M\272zX\2119\266\307!:\304`\2739\0017\351\270\250\307\027\271\202\235\2027~\246:\272\376\026\332\271qS\2728\206\367[\271\220\213H\271g\225\2149\021\003\332\271*\317e\272l\0338:\314\355G\272\354w\037:\365\236\355\271\355|!:\035\241\3068\031/\2569\347\231\262:\364\320::\321|\':\226\265m8\347R\2607\246\262C\271\006G\0139\200dT\271,\000\3557\356o\267\270\277\246\022\272\276\316\000:v6\"\271\200\247\017\272\021\305\200\272\272\231\240:\264m\2359\243\261\t:\211M\200::K\320\271\217\007\001\270\301`\230\272\332n\203:\244]\202\272\r+\214\271B\rQ\272\257M\177\272\210\314\377\271\306\337\t\272\311,\026:`\006\333\270\373-p\272\214 \n:\200;\3059\036\272v9\376x\331\271dr\3039r\200Z\271\222\016\247\272\223+*:\361\313\365\271\211\300\264:Z]q\2713X.\272\030-\2778\361\306\2308\004&<:I\315&\272\010\005%\272\312\0002\271\3712\004\272\365\347\2219\372\326\364\270\365g\n\271\367\330\217\272\2267U9`\357(\272\3135R:\235\321\0379\307s\274\270\221\010\231:\365\242\206\271\252\305\037\270Z\377\311:\217~E\271:0H:\353\031q\271\233:=7)L\3378h\r\236\271X\224\3669$\340\277\267T\252\n:\324CX::{\203\271|\013<\271\320\021\0139\244\003\226\271V\237\022:\354\003\3249\245\250\213\272\317k\374\271\276WS\272f\006H\272I <\272\260\372\331\272b\325;9w/\003:\000\356\2539\214\221W:LT\272:\353y\t:\371\017\3249\257Zs\271\201\267\3777\203N\203:\374\357\000\272\247\267\344\271\236\2122\271\177\025I9;4%\270\271\325r\272Zj\2238F\307X:0\304y:\325\361\265:\325\255(8\257t*:v@\3009\000!\301\271\243\332\331\271\236\010Z:\367p\3027Y\013\035:\007\330\2038\336\304\317\272\353\027\001\272!\237\244\271/r\025\272Z\367\005:\306\200\3179\277\374\206\272J\267\2679\251\266@9\246z\3439\3732\233\272X>!:hJ\243\271<)\314:\221C\203:\213\313\2409\314\237\301\270\323\360\3557Y\006\337\271.\373\3148\240i@9\2335\t8LT2\272\251\304\345\271\006I\210\272\354\231J:b\013\0239\221\002\3408\360\327\024:\302\362\343\272\024\371.:^\340s\272e\314\204:%o\3029\261~\3409\177W=\271\2610\2309*\026\232:\021Bk\272\313?\266\271\212\372\274\271\205\271\024\271d\302\2428<\023\027:\344\222p\272\265Nw9\274d0:\207\214\360\271\310\233\266\272\010<B\272R\244^\271\265\253f\272\252E\201\272\340Z?\271\340aA\271\362\236\001:\220\314<\271\032\206\033:#\035\r:Uy\306\270h\306\2049\020\200\0369dQ&\270Ot\213\270\275n\2655O\333\2738\327\276\016:.&Q:M\000\231\272\236\037}\271\241\022\377\271\3033\3149H\372\2338Z\034\245\272\216\243\206\271\361\337z\272I\n\036\272_ky\272\316%\210:;H\021\272v5y\271\030m\220:\177i\014\271\354\224\202\271\3235\221\271\353V8\272Y\236V8\315\235\226\271A\263\000\272\316Do\272\035;|9\027\'\2269\271\306*\271\203s\031:\256\352?:S\340\2369p%\2579\2526/:\366\376W9\336\n\254\271o\343\017\272\243\037\357\2718\021\221\272\202R$:\362\303E9\003#\324\271\026\021\2659\371\362\270\270y\250O:\357\007$\270\017\215E\267w\177]9\353\266\3058&.\2129\373W\032:\022\342\2159\364 \210\271V&\213:<z&:\356r\314\271\234\310\n:h[\334\2707\177\233\270\0000S\272\007C\251\272^\353\3169;0\3347\\Lu9\0339\020:\267#P9=\014d:\333\276\3019\2060x\271\377\271\3209\375v\212\271n\240\376\267/N\2768\332\302\025\272\314=\312\272\361u\3479\2123\362\271\362\016\320\2714e\2467\377\025\250\270\305=5:\376\240\3018\260\270=\272PFK\272\001\355\3027 \337d\270ha\256\272&\301\3059\345\205\316\271\323F\234:<{T:3\014\3549\376#`:`\t\233:\227\276\r:\0174M\271C\320/\272\013\034\2559\302\321\321:\221NQ\272^\371\233\271\275v\001:`Uo:y\343\035\272\354[\034:k\207|\271\330\212,\271#\205Z9\264\305Y:j\210y\271\216y\2478>z\n:\305\tr\270\262\324b:!Z+\271a\320\253\271\326\360\242:j\245d9\361\343\2569D\264W\272O\036\023\2725\202\2319\242\2154\272\304\234\226\272\340R\351\271\315\366\275:\200\364\004:c\320\215\272\266\022\017:>5\214\271S\372u\272\252\023j9{\276\324\271Qi`\270\230#A\267\037\345\342\270\325E\207\272\316\013S9\325Y\036\272\223\266\035\272}g\236\272\301\232\002:\010q\322:\354\2057:8\277\3648\320\224\3109d\032^:7\200\010:\256ux\271\3635^\272\226d\200\271\260\234+:\334\032F9\370\361q\272\237\030\005:\350\257\246\271\007\357w8\003\262p9[\027\002:\277Z,:\221\207$\271\274\250\021:\336\304\324\271r\271\327\271\206{\021\271i\377\2639\357qe:\262\004/\272\222\177\3719`<\364\271\347\243\033\272\330u\3209\257.\316\271\210b\313\271\232\371\263:\202\237$\271f\036\3679\021\217\312\271J\232\351:\346\363\236\272\360\261\363\271M\305\2409a\000\265\267P\310c\271$\'g:\334\241\351\271<\253\0008M\3348:#f\254\272u\306\014:A\n*\272\373\336\2029\273\351<\271d\255\321\271\t\272\3369\342z669\327\247\271%\237J\272\211\352\003\272Ej\2369wr\3019N057\202\247\3529\231\250\223\271\271V*\271E\3610\271\250\304v\272\217\275>\272\364;\306\271\311\275\3059#\323\306\272\"\372\031:\321\372~\271\002\347Z9^L\242:\276eL\272S\361[\271\377e\3359\360\243l:\016jB\271:\346\3179\227\257I::\002\314\271\205,h:\2512f\2715\275\212\271\236\322\3579\\\303\215:s\202\3219\235\260\3757\202\302s\270\017\306\2637\302ry:\315\254\244\271\271\347\2619\274{2\271q\036\357\271\347Gb\272\322\203\373\271\027\027\016:\022\267[9\315\300\315\271!\177\311\271-\033f9\214\tU\271\252\213!\271\317]69\307\"x\270\214\302\036:\373\270\t:\350c\2538\326\\\225\272\021q\214\270B\262\236\272\203\240A\271.\206\262\271?!\34793\344m\272\036\177\0039?\222\':\244&X:o\\\010:\037V\31296\223\2419IE\036:#3+:+\321\3339q\0102:\034\232|9\310+\247\272\332\306\010\272\254\003\367\2717\25009H\205\2428\227\3634\270\357\316\251\271p\213P:\336x\276\271\317\342\2229\244\371\366\271&j\030\270L\026Z:\255D\200:2\312\'9\n\250\2779\202\2242\272\244O\210\270\346:\3379\021\350O\272\230r\2558l\202\211\271\020\230\264\271\t|\\7\240%\3739\200\0019\270O\000`:(/\304\271\274,\'\2712\024\2059\303U\212\272\263_\2078\324\260.:\241R\321\267b\314#:`@c:/\314\354\271=7i9\026@\034\272\247\370\026:\017\277N:&\007\226:\372 `\271l\213\n9\315,\264\271\262\313\2777nR\225\272\023\321V\272\257\264\211\272\256\240\245\272Mj09\001\004W\272\031\307\001:{\277R\272\361\325\205\272\216\261g\272\311\024u\270\274\365z:\342>\027\272\305\223\226\270\017\006\2229\025\213\3519\207\372\305\271h\035\"\272W\220\3439\024\353\350\271d~_\272 =i\271\346\345Y9K\362\2379h\343\037:;\004\370\271)\320\336\271\266\273\014\272\313\371\2278\230\t\342\271\'\324\3339\261\323\332\271\327\330\205\2715\307e:\304\200\201\272\024r\026\2720\342\3518\363@\033\272\030@\3429\311V\244\270\320\255\2029[\003\244:u\351\247\271\355\327#8T\002\315\265?Z\247:;N\021\271\300\243\3329W\302\232\271\003\234\0027\257\312\3439rd\3309\307`_8\361\333\2108\254\240m\272\310T\222\271\277W%:G\242\3368(v\0028\324n{8n8\02384\261B:\314\222\033:A\252\005:\264\354\213\272\257\354\374\271\032\304\2639\010\344\270\272\242v\3148\213\'\002:w\255\243\267%\264\246:\251\0014\266\256\')\272\003\341Y\272?v\3129\177\002\2249\310\206\247:\355\365t\271tWY9L\2104:\246Yi\271\003\211\210\272\376f \270\362\317\t:\021\315\211:\36581:\036V\236\271/\321\004\272\237\273G8\r\200\263\271;n\2159\205\273\231\271q\375Y\270\377\266\2607\215\371O\271\2276O9\003p\260:v\266\3239\330\252\373\272\251\363\3249\177#Z:m~\2748\244\264\3649VX\315\271\221r\341\271\330\221c7h:\3339\371\367s\272\215>w\272=\255\\\271#\200k\270\372\'\236\2713c\t\270k]p9?\210\016\272n\257\005\271?\313\2719\026\220\3269\277\014\35780\253X:\374\331\301:t2\311\270wg\256:&\252\356\272\001\275^\272,.b\272\257Z\033:\2728\255\272\313Or\271\371 \3159\232\323):\320\350\3449\377\324&\270\346\343\241\272\027zQ9J\231\3739\271\233\301\272\353\316\2149\022\035\250\271\033\30439\350\200\026\272\032_\3329?Q\244\271\026j\005:\331\016\016\272\017\211\335\267\037\250\002:1\303\322\271\375\236\2009\"\234\2739=\006\001:\010u\3229\365\243\0359t\323\272:6\017\2209\221\035q\271]\006\366\270\227\001\200\270\241\273\375\267\326.,8\266*H\271\263\246\017\270\3144*:aY\273\271V}\2549p\246\3129\242(\244:\366u\334\270\376\274X:l\230K\271o\221}9L\301\303:o\241%\272*\353;\272\037U/8;]\274\271c\226\273\272\217&\246\272\240\316\333\271o\223\231\271\251;\346\270\252\312\327\271\177\256z9c\227\2379\251}I:\363v\032:\254\370/:\246)\326\267\020\312\3239\203\354\001:+\"\0256\275\273\002\272\001\243p\270\351\036\016:O~\007:\264\317\223\271b\255\3529\266^\036:DF\377\271\316\232|9n\335\225\271G\376\312\270\227\222\316\272\360\201\0379\202e\2479\316e\013\272S\260\023:\277\262\0349\241P\253\271-\346\365\271\222>\360\270\225\n,:\236[:\272R\314\244\271\301\243\3378\242\350\003:\000G\310\272\032%\311:s(\2769\232\350\216:,\372\0009\323M\2478s\t\314\2703\372\014\272\276\005v\272AT2:2\n4\272f\275r7s5\220\272[c\013:\266\264F\272\271>\020:R\363\214\2715\316\331\271}\016\3718\226\250\2038\232w\3669\n\017\2628\275\371_\271\027\324\206\271\252Y\024:q\037\201\271\301\310T:q*\0229\265\006\240\272#\225H9\034\001+:\317QZ\272m\351>\272qg\313\271bP<\271%\216\233\271\254\312\251\271\213\311\252\271\230\276<:?\215R:\236?\010\270\334?<:\267A3:*G\2657\233\376p\270\213\213Q\271\214\334\227\272H\224\2359\365\0204:\315\207\376\270\332\364e\270\375\025\2169\232q\2359\265\353\030:\023\233\242\271\316\030~8\037<<\271\337\023\025:\214.\311\272\3273[\271\032\002c\272\026RA:;\232\003:\276T\356\271\335\300\252\271K\251U\271\272\262\003\272{k\3609a\261:\272\304\346\003:\020\231\002:c\220\2639\264\"\002:wS\2169\016\224\364\271z}\3559\220B\263\271\354\013B\272\200\275`\272\240\341\2669d\277\031:\020\307\363\272H\232\247\270\2767\201:i\250\036\266\2360\3128;\363\016\272:\311\244\271,\366\037:\2738\0108\363\305I\272\356\246\016\271K\256\2627\257\260>8k\\\346\271-\223\2669\207\253\345\272\230\364p9\315wQ\272\213D\2219\327d\017:\225\243N:=\274\2779`^\2759\363v\025\272\275u\2259\002\353\206\270\326\303\2079 \314\222\271\"\330t\272hY\374\270\030\013\3109\313\305\000\272\272P::\267\004\226\272\220|\3479\366\262c\272\3529\203:\036P[\271cA_\271[\212\001:6\035P\271\357\031y\272\227\'J9I\272+\272\352\273\217\270\242\366\003:T\376i9\263\261+:\034\376v\270e\333\0079S\221}\271\324\260\027:\223\202\253\272Z\211J\271\263\313|8\035\205\3428\362\260\000\272\355\341\3249\321\\g8\372\'y:/\21619IO\254\271wo\3218\326X\352\271\242\':\271K\002x\271xAH:\324m7\272\0275\246\272\304\222\3359\273\206\243\272\036\222\2238\370\351\273\271\232\307\t\271\306`\3679@:\245\271s\336\372\271\232\335\3339\021\362p\270\274\243\2269\200\363t:\255\\\200:\305om\271\321\024\2379!\231h\271\r\330d:\343%4\270+^R8%&s7T\236M:\373\344^\272\010?\274\272\t7\224\271]\305$\271\275\005\2139L\177\257:E\247\032:Up\021:\207\331S:8\214\353\271qQq\272\241>\271\271\244\252\2658&\213\200:\"5\016\272\332\033\3539\006q\2128\340\277^\2721\332\2429\203\361\0359\277\036%\271U\306b7H\203\2168\374p\211\271\2149\202:E\210p\271\007\264\212:\246|\352\270\227<#\272\336l\2569\'\206$:Z\031~9\320\032_:k\240\336\271\352\251\245\272\322\2001:\312_*\272\321\312\254\271\344[X\271<{\201\270\331\330\2268#\032\022\272I\302y\272\242S\005\2725o\020\271aNL\272\225\211\031\271\321]\254\271\207\355\331\271\300o\0179\372\226\2719`KF:\251\240}\271fH,:C\307\3369\001\324\3618\001\363\3158\031YX\271\264\302H\271\337\330w\271%\374,\271P\344t\271\324\210\303\271[\007\220\270g\307f9^\230\351\271\253\232\370\270w\322x\272\007+\326\271\375-\r\272\244\352\274\270Vd\3679q*\003\271\344\030\223\272~\251H:\304\25148\\5\3739\336Hx9\313\330\3279>0\267:\240\235H\272\0235\333\271&gO\272H\r=9\021<\200:\016{\2678[\365_\270\367\323\2579\243\345\r\273GM\372\271\216\201%:)\241\2479\320a}\270(F{9e\353\013:\344K]7Q\260\2179\215\317\3629\235x.8\376\342\2469n\325\"97\314\202:@\205\242:\316\370 :g\320\230:\210N4\272\273`\260\272\235\267\311:<!\2679t:\252\271\347\\R\272\222\376\213:*\252\232:\206H\214\271\376\340\326\271\356x\221:\034\t\234\266R>\2509\032s\217\271\325\364\30465\344\303\271V\000\0319\177\234\017:}\276C\272\241\372\3349\303\026\3566=\323\350\271\273\255\2569\216c!\271\026.z8\020\261\245\271}\263\2119\002/\237\271f\374j:\370g\025:\241\030\2069\223\373\253:\304\353\n:\200\366,\272t\332D\270\202\\\270\271\021\312\2469\300\27549\277\334\2039N\037\221:\367\350\340\271]\255\351\270\251\221N\270G\022\3019{Kz9\003\375*\271\207{\227\272\361\035\266\270,\023\204:\237\t~:\316\252\3639\'&\227\272N]\3019\306\2340:\'\276\3078S\211\2369l\221\367\270\334\223E\271\237\252I8U\271\342\272#wc\271\220\272\207:/\350\242\271[5\017\272\266\330o\272\362\022\214\271\203\355\0239P\353*\272b9/\272`S\0359\360\254W9Rg\237\271`\03779\353\361\005:i\240\343\271d\031|\271\354t\000:\035\226\':\372\361\3719U\034R\272\321 \2119\256\333\202\271f\333F\272x\355\260\271\255\004#\272\216D\2465\266\036\335\270\325\273~\267\217kx9W\233\3759\335\270o\272\000\001\364\271\226`\0379\251\014y8\225\311\25391\345,\271gPB9T\362\3147\235\014P:\202\025\2539\020K<\272\300\026\374\271\025(}90y\2659*[B8z\311M\272\267\323f:\375\362I:\0177\242\271\217U\0258\304T\2059\0034\003:\241\003\240\272\2179\3229tL\3229\275{\024\272\200\202\2579\360h\2279\007\267w\271\365~\2719\203rE9&\210\3419O\242\001\272\204\341\3319\260E\200:\212\213\010\272}\014\2738\345\302\263\272\313\202\213\272\3528\235\270\031}_\270\256T]\272\271\302\304\2716\311\210\271\367\362F:\370P+:\324\016\261\271\034h\2109\267Fn\272\037\003\223\271\020\252!\271\036U\252\271\352\230\331\270s\262\010:\304\013\0019\332\037R9\333cD:k7\213\272\377A\374\271g\024\270\270M\314B9\014\030\":\345\334\250\271>\376\274\270by\2508\202S89z\256*\270-\375\003:z/\021:+h\203:\251\3071\271n8\204\272\2407\2619m\335\300:s\315@:\277\264\026\2700d\3017\304\006\261:\001\350~:\206\262P\272f\246,\271B\270::Yh\2277eo\n:t\235\2709`\024\037:\353\035\2129=\263_9\317\303p9!\353\3439K\014\0069\030\025Y:C\337b\272\276\300z9M\032`\271C\3643\272\327\212\234\267\026\377&\271\3477P8\247B\230\271\220\017*\272\316\303\215\272DC\264\271b\217\304\271\314\3455:\0051\331\271Yxz\272\177Y\371\271\325\226\3019o\001\304\270\266\205\3137\231A\304\271s\303\3779Eu4\271\236\376\270\272d#\273\271\362\006Y9\265\363,:\350F\233:\364\213g\272\231Dv\272\r\373\2258\t3\225:\360\330\227\272\372vs\270Z\265\333\271\005\302\202:vQW:\354v\001\272\353b\356\270\030\024\254\271\350W\2758\014\305\253\271\352+\0067lm?9<\265Z9\023\331\304\271\r2F\2715\310\2279\006\373\226\271\034\337\n\271\352\030\034\270\365\341!:\022\002\274\271(\242\013\271|\340\204:`:\022:\352>\025:\036\013>\271\317\nn\271\024\223\200\271\tM$\271|\365u8EdM\270\334\375Y:7\tj\266lJ\372\2727\357^\271<=t9)\330\2539\025\235\241\270\2747\321\270\235\341\":/\326\025\272\306\025\2559Z*\2609\224E&:R\33149/\223\2408O\253\3009\204\257\334\270\n\273\316\272\335]\264:\237K\017:\020\266y:\244\350\021\272D\2000\272$h\2057\355\2453\272w\363{9\0302\245\272\252E\207:\027\260\2038\323\214\324\267\2612\362\271\215=q\272\005\217\3518\260\304D9{\311\003:8\247\t\272F\274\215\270\366\345j:\033\234g:\224\247\203:\373H\2179v\301m9&\001<9\300\336\2269\262C[9\002\026C9\233\227\3119#Z[: \335\0277\032E\177\272DT&\272\235\374\204\271\013\337\":\t\225\251:2,\004\272\301\353\350\272\350\235_\272\030\2010:\323\272\3649\024\312\3529Dh\205:\302\375@\271\270M&\272U\033$:\354\300k9\246\3334:U\243\232:\300]\373\271\0052\245\271v\260\2759\242V*:\243\247+:4\003\355\271\350k\264\272Q\232\365\271T\304\346\271\013\372\026\272t\247\2279\024\326\223:q\265P:qy\023\2726=\0207\370\022\241:\023\244\005\271\016\337\2465\010\337\2779\030\037\3479\333\343\000:\214eI9\213]T8q\231\2338zsq\272\345\313\023\272G\366\330\2720@\320\271\351\253\2328\326\314\031:\205:#\271\332<\247\271hzw95}\':m\354i:\341A\005:R\374\201:\321\204\333\271\243\303\2719\3064\205:\236\335\3218\352\000)9\2676)\267+D\25582\321&8&\344\n:\247\323&\271g\274\245\272Z\260\233:\322\227\200:\036\257\020\272\3175:\271w\347\0139\223\376f9;\254\0079\266N.\272^\327\2079\305\270<\2724\005\336\271K\025\200\271\324e\2219\266\244\0349\201G\236\267i\026\202\272\261>1\272\326p\244\271S\367]:|\27077\207\301\3429,\325\254:\027\326B\272\210\246\2508\010r\351\271&{\2759\3302\2329\3003\220\272\344\000\006:\017\205\326\271\022Y\312\271\000\254\006:[\321T\2710,\2109i\014\2129\323ND:M\372`\272|\303\302\271\031.\211\272XAA:vl\313\272g13\272[*\315\270\360\205\350\270\215\'\272\271\243\331\"\271\316k\3728q\325\330\271>\361f:\264\017\3229\277\304\0369[\010\2719\265\035\2529;\225\351\266\036\001\226:\224\234Q\272\344\363\001\271 \270\030:\210\270z:\360\2646\267\305\264\214\270\263\036\031\265\251\222\213\272\227\034e:~\320`9\371\235\203\272v\036I\272\275\264\034:\350~|\272\224\222:\271\341\3357\272\257|,\272*Yw\271\026V\3049\345\037j\272\375\24709\347p\026:B\260\211\271i\373\2359\372#\0179\246\243\017:\321AK\272\003\367 :~\360\017\271\240\275\313\271\255\360\010\272\003\351\333\271\374\037\3339Sr&:\373KH\272\270`\0229 \225\2339< \3269\004=\304\271:2u\271\247\373p:\241\302U\272\376I\372:\326\t\322:!\211\331\266\323\265\014:b\343-8\357\264\3569Q\227\23295\037\340\270kI\345\271\264\225J\267\006\345\3029\t\324\2029\213<\220\270\227\211\2509cz\0248\317\"\266\270\367\207\3759\207\333\034\272Q\"=:\277\230\':F\315\3609\360\342\266\272\320\367U:\361\014\030\272b\236\333\2718\213\2339i\215\034\271\215\206\035:\n\213<:\222<m:,\233\277\2707\233\010:\352]l\272!\333U\272\251\27289]\315k:\2001\324\270\367\2548:\217r\2249\344\240j\271\371\337\0339\037JS\270\210\374%8\0132\253\270\241\246L\271\021b\2759\256&\3479v\203\3469a\201[\272\014\324\242\271\007\237\3758:\323:\272\020>\333\271%\203\255\267\246jE:}v@\272\352\016o\271\016\265\324\271A\374\022:T\347\216:N\372\213\272F\027\300\270\276\330\\:\335\266(:P\250Z\272H\376\317\272\207\276l:\261\361\243\271\356\032\203\272\204\030\2558=_!:\362\256\014\270\024Ls\2725\214K9_\022\003\272\257\360\2279n9\002\271%ef:L\003%\271\301&q9yP\244\272\260\355\2529m\277?9;\210\371\272F\217X\272\211\n\2549\016\357\2509\277\365\217:se\2477s\250X:|\224\003\271\367\244\211\272\003\3350\271\301H\213\270o\336\262:\037\261\365\271\344\036\001\272\354b 9\362{\3279q\016\2279\t\215\3679t\326\254\271h\323,8\315\'R\271\200\215::\270\20779\315I|\272\001K\224\272\374\242\2759\"\013<:\037|n\272\334\024\2079\004|99\0131 :\322i\347\272N\037<:\254\354*\272S\370\347\271\336\024#:\255\304\3408\327\264\235\271\247r;\272\310W9\272\001\375\346\271%9\241\272\365\t/\272K\211Q:t\223T\272\370*6:1\322l9Z=\030\271\201\336\030:\307\310\2337\270r59\232f9:\272\036\0138\227\204\3019\217\270\020\272\004-\n:\365\n\017:\017\024F\272\324\316\310\271<\362\3138L\300\033:\300\213p:a\217\014\272\301\002:9\237\236\2419\000C\207:\3766.:\246\325\032:*\356\2409\020\366\330\271\000\310k\272\347\r\004\272\374\212\2019vt\223\271\244{\236\271\263\'\210\2728@n\272\227\2044\2724R\357\271r\253\0208s\335\372\271!\3208:\034\021\2668\014\263w8>\376\332\270\220\211\234\272u\014T:\243:\2709\r\325\020:\263\2070:Rk\241\271j\364\2719G&\177\272\256U\215:\247R\020\270b\246\301\266\017.\010\272\025\210\322\271\315$[\271B\324\204:JM[\272x\213\303\271\2076q\271w\261\2548\333uw:\342\017\3209_\352\2679W\350@\267~2\207:\311\201\251\271H\370|9\300{\0259\364\033\\\271\000Q{\270-\250\2759\r\317\032\272.W\357\271\371\325\3349\036\224=:\000\242\0039\311Q\217\271}_D:F\211\2309\003:\200\271G\364\2519\370\026\3469%@t\272\313\354d\270}Ez\272\365u\357\2708M\213\272\201\373\3507#\362\0219\025!\2019\246\367\323:\007\3244\272M\215\n\272\263\221C8\306f\t\272gs\216:KH\033\272\367\026\2747\005\007t\272]*\003\272\321\222?8\352\276\201: C\3068!\224P\272OO\007:\206q\324\271\200\t\025\272L\241\021:Q\033A\271\366\005\3518\262\017!:\234\0071\272\226\211\2569\212t\177\272\337S^\272{\270\241\271pP\233\272\307\237\264:\323\200#:\234#\265\271\310\r\211:\310\241\005\271\2656\310\270\350\334=\272\267\360-:\234\327n:v\225j\272\031\320\2309\324\r\337\267\\\212\376\271\033\273\303\271/\364\220:\260\226\300\271\356\252e:w0\031:J\244&90zx\267\222\202\3719:@\216\272\265\020\2359\210\366\365\2711-s\272vR\243:\376\032\3719\252 H\271a\002\231\271D\337.9\004\276I\272o\022\247\271\'U|\272\350\202\360\267C)\211:O0\306\271\322f\221\271\321\233[\272\\c\330\267\260HO9\004\225w\271\2455\257\271\016\3259\271\364\246+9T+\304\270\200\262\024\267\037\215S:\\Z\037:\3174n\271\233\253M:\375\216\2619G\210\22496\3055\272f3-:\222;\234\267\364%\3619\247\273B\272p\363\311:\216\032\017\264\327\356\026:0)\251:\210,p:\215J\3769b\035\3728\200\267\244\271\244\322J\272y]\2539H\3031:-5t:\344-\356\271\325\t\212\2724\344\255\272\t\362\305\271*\274\014:\301\305\2538\354\022.9#M\200\272\225%\2619\333D\3509\251\020\2478Ah=:\272\376Y\2722\027\244:B\336\027:\373&^9\006\341\337\272\323\354\3548,t\277\271[u\035\272]\354):\237\030\2539\2239\260\270?\'\3579\230\205&\270\310\262\201\267\0175\204:\030\036\212\271\035\221\002:e\265\3048\362\025\253:\204\0173\267Qm\363\270\302\332\3479\006\232\263\272.\212\262\270g\222\2758\252>.9\221\t\360\271\271\'K:\203\372^\272q6h:Bx\347\271r\356\364\270m\246p\272\3007f8\360\344\2438\264O\245\267B\222\223\271$\231<9\033\273\030\272?`\2209\306\231P9\351<\2759\372vD8I\220\2149mt\251\267\037\321\3619g\300\010:\025\357\263\271\234\202f\272\214\030l\272P\022\276\271-\261\000:\235\306\020\271\343wR\271\207\212S:\014\275~\271\345\375{:\033\231\3059~\304H9\264Z\2749e\031\3347\205\210H9\250\230\245\271\331(\236\271\215\021\263\271&\034\226\271\"\177x\272\377\ts\272\255\017W:zX\3069\356\277\341\27183S:\315\005\377\271\212\274&\272r\005\306:k\007[:\363R\3719J\353\3268\255\326m\272\2076\314\271\033\332\003:c\262,:\016m]:\361p\2619\206\377\323\271J;b9\324\355>\272\260D\000:\013\366\317\270}\253\037:\322G\3019\321t\017\272\362_$:\342\370\3549f\023\263:\372\242(\272MO\2139[\003#:\354H\3159{\033\3069&\365Q\272}\240\227\271\'\321\35390\370v\271\335\237\367\271e\362\334\270qn\2479\276\346\210\2713\026\301\271D|\347\271\372u\014;\024\211\215\272^\245\3718\232\355\2179\312\214\3269]\336@:VKL\272\'\247H\271\032,F9\361\014f9\314+\3008WY\3019\305J\224\272\001\2772:c\034|\270\315+\221:\232V\216\270g\2572:\227(\005\272D\324\273\271K=\265\272*\'i9\3355~\270T*4:\362\214\341\271\013y7\267\342s\2439FU\034:\332\"\026\271\235\224\2779\206|\r7\004C\333\271pO\213:\276\035\212:\334\017\020:\021\223\025\271\260+,\271)z\222:w\262\2629\232H\216:w(\304\271?]\2718-\010d\272\323`\3459.\257\2539.6}9\217\340\005:\027\262N9\253]69\360R\2439{p&:c\3078\271I!e\271k\247\3119y\301j9\333\027p9K\002\3549\005\304\3479K\334E:,V\205\270%<>8\235\354\221\271\177\032\330\270\271\360b\272\312\250?9\224\271\2228_\210p\271\341\035\t\272g\333k:6\304\324\267\016\223W\271\373\243 \271M\321\371\271RD\222\271I\206\2359\323\0223\272\221\031A9\tE#:\013\233\37296\237\036:\201e\204\272q\357\231\271\272hA:\235\261\020\2712\\-96\276S9s\rx\272 2\036\272\006\370\347\270-\"\365\271\367l>\272-\006\003\272Y1\000\272\312\246\250\2721\"\323\272~\217,:|`\n:\343\246V\271\304\000\006:d\243 \272\350\344\3179@\304\344\271\300\2513:s\250\3069\271,[8\177\312\005\272\342>\233:?e\3138\203\252\006:\235\016\017\2725\203$:z\217\2338\300\265\037:g\365\2369Ev\340\266\032\013\"9\230\250\3579~\032\242\272Z\360$\271\303\357\254:@\205\235\271\360&47xc\3219\331o\3729\351`<:UD\0319\251,\363\270\031\260\270\272\277\206\r\271T.\323\271\354\337\023\272\326\024\3628i\322m\272\207\216\025:L\022\2468\222\362T:\2501\2068T\025`9\312\352^\271/\273<\272\265\323\3439\021\372%9W\266\3729`a\2019\242\300\235\270\226\342\3758\277\007\004\272Z\221\2269\032\20449Q\036Y\270\220\354K9\347\317\004\271kH8\272\rK\255\271\216P\030\272\0340!:\022\255\3369\246H\241\270\272}\257:\352\025\351:\313\373\233\271u\030I\2727\260\034\272.=\251\271\235\202\036\272\253\235\016:\005;\334\267\321\244\222\272Z\310\"\272\214\224\3449_;\3639JT79T\244I9\264\360\2118\021\2701\272=\000\022:\177\200\2636Z\340\213\272h\247\202\271\204\210\0169;nN\272\016\033\213\271\215\257\0049\250W\374\271G\251\n:7A+9\341\010\212\272Q$%\272\320y\236\270\224\351\272\272\375\270\3569\214S\323:\t\317\\\272\030\316\212\272>\226\016:T\023(\272X\020\327:\330\022^9FAV:&\345\213:\217\230%\271\360\325\010\272\'\273\3239\254\361\3759\317\032\301\271\207E\233\272\377\033\3748\231\016`\271\227\246s\267\037\207{\272\270\273\260:\203br:_\261\0309\344\256`\270\310\343]\271\242_~\271\tO\275\270~\317\021\272\315\242*\272W\352\030:\3148\037\270~{\2649\321Hu8\236\\(\270\310\341[\271\270\010\24793y\217\271\200\206\242\271 \233,\272\212\206S\271T\333\033\271\376\221\3519^\273@\272\306\245\2158\362\'g\272\365\353[8\321a\000:\324\203\313\271\265\216\237\272e\325\212:\211~s\271\373\224\2059\352j\245:\001|\3579\tS\023\273DnH:G\034\3719 \220\3439_\266G9$U\022:EV2:\351I#\272G\251\260\270\374 \005\272+Kn9\310\214\001:\003n\035:e\320\004\272r\253^\272v8t9\211\2644\270\027?\303\271\021:\0059\225dV9\242a\200\272\231\374\253:\274d\2539\235\221\367\271Nk~8\2048F\272\244]\023:\016\257}:\254\2718\271\325t#:\345@\':\236\003o\272\363\343\2649a\341\032\271M}\3257\340\344\001:\320\305\023:jb\223\271\007?;:\301\306\2339\263\335\326\270\250\264?:\254\034d9{\240\001:\251!\2459\037=5:\333~\2178f\020Z\267\200(L:j\035\3348\306\361\260\271\3569\2009\273\000\314\271}\230,\272\211\22008t\233\214:\005\325%9^G\2379\2004(9\363\341\231\267Nk9\272u\243\261\272\234\t\265\271\365\363\212:w\307\315\271\022=\240:\356\336\206:\n\021\2277s\005\033\272l\214a\272M\336+\271@\373\3758pq\221\271\"\322\0037\233r\2508\236\031\031\272Y\274\036\272Q\017\233\272\317\371\3209KF69fZ\2059\020H\272\271\3710\263\271)\233\0328\337g\003:\2743H:\236J\010:&\304\232\272p\341\0039\336\230\2629u\363\013\272\230\260\341840n\271\373\216\026\272N\327;\272\370\0050:{\377\3039 \22098\031\334\252\267Z5\215\272\201\305\212\270\247\030^\272\205\236\2049i\2728\272\356w\17797|\2678r\275\235\271\243\275\036\272\225\231\3748\333\360\2508\213\317P\272\036z\2778_\377\003:\000\372\250:\264\236\2618\231\3568:6M\2319\330\r>\272\274\300\026:\276\013\004\271\231\366\3419\017\357/\271~\2211\272`\027\304\272\236\267\\:\235\243\023\272\206d\204\272\220\03179-:\20194\322\3569\342\217\r9@w\2229\022\257\021:\024\366%\272\005\365X:\034\374\342\270\247\201i\272/]\324\271\243\302)\271\300\025\344\271\345\010\266\272\2177\034:\003\001@\272\257\347\367\270\232\rQ\272T\030R:\246\363\0069\246\005\265\272!\272A:%\177\3269H\034P\271e\365F\271\001\217\01697*@\270\177V\260:\035\217\224:E\314\0249\357\232,\272\225\035S9.\355r9\3351\3059\201\266\316\271(\205\3569@>\364\271\311\311\337\271\355\200\3429\177\326\r\272\021r\031\272iiU:d\0329:\317\270\272\271\337\347H:\351\232A\272\362R\030\272\367v\235\267\374\000\027\270I\367\253\272eb\247:\275>X\272\376.\2109\032Sd9s\027\017:\355\300\3369\235\211\031\2722\222\3448*\021\224\271\335\006V\271j\03009tP):\377\310X9m\261\271\270;{ \272=\265\333\270\221\252\2578wBN6>\253\3619r$\"\272\240_(:\340\216\2049\215$\032:\364\331\2518\311\354\023\272\226\271\3019\004UE:\023t=\272!&\2259\253$]:\362,+\272\032EN\272#W\206:6\251\23197a\026\272\224\371\035:C\3268:-\312\022:4\337]\272\364\017\3529\212\037\326\271\261B\232\272\335\301\326\271\262\340\240\272\325W\2168\371\216\016\270\331\3505\271\326\303\022:\'\250$\2725^\0209\275;\2319<\240\3459\260W\211\272>\244\357\271o\314\342\271\030?y\272N\374\344\271*\352o\272]P!7.\312\3149x\237\343\271_\224M\271\206\261\0169\013^\200\271\351\267\241\267\027\343\002\272`\n\356\270\234\232\016\266\014\303f\272\222]\r\272\'\250\2339J\345|99\007\215\272\241\035X\272ps\001\272\027Y\207\272\377\310\2769\232\231x8\362\n\264:A\363\2679J#\246\270\267\252\353\271C\002{\272\260K\n9\303\226\3159F\204\2529\340\311\3729K/X8\251(\3379\030R\'9$h)8=\215\\:\224\006H\271,\331\0359\347\232 \272\333\3638\272?\206\2619U\242A\272\371\225\":\200\226;:\341\356\256\271\345[h\272\025 \3609P\025\2029\306|\351\271\256e\210:i\212#9]9\005:0\341\315:\371TQ\272\000\004\347\271\037\203\237:q\214\342\270\324\361\230:\333{\337\271\315J\302\270\271I\021:J\277\203\271V\027\2028\0149\203\271\341\334\0269\014\016%9\026\034\3469\207v\375\271\203h\234\271\"\255\021\272\377\023\023:l\202k9\321\020\254\271\236_\234\272h\334K8{[\264\271\245Pt\271.\327\254\271\022\365-:\313ZN:Q;\365\271y\"!\2721\231\r:\021pQ\2712\232K:\371\203|\272\026\233\":\262\014\2068\234!\006\272+\314\314\271\214\313\026\271\261-\216:\307\253\240\270\320by9lq\200\272\353(~\272+\002r9P\350F\271\035\032\241\272n\006\2779\013\372.:{\3165:\030\006\201:\r\302?\272\330\234\37496\030(\272\016\272\362\271\340 \240\271\251\366\3619\322\025\':\317%I\272F\276o9\3347\325\2715A\267\271\\}\307\270_\334\331:\263;\017\270\003xq9\201\023\2018OM\3728\377\227I9;\203\242\271H\002\007:7.D8\213\361k9\245\262\216\263l1@\272\301\200\004\272p\0256:9\241\016\272\021hW\272\301r\341\272\'\002\3179\307\263\3069\354_\243\271X\301m:\005z\014\271AW\\:\232\021\025\271\336\330Q:=\314\2529U\006\025\272\013\356\2459\333\037\n:{K\024:\255H\t9]\216V\271\316\016\213:\303\256\025\272\346\255m\270W\n\2079\2745\0379\217%k7\336%\217\271\014\305m\272\200\254\016:\031\t\357\271\002i\374\271I\365\2379\346\340\006\272\271\356z\272\'\366}9j\367\3427\321~s\271\310zq\272\324\317\026\267k[*\272\307\204,8\235\240\213\272\221\265\232\270\3409\000:\330\005q:R\271$\272\230;E:\306.\3628\177\346#\271^\354\025\271\332\252\252:\373z\2349\347\016\233\2726WY\270A\347\270\271\325\205U\272\'\250\305\271\345\275o\271\025\357\034:<\177\1779,\3378:\010yH9\251\317S7\005X\016\272\324\230\005\270F;o\272\32173\271\341\222v\270\243\247\3559\354`\320\271 (\353\271O\316\3309\244\024):\376\242\017:\022\024\205:\262\365R9Omb\271U& \271\327\n<:\252\370\3739\016\2350\271\002\312+\272\247\226%:\016\303.9\346<\330\271<\253\331\271l\265)\272\002\021\2628G|\237\272nk\347\271SFM9AN\321:\270k39\304X\274\2715\036p\267\324\t\3659\203t\335\271\007{\2469\014\032\016\267oV\0209\005\217\t\272\367\372.:\324R\2528\214\243\220\272#\337\010\272\237\363l:\255\243F89\"\0239\316\204\027:km\257\271/\356\204\271\234\305\034:,|\2308\006\013\034:\266P\004:\345\3356:\244\204\2747\032B\306\272*\203,\272\010O\010\272\333\242\201\270s}\335\271\"\036D:D\235q9\321\252}\272\355P\265\2729Q\207\271\023\307\037:\317h\263\272i\220\3459\236^\244\271K\310D:X\333\2609\366\315\3309\376\377P\272T\223\315\271\024\3670:\205\311\3559\310\255\t:\207\365>9n\321\003:\'\'f7\007\013\220\2720W\3369\023s\021\271\301\024\0259\206\314.9\300k\373\272\221\331 :\364Y\027\271\016\263F\272\303\367E8\203J\021\271\364\2004:\013x\2079\360x\3269\355\305\262:\211\005\036:/\n\21295\233B:\253\241\364\270\253\252\275\271\202\217|:\272N\346\271\361\034\010\267i\243J\272/\277\2357\362c49\330\346\2569L\240\n\271 \\|\272ff,\271&\362\376\271[\236`\270g\371j8^\230c9\244\01079o\221\220\271\024\327T\272\001\225p:VO\2149\'\351g\272}\031t:\265\274\364\270g\210k9\220\030\372\271\366`\021\272HZ^\270\262mN\272\306\205\277\271\214\272\013\272\372\351a\272gF\200\272\366r\2619\234\342K\270\032\030\223\272\231\347\007\271\334\311\226\271\222u\3149\024\273n\272\025\266G:\342\030\336\270:5}:\223\262@:\323\315\001:\361q\0378`\213\243\270\261\322=\272\226\333\\:w\357~\270\363IQ\272\305\307M\272\354\306\2539\343o\001:I\266\332\271\rQ89\360,F:\266&\3448\260\374\242\271\257\200\207\271\030\211\277\271\036\360S\271\371 \031:\354iQ\272\276\255\242\271f\252\3029\2716\026\271\345\272e\271\224\021\2739+\253\372\271\206Uu\271\024\363\034:/\363\022\272\033\302~\271\314\035_:lz>\272l\306\251\272a\007\2048\227g\362\271P\332\321\271\227\237\032\2724\264\022\271D\356\n\272\314\226\243\271*<\2579\003\004\2717D\3428:\007\233\360\270J\252\236:\201\265K9[\250!:\353\001#9\356\206*\272B6\3479ogE9\233g,\270\230\304o\272n\304N:\336\275U\272?\026\277\271\341\276\321\267\031\371n:\222\311,:S,\305\266pK\211\272$I\3059\310F\223\272\023\207P9>\212\236:_V\212\272\303\257&\271<C\221\271\235\0067:\253P\2218\371\366\203:xba:\264T\303\270\002\322\232:\315\023\200\272\016:\2249 \306\020\272d\257\310\272=\231\0269m\353\351\266\266\t9:\372\377c\270\310\335+\272\3600z\271H\232\3039\220W\202\271$\016\033\272\316\320\"9\375\3136:\336\267\221:\216\206L\272\267\302_\271\2622\2019\250e+:\034\224D\271\305.y\271\316\347B9,\322O9\325\377\203\272u\263\\9\030\222\002\272=\026k\271\370\3727:\232\341\036\272\310\241\314\271\225\345\244:\331?\005:\260\261\366\266#\2728:\345@3:\301\262\0046\375\243%\272\250xD:\025\202\263\271Z\252=:\331k\351\272\265\020\2609\316\3324\271L\322R9\314\214\035\272\313\201\200:C\321L\2700V<9\221.@\272\242U\263\271V\211H\271\013\n:9\306q\245\272}M\3639n\344\026\272\303\325\004:_wM8h\010\321\271{[\371\271j\177\025:L\263\322\271\005\377-\272r\324\271\267\262\014N\271\347N\3229\374\030\326:\336\005\206\271\034\325\2628\222p\355\271J\232o9E\234[\272#\034\230\272\250Q\017:\000\204\2509A\031\265:Fy\274:\230{\333\271\262l\362\2700\330\327\271]#\210\272&\336\371\271M\265\331\271Z\266k\272\255\r\210:\335\312R\272\013F\273\270\311 \002:8\335;:P\324\203:\r\212#96|\221\272?\353\n9\342\250\036:?\177\3279\273H\366\271\2366\3579\344^\251\271\220\247\2659nE8:\201/\273:jq\010:+J?9\014R\236\272$\350b9\020\263\013:a\0279:\301\232a:;\230\2108\201(\233\2726\037P\272.\364\344\271\312KS\271w\000\3069k\310\336\270,\032\230\272\317\004\3179\035t\036\272\237\321E9\020.\274\272Q\374\233\264\275t5\272>\017\030:<\3721:\260J\3449\207\022\013:EYt:D\204W\270\223\310:\270A\025\217\271\367<V\272\300V\234\272\374\377M9%\\H\272\355\261\2108)p4\267\340\033\26591\362\334\271m\224[\272\310\177\2029\317\347\0329\355\277\271\272.\353D\271\032\031\0308.\316\351\270\327\324R\271~\304\007:\370J\2509~mN9P\362\243:=\001;\272\254\346J\270\0372\2459v\367\000\271\\\025)\272l\204\345\270\t\034\337\271:B\3519\270\330\2138\201\213\264\272\237U\013\272\373\212\3408\255\tv\271\353\305\244\270\023\275g\271\357\377\2109G/\276:\021*\004:\311\t\260\272<\307\2539\3465\2729\362\330q9\341AG\272KQ\2508\232{\303\271\230\203G\271\227f\356\271\274\367-\272\2601\3719\3020\200:\230\010o\271\301O\r\272\207\036\357\271\346\332\206\271\327\211\010\272\001\313{:\327\213F:\376\260\\\272\210=t:\222rQ\272\334I\304\271\257)\2739\231*\031:XP\2739R\327F\272\210\210\017:\311\301\301\271\326\311\251\271\241\031\205:\260y,9Ud\r\271\332\031\350\271\237\336\2208\2353\270:\235\206\245\271\270\313.\272\0006\0068\231\030s\271.\036B:r?0\272\367i\032\265\354\276\3679\351l\3726\216\225 \272\205\034\206:\272\310\3769\0061M:nB\3229\271?u9>\351j\272O\370\223\271\251\361\306\270\226\026\22691\265i:\245\016\244\271Q\234%:a\014\0249\215\336\3139\336\263\236\271\214\200\204:\254\254h\272Ld\004\272<\376$:A\340w\272.\024\241\270\333m\3729BHV9cp=:\227Pt\271.\234\001\271\210\177\0067\037\337C:Q\030\322\271\204\372\007:\320\355\\:M\234\3169]\363\'\271\036\262d9\265\226\247\271\2751\0169v\"\221\271\356B\2759d\275!:\226\345\014\272\356y\023:5\347\261\271<\026\r:$\334w\272\010\354\275\272\244\374\227:\303Qr\270\353\334\020\272\207\240\021\272\377t\202\272:\312\3379\311\360z9\006#B\271\217\263\003\272\235\237\327\271\016b<:RdR9\257\216\201\272\3727a:\366\306b:\255\354S9N\202\210:\032\256*\272#\037?\270S\246\316:t\252\2749\377\300\2339\363K\003:\330\334\334:9\346\3269G\256\3529\027q#\272/\365\\\272\322\366\305\272@)\2009\367\026\262\272x4%:\322S\032\272Y\344\236\272\332\333R:\271\364p:\324V_\272\0200\024:r\233P:\r\331\001\271\267\025{\271\243pc\272\333\206\216\2719bq\271\234\013\005:\272\\m9\034\276M9\001am\271v\33079Q&\357\270Fq\267:\203\337>:\216{5\272z\016\023\272\032\350\0229\354j>:J\355\275::\245]\271\230D#\272\002\271\020:\312K\004\272!yJ:\270{@\272\347>\254\271\037\"\3439\202\363\036:\\\222+\272>\306_9\252\211\2349\026\266V:\211\016\004\272\016\224`\272O\230\':\217\033\000\272\203\323#\272\312\371\2769\271<\3759\353\033\\:\005\317\3258\230u\211\272:F\330\272\243_S\272(\251\0279\270\227\t9\373\223c\272d\320E\271\360\253\r:\202\t|:\307\024\212\272\365(M\272\350\034\030:\236\324!8_\202^:\362\'\025\272y\206\300\272\200X\240\272\022\274\2468 \020=9\364\327!\272\343~@:\"\364\2738\244\302\032\271\203\247)\271\002\337\001:\320\244\000;\2562v:\247\303\265\272X\354\0309\2769\2436\245\326/\272\311\030\022:\321IC\272\305\211\014:\211\366\241\271>l\3678Pa\0079\364\267/\271\353\217\201\272@\207y9R)\2729\014\266f:\277\016\316\272\250\276\r\272\013\252\032\272\340\306p:\'\200\3019\311l\216\271b3a8L\004\200:\223\271\3209P}\207:\372e\3639 \003\335\270\214\350\013:\350\223/\272\223\317b\270\344\311\0217\363\n%\272\212\337g:\344\362T\272Ho\247:\221NQ:&j,\272\221\252:\272\221\214\3028\237e\2458z\205\033\272\013\243\2408\352\345\2159\323\217\30790S\3418\216\372e\272$$[\272\241\314\362\271\307\301\237\272Z\225\2279P\272\231\271\216~\206:o>_\272\355g*:\204 \037\272\033\305\362\271H\'\025:\000~C8k\262a\272\304\245\034:q\251\365\270\260)\2449\340\037\353\271\347\306\027:P\2705\267\345\353W:\375gJ\272\245\266y9\205O\302\2713\207b\272\014\362\205\272\365\324\032\271\272y\2209u2\260\270\240|\260\271~\222\3069\252\200\2529\364\007B9\361\244\3128 \345<\272\332\307t9\001\301\3329\002\204Z:\345\341\r9\216\275\0329\307\203e\272\362\267\3509\340)Q7\033\026W9|\241\3279G\277\3639\223\302\3109\177\tq\272W[19\363%\207\272\252_\207\271&sw9\267\233\306\271\367\360D\270\372\210\2009\372o\225\267-\021\034\272\350\'i9\330\215\2009\350P\250\271\215\255\327\271@P\267:{\234I\270iS\3229\t\346u8 \374\337\271?P\3259\225/\210:[\317G9d\257O\272\373>\0059\026\251\352\271./Q:l\r\0329}tD\272ji\253:\243\366\2009\237\215\3169\370J\3449\254\257\221\270\355\031`9\337\343\232\271\001\027+8>\007\373\271\266\373\2369Y\305t9~@\3779\306=\3518\"u\013:\267\372\206\271\334\335\251\271K\252\022:\204\021\3609\037T\3709\327\332i\272QQ\3109\323\324H\272fh\013\271\004/\20196\010\2039\343\333C9\221\273\232\271\330M\3728Z\345a\265\252\226h73\374\0029[\177\2468:\022i:\366\223\007:\202U\347\271!$\025\272),X\272\323\335\n9\257\216b\267Q\337):\366\317\3279T)p\272\273\373\267\271\202\232\376\271\342\025\260\271puD:i=\24696\246_\271\024\026\355\270\267\237\230\271Mj\2319\tU?\272\270\232_:z\266\2449\202B\r\271H\221%:;\013\3659\337E\3448\372R\266\272\327\3513:$\276\007:\322\t`\272\331\t\033\272\257 \000\272\236\024\030\271U\310\270\271,!g9!\267t\272\010\206s:\236\220=\272\030\317W:\350T\004\271\240\373Z:\242Z.9\221\330\3529jv\014:\030cU\271O\266@9\010\214\2559\330\177\236\272^\227M\2715t\240\271\271\030\3239\322|\233\270\355\377>\272\373\344\246\272\034\320\273\271+\243\301\271\320\353\241\272\203g{\270\033jk:\346\325\204\271\003\032B\271FZ\3429\037\202\2149\267hg8\206\364\323\267f\370\315\271*\032d\2729\022Q9\311\366\231:yp\312\271o\310Z\271\265\2204\270\236\01728\371:\2569?g\3479E \201\271\345I\277\272S\270\032:\320\356\277\271r\367\2079\"\206\203\272f\370\304\271%U\365\271\353zl\271\000\001\026:\356` 9&\322\257\272\347!8:\300\221\217\272\32531\271#9\2209SeD\271\255C\237\272\241\354>\271 \036\312\271\355\224A:\3116\3659\275\003N\272\357\343\254\271d\201\010:\243N\273\270\306\237G9P\326\n\271\263B\0179\246\004\3119ES\225:8v\344\270\362\213\":v\3517:\005\030\313\271N,^:\230J\3339\345\033\004\272\215\005\005\272\272\210\2049\226y\205\272-\025\006\272\270&\365\270\030\031a\272\360\207\241:Nk\242\271\216\222T:@\367\227\271G\317u98A\345\271\022ry\267\235L\033\270_a\3139\022\276\236\271b.:9\346B/\271\241B\3669Hj\201\271)\302w9\246C\244\271S\217\2229\366\305r:\004\250\372\271|.\2309i\235\2619%\317k:R\374\376\271\177\277\032:1W\247\271e\316K:\352KK\271\276t\\\270\003\366\204\271\024a\000:\244\235\037\272\236\225\001:\242w\3259G\032\211\272\245\274\023\271\366\271\223:b\270\0227\2564U:\215\233\256\271-\032\013\271\200\256\201:\344\266\2559\244\024\030:u\310\034:\263\022\250:<\303N9SI\270\271%4\3629\306\224\322\271\363\213\36282-\353\271\251!\232\271F\310\321\270\360-\325\272\335\326\333:\267\363\032:\022r\205:\024#\020:\252\275\3629$0\3649\"\252\341\267%7\260\271(\037\2359\013z\365\271\037-\024:\334\363\013\272\212&\'\272\213(\2739\242N\3168\376en:\221x\032\271UuE\2715R\037:NA$9\326\366\232\272%\03389\245\327\306\271^0\2008\352F\311\271\271\311\354\271X6\3459\024\006\2248\020\204J\271&\276\210\270\324\211*:\377\236\2409*)\0229\2317\205\271>\002\3709\264~V\271z\217\257\270~^\020\272\332\034\212\272$\334\307\270\\\235\3328=\331\247\272\204\035}8,\370_\271\324\217\322\271[I#:\365I\300\271x\371\3569[~\323:\354\365\2369Q&^:\026\363\"\272:K\2359\2373\256\271t\214.9\306\231\r\270\256L\226\271\251\224u9\356\302\247:\211\271\232:\362\036\325:\215b\024:y)7:m\2734\272-\374\001\271\255\341\217\270L0\0329C\261\275\271\335pa:\036\016\262\271\204\223\230\271\371\361\226\271\333\006b:\243\331\002\271K\007]:\376\264\0208\245\333\033\272\366-3:w\306\3029\342EK\271TB?:I\330\350\270\232\313\333\271%@\3339+\206\0048\337\346@:.\374\337:\276;-\272\030\250a:\"Bf: .\214\272\030\245H\272\021\252.:>\233\261\272\002\375\025\271\352w4\271\211\036\r9\353]\234:\350V\346\271p:\326\263\016-\r\272\225yU9\374\272A\270\243pj:\224$\322\267\276\007\322\271\"M\360\271?\241d\272\326^\034:\336E\301\2703\212J9\022d\275\271\21378\2713\231=:Q\243\3239\251\013q\271+\001\272\267~\01759\374E\265\271\267\255J:C\200\007\272\231?}\272\367\r\232:\"}\024\272\325:\315\270\275~O\272\362Z\244:\243d2\272\252\323s\271\213\177#\272N\366\252:\256\374\233:\271\306\227\271\t\231\3249]\251\33175Ho\271DX\353\270\302a\234:\203\317\3409\200\273R9\333\014R\272R\314\025\271\0249\303\271\245\337\323\271\273n\253\272\364\375D\271Rr\22468\376\2359\236\305a\271\3775\'\272\332\355\3269C;\2009f\221/:\177\2174:\316\354%\272}\22468\361b\007\272\265\326\026:g\375\246\272\337\375B\272\005\353\":\"P$:\217Bo:\256E\2568\372UK\272\207AN\270\321\000\2108\216\2763\271\374&2\272p\024?\272j\212\360\270\214\321\\:\267E\312\271\367\222\':s26:\017\266\200\272\006no\272\262\311+\271\t\016\304\270\306\345\25295\364\3018\340\001h:,|\210:\365\225!\271\201#\356\271\013\316\0219\344\257\000:\322m\206\270M\353\3079\312\301\222\272\356+l\272/%Z\272\305\225\007\272\332\2705:5\002\275\271\271\370\211\270G\255\314\271\322jC\272\3542\245\271>\306\2359|Q\226\272\353X\037:\2729\361\271KL\3269\311\201\013:\273d\2758\253\360\303\271\nP)\272\333\273\367\271\220\356\n:`\031\253:\326\036`:\374\243\260\272$\002\0049\031\322r\271\222G_\272c/\3309\235\265!\271\241\t#:\203\265\330\271\265\356\326\271o\352\275:XO\2439\243\271\007\267\202x\310\271\235B\024\272\355\307^\272#F\333\271\005\356\035\272\030\244!9\345\250\3779\246\032\202:\244\004\2659o\025\206\272z\372R\272}\211\r\2727\270m\272$B\262\271pU\010\271\261\3407:=\220\213\266\364\371\303\271\252U\254\271l\200P\271\357\013\237:[R\241\2714\354\260\272G|N8\205\340~:1\340\225\271\312}\2619*\326}\270VC\033:\275\207V7 \003n7\024~Z:YW\3149#\272\3579W\3534:\353\2041\272\303\211\3158\377\314\177:\250](:\227\341-:-{T9\207q2\270\252\257P\271e\367\324\270\313\370e:s\377\322\271\345#\3579}\253\204\272\245<Z:\321\217\2079,\335\357\270Y6o:\240\260\\\271\311\261\224\272\376\355-:?@\2679K\2020\272i\245t\272\020F\3149\377\347):\323X\202:{\336\273\271\317\325\376\270\356\340I:\314\337\203\272-\207\025\272\346P\3368\226Oz:\361\247\236\272C\216\213:\201\343I:C8Z:o\273\004:\211\027\3668\017U\251:,\005\035\271\240\r\2139X\246\224\2716\0000\271\304\255%\272:Nb\2718 \0019\030\032\307\271G3\367\271\250\010\3529\244\210\233:\026u\0369c3\244\271~\014G:\001\304\2419s\346L:\201\007\3308\247!w9%4>:\350r[:\023\004\026\272a\361\001\270\204[\254\271J\030\2029I<\256\271\363W\360\271\005\360\2649\330Vl\271^\350\006\267\254Q\033:JN!9\n\'\3679\304\204\314\271\032:\211\271\307\306\2219\321\032\r\272\250\206(:\2723\270\271X)h:\\\007\003\272\260\272\334\272d\335\t8j\364\203\272a\243\004\272K\013?\272\020IO:\024\027!\267A\013$\272`D/:a\2617\272OPq:K\227Q\272O\316\245\272SPc98\226\0239\333c9\272h\366\033:\375\177\236\271Kw\003\272F\220\02283}\207\271\207\204 \272(.1:p\273\310\271Q\214^:\331\352\023:i\024\321\271\254\3045:D\320\325\271y\327\3359\363\276F\272/\367\2369Ex)7\275Iw9c\033y\271D\322\016:\306,\333\271F\363\2549\247N\016:\312U\3348Rxp\272\320E\376\271\315\301\2758\264\215\3649\325d%9\327\030\3759\007s\214\272\203\334\003\270\030\366-:\020\215\3633\355\313M:\3457\265\271\0168\2268\353\334r\271I\264\356\271\316\001\177\272\301\233f\270\260\006\034\272\355\357\271:\312=\2049\374\374\3719\323\317\000:\331\020\216\271r\356D:GzO8N\026\0109\312\031\356\271\325\214-:x\211.:L\374:9c_\22195\326f81\344\257\270\233\230~:h\021\001:\207\32539\252;\217\271\303\367=\272\300LP\272,N\2548\317\306\2378VX\227\271\217/\3039U\204I\272\326E\233\271j\274\265\272\302\355\336\271\204\267\003:\343|P\271o\005E9\023!\221:\325H(\272;\210\0249\305\367\314\271\313pG\272eq\3039\014\223\3457\370B\004:\316+\200\270V\026O\271RTJ901\321\271\365(^:\300\237\3649}\210\3709e#\2179\344\225\021:\375$\241\272\330#\023\272\357\202\2129\321\235\310\271\211k\213\267\215\374\n:A\363k\272tr2:z0\200:^F\231\2711u\003\272\"_\013:M\305\203:\262E\005\272>\261V\271$4\323\270\031|)\271\010\\v:\0307\3419\036\267\304\271\226g\227\272\222`\275\267\310\373t:\"\010R\270\261\204A94\356\334\270\366D\215:|\003\3659T\037\0229\357\224\301\272\013\022K:\370\264\032\271$\341p:H\2047\271V\224\214\272a\221g9\334_09\332\272\3339\016\001\001:\033\252\0009\0323\033\272\025)\220\270G\315\3429`Kj9\"1\232:\370f[:\212b\2459\231\224 :G\314%:\201O\0238\243\341\235:\222\204\007:\353\216\3029`\002#:\235\311\3119\274\204%\2729\024.:\031\321\206:M\026\021\272\002\277\025\272\320\262c\271DU:\271G\303\34393\223l\272{\227+8* \2509.\t_:\326\236\3549\322\251\0307\230K\2139\216~\3109^M\2019\235\376\210\272\"\'\2068\376\034\3279)Z\201\271(F\2778\2021\233:\317(\026\271\364>\331\2700\005\014\271a\325+\272UV\356\271\0055\014\270\330eO9\347u\227\272\210\223\3519\212\2228\271#\252R\272\353\277\031\271\030\224\241\271txN\270/\3330:Tm\2449\002\233K\271P\363\224\2726\254\3179\251\354\210\272\275\345\266\271\230r}:\313\036\014\271\r\337\2459\377\244K:\177\226\025:\324\"\204\272\021BV:\016\334\r:\251\316\005\271\213\262\265\271\321\016$\272\200Cp\272,\335\363\271\360`\201:\362\262\023\272\376\341\0149\361\222\2169SH\2568\356\267\225:\351D\'\271\243H\031\272\316hc\272\360\314s\2728P\3077v\006\256\271Du\t:\347,^:P5<\272]C\214:\337V8\271\'Cg\272\253\022\342\271\251\320\3269e\213\270\271\177\321\3778\305\2349\272\277\234U\272\214P\002\272\255\206\217\271Y\300\3259\342\355+:\365\333\244\272\377\261\305\271\013\257\022\272&\3161\271%\301k:\315\276\016\270\302$(:hI\2068yu\r:\316\214\2509\207y\302\270\224\005\213:\202\241\3108>\367F\271T\220\004\271\341\325\025:\002uR:\n\245\217\271\241d\014:\301\325\t:\017\351\230\272\\<\316\271\201W\3349\332\336]\272^6\2209xG\255\271\017(\2649\360\330\232:g\217\311:F\220y7X\000\213\272\331\310\326\271\210@D\272\035=I:\300\320\2159=\243#9\2117\207\272\265\r\232:\200\201\':\276:M9\254\031D\272\307\3474\2716G\230:\257l\231\267\215\034\3579\263d-:\361\237i:\030\241 \271u\030\370\271una:\027\000\370\271y\234^\272\320)\202\271\272\243\232:\213W\231\271\220\252\020\272\261s.\272\244\351#9;D-\271K\003\3428Nr\251\271\251Y\370\272H7\0169\213RS\272\206-\3309\302\237\2608\205\222\00296\223\265:\224\t\267\271\230\362>:\354\236@\272\346\234s\272\014\356\252\270\255B\2256\347\007\2349\021\013\2479\253\013\2359\263\272\3459[z\017\270\256\31529\260<<:\252:.\271r\235\215\271\017\013d\272d)\37396@\336\271w\302\036\271\360\332\004:\373P\251\272U|\372\271\302l\204:\340\242\017:\367\213f\272s\367\2608\363e\233\271\306\323V\270\224\2608:0\350\310\272\004\231\2049\321Q>\272>\231\205\272\344s\2568\222\263P9YP2:\234\222\2759\310\355z:z^\257\270\334C48a\332\370\271\320\246\3439\231\357\305\267\3126O:\216\257\023:\177/\215:\000#5:-\025\3009\n\263\352\271\016nN\271\253\354p:\273\300U:\333\257J:\3545Q\271\210\006\036\272oS\205:h`\002\272\333~\350\271\023\334\252:^Uz:\217\363\235\271\207Kl\271)Vq:%n\3127f\271c:\220\276\237\271\207\3647\270N~\r9\3076\340\270\205\370\'\272-\0342:\010\013*:\013\371\026\272q\260\3228\320\014\227\271\200\363\024\272Dc-:\225\317\2018\214\265\001:<h\2079\311\370,9Kf\0339F\037\237\271\251\204\203\267h\206%:l<\004\271R\227\3456\303\214/:\327\n\352\271\242\342\204\271\274\204\276\270C\327\030:&\316\2129\216k\377\270\204\331\0269\316\227\3729\316\003\255:\203\231\0339\302O.:\263[\025:\255l\007\271\337e:\267\323R\225\2674\372\342\271\313\353\005:M3\2329!R\232\271\331\033\034:\213\214@4T\355\036\272\352<\001:\005\016D\271\361c\2248\316\227\257\272\273\223F9\2708M\271\025\n=9\275Y\2019\310\333\0279\252m\032\272-\250\203\272i\245\0359|a\245\270&\335|\272\205\265~\271_)\002;\016\232\2268\346\367g:\310\330}\272q\364\3329\301\217\230\271\n\257\025\272s-\327\2707\032\340\271h\315o\272V\255\357\271\251b1\271n\35609\013\220\020\270 \027\2259\'\205\005\271[\017\2609C%F\271\202\026O\272\255%\3019\220?\2639\020\236\0169)\327/:\355\004\224:\026u\003:\006\037X\272\304\024\006\270\241\375\3719\313z\270\271\227iX9-q\017\272\355\214\\8\262L\2519\263{\2039\007\244\t\272\252\034c9:\354\200\271\375~\203:\222i\3148s\264\035\272\366\217t:\306\332\2659\002hH\270ui\354\271\324\022\264:)r\"\271\306O\023:M\2563\271U\323\207\270c0;:\312\273Y9lDR:5\267\277\271\030\034<\272\363.\2509\271\312\251\270\265\350\n\272\367>`\270L\207\203\272\364\255\201\272\327\371X\271\371\366\225\271\306\255\262\271\307T\r\272x\026\0108\031\254\024;Qgr9^\302>\271\325\363;9\324\333\343\265\336\035\210\271?[c\271I\355#\272\310\255^:\262g\234\272\225\302i:\241mk\272q\362\224\270\243\244F\271\333\235\2457D\224=:\352\3369\271\272\001K9\001\2305\272\316\372\007:\212\307!\272L[\226:q\316\263\271\367vg\271\341\233\3579*G\r\272\0345\370\271\034\305\0038F.;\2726\300#\271vB\264:\365\014\3758\025\316\3768\315>\2109\365\0034\271\363\311\3639z@5:9\324j:P\025Q9\030\274=\272\333\243\324\271\035\365\3639G\000-:=\305(9\017\037\036\2720\332\3358\256\317\273\272\274\322\317\271\'\2551:\034\340\032\271_%L9\211#\232\270\247\2121\272^\262\037\272_l0\272]Z6:8[.\27294\261\272\335M\201\271K\342\2709\030y \272u:\304\272\355\343W\271\363\014\026:\002\332\304\271\271?\004\272Q\021\00694\202\2728\036{\251:\355?)\272\205&B\271\r\375,:\tL\2659qq/:\342\327\3608\210\322*\271\224@\3149o4B\271\003\3141\272=\032A\271N\314\320\271\024c\226\2725sZ\270\263\315V:\352h\312\271\3366\2619\240\265O\271\325)\250\271G\203\275\271g\026O\272m\353?9\021\217\2428\r%\236:f\256K9\250\230u9\272\247\026\272\374\005\037\272\236\337\004\272\032\004\244\272*C\016\272\034\225]6\272\374\260\270(1\3649\301\036\\\270]\215\226\271\021AZ:\330%r9A\317\325\271\354eY\272VH@9ZC\266\272\"\312\010\270\035\360\332\271\201\322\'\2678\'F\272\264\255\2618]>\0269\\U\013\272;;u9E\370\3168i\362L:A\036\236\271\227\034/9\262f\2039\230\021A:\320U\2359\276\"Y:x\027&9S\322\2408f\301\\\271\300\347}\270G\020\021\272\255\236`\2725iR\271\266\025{\271D#\3449o\237\2209\257\260:\272\211p&:@{o7\227\263@\272\227\322\030\271\t \022\272-I\3059\346\3432\271;W\031:\335\r\r9\302\273W\272\310\222\2319.\324\000\272\341\356\3649\304\276Z:X\345f\272\215\027i\272\264\216\2108\344\245<:\3072\260:\336v\272\271\337Z\2309}\317\3079\222\357=:\232\016@\272\251\001`8\256z\002\272\342\022\016\272\357\337T\272\036\246\330\271~\023\020\272\355\t@\272n\344?\272\375\201;:\302&\200\272\315\347\364\271\240\241\252:\262&\3039\321\336\3479\2709\335\271\333\024X8\261tq\271\276|\017\272Z\211\3439\252\010\233\271\2147b:\247\307=9\362\222\2778\232]?8\205\322\215\272\256\222X\271\334\000\2779\326E\3309\275\241\"\271g\236\263\271\322i\3409\240\362\211\271$\204N:g\236\037\272\nY\3147\021\013b\272\2653\333\270\266\2451:C%\030\27146\2079qsZ9\333\r`\272\017\370g9\204\214\237\271i9\206:\220fP:l\302\2038\022\031\255:\266\331`:q\317\2778\336pL:\245\355\320\271\365O6\272\305\341\251\270\256\303\3169)\255\2459|\013\177:_v\3548\377\303\376\271\2078\221:\360W\010\272\236\214?\271\267\321\265:\243\305s:\303\274$:\375\222\245\270\314?\314\271:\272\201\272n\245\2059`\352s\271\177G|9\315_p8\355w\303\271#n\022\272\3413a:\231A\0069\370\2076\272_ \2479\321\352\202\271\230\304\215\271>\336\t:\240;\246\270\264\263L\271c\250\3559\236\356\274\271\355\205\317\271\330^\004:\335\2250\272\014\365\005:\207\2200:\\\202\246\2719\326\212:[]\214\272\361u\2359\346\301\344\271\022o\242\270\343\016\270\267d-\325\271h0\223\266+\375F\271\252\213R:\321w)\271\221\333\022\271\360x:\272\315]\340\2704r\3469\346\365\001;>c]\271\302\003x\272,\347\24390>$8\356\375\2649@\327\3059)\376\027:\001\333\3168Z\255\":\304\354Z\272#\304\3259\311FN9\006\262\3129\331\265\365\267\365\'\230\270\327\351\237:\214\247\3429\036(5\272j\270\013\270\300639;0\3449a\272)9\301~\250:\037&\3219\343w%\271\244*~:NC\\:C\215\014:\243\306M\272\"\240#:\t\t\000:\241:A:\224\231K:\272\"+7\322\250\310\271P~\0369V\'\2669\005\"\004\271\\\\\210:H%\034:\"!\365\265\037\r\236:\343\007\2719+\324\372\271\213\231[9;Se\272\360\312\364\271\003\350Y\272e\227\2079\332;W\272\377Cl\271\257\341\205\271#>\"\272Y\345\242\271w\214\244\271\206\323\177\271\006\347\n\272l\325\3649\253\\\3029f(|:\363\222\242\271\352\332Y:\362|\347\271\376\022):\327\314\030:\030,$:\223_\006:\361\372\30697d\334\271@\346\273\271\241p\2129\336\337\026\272\305\302\252\271\025\311?:AYU9\220\261\t:\227C\275\270\030\203h:\236n\3429\314\205W\272\332\233x\271p|\':\211\326\3559\316\221\027:\256\336N:\016\351\013:\312\312H\271AZ3\266\271\001\231:\0227\032:(T\024\270\003\00399\234i\347\271\006\317\300\271\316}!:\212\035\2349\'4!\272\200\351\2079k\253\023:\257-\020:\225u\331\271\0268\010\271cw8:\342~\357\271s\222W8\264x\2219\33219:\232\355\357\271\001L :\353w\341\271\235\2545\271\346\375\0368\357\237U:\215\350\271\271\230\231\247\271\351\\\312\271\263\344\225\272\311S\202:\374E\206\272\227\301L\272\355g\215\272\312\355\032\272_\020\212\272h\351\200\272O\354`\272\2031\363\270i\344\202\272=\254\2128=I\226\272\022\253\':\332\307\022\271\214\216\313\267\236\360\0349DG\014\272}\353N\270\0101\027\272\234\304\3549`\017\202\271\232\211\210\272\323p\2419\233\265\2179\321\257\235\271\264\266\277\272\237\276\211\270~\327\032:N8\241\271\227\221\037\271~_\364\271\216)A8\303\226S:Q\213\3329\322\344\2158?\026\222:\331\210\2766o\374\2128\201l\0178\323\316\2529\000&\213\272\034\0162\272\215\363\244\271\263\3732:\344\345I:a\034\3678>3\231\271\306H\2447\337\217\r\271\361\004\215\272\215\314\\\272K\203\245\271\341?\2259\005\361\220\272>\316+: \336\2058^\231\2159\361t\016:*\367S\271\376@\377\271?\366\3649\222\357\373\271\347\035!\272!:\237\271\317\250\3068\000@\233\272].&\271)\237D\272-E\210::\352\3219\032[\273\271\255\354h\271e\337\241\272\361{\022\272Lq0:\312K\325\271\315@\257\270\032\t\3379\305\021\211\270\025\226\2479I?U:\324\301\2358&n\224:\277\001;:\353\363)9\275\204U\272\366\211P:\002v\037:\362\303M8\036k\267\272\211\347\3729\022\220\220\271p[\23692FE:\224\005\2029|pQ\271\335\276\2739\305\205\2619\316(\2028\320\024\242\2710\373\223\272\323\253\2568\307W\356\271\005\311\322\271\226{\032\271{\336Q\271\032\r\026\272\001\362$\271\343\315\2139\016V\016\272h\n{:\374\213\2159\271N\211\272\213b\253\271#z\37391\316\2625\031\233!\2707\201<9|V\335\271\373\224;:\221J^:/\250\r:\001/\254\270>\274\247\272\t\203?8t,T\272h\210)9\335\352#:\233\366`:\342\311\254\270I\366\351\272\353V\0039\324\356\2538=e\237:\n\035\005:\254\245i:\037\213\003\271\354\350\2659\225=;\271E:+9\035\036\2739\346Y\2638LfJ\267\"\236\257\272\323\'[\272\245\247M\271K\r\3418\234\343>\271H|P:iW\346\271\350\254\3629p\025\017\272a\013\3249\331\320\2208]\241\347\270\261\2768\271\026=D\271\252$\241\271U\264r9\r\372\3619\217m\3039G &\270\034\016\206\272\364\217\255\267\321\364\007\270Z\321\207\271\016Z3\271\006m\304\270\356\273\3219\n\027\352\271PiA\272\320\026|9l\2005:\323\325\2529\205\307\313\270\\:B\272e\010\027\272}\300\326\272$.*:\315\3423\271\354\"\0148\025\314\26595\230\3208\235$E:\275\032\3019\365\020J\271I\341\2709C9\177\271\274SN\272^T]:\035\000\0179\370\016\2249\206?\230\272\304\217h\271!g\t\272\t4\321\271\261\3031\272\210\006\351\267\316\034Q9}\300\305\272\207\230\321\271Dn79Z\222\n\271L_+:\274$\0228\372\024X\272\367\355\3139\346\033\3228\033\321Z9E\307\n:\002\236\213:\255\\\001\271f\016\3549@TO:h}\005:\033z\0348\205\032\201\271m\365L\271 Ri8\221{\206\266\000[\300\270@,}9\345\266B90\360\202\271C\241\206\271\270\251J\267\221}\2028\'\006.7\024}F\271\016\003\2448\310,\2049\251%\351\267\322\340\205:\235/\3548\317/\213\270\205\377\215\271\210|\250\271D1\027\271\231r\3119c.\206:\210>\246\271\t\277\343\271\344!\2758s\017\302\271j\351\2678\274\372\220\272\352^\r:\354\255?\272\216\225\235:Q\243\2349{\"\":\234.D\271\333\010-:tj<\271h\307G\271\034\005R\272\370\022?\272y\273\326:1\016%8_\233\305\270\245)\335\272\200\261\240\271\002\013\3537c\262V\270]v\267\272\376,\344:\344\266\212:\304k\331\271x\205\00494\204\2479\030\236u:\3014\316\271\221\230v9\360\033\2777\262\333\343\270\362\013M9\254\201C:@\262\3249\346\366\0149}\322T\2718t\007:@R\3559\252\024h8\"\267\220\272*\017\204\272\\cA\272\t?\332\270\255c\3419\rZ\2749V\240):\001cl:?<\034:0\016&\271\242\032\026\272\344V@\272z\035\3018e\346\'9\213\3737:8\213\006\271\311\024=\271\202\370\273\272\305\t69\007c\3107\236\360\233\271\264\302-\272\317\375\3519\226\257\245\271\213G\273\271g\322|\272\350UJ\272a\03319\243\"\227\272\330u\2559\020\214b\271\211#a9\344\261\215\272\225\321\375\270\327\037\227:\r\027\277\271\002\324\230\271\265jg\272\013\264e\272{\027\372\267{\301I:uW\350\271uAN:\317\321\2239Zm5\271\314\205\335\271\373\207+\272\353\024\224\271\274:U\272\326?\2559\2520\2748:+_:\360\266H\272\33086:\\\213P\271\325\204\3709\323cG\272\241\271\r9\023\247s\271\026\224\214\271\303t\261\271\364\360\227\272\220\354\316:. \353\271\320\314\244\271\tU\225:\02584\271}\346\226\271W\361\3769\206\266\2139x \016\272\257{#\270o\253;:|\206\026\272\264c\255\271\375G\3569B\217\361\271\253$\024:l\205I9\'\177P:k\031\214:x(y9i\014\032:\241C\2609\217uU:\351@}\272\005\336\0368\303\300\2549\274\004(:*\207\353\271~\377\253\271\366N\003:\014\036\333\271Y#n:6i\3029\362\322\256\272\232\026\'\272\014\353 \27022m:\224\013}:F\341\014\267MQ\216:\240\267\202\272\211\270\3359\266\213x\271\007\376\030\271\023\323\252:\356P@\272M\202\225\271\227-\34795\010K:\300\023\22496\023\207\272\231\307\237:\344\2141\271W\215&:fm\2379\3210\3269\n[\032:\340X\2029\2107\3428M\275+:\343V\3279\345\244\2529V\323*8>Qt\2728H\265\271\351\017:\271g\275)\272\304\211R:\335\362\211\271\1773\275:\t\257^:c\007\0339&\240t\272\271J>\272\004\242)93\227\254\271\037\254\2369\265:e:\237.\2009%]\035\272\002\321\021\272t\304\210\272\336\203 :\"\306\023\271\301+\r:M\032D8:\002\250\271\355Z\220\270\330cK:\336\252e:\206\266\251\271S\235\3454\210\004\233:\000\342\3449\231\346\304\271#\252\326\271\202\327\2009\266\372\3349_\357\264:7\014\2359\325\025c\271\235\231~\270Vr\336\271\225.+\272)\031t:?K\':I\'\32391\037\353\271\3511\021:\364\00449\327\310r:\306\245\305\271\231\274\224\271\322\314\000\272\231\205/:\357\265D\271\316\323\2478\250\231\032:\312S\001\272=\357\3518.#q:3\n\262\271|+\213:5\037\203\272\357\263\3559]][9\302m@\271\210\244H9q\314\3379\277\356N7\312>\3438\304z\346:\225I\"\270\207\274\031:\305\'N\272\272\224\3059\267\274\310\271\377%\252\271\0077\212:RL7:1\034\356:\235GZ9\316\345\254\272<\3660\271\231\325.:\2270\2058\221\3551:\333\225\234\271\036\270\2229\306\021\2609W\306v:T\3209:\206\271\\:e\037>:\3177\007:\375\314\2468\325vB:E\202)\271\372\234\227\271_\374\177:\234X\0009\t}\023:]\362\001:_\342\007\272?0\004;\243\342M:7\244>:\002\354O:\256;o\272\001\354\2547:\231e:0A\017:s\333\266:\332\244)\271\202\002\327\271h\200\004\272V\325\017:\3278\274\272\005\2047\271\377>\362\271\003\314\263\270m\313\212\272\346\352\306:+\035Y9Y\245b:\010\344\3308\242\243\022:\023\263\227:l\211\2049\350\035\t\271\317\371^\272\225\375\2679\007\207\254\271h\325f9?\274\252\271qO\260\271i\024\27691\254\311\271\r#\235\271\022i^9\327\340\240\272\037\277\025:\243fr\272k\017x\271w|\247\271BO@\272cGa:=9\2439]\304\0379\201\233\344\270\312\240\0019\014\214\3139\227\212\t\272\303P\345\271l\305\234\271g\347\263\271\234\237\033:\264\036q8\332\026\000:\227!,8\232\341$98\213\205\271\335^\2049\\\007\3279.\270Q\271\264D\3219\210-l:\313\310\2229\257QG\271p\302\3749\320\304*\271\312\212\302\271N\375O:\331C!\272\352e\3108)\3519:\023 g\272\204U&8\334\363\3558h\364n\271\"\373Y\271n\306P:\322BZ\272\324\277\3458\236\037\264\271\372\271\n\272z{A9\0203&\272 \375\322\2673\211\024:\332\237\\:w\235\3739\313\276\006\272\264\351\017\272+\023\023:\010X\241\271\2742\332\272d\200T:Pv\003:h\023\n:\353N;:c6m9\2131\0226\304\342b8N!\007:\025\306W:\204S\252\271-\304\2139`{\010\272\227\337\2409?)\2219E\\\2428\230\201\t:-\234\0049\035\211\027\267O>\210\272\020\204\264:\330_#\272\'\342\260\272n\374\3127\226\212(:\312r\000:\213\246\n:\364\275\017:\014\234\023\271\242c\216:\201\0277\272u\377\n9\304\262\000\272\223i\3538\375R\215\271\326\017\017:\300\036z9\265\016\254:=\'\231\2701\242\226\272LR\2027s\360\236\272^\203\334\270)\276\310\272\3410\202\271\272CJ:\337\021U\272!\200\3078\014h?7\215c\220\272\260F\215\271\346\353\3758\312\204\030\272\255\323\273\271eAW:\027\224884\031b\271\271\346\027:\363\2128\272z\256\3719\010\267\3049f\352_\271p\243\377\271=\262\366\271\021\377\377\271 A\265\272t\352\203\271*\265\2059\221\311\2228\304:T:\342!\353\271\361\377\221\272\263.\3038\265\315%\271\213e\256\271\016\311\025\272\276\276\0039\005\274\022:\244\326a\271\357\370G\272\324\246\372\271G\2128\272\230W\322\271%p\206\270\322\271\24298\331\211\272\363\360L\272\215\233(92>\3239Y\021\232\272-\361\n\272\361\035t8\035?D\271\352\223\016:\203\"\3409\370\220P\272a\267\2437+\003\n:wL\2179\357\337\265\271\305\030B\272\347E\016\272L\270\037\272\314N\234:\326U\3236\214\032\2129/{I8\016\275\2519\263\213\2309U/\210\271\256in\271U/-:\233\006L:\\|h\272%J\362\270{n\255\272\233T\320\271\225(\341\271)\331\226\271\263\230\207\270J\250p9I\346\334\272Q\373\3329\362\'\3079\261;\265\270\r\215\244\271\206{\3738\023\223]\272Xf\3229\216-\0049\202z3\272\004\230\003:\2547\003\272\251\314W\272\236U\'\272G\021\303\271J\r!:\315\211\":\374\366\2548\215\251\330\271\247\372\373\271\327BO\272\244\312\016:\325)\2429z}\355\267\000\023\220\271A\365O:\024\006\0369\021\237\363\271\\|\022\272\346\306\013:\372\232`\271=\375I\272\253\026\3719&\345\007:\024\350\0229\"]\177:\003\243\004:\301\212\261:g\262\3119?\036\3269\263Z-:\341\211\331\270\253\211\030\272T\242\321:\335\353 \272$){\267x\217\371\271J\327\030\272\005\323\262\272\223W\264\270ZM\2419\324\360\260\271\227\034J9\333\320\002\2728\227u\272\010\261\022\266!\212\010:\377D\217\271\222M\203\271=\347\3129G\211\331\272fH3\272h\336\3718\024\327\2729\331\325;\272N\005n:\177[\2269\230\370\":T\247\001:\300S\r\272,9\2539\361\302I\271\023\310\034:\313\017\021\272\001\375\250:G\377\21197\320\3059\271\030X\270\255EP9.\236p\272\374\317R\272C\230\':)U2\272SC\2219\266zo:ZK\2639\250\230\033:\306IT\272P\331\020:?\347H8.\327\276\271\370\312o:\352\370,\272\022\227M\272`\236D\271\220;%\271\341j\3729c\373\313\271\335\247\2439}\"(\272 |\2679\275\247\3009g\346\207:+\215\2219\213x\2259\352\267\2169?+\3539\322\242\210\271\340NI\272\3375):\257\2573\272\213\n\230\270\302z\024\271w\017$\272s}m:p\"\351\271\246\002\230:\253\367M:t\333\2679s!\1778EB*9TP\r\272a\336\3638\352\243%:\376V\227\270\326J\017\272\237\374\203\271\203Y\253:\037$\202\272 \236\3107A\277\317\271\245\332\002:\0045`:\2272]9\304^S\271\026\261L:\205\021\367\271\344=t\272\342\236G\270\303~k:\032^\262\271 \355\3209\007f\030\272\"l\2708\366f\037:\226-\241\272\371uS9\202y\2369\3261\252:\276?\3639\345#\264\271\203Mg\272\370\322\2739\271*\3049\325P\006:01\n\271\377s\2409\266\301c\271M\361\356\271\342IX\272Y~E9\254\\::\022aV:\366\336\232:\\\"y:\033\362q9\031c\243\270\302\027\022\271\004G\003\272s&\200\267\240\361\314\271>%N\272\315\226\2479\2045\250\271\332\262g88|\372\271/M\030\272\004f\266\271\n\204\3129;\352\026\272v\024\341\271\310\"Y\271\236O\3129x$\013:\251@\2659\311\247\027\272*\252\2179\222\310\36797\257\030:\215\242\276\270\351\010\34097w\235\271\235\335\032\272J/a9\302\364@9\365\027\217:\037\322\035\271\344\037\010:$r-\2727\017\002:\222\270\2459\273\236\002:\231{S:\033S\0227\013\013k\271\306|\2449\320\264%:@\3067\272^z?:\371\262-\271\300\236z\272\310\377\3458\350\206\3419\342\027\2439E\260\005\272\261,%\272rW\001:Z\370\310\271n\351`\271\377\263\313:n5O\271\212`\032\272N\305\340\267H+\330\267 \216\266:\013\322\':\357\030\306\271\352\3569\2727[\033:\311O\201:\222\177]\272+(E\272\020\326\026\271\251\242\010:\007\333u7\266\303\027:\317\016q9tCR\272h\307\3179\034\256,\272\205\374\2209\220!\3439\300\311\33094b|:,$K\272\200%#9\351\'\007\272\010X(9\262a\362\271\320 \3248\027\334\3439\\\237\2466\356\nR:\313,)\271\321<8\272\260I\2659V\237\300\272\327i\002;\232\217\017\272=\216\002:5\347A\272\200\264\0049{5\35186?\351\271v\030\0149\r\360\3579\346\031~\272\212\266\207\272p\331$\272\007\017\2569\215\232\030\272\251\342\347\271\241\350!8\006\205\2708\301@]\271\316\355\013:s\367\2319z&\004:\007=\307\271\261\341\\:\000*J8\r\340\223:8e2:\017o)\270\331\342\254:m\355\2578\322t\"\271\253\026\223\272l3\3649\337y\220\271\226\244\371\271B\367\345\271\207ne\2708\336\234\272\231S\355\270\320c\332\271\013\302\3328\215\2027\271\227dy:\312eW8-)\0149\347\035#:\221\033\244\272\377\277[:\352\254\2319L\254\3669\342+\3719aa\002:\361\025V:qg\000:\014\234\205:\310w\206\271\210\023\0239`\331\222\272u\250:\272\257x\217\272\200\360y\271@[S\272\350e\231\271\373\333\332\2721B\'\272\202i\0259{>\353:\343\227(\272\310\311L\272\234\003\275:>84:\343h\3369$\252\3348\355\254\033\272|=*:\2752\023:e\233\2678\216\272\3779\307\24409\371\362\374\270\004\232\2278\2445\0317I\210G\272ES\036\271\341|\2639\210\316\2729]F\322\271\273\207\3459c\265)\270R\336U9\210oN\272{\266\3759\3358+\272\200o6:O+\352\271Wl*\272\232\007\302\271r;\3729\255T>9\243K(:n\252\215:\264@7\271[\371\2678Qe\014:\014\023\2629E}\330\267\310\257\345\270\003\240\316\271\304\007\\:\335\226j\271$\034\366\270\337\371\001\272\030\356Q\272\213p*\272\327f\341\267:\310y8\367\010I\272\237\261\364\2702y\216\271\267\221\212:\004\262V:\214M9:\265: :\202V\327\271*}\2369\022=\202\271Pm\367\271\313C\2639\342\004\252\272\264\237\034\272\247\311\265\271]\242\200:u\031m9\223~\006\271\225\322G9\300o\001\272\257`\023:\016\353\221\271\262\362\3668Z\370\244:\001B\024\271\354A9:(s\326\271\0032\r\271\236\331x9BE\034\271K\363\002\272\031\377E947p\270[5\2628\311I\007:\022\037\3639@\007/:\021\276\002\272\344q1:\223\244\005:\324\340\353\270ArG\270a\330\030:Yl\000\272\323<\347\271\221,(\272\337&\254\272\333\350\307:\357#\3548\264\243\"\272Oc\215\272\337\371\3449\253a\267\2716\271#:\334\320\260\272IB&\272\"\n*\272L\207\241\272\362\367n\271H\377\2339\203\013\031\271=\374\300\266\n\342\021\272\347S\247\272\247\t(\2710\335d\272\024Q\002:\021\330\3539\023\020\244\272\305C\0229\023k\n\272L\263!:<\334\3559\207\000Z\271\035\030\211:\0179\355\270\223#&:\0071K:\254F\214\272*^\3319\344sq:\000\275\241\271\323\370\0319D{\2669\247z\2409\377\253\017\271\310\352\2278\242Y\2579\034\311\n\271\256\265#\270\370\303\007\271\362\332D\2720\275p9\311\020\3479/X\006\271\"Q\002\270\024f^\272\314\344\251\271y\374\224\270n\r\234\272\375\330m\270\266\210\000:W\030\001\272\341\374\215\272\313\322\014\272\007\364\':\003G\004\272\017Qm9\313B-8\351J\227\271\003?\2469\240\241\214\270t\324\200:\006\034$\272\215\000\240\271\211\":\272q\005\314\267\314\001!\267n\275y\270\020|-\272]&\3078\347c(\272_>?9A\032\204:k\276\333\270}T\244:\021\017\014\272\357\256\3727GBk9\336n \271\215n<\272\244k\235\271*\370\2739\274\026\3639C\'s:\267\t\2149\007\320\277\271\365\312\3579\225\335]\271*\301\205\272\260\222k\271\323}\2559\363\362\241:*\265\255\272x\305F:\230\020d\272\225\364\337\270N\356\264\271\373\333\206\271\241\036Y8\017T\017\272\373c\336\2703\215\351\271\344fS\272.c(\270\227\331#\271\000>\t9\362\237\035:\357\263\3749(\206n6\205\000\3128Gy\227\272&N\212:H)\200\272\376^\034\272i8\250:\272Y\t\272\303\230\3639P\n\2009\266%\373\271y3$\272\325\373\205:\004\363\001\271\r/\234\271\224\340\017:/\177\307\272\336\252\006:\203\tR:\031\343\35669$k9\272\207\244:\317\263Z:|\231\274\271dv\233\271,Xo:\305y\23297\365.:2\276\3509\324/29s\315\331\270\215K9:\320\021S\271E\372\006\272\003\200\034\272\273T\237\270\005\230\2027\344\345\226\272\257)\277\272 \346\"\272\241\305\221:T\357\265\270l\203\204:\221\227Q:e,\3609\331\300l\272c+\325:\375q\3629\014\2645:r\013n\271h\030\232\270Sc\034\272l\253a\271\261\325F9L\213\205:\021\266\202:\322\227\2329\373\037w::\237\027\270\211\027\2469A\240\2209\363\202Y8\014XD\2728(\255:\255\337N\272/\333l:YK\2069*\362\2468a!|:=\n\0059\233\203`\272\254M\212:QO\216\271\332\240\0109O\340\222\270XP\034\272\331\002\204\272\331\317C\272\240\251\257\271\354\n\3519\016\341\2448^\240(\272#\004|\271l\023\313\271\307`:\272\250!\374\271\307\234\213:\236\350\000\272\337\303\352\271\261\313\032:\302j\316\272\373\r\004:\017\\A\272\205}\311\272\221\341\237\271\330\203\r9\005\017\032\272<\333}\271,|\034\271E_\205\272f\216\027\272\346\275l902\3749\204\022\3039\001j\215\272<\205\3569\376\022\027:\354\025\':\037\315\262\272xc\034:]\371\3737p|898\252\250\272\331\337^:\351\251\033\271\363\353.\272\271G\213:\247\334\222\272\301e=82\367x\272Wi\025\272P\201W\271S\365\317\2720\372*\272Y)/:\375@\0009\3475\361\271\276\21129m\213\016\272\007k~\272\031\373L\271\022\235\035:\323\323\225:#\377\331\271\000\254\313\271u\332e9Wj\021\271!\'\0379I2\t:\253\230\2339\036\034\230\270\014\250\212\271Wo\033:\037\025V9\341\222\3339\204t%9\3713v:~e\002:^\364\2049,\032\3239r\255\000\2721\253\2629\355\3068:\265V\030:\314\335\026:\214\214\253\271\t\2200:\\\200(\271\316\231\3259\235Rv9\212\340J:V\350\2568\301\277\000\267\025\007\322\271\213\360p\272{\224\213\271,\345\3129\323\010-\272\255vg\270m}\210:\240W\373\271\317=N\272\225-j:a\034\2519Z\253J\272\247\203\334\271\356a\255\271q\217\3659\340\023\365:Um\220:\326\303\2359\357\350\021\272X\273S:-}s:\320+\372\271\243H\206:D`\264\271{\236 :\362\373\2756\345\310\227\271\364\334\025\271\022\317!9Q\242r\270XT\3149\242\272\371\271c\245\262\271\234\302@:\t6]:[\322\200\271\206\267\216\272P\215\262\271\341\335\027\272\360~\3679\3711):\377\032*:\021\337\003:\243\264\267\272\244=\036\272\257\235\315\271(\246\2709\364kp:\372b\2049\351\23369\224\006\3729\336\033\205\270\320\317\03492\262\2138\302zb\271\347J\3329\304\374\002\271z7P8\351}\217\272\245\301\010\271\231\317r9b5\3119\013og\272\315ZE9\253x\t:\202\307(9\254TJ\271D\363\2278\203\004\236\272M\013\216:P?\002\272]\3175:X\014\001:J\246\3439k\231R:\330\2028:\001\357\340\271\217\325\2317\224\305\207\272S\362+\271\037(\223\272\024\274\n:H\210\3039\307\016B:k}\215:U\354\357:X>p:\022\217\007\272V\\\3019a\306`\272=\374G8lf/\272\354\270(\272\361\0341\271Sd@\270$Y\036:\333w \271\245\212\2327z\3676:M^L:6\217\014:\n\236U9\214\2168\272\'\235\024\271\270\207\302\271\'\350\212\272\237\210\211\271\203\035Z9\006\317_\271\337Y\206\272\233\203\373\271\212\232\3729\372\215\251\271G\007\3078\250v\315\271s\315\3558ZJ\2239H\266\236\271O5\2579\235\035q\270h0?\272\361\255\0139\276\331\2507\202\363\007:\271T\2579\351c\2219\267e\347\271\215a[\271\300\271\315\267\347\036\3048\023\373;\271-\277\343\267\304\300X9\345\363\017\271\307-[8\356\314\2369e\004\2339)a\000\272\344U\307\271\341h\3159\360,\2749\275\202\212\266J\325\245:f\247&:z\257O\272sk\210\271\\\021\247\272x\013\202\272\276e\2358\232@G\2702\013\2109\002bV\271\021YE\272\313Zi\272\337\200\2459\002JX9L_+:\352>\251\271-\375;:\215\215\243:\304~\3259hc\261\272\336\232\3149\222-`\271\271\370R:\226w\236\270\221\302b\266\217\247\230:p\234\302:\222H(\272|\230\000\2720\"\002\272\347\303\2349<\217\3038\014i\251\271K\300\035:\366+\342\270[\210\364\271\257\200P9Gc\357\271+\352\3519$/\310\270\016\210\214\272\303\353\250\272C1)\271-\227\264\270:4\'\272\t\330\2379H=\276\271w\311%:_\260\3609\354\211!\271,?\3559\376{*:\342\214\3559\261\267\311:\320\245U:\334\004\2229\305a\364\267t?\005\267$\221\033\272\326\264M\272\337-\0339\036Q\341\272\201Rd9<K\252\271Q\200\034\271|+m:\325\321\231\272\321\232\0059YG\206:\222\355P\270 \201l\272\215\325J\272\265\261\227\271n\253\2439\323&[:\004\213)\272\202*\000:\033D\2729\210\2560\270\364\207\001\272\017\346\n\272\033\377\'\271\202L\221\270A\355\236\271]\224!:\274Qb:8-\2478\026\265\311\270\325\205q9\313?\3468\304\354\004\272\036\230\233\271\377|C:K>\3349\r\314\257\271\301\017N9\207Y/\272\314\013\203:\243\360\202:\277qZ7\202iL\272+\375j\272\367;\204\272\276\211B:OHN:\310\032\207:\333\371|:\361\26609v\326\205:\241|\205\272\016l\003\271qpu\272 \325r\272\346\204\272\2713\004\214\27248\3269\272\023+:\232?1:\370\030\222\270\237 \014\272\370\311\2059\330\343X:\352\210\2617\336\361\350\271\356\271\23794e\274:\277\016$\272\277.(:,\354f8T\\\210:\252$\200\271,\235\":\334R\205:q\351\350\271n!\357\271\253\0008:\210\234\r\271\371]\325\271$\225\0039\310\246\2158vI\366\271\220h[:\363\0236\271\373\205\273\272\322bR\272\'\203\033:\370\004\235\271\312\202\003:\377\310S\271\306\332\341\270\000\342\363\271\267\325\010:i\023\003:\n|0:\227\357\026:\200k\347\267\237\267\217:\243\335\323\272N\300)\272N\313!:\243\322\366\262\361\035\'\272\023\034l:\313\236\276\271\246\227\037:+V\224\272\225\000+\270\2726\005:M?\371\271\2770\3738\345\301\376\271\372\267\3109R\375\2049\333\216\r:qXJ9\353\217\2059c5\'\272X\030B\272\303\257\032:\304&!\272$\361\206\272\034Os\267\337\317:\272\332\3076\270\201\365)9\034\210U\272#\375\2479\370\372\2218\2638\0029S4\0339<d\211\271\0104}:\363\\l\272G=3:]i\2417\246\324\030\272\3334(\271\315g\217\271\215z\253\272\211};:}]M\272\370\264\224\271\352KH\271\266U\"9\232\306\207\270V\244\207\2712\201\336\270K,\250\271T\372\027\272\341L\":yP\t\272L9\367\270G\177^\272v\264\n\272h\346\2259\034\367\202:\312p\245\272\212\354\2269<\005\234\271\213\333\\\272\200\225\272\272\214\216\0009\322\022\2359\366\"\031:\277\024L\272\323\373\001\267\336\367o:6\365 \272fKh7\251\330\200\267\203Q\322\270W\036$9\240k\n\272\303\3674\270\361\371\0349Kp-98\037r\271\217\'a9\'C\326\271jB\243:\321\316\2659_\314K\271\205\251j:\037-\2409<\017\222\272\366\207\331\271=X`:\315CM9\223I\212:,\233\244\271\2114c\272\366Vb\271[\317%:7\305\215\270\262\260B:n\3572\272\2421\2727AKx\270\341<c64\277\321\271\225\300\270\270\270\243\2549Ho&:\352\2269\271vN\2149I\n\0079C,\032\271\251\225\264\271[R\2629-\314\225\271\311X8:m\000\212\271\331^\t\272\347:^\271A\232\2069\243P\3659\271\327\233\272\340%[:u\362\21487(\250\272\267\252?\272\371\257$\267\277\265\177\271b\233\217\272e\025v8v\256\3439Z\266\027\272o\206\2779\3627\2739\343\334\3429EB\336\271\253wF\272\327Q\000:[\236q\271\206\321\3569\321\355\3359\265H09y`x:\262\315\2679\373\361\253\271?\267#\272\013\331\3649\000\307C\272\273\346\\:W\014d:\265\264\234\272\371\n69e\260#:\nqc9\366c\234:_\005U9L\364\207:$Q\2569\364P\253:\037\002\374\271\275\232\003\272+\3618\270vR\273\271\361\361\241\270J\025\n:\320\013\2409a\221\375\270\033\256\212\271\005\212\3179\236\351\3449\031-\355\271Z\273?8\244\265\224\272\245\366\300\271vM\370\271\301\2125\272Z\003\2249\217Y\0059\004\302\257\270T\255\241\271\323\274>\271\244\255\371\267\230#\2439\311?\244\271\023\277\3259q\007t8\301\330.:\245\312 :\202\010g\271V\337g7\273\215N\271\':\236\270r\222\300:\246\252\0109\252\233\001\272\3258\256\271\270\236\3479\212\253m:\350\263\023:\336\266%8\220\366j\271\031\334\321\271\215\n\3159J\367\254\270[W3\272\"U\2248\347\360\210\2718\357\2709<\t0\272\212\267?\272i\'V\271\242\342\304\271$\356\027\272\326/\247\267B+\2339@=\3538{\240\t8\202\323\2568z\010\0169\023I\3439=\270\220:o\027\021:y\377\323\270\251g\002\271g\006\276\267\352zB\272|\345\n\272h-\3519\220\242\3717\001\325.9\301\006\327\270RO\2138\321U\2749\005c\030\272O\333\3347\337\357\203\271\345\003\342\271\367\2147\272\222T\304\270\311\034\202\272\330\217-:\241k\331:\203\232c\272,\364\216\271J\326\355\271_\200s9\007{u:\325g\371\271\220T\233\271\300\347\3119\001\026n9\310\340A\272\304&\213\272\206\2547\270\367+\3028\346\237P\272)%\036\272\347\210\201\272zd\2019\302_\032\272s\n\365\267v\275\33793D>:\010\035v\271\315\332\230\271\236\'\014\272\347r\207\271I\273\003\272\302\25208\177\353\342\271\311\2621:\262r\241\272d\275\017\271\327\245\241:c[\211\270\271\331.:\217|,:\244\234\003\272YxA9\372\251\3579xme\2725\264\256\271\225*\313\271\264\"\007:\027\353\r9\243[\222:\275\241\023:ZA\243\271\035)O\271=+O\272W\026&\272W\357\212:w\246\3209\243\21389g\252\031\272-\365M\2724H\3058\375\211\364\270\242B\363\271N:\266\272Q\323\3739\223F\236:=\332;\2718\220\3408N1}:7h<:w\366L:\326\200\202\271\000<4\272\272\305\2569IR\250:+a\022:p\320n\271\005\376\2669\300\330M:\217\211\337\271\253\202\3469\321\362\2208\254\343^:0u\'8v\333\217\272\'\002`9/\212\31091\264\303\271\016\323(\272\326\325a:\030\204\23287\301\t:\300\024z:\\B\3227\254Y=:\326\014@9\316k\202:\234Yl\271Tu\237\267\300c$:}\341V:\364\244b\272\271\267\200\271z;\1778\3722\241\272\206z\3108L\314+:?\001I\272\336,J\267\t[\2039\027.\023\272$\255\2239\262\323\023\2727\263\250\271*\373\3039\275\365\246\270\\L\357\271\030\324E\272\355\327\3279\373\000=9\314U@9\341\344M\271\255\026\220\271\026cR:sk#\272\215Z0\270J\010O\272\304?\\\271f\036/9Kvw\271^\265O\271\357\344\\\271\337\"\024:Q\306\212\272\271$s:\026B!\272\022JF\272\252$>:\310\033\326\271O+\017\2723\357\3309\03698:\317\262\327\271v\221\n\272\321\021\2638,\017\017\272\006\335.5\326\263U:\350\304x:\337`+:3LA\2725\254-6\032\034\020\272\305\'\375\271g\332\3079\313:\3059V\233\002:{\371)\271\340\302\3679\301\352X\272I\213 :\177\000\"\271\220\014\3109\235\377\272\271;\022\247\271\215\320\3338z\203\035:\265v\302\271\030I%\272+ZW:\253\3664:~\356\2709\374U\037:YHQ:\366[d:S\2404\2720\030\3409x\373Q\271\360,\201\271=\2537:\355\322\2569%_\207\2714\233C\272|Y\3479\263/`:N\324\022\271\337\362\"\271\205j\002\272\232c\213:\022\0203\272\345`\3218\346\324!\270a\372$:C\310\010\272l\014?:\276\n\033\271\257\007c9\377\2015\271\211\020\r:5\344\006:\352v\r:\361\\\330\272\320\316\n9O\241\3629/1\2279@\303\2669\237?\307\267\220\235\2409M\200&\272\002\324\324\270\020\361@:\360\365<:\302sQ\272\016F\356\271\336}\256\271\002\264^\271H\010\017:9\371\3718\245\271&\272x\353\"\272\377G\002:\342\353\2036\242o\2218/o\016:O\232X\271\267\3129:\242\272@\272\032\202\3569$z#:E\027\240\271\003d=\272\3459\2068C\366\203\271\313\242\235\2709\204\236:\237\032@9\302^1:\246\232\255:\216\222\350\271\260_\207\272[\312\002\272\304\'\020\272K`\024:}\366O8|\332[8\257\226,:\036D\320\270\314\363\200\271a\022\2209\331%\272\271\002Y\246\272\340MA\271gT\244:/v\2669\223\305\2059y\305\177\272H\'.\270\253(\206:\213\342\3168\031\275F\272\275\301\0149\037\rL:pj\2278j\024=\272{\206\334\271y\232\233\270\031\205\261\271(\204\320\271\016\271\200\2724\256\006\272\000\227\330\272\276\366\002\272\001Q\275\271\273\026\375\270\365\231J\272r\257%:o\330\022\272O\333\200\272\246\001\n\272V\343\3578\366\\\210\272Ao\263\271\242\027\247\270\305\377\3507<\214S:U\377L\272P\242V:\204e\352\271o\010\007:\356\330\201:\3107\005\272\313R\206:L\352L\272\263\023\0229\205\336B\272\203\363\252\272\201\206\220\272E\321\236:\231\311\363\270\2358\2639\242)\3575\202?(\271~\311\026\272RGd\271Cn\3009\313\3429:\276(B\272E\177\3329\254N/9\033\034\021\272s\013\3249)\253O:\307\254\3549\030P\267:\310\265\3439]yU:G\255}:k.\223:j\302\004\272-|\t\272=\036\3708\367rt9\271+\255\271y\341\2579\031\203C\271\023\345\2329\314;\220\272\371\342\032:\252FG:(jK:i\226\317\271\346f\272\271f\n\341\271\252\214\367\271i\245\3709a\2729:p\027Q:\212\362x\272\0236\016\272\336\016\200\272\326\005=\271\350\376\023\272\2254\0219FE \271\352\031u9\353\357\305\270.B\000\271Z7\216:\037I4\272\\\355\336\270\215V\022\271\373{\200:\374\035A8\365N\367\271\257\375\247\2718`\030\2729\177\007:i\205\35299\021$\272\366\025u98\356\3059\233\314\251\272C\315\r\272\037\"\310\271\210\032\3769\2521j:\215tK:.5g9\363\311\275\271|\267>\267F\342\303\271zeB:\330\307\2648p~\3009I\304\21289?y\272\263i/9,:\':\202\300Z\272\005\311\005:W\2733:\304w\2579\366\035\2069\216\323\000\271\233\353X\271~\360\3239\325C@\272O\016s\272\357\247\3039\321c \272\005\234\3719\2314=\270(\304k8L\350\2249rH\2068Uj\330:\237\"B:\275\006\3277\017\025Y:\263-\344\272\234$J:mN\202\272\332\000\000\2721M@:\027\337Y\271\247ku\272e\013\240:?\253t:n\301\2468>]\3678\245\177\3047\234\201p\271\354\347\0018I\344\356\270m\335v9\317|\357\270\201]\3179N{\2309]\3344\270W\276\003\272\236\305\243\271:E\237\271k\000\022\271\177_w:\031\344\':S\221\021\272xO\247\271D0\3708\301y\375\271\345\254:96\300\2268D\311\206\271z\221\035:\367\3442\272\260\220\3049r?+\271\227\031\3649mz\3078\355uB\272\3460\3659gZ\233\272\356\003\230:^\005&\271\256\000\217\272\n\3103:=\331\010\272\322\231\030:Cw]9fz\016\272G\212\2128!\021\3509\343\235\246\267wdT\272\000\204\"\272\332\320<\272]u\3758>\002\025:\312\3312:\"\340d\272\212\305k9\374\325\':\\\363\016\2675\252\321\271A\234\243\271\272\367\'\272\372\003o9\235t\254\271mKz\270\254\033\213\271\031b\3609+\322\251:\363\275\215\272q\240(\272\017\007\0069)*\3767a7\370\271\341\231\2769\016\n\0369a\346\217\272\2704\264\272t*d:\270e\304\271m\267\035\272\366\211\301:\363\030\027:{\312\320\270:\303\037:T4V:\026a\037:\324H7:p=\2029\263\207\235\272\244\300K9\267Z\202\271b\366\3149\255\'\325\270y3*\272xe\220\267\366m!:|<\3528\230Z\252\271\370\216o\271nT\027:5\343\362\271^WX9z\311+\272\021(\2279\365/=\270\016k3:\247nU\272\367\300i:\321\023\010\270\2459\2129\013\027}8i\227\3139\250\370):\200\343&\271\377^49[W\0209Y\001\264\271\014l\024:\242L\t9\303\346h:\031t\264\272\336\233T\271X\3347\271\376\032::\352-\023:\036\350\3509\211\265b\272\2419\205\271\301E\226\272Z\243\221\270\341\205\0319m9\030:9\216x\271\206\n\3249\266{+:\032\002P\272<\"%\272\377j\3039\301\265\2238\311)\0379\260d\226\272\223g\020:FA\017\272\321`\222\2724\242\3628\223\361a\272y\374Z:\214=Z:\272\357\361\271-\241\234\272\2746\223\272\253\3300\272!2(\272\260\253\246\272fT\213\271V\2626\271g\006\2159y\357\203\271\000\033\2629\366\303(:L\023\251\271\205\275N\272V\304\3178\204)?:!w\3379\304i\2009+-\3379!\205\321\271\214\330\277\271\322\241\3779sN\332\271\303\220t\271\013\354/\270\013H\210:H\332\2169\014\215\2369fU\3357k\236\233:\212+k:\214>_9\033\201\2438\277[^\272n\306\247\272\016\374\014:0J\226\272\235\272\214\271m\347\033:\346\327\332\270\231\373\242\271F\264g\272\240\223\233:\026e\267\271\321Qg:\216\333\322\271\362\216$\271\332 J:\345\363\':O\037\357\271x\247\023\272_*\237\271\337?\310\271j\024\211\271\313\206`9sX\2719\216#P\272\204\266w\270\235 \222\272\037<\2319\3062_:\'\016\027\272^\213\n\272J\235\034:\n3\243:\027\025\010\267\315\0272\267\234\010\0048\327\355\\\272\030\243\2159@S\225\272\t%\031:\376\021&9Z0\3009J\272W\271\230\"\0338\346=a\272m\255J9\316\207\222\271\364`\276\271\205)\221\272\361\276M8%\267w:x\224\"\271\3334\262\267\222j\3709uo\3728\270\356r6^\3463\272P\361v9a\223\254:\002\024\251\271\217:\2279\356\343\301\271\t\242\363\272yOY9\215\323z\272\220\270e\272\226T+\272n*\315\270\355\330\246\267$V\335\271\341Q(\272\345]\2569\'\031\253\272\035kT\2720\317\2009q=Q9+\237\0249\271n\3459[V\':(rE\2707\300`\272D\322\227:\2056\001\270\272&\251\271~\000\355\271DV\272\270\330\325\247\272\320\263\236\270\010\nf9*\013V\272\326\302\256\272\261\373\022\271\307P\3309\341\314\3338\243\035Q9\240\307n\2725\210G\272y\300\241\271e\020\202\272\206\212\216\272\016Q\207:\026\030$:\336\322\311\271\250\002N\271\342\276a\2728\237u9\016\372\2429\337\355 :\267?\031\270*\307\247:\373^t:\t\3430:\017.\2769\265W\2448\013\2025\272\212{\304\267\006n\3479\0322\265\272\302qp:\247\377\366\2712$\t\2718Hf\272\231\226h:\304\340\257\271#\241(8\n\2659\272\006\243 \272\236-\020:p\315\3169\226&\016\271mD\010:\274\002A\272\020\343\2359\366\312):]\177\3419\003(/9\254\265q\272@Oi\272l}\006:\243\027\255:+G\006:#\005\255\270~\030;\272\352Cs\271L@\3349\307\"\201:\316\250\357\2704|\016\271z\325\004:\311pI8z\274\036\272\204\t7\271{\212H\272\353\t$9\177\335F\272%l\010:\177\016M9\376\214\0058\322\226@:\345\2722:\014n\2659\2576\037\272|$[\271\032\300\231\271\3521\365\270\270 d\272\375\323\2238>\326\3259a$#9\200\375\2019~6\266\270\206\224\3159VK\3329g\320\005:\nWP:\327\330\364\270\031(K9`(\220\272\002,\2358\375\350S9\034P\3669?\307\020\272SM\375\271[]\241\271u\024\222:\225\265\222\272\310\340\200:g\337\002:8\213\307\270O\361\016\272d\321\2119/\233\3479C\350\272:\317\365a\272p\034\013\2722C\t:\354\\\215:\024~E\272\214(\2557\03646\2718\341\2359\260\3373\272\036\000\n\272ZRt\272C\033n\272?\301\247\271\210\206\230\271\263\033\036\271\371\3552:\234\007[\271\243\\\275\271\211\200\034\273\3326\332\271\326H\304\271*\017\2448$\033\2439.\266\2029\036\177\3009\206h\0148%\327>\272\230$\2129\036\213\2219U\316\t\272}\211\305\271\235\237X:\2229\3739p\221+\270L\210p\270\363\377\3569\202]\2139\233\306\222\272\016&\323\271\306*\240\272\237\275\244\272\247a=\272\027\251\221\272\231Ew\272\321\274\023\272aR;\271H\224\2319\266~<\272\226\325\230\272\310\343\2169c\312\r\272\305\2270\272\005\244\360\267\347f\3439q~\341\271\1774):\004\367~\272\355\"s\271\264\300\007\270Z\331{:\306\317n\271\247\0029:\031\343y\271\375\332\006\272\024\260\2449o\361s:\364MA9\317\221\037\270`\234\203:=DJ:j\007A:\241\334\363\271\010\235q8Lq\3129\220e\3539\267\32649I\214\017\272\373\n\245\271\305\016\350\271!K\022:\005\363\301\2721\261y\272I\224\217\272\306\213\2729\253\202\t:\347\371\000\272\002\255\301\270\232\356\3636\326\325?9\240\305\216\2727\005\3229!\032\0368<1\346\271]-O9\236\256\2159\314y\017\272}A&:\tO\241\271\266\242\003\272C\371r\272@\265\3208zs\3149\337\217\241\270F\224\315\2711wa\270\035\'o:^\325\244\272\351\305\024\271q\274\010:\220\253x\271\322X\2659\376\322a\271y\324\233\271\353?Z\2716I\017;\267\312\215:\301K\301\267\231\265\0279P\034\3548L\216\013\272\302\024\322\270j\235?\272\022\3777\271s`{8\021\262Q:\313\215\210:F\340\013\272Sr\362\271\004\320\2309\321\234#9.\302\2249\347%\255\271\034T\3049+E#\270\3246E\272\\e\3339fS\2039\317\362\n\271\360\010\022:\353\230\363\271\317y\3009\334\376k:\320\3421:\331\355\253\271\256_\2436|\373\036:\027V\2669\034\'@5Y\367\260\272\220\257$:( @8\260Kg9\320\346\205:b\2104\271N\255\265\265\000\301o9\242\027\034:4\003\257\270s\205\273\270\254\217\023:\347\257z8\336qM\272 \331\027:\264-\201\271\220\020\210\272Ig\234\271\256\305\0109\321\372/:\207=\3228U\236\3159y\365\3779\330\036#\272\274\362I:_*F:\027%V:\221\241\023\272\211V\007:\"\371K\271c\267\004\273\265\357[\272\\\247\250\271\372\212J\272\207\326\031\272B-\331:Wa\005:\370\tG:{\2378\272\316\305\345:\3655\023\270\271!\246\271{R::\332\314\030\272\334-}\272?\373^:.\307p:\017\030v:\0315\273\271\255\032y\271\0323C:X\226\3519P\274\000;\261\024\3259a\006\2109\007;+\272\373\005,\272g\200\0247\267\312\256\271?\304Q:I\350h:I\021?\272\026?#\272\333\356\271\271`\215\324\271\000\"\322\270\275\035w\272\375:\312\271\371\257\2209R\0063\272\2724\323\271\347\260F\271?\370a\272k\255\006\271\240o\2668\244\210w\272\367\315\2077\307\2668\271[+\347\271p3\315\271\331\032\371\271\332`\007:\342\314%:\340\323\245\271\336/\0049\255h\211:}\336}8\031Z\253\271B\253\267\270\\\2315\272\031a\r:\"\301\243\271tO\2428\276\210?9\212eV9I\000\340\271\000\340\3579\'\2761\272)kC:\206Z\246\271\235\325\211\272j\310\2209i\367\233\265d!\236:\272\"<:\347\025\267\267\207]\2259d\270h\272\332R#\2729\004U\272B<\0149\372\rB\272\301TA:M+k\272\347^\354\271\274\216T7\247\275R:&V\226\267\242\210V\271\274y\3069Z\312k\272\016\033\255\271\200,\237:@\316\3369\254}\3409G\300\2459\200\317 \270\267\356\23295\017r:\350\224\325\272\222\306A\271\356\373\3629e\177\2249\227\177\217:\254\217\34697!\0209)\r\204:\3330\3304\0210K9\"\024\037\271\032\320\235\271[\"\346\271\3257\201\271\234\'\0279\242Z\223\271\211R\235\271\203\177(\272[>\202:4\211\023\271\036_ \272:\235\217\271\232k\33783l{\271C\274q\272\324\322\20696\230\3509\373\344\n:A\244=\272\002*\001\272\325~\206\272y\277\365\270l\227\2739s\032\240\271K\254\271\271|N\014:\244s\035\271 \302\254\2716\373\211\272\355\260\220:\274\265\226\271Z\245W\271\2404\317\271\220\217\26085\005q:7\220V\272\345Z\351:A\316\007\272\223u\025\271\321\027\236\271\034\317\3569HIG:.\024\036\272^\257\3268\005\233\363\271l\373\302\2712\273g\267L\000\003\272\302\244\313\271\343\t\376\270H/\0319@\341\277\270{\351\223\271\r\372\230:\236\025\270\270\033\222A7\035\216*:\236\215_\272fq\210:\333\274\023\271|\377\2229\336\004h9\233!\2448\261\237W:\321\315\225:\243\031P:\"\355\031\270\355)9\271\354\251\244\272\021\033\251\271\355\275\014:\355p\033\271\373\030s\271U\031`:\257\375j9.]\316\272\367\227k9\026\0352\272~\001\033\272\201\221\2129B\207\342\271,\254\3139B\013\037\267\024\341`9\353\323:\272I\273\3516\275}\321\271.F!\272\037\321\2569\374=\022:\251\371\2479\324vT\272\034E\0109\305\345\3408\001F\213\271\224\352\3639\244\253\3669b\243\231:B\002`\271\207\377\2147\026:\245:\311q\351\271\353S.\271\341\244):\346\355\025:%_\0179q\370\t:\224\207J\271E\016\3509\215\231\201\271\034\3344\272kb\206:\272\274s\272\230\"\203:6H\026:\205\263B\272\207gg\272\356 \214:\302D#\271\225\276;\272;\34068t\355\030\271h\266O8q\231\2459c\216\023:\271\272\2329\267s$\272v\\W:\335\306\023\272\312AL:\316g5\272\321r\2109Q\245\3769\201\366]:\004T\025:\236\257\037\272ZP\013:\367\376\0179\203_\2519U}\2118\262\032\213\272\to\':\253\234b\271J\371\005\272Gc\243\271q *9\351U\034\272j\333\2437\001\242\201:(n\302\272\256\252\221\272\324\373\177\272\353\334\3319\017\236\215\2718\201\276\271\262\224\2478#\337\2279\340\177|9\246XI\272\377I \267\230\325}\272\332\212-\271\365fM\271\225\367\2239\216UR9\266\312P:6\233\017\272%\314\237:U\037a9\370Q\270:7\342\324\271\322\005\004:\341}\2779\246\"M\272\327\206\225\270J\306\231\271\3014>9\267:\3469\236\2606\270\367\376\353\271af\323\270\034\311F\272\033\270I\271Oif\272\001O\037:\324\\8\272i44\272\367`\235\271w\"\3307\364aE\272\247\334\226\271\3275\244\271\300c#:\342\3432:4}z8J\226\3379\227\251\333\270]}P\272^\300\002:i\353@9\037\277\2739L\342\275\271\270\267\2139[%\2719\027}\030:\351\322Z\272\031EF:\"vs:*v\3468\304\017\2218\271\263;\272&t\3628\"\016N:\344\022\0069,\241\002:\312];:\322\227\3019j\211o\271\302x\026\272\n\302{\271em/\271\250\335\r9\350\31009\271\254\023:\246\301(\272\320\354\372\270\367yW:SA\3219\210\322\2539\361\263\202\272i\032\3448\"3\254\271\215\374\022\272\355\037m\272#\337W\272G\006\n:\372C\210\271X<S:A\206J\272!\374\2639\203\026\031:bc\232:\367T\214\272\243\000a\272U\016\020:\031\005\231:\337o\2117j\346\253\271\237c5\272\232\353\345\270\357k\2049\220\2070\272\241\025b:?\322\3659\251\313c:\305\360f\272\215Z@8{\267\2218\232\307\261\267-\221\001:\326\234\034:\3577H\270\213d\3579R\261\224\270\270}\362\272DY{:g\325F:\2222d:|gY\272\025#\"\272\334\023e8\236\000\340:\356\310\001\272\313 \232\271\367\323~\271\245{I\271.@\363\271\362]\246\271k\326\350\271P7\0249\221L\2469c\300t\271\254\215\200\271\024e\003:@k\376\270\315n\252\272D\303\3729\220\370\345:\270\0075:ZO\\\272\256\235\346\271\210\213P\272\020\325\221\271\264\337J\271@iQ\272\252\302\0059\'\362J\272\207g\226\271=\313a:[&\314\267\377\234\0108\250\342\3278O:\203\271\333\007\201\272\262j\023\272\360\t\213\266p\006\2129\215\370A\272\264\231t\271\177\371^9 _\215:\2273d9\2126\035:\325\245\2159]\354\201\271E\366K\271\003\214N\272l\211r6\364\034\247\267L\370\2768\027~\2029\026\0003:\216\233.\271a\237\220\272\333`\000:\t\206\2078\276\334\017\271\336C\212\271\367f\212\272\032$\213\272s\2075\272\240|\2457f(\235\267\244\363\272\272\263\236$9\014\362\236\272c>E:\206.\3069\336\267V:N\014\026\272l\207E\272\220=\3459\304\227\241:\000\014\213\271\207\317i\271[J\351\271\245T\2569s\204+:u\344\2438\340b\033\272i\216\370\271\202\032\3349\314\302I\271\221\305\226\270\247KX\272\r\344\275\272\001\006\033\271\336\376\2349\n\232\002:X\272\0149\234\2241:O\223\025:\37367:\254\007l:\304\355\2329jU\334\2712W\2468\240P\014\272\327db\271\212\003\213:z,L\271\2629\001\272\216\201\2529\254G\005\272\"\223\2577\271\266\373\267\034\241B:3\320c7\211\250\2019[\361j:\037\032a\270\346tu\272\307\316\3359\200\"\313\272\030\275\3669\\I\201\272\036\275\250\271K\017\2279\341\256\3269 s3\272\373[R\272\244\206}9\363x177b\200\271,\36619\276\036\3659`\030\3039\376\353\2769\352\340\013:\210z\0309\222:}9\361~M\270\336\221F9\246K\331\271\320j\3308\2070$:\003H\240\271\225\036\r:\365\034\233\270\030\247n9\224*\374\271{m\2269\345\333\245\271\024lE\271\306\002\3649\246\'\003\271\243\3170:\320\375\023\272u\244z\27207,:\027\272D:\324\237\225\271\023\363\3338J\263V9\t\377K9\356\212\256\271(\347\237\272\260[\007\272\251\025\223\271\307,\005:\240\254\0339\030j\006\272\217X\224\270\255\207\222:\216\016\265\271\006F\023\271dt\373\271m;a:3\267\t9\323\207\t:.[\3249(/\014\2722\014\235\272\260459fg#\272t\214l\2727\026O\272\321\273%\272d\022\332\271\207\322|:\277\231R:-+d:\205L\306:\221?Q:\320\016\304\271\"\253=\272b\236\324\272+8(\272C\361H\271\311\316X\2709\361\330\271\350s\242:G\376\226\270-\366\240\271+\323\224\272\206\022<\272\352C\316\271(\254\263:~4\2659\340\'\001\271\277\350~\266Q\016\342\267\314-1\272;C(\270\246\230m:\341\316h8\200.C\272\350\375_9\234/\227\272\3304\2707\217K\323\2716!\3779yv4\272\302kG9[\0276\272\250\2638\27272<\272\264eh\2729g\n9s*/:\207G\02485\244\3559\327\244\212\267s2\302\272\337\234q\272\324\036_:\320\307\213\271Z\361\207\271d\010(\270\234\344\202\270\023.\3008\252b\035:\001>\207\272\'\206\2249_\250]\267\216\265a9\334\230g8W&\322\271\305\333M\272\324/\022:\247\312$\271\242O!:E*\226\271Z[\3119\027{O\272\366g\3719\356\003\026\271\240b#:\210\023\2359\240h\255\272K\260N:\373\025h\272*n\3258\203,\3079t26\270b\371\343\2728;\023\272\2665\3129\017W\3319F\006\224:>\3123\272\010R\3269\227\313b\271\314QX:@\017l\271-\261\212\271\024mB\272Ae\004\271\001\3565\270Z\361&\272\274\332\244:|\327\216:\211\262\0358\'c\246\272\366~\036\272G@\2269\212\014)\271H\346\0318z\017\n\271\255q\024\272;p\324\271\027\274\3119\333\025\237\270\031\274\214\265\023{\261\271\250Xf\272\234,\3578\362\024V\271l\305\2709\006\317\2119\204y\300:3lK\271\253\327u:{`\243:\307\312.9\016\273\010\272\323\007::>E%:1\265\277\2710\017\r:\212?\3549\223?\017\2722\0356\271\n\221\020\271\272\022\2629\2427\3009\247\272\235\271\237\212 :A\330]\271\374\220\304\272H\250{\272\023M\020\272UD\300\271\265\225\275\271\250\203\2069\211\244X9~\360\3369\243\002\2177\024\242\246\272l/\3349}k\3359\246.\325\271g\260\307\271\264\222\202\270\354\n\0338\336\252_\272b\250\342\272U\223P: X\314\271\264\210V\272r\312\001:\357/\3739)3Y:\236MR\271\350\177}9\350,\2179{M\r:\001\240\n:B\326\217\271\000\367o\271d\214\2278\260\177\3579\376\245\0019I\371\230\271\r\347I:\036\355\3369&x\345\270\211\261\2119\245I\365\271)~\2129\223\232\215\272\243\005\374\271\t\217\2459\276py\272\350\211\3619\331\307x\270\345\347S9\266\242-\271a\251\254:\363\377\000\271\317\365P:#\370\3419D1\217\266\205j#\272\212\027\005\272\225cq\2723\343#\272^\221W:R\013L\271X\307\010:\3326\0306\276\340\023:\314x\226\271 \t\3239K\347b:\342\352.9\364:E\272\325\325O\271\220\232\0339#5\213\271\nd\333\271]\305\256:\022\\\3066iC\247\271\2433\3639\340\346A8\364\237c\272\350 \241\272\030*\006:d\370\203:m\202\222\271\347Q$\272\006\033\242\271 \214\201\271\266\225\371\271\331\213\2239\355^\220\271a\325\"9\325\337#\271_7n:\"\027[\271CS_\272N\036\240\267\232\331\236\270\274)\2668\251\217E\272\367o\3559n|\214\270\351.C:h\010\23093\361\3129z`/\272_\204\360\271\016\177\343\270\273/\323\271[zN9=N\251\270\351U\002\271x,\016\2713\273\220\2714\330\250\2673\021N\272P@\315\267\352\261\3709?\334}\271\014\201\177:\374\023\3379B\340g\272\"\000\0109\025\264+9\227}\374\271\224\304^\272\301\324\322\272\277\212\006\272\300\341\202\272[#1:\005\333\027\272\323\2359\272\344\375\2069\261\232\244: \177f9q\253o\270l\300\'9\300\326\346\270\224 \000:nN\006\272o\366\214\272\253XQ\272+\026?\272\242h\243\271\320|\241:\327\004\230\271\016\250^8R~I:\275\357\331\271\2546\247\271\324\246,:\301:\3619\377\004R\2712\204\024\271\'gq:z\323W\271\325\310\331\271\3723?:\232\355\3679f\336\240\272pE3\267\007\352\366:\227v\337\271\343\374\373\271\341r\"\272F+\'9\267\250$\270_:09\373\270\374\271o\257\243\272\001|\202\272v\326l\270h[\030:W\374\3639d\n\n\272\n\273\307\271V>\375\2678Q\2519\223\245,\271j\334g9K`\245\271\335\311Z\272B\260;\272\216\232\013\272u\301+\270\311Q\306:\231eQ:e\310$\271\330K\':6\303\302\272\022\365\247\271\262\005\254:y\374Q\272O\325K:QI\r\272\325\234\0079\332&\"\270\270\2277\272\331\302\357\2710\363\3609\006cH9\263\033C\270$\032;:R\214\331\271\237\307\033\271\271l.:\001b\2279\343\274\341\270V\306\200\272\034\307\355\270}\002\263:m\301\016:!\031o:\202z;8\350\366V:\303\334\233\271i\314\0239\t8b\271a~/:0\250<8\001\206\264\272p\307\2169{\277\243\270\233\027b:\226\246\301\271\200\024I9\335w\2179\264F8:\0133o\270\023\330\3679\213\324:\272\314\206\202:6\370\3339\260\'\376\271\020\216\3109>\007N\271\023\270\3129\224\206\367\267\000\t\316\271to\031\272\236\254\351\2665\303\257\2715\343\000\267y\305\235:7\363\2458x\230S:J\307\177\272\224\314\355\270\203+\203:JK\317\272\354\233\177\272\227*\215\272\304\001\200\272\177\267\2269~\002r:\234{\3669\027\336o:U\335\026:\313\030\326\264\237\361I:\360\224\202\271\343_\206\271\356\307V9\220VY:M\221U\272u\024L\272Ja\203\272\327\341\2419O\035\024\271R\024\335\2712\256\260\272\312:\327\271\201\202/:hx\3239\234\256\266\271\230\227\2309\006\003w\272|6\2509%\37659\361)\n9Du\206\271\307\330\001:(\270\214\271\354\203\035\272\200\217 7c\223R\272\356\027\2409hE\r:s\303b9`\023\3049D\016\2119\325r\3559\034\203\360\271\262q\364\266\253\016G\272\327\327\231\271\234Jg\270\355\337<9\267\311q9)Uc9\254a8:\320n\224\272\220\347#\271\320\310W\272G\372\267::\277\202\271\303\322\304\267T%\207\271\227]\274\271\213\365\3477\023\255\005\271}{\2649j\263\244\267\274\n\230\272\275\311\2378P\350D\272J\317Z:\262-k9rl\357\271\235kW\271\365S\014:\263\305q:\232\277\3149\020P<\272T\221\2069\315i.\272\370\r\2549\215b\335\271\264\361\244\271\331\021\306\271\223ri:\020\231\272\271\325]\3559\236\005\236\272\264\343\005\271\3430\2679\271x\014\272\204\210\n\272\254\201\2319\201\203\3419\245\254\325\270i\351\230:S\222\230:\036.\022\2723\201\032:\264\213}9;\331_\271\275\367E\271e\323\n:\266gY\272b\330%\271\021\250_\272\025\266\251\272u\345V\272{\231$:\006\376\2519i\201[9\214\'\277\271\"\021=\272y\031\245:\025*\014\272\205\205(:\001^\266\270\367\362\2609\346\234\2759\317Y\2649\317\025S\271\003\032\3349\010l\3159\2621\274:B\263\203\272O\321\372\271\265\326\242\272\371T\345\271\013\232\362\270\364nE:\236\271(\2712\347\203\271\010\262\217\271A\326\251\271\033vg:\016y\363\271\004\350Y9\246\317\t\272\030\335\2259_\364\303\271\343\020\177:\037}\246:-k~:&\344&\272M\214\345\271\323$#:\344\031[:+\320O\272\366]\025\267\330\035\0229\r\310\3269,x\205:\tz\215:>\201\337\271\217F\2339V\014\342\271\035\030e:\017\200d\271\270i7\272\245>\270\271G\340\313\271\242o\272\271\362v\001\272T\217R9\360\357\332:\375}\3649\333\304`:\007\357\0308\263KJ:\203(\2079K\2105\272\316&59O\211/\272wO\014:\212t\3607Q\211\242\271\"\226#\272SD\260\270=f\003\272\226Y\352\271\312\336\n:\262VF:\010\\5:\325\241\214\271\177\n\315\267UU\0178\211\235\3149\223Q\242\271\256\3251\270\271I\272\270|\224\2329\350.O\272Y/\324\271*\333_:^H8:&\272>\271WI\030\272[E\2609\341#\214\272\030\227\3459\361\347\036:\356/V:e\025#\271\261\215\014\272\031\341\324:\241\311A\272\302,\2558\306\221\017:\202\036\006\272\211\251\206\272\'\023J\272\217q\374\270\3612\2647N0\273\271|\212\214\272\010BQ\271\"\260L\271\n\225?:\331\354\016:2\351\304\272]hg\272sWG\270\'\225\226\270\017\310\\\271!EP\271(\255 :\265\370\200:\025c\r\272\323\037/9W7\232\272\\$\270\270\241\025\223:%\244\241:\316]\3269w\242\317\272\013q\2138ar\023:{\"\203\271\013R\250\2727-A9\312Z\302\271\217\\\025\272\r,\2549\270\025f9z\322\224\2726\264\372\271\037\006\2768I\036\016:\334\003g:\350_\2459\201\336b\271|~\3619\n\272\341\271p&=:\013\312\200\271\345\304\024\2724\254\361\271\266I\263:\200hG8??>\272\205b=:\t\367p9\212y\2548\254[*:l.\3019\2557\231\267\252\375\217\272g6\273\271z\337\333\270\222\376`\272p\232\2429\254h%\272\204\315\236\271\366>8\272+\n\344\270\251\230\216\271\303\246\024\272\305\177\0178\224\226i\272p\366\2069g\034K\271\225k<9\302]\2759g\'O\270\276\276\243\271\354\272\3329\235\2340:\244\253\254:\346\2538:#\334G8\017~\3348\250st\271\3552\3168\313\267\2729:\210\0229<\003\230\272\320+k\271\230\036\2209\251\335,\272\375u\3158N\247q\272\325)}\271\3374\2419\353\241a9?1\3258\t\301N\272\026m(\272\335\335\003:w\222\213\272d\034\024\271`-\036:bHU\271\301,>:\2167I:i\007\235:P\257\342\267/B\024:0i\030:_\275\021:\033q\35194\312\247\272\337\007\3509\267M\3249%\356\2438\366\"\376\2705\373M:\222/\265\271\263\306\211:\3144{:\3169@\271\311:\036:/U\006\272\331\373J:J\036r:I\010I:$\351O\271\252S(\272\n\351\030:\265T\244:?\233\005: \027\207\272\246*\212\271\323h\002\272\016\t\207:=\321\022\272\360\257\036:d\225\235\270bV\222\2718N\0319&\265\t;\3015\213\272\261\366\362\271\003\333\325\271\034z\020:\331\222\205\270\017\341\2679]\311\355\271\025\262\037\270\322aj9k\264\2259\366\210\02293\031\3766r\243\223:i\322H:\326\014\2249\337\325\3319\206\'\2069\036x9:A;G:\2440\264\271\223u\330\272\307\004~\272$\246\"\272[hs\267\221\261\033:=\356\241\272\335g\n:G\312\301:,d\3547]\034\3709w\353h:o/\034\272\273E\314\270\332\260\020\272P=\305\271\334t@:R]\201\271\300\272\3668\316\303\320\272{\201i\266%\005d:\237&\032\271{\'\206:\214\014D:/8\0368\343\232\261\271\373\307\203\271}M:\2726\030\375\271\314\352?\272\256\310\2119\026,\330\271\243\371P7\371>,\267\024\2017\272=\376\3159d\354\022:[8\367\270\364\246\206\2702x\034\271LS\2579\243\261\2629q\375g\271\211\364<\272w\024O7\261\366\354\271^\016\327\272kT\004\272\2649\2729\307s\223\272K\026\2318\206\242\2766\340?T\271\363\277\':\371\236\177\272.w39T\t@:\346\355\3618\275[\005:\031?\267\271\010\333\332\271\253\002\006\272\322\n\204:\004%\365\271\035\261\006\271\317b\0108\342\240\014\270\364\337\0049\355\375\356\271\316\306\005:P\034\3519\3060%9\320\301\006\272c\024A\272\212OE\272\315\247R9@\361V\271\344\245L9(\'\224\272\214?\013:\334,+:\021\223\3528\325\275\017\272\330\327\260\271\240E\2469t\267\2349\250\333\310\271\250\313\2619-\220\200\271\037\217\005:\255\031\2577\237\270\205\272jIB:\334N\220\271\236\032\2338\352\t\177:\214t\2249v\375\2778.\256S\271E\376{\272\312\367~9\264\260\3255/d<9\355x\3729\035\310\2539\013\252\3719\355\240\236:U\021t9ncH:V\353P\271\327\376\3649L\024\004:\370\201\205\272J\217\3409\270\001;9#\370\037\272\312\347\340\267\323d?\272\250A\r:Z\312~8\323\244\003\272\350\250\201\272Ax\211:y\241\216\271K\023\234\271{.\243:\"h\360\271H7F:|S\2439_\205B8\270\372s\272\310R\3739\371{A:R\362=\272`A\2408.\023+:\346\230\237\271\0140r9\007\363\023:.\256\260:\377\334\370\270\363\310\217\272^\267\227\271\221J\2618\321\241\225:Vw\365\270\026l.\272%K\235\272E\367\003:\304C\343:\027\367\3668|f\310:\352\1770\271V\025\3728-\301&\272\317\001\2518<j\205\270\301\313e\272)\016\272\271\207=\302\272\334\206K\272\020@\3308\233\366\0209\220\201\244\271nQ\2309\005f\267\271\310\005\025:\311T\321\271\2272\262\271\204sI\271\202\225[\272Z\"\326\271\221\325\230\271;\21049\246\310\320\271\215l\024\272\353\330e9`\327\324\2706\254 \272\253vK\272\210\317\272\272\264\320\234\271K\033\3106\262\177\3179\340\r\216\267\270\336\024:\231\tD\271\020<F\272\351\010\2468\270\310\2577\003\306g8q\364%\272|\267\226\270\304@G:s.\t\272F\2155\272>\245\275\270\337h\2049\016\372P\272\013R\0218]l\204\272\241\201\372\271#|\3006\304\3669\272]\177\013:dPB\272\262\360`9mk\0069[6\214\2721\315\213:WW}\271\3563\2439\345\027\':\004\t\235\272\032B\224\271l\224M\271q\\\2629L\366\275\270\'\246L\272\365e+9`\332\340\271oy\304\271\n:\232:\322V\2719\003\352c9pI\2759U\016\304\271\206\221\201\272\332\263\0269j\213\023\2728\256J\272\262e\220:K\220\2218Z\035\247\271:fv:5f\33592\017\3139m\022\3369\365\233\243\271\035\206;:\245\221R\270\215\027.:?J\320\270\372\244\3538\317\250\326:\317\277F\272\330q|\272\230\275\273\271\325\004+\272\230\"L:\372N\201:\330{\226\271U\214\200\272.-*\272\r\202f:\r|\204\272{\004\2169\334\351\'7\030\353\3469\320\225\270\271rO\3639z\355(8_\010\3718\3654M:\351\355\r\272\260{v\271\"^\333\271\252\332\0039_\001\214\271\030\301V:\336\233-9\014\177^\271<BV\272j0\00179{):\263\tl\272\302\316\3039KB/97\231`\271\352\210\2729=\3104:\212\217~9\316m\2449k_\236\272\020\373\'\271\003k\3149(\241\21189\261d:\334\037 \272;b\017:\201\241\326\271\217\245J:qb\272\2702\374/\272\271\252\013\270\333\010\2429\317R}:7\3439\272!f\202:me1\272\261\026\017\272a#\277\271&\022\2359D$\244:J\037E:\200.\017\272\365\23059\003\221\212\272\341E\211:\232~\006\272\"\253^8\347i1:\034Y\364\271\214)\237\271(8\351\2712\021\2047\315\356\3359a\020\031:+\355\320:i\313\024\267,A\014\271)d&:\021s\2769*C\2717x7\346\271\354\344O\272\375\214\013:\355*\221\271\0305\310:\363x\3727/Y*\272\371Pr\271{\344$\271\267\257\223\266\\\344\242\271%\177\205\270\036\013m:\247\022\3628\3420K\272\250_\3268\366\233\3216\223N\257\271\347\342\332:>w\345\270\246\277\2129\017\227R9\034\317\25098\334^\272\227F\335\270I/\271\271\322\304\212\2729\364C\271\327\375\201:\020\336\2759\230\33429\240\342\213\271{\021\3549\262\372\252:\260:\254\271\272\2028:\320\322\340\2712\335\212\272 \307\037:\223\361\214:\206\372\201\2723t\037\272\305\022\016:-\313]9\333\363\3679\363\362\211\272i\027\244\271\315\2273:\027\271\t:\370\331\357\271\2660\357:\363%\273\270mB\3247}r\002:\030\003\320\271\333\036\3368\336\277\237:\255y\031:\254-\030\272\271\255|9\245k\243\272\342/\202\272\317\353\037:\251\365\3107lR\004\272X+<:\203eh7\026\\P\2715\304\2319\017`\231\271\251f\315\270\266\237D\271\037\031{:\307T3\271\001\302u\271B\016\2019\007\324<:l\205Y\272&\006j\272|\22408\207 R:]N\3169\241\313\3339\266\321\001\271@\3462\272\005`\025\272r;\247\2704\253\0179\017\345M\271s\234\2419F\022\231\271K\370}\272\021y\270\270\3718\0338\370\261\263\271\311\312b:$\322\3279]\017e9\261F\2358\221\000\017\272^G\2049-\221\314\271\337C/8Y\277N:\365\345\377\271\333\307_9\362\003\320\2709\254\330\271\230(z\270\205w\030\272\271R\0209\255\263\2619\201\254h:\323\004\007:\254!\3649\301\305\2619\003x\003:\204{\017\272\261\261~:\221\374\001\272\314f\3459\256\355\003:\244\240\02497\001\262:2,\241\271\350\312\n\272\025\312=\271T\340\360\271\210\264\233:\252\177H\272\2366\010\272+\233r\272\034\251\353\270\200N\253:P\224u:` \030:\320g\351\271\377\225D\267xo~\272\341\205\330\271\233>,:\033W\3628s\275(:\362\000\234\270q\205E\271\327\010;\272\034[\206\271gt\2559\'R\3659}\260\362\2709\2708\271\277M\251\272\235\316\215\272I\320\370\271T\000%\271\337\362\0169\202\244:5G\2605:J\246\322\272:\t\345\271m\005&\272\t\233!\272\361\267\225\2721\276h\271\320\305\2669\000\\\016\2717\013\205:\370\000B\272\207\3100\272?<\266:\201.\030:\001Z<\272x\315\2339T\242*\271Tn\335\271\022\236\303\271\324\364_:\310\301,7\365\335\033\272\357H)\272\227\035$\272\360~\232\270Y\257\3149\315\250\366\2701\274\014\272q\234[\272(\300?:m\307<\267\322\324\246\271\305\237\1779\205\204;9\251$\272\271C|i:\362\\=9O&\n\272\353t\2529\360\2027\272\362\211T\272h\234E\272\355=]7\340\214\214\272\333B\212\272\020M\035\2722\332\354\271t\230K:f\251\010:\276 |7\230L\002:\272\275\020\273O\257\024\272\357{?\272\250q\'\271\340^\3639\374\355M\272\204\2776\272b\014\356\271\n\340\005\272\277\253\024:\34429\272u\246 :Z\277\313\270\362\\\2138\207\206\265\271\271\230\263:-\210a\272\024~N9\302+\'\272\002$=9\320;-8\231\231\3059\022\261\3069`0\352\271>~,:\240\300\252\271\215\205\234:\353\021\303\272\355\341\"\272\016\332D\272\004\347O8\302Ch\272\373\212\004\272{\264\253\272y\276\001:\223@\0359\346\243\022;3\311q\272\275\'\205\271\237X\303\267\356\213=:f\351p\272\010\335\3539*\262\3138\003p@\272W\262\2178\341\370\263\2700\255!\271v\227\3119x\353\240\271\206\235\342\271\343T\277\271\234\3506:\0069q9\337\261\303\271\311\330\2469_\37358\310\201):&\375\0369|lz:\355ME\272?|\34194\300=\272\275\023o9\275\333\341\2700\237[:<&s\271\307z\225:\037\007v\271\307\254B:d\217z9\n\337u\272\217\354J\271\200\201>\271\223\026::}~\247\271\343\363\275\270]\227\037\272\324\255c:\377\257_:\031\324\3679\240\226\3509Z\036\270\272\3258\335\271\323\367D\272yX\250\271\342\217\2459\2052\222:\335D+8n\201\254\271\211\237\2678\020`\2538\263Xk:\360\n\005:\307-\030\272\2222&\272\363Wo:\216\010\272\271\215\372\302\270i\327/9gy\333\270A\274\0009\3141\217\270\254\372\200\272\3775\245\272#\227\204\272;=&\272\312\257\014\270\346\246B\271z\363\224\272Q\001\233\271\007\376\234:\251\23226\013Ws:\303\221\227\270\340V\003:@U\021:(fC\272i\253\3259\322.=9\007/\2418\332c\205:\376Q\3118X\222\2519\352\265%\2722Y~\272fE$\2723\232}9\234{\2159\024\242\326\271E\345\335\271\334@D:\341\371\3239{\"*\266\375P\342\267D\254\207\272\007c\2748<\244\0228\215\264R\272\035\345q:\020\2172:\333O\016\271`\234X9\224\242\344\271\252\245\3549\201#\244\271\'\"\2338XC\3309|\207\2259\n\232?\271\273\275\017:\031\177\0309y~$\272\226;\r9h\243\325\271|\264\025\271\221\366\":\244/\230\271\326\275$:i\216X\270\342<\024:j\324I\271PZ\001\2714[\341\271\227z\213\271\003\027\2469\377U\356\271/0n\27113\201\271H\002\035\271\247\210\3269M\316l\271ZZT\272\346\372~9z\357\032:\325\023\265\271\343E\243\271Y}K9\241\235\302\271\014\365\3559\341^\343:\013Be\272Y\326\215:\002`\211\272v\251\203\272\253\363\t\272\225$%\271\320\345\326\271\006\254\242\272\210\350\214\272\025_\216\272\221x\0249\214\232\340\271\271\316\010:vz^:\312l1:\325]\2659\316\005\230:\010t\240\272\\\016\2449s\300;9\3419\004\273\370\"\037\272L-i:3_\3019\351\215\2229d\367@9,\264\002\272\345\256\2449?Y&:\r3h\272\211Q\2269\3658\0279\351\366\327\271\340%\2758\323\255\251\271\237\nd\272\253\374Z\272\220M\327\267\261un\272f\261\237:3\324~\272e\222\013:8\220\315\270>m\3719\312\313#8\335\006\2279\027\376\026\270\270\376\267\271\0105\243\271J{\000:.\200\265:TQ\251:\245\227u9F\357a9\264\234\2538~+\331\270\017\000\2027\372\013\036\271b\256\1779\312\316\2668\275\334%:`\205=\272\376\215\036\272CX\n:\303\313\227\271\221\267~\267r$\3549\355\314\340\270\250\236\0039\220\262\3469^\305L\271|\235\037:\317R\"\2715\n\007\272\242\210\201\271\371\016\3379\342rJ9,\003\237\271\033%7:\315\242\2057g\004\006:?\273E:\241$\214\271\200\237a9\341&6:\345\221\2728S\303\215\272&W\260\270`\305\211\2722.x\271\330\374 \272D,\2529\257\260\217:z\277C\272a\3620\272\241>\r9\277\204\206\272\224\320\177:\363\260\3168g=\020\271&M\0238\256\342\n\272s\371\201\271~\317q\272]Hw\270\203q\007\272\032\340\013\270\267\271\262\270\037\002K:F\245\200\272\355`{:\266 \024\271M0\2719\002\226\0269n\312\020\266\004P\3578\227\310\212\272V}49\352G\0246\240#\026\272\226\023\210\272-\002\333\270\024\302\213\272w.\0258\344\244y\271\353\230r9[\360\2777\251\013\234\272[4_\271\r\225\267\271\214\003\272\272{:I:D\016\033:\373\\>9 \257\214\272\350\200\230\272\374\217\217:\225\210O\270\211\300:\272\205\220\347\272\002\335\227:\347\322\250\271\353 \2119\307 \240\272n+\':|\357\304\270+\220j9\013I(\271\300\006\000\272\0045P\272\001.2\271m\357\2259\034Vu\271\255U\037:\274rL81/[\272\303@::\274\200\203\272\024\2663\272\322\232L\270\220\244r\271\362\213\'\272\025\370L8\241d\245\267\337\323\3749\315\217\002;\212(\n\271w;\302\270\352\235\210\271\004\3204:,\244\005\271Jb1:\224\215\010\272\270>\003\271\017Z\004\272\361\265\2659\330a\2269\301*\":a\002\2669u\361v\271\371\030%\271;\307\274\271N\030(:\022K\007\271~\005\3679q6\217:+g\370\271 \231J\271\355\232\r\272\215\205\212:Q\252\2678+\207\301:.u\3378\310q\005:Rj\365\270Q\314\2469qB\2329\307v\3429\256\024\3757/\"\007:\362\242+:\303!@\272\264\240\036:\362\371\213\272\001\215C:\346\315\003\272\204\275\006\272\367\004\2279\331L\036:\216\303\341\271\013\032\001\2712\262&\271\206\206k9\237q)\272\310\332):\350)\200\271\275#\244\271\261X\2349\311:\000:x\230\213\272s\025\2359r\234\2419y^0\272a\231O\272\021\000\216\271\'v!\271@5f:\336D\004\270\021s\224\271\002\024\2579\266\2661:\265|L\272$=\3717+\241Q\272%z}\271Z\177\017\271)\017\226\271\017\251\266\270\177\204\361\272P\216{:?\307\205\272\273k\232:\346U-\272\247\317\333\271\205?\2639?\240q\272k\225r9\307}-9\010\256\3429\263\021\000:\353t\3618^r\205\270E\224\014:\373bG:-\267\271\271\024-\236\272;\354\t:\203\322b9\263z\3058\022{\2409^\233\260\271\3053\2229}j(:nj\336\270%j\006\271\222\035\220\271\017\246\027:z\361\312\272\364\362L\272|n$:\263O\242\270w6\245\272\3431\256\271\002J\315\271/\213D\272?\264l\271\t\264\0279\224\014\207:\342\355E:7M\3779\034\204\232\272o\023\2029\017\201\2219\350\211\276\272{A[8R\253\033\272\316\300\3269\304e\2479\325\35289\375-\031\272\376\225\300\271_Y\002\271\366\261\207:\022\351\25693\352$:L\003W\272\034x\3478j\036_\272]a\252\271\276\3065\271\225l\3739\323\354\253:\031\222\3279\305\235\036\272\216\004\322\270\3639%\272\266\343@8=0\201:\r\262#:\267\340y:}f\2469\177V\254\271a\207e:\021\370+\270Ja\216\271\352J\233:\036\243\002:\010\3070:_\312\026\267P\247\271:3\254z9\320\300N:,\324(:\360\371\0277\033\361\224:\322V\2139\006Y\017:M\351\021:c\3379:\312\273\2049\222\265M\271|\213$:A\031Q9=%\213:+\304\2119\016\013%\272mkG9_g\372\267\022\332\241\271\237K3\272?k\212\271\225\305~8\'\253Z\272\231wM9\240\204\031\272{$P:\372\010T\272.\261|9\3446>\272\027\247\2368R\261\207\271\010\n\207\271\231.2:\227\036\021:N\321@\272h\024\014:\203\\M\271\354b4:\320\254\235\272\300_w9\036\n\247:\314\367\2736\203\315A9 \235\2758\261\3610\272\223-\224\271\334\010\0349b\311\025:\314\264\"\267@]D\271c\305%\272P>\3249\372\300W\272V\305l:\307/\2459\001\222\257\270\333\312\2249P\313J8\236\202j:\315r\330\271\252\357\3119\2506\261\271\316\214}:\273\272\001\272|`\3018\245\363c:\347\210\342\271m\000\357\272M\022;9\212|h\271RV\224\272\272\347\337\271\235\r@9\332)\2029\334 \303\271g\276\3348\307=\300:\"77\272\030\264\344\271\033?>\2722\375\300\270\327~E9\306\273\243\272B#\307:`\375\2109\014\270\242\270\031\024\3019gO\3339\346n\'9\237RG:\247,\3369ef\2679\227\247\241:\261\300\205\267c\274\3569\314\271j:\270e\330\2711\275\2238B\360J:|5\3309\323\223\3179`J\0009\332L.:q\244\2269\265>\3468\246)\206:i\274\3719\317\247\223\272C\202\234\271\013\3060:\030\245\211\271\355\243c:\022\"\203:\250\0029\271\344ji:\300\n\232:\353\320j:\262\026o\270\351\232\315:}\224\022:,\n\236\271y\242\314\271\022i!\272j\0317\272d\017c9\253\244):\341\323~97V\340\271\256\232g\270\023\253\226:\365j\3639\006=\002\271\3075\21786\271k:XB\2359\343\017\006\272I\374\025:(\323\357\271\372Y\2318\216\221\2617\236\330\2129\005zd\271e\227\034:YL\t\272y\256\331\271x\\\3709G|T\272\326\177\r:O\035\231\271!\020>:\274\013-:)\262\t:\220AU\272\313L,:-\236~\271\371\221|\272\006\257\3658\372#%\270\323\362\247\272\006d\'\272\345j\3319\033\t\2479i\306.\272\324\177\365\271U\253\001:\311;\023\271$\322\2636\355\376Y\271\200f\347\271\005\235O:\n\2412:\375V1:\025\251U8\337\272\255\272~\253\2769\372Ky:3R!\272\225\035\233:\002\205l\271:\277>:\010(\002\272\224,5\272\367D\216:\031\344\3609$\311):\332\235A\272p\363\2559\345\3148\272+d\032:<\363#\272\001\032\\9W\331>9b\200\2539}\360w:\221x&\272&\221\033\272\376w\226\267\025wT\272\331\026\216\270\227H\363\271c=\373\272\"\343\2329>\tK\272\224Nn:W\212\3169N(\307\271H\"\221\270\202\242\2729\304\177\2357GPU\272=\322,:Er\032:\r\237\327\271\211\036\0257\2748\2459z5\243\271\237\203H\272\003\220\242\2720v\2679s\321\2369\205T\255:/\333\270:\242\371\003\272\365\023\262\271q\035\244\272\036U\3179;3\253\271w\036\023\272\257\361p\271\321o\2609\022J\217\272\016o3\272NLJ\272\312\244\363\271\353t\256:\277\221\2779\367f\2329\"\205\246\272\336\n\013:\320\325\217\272h\221\222\272\265\224\"\271:\326p8f\256,\271\247\013\017\272<\262\225\271S\264\273\270y\351\3129\'\373\001\271\376\001b:\314\352N:E[~:D\034\276\267\007\241\247\271\317\362\2769\024\247\3358\314&3:\270q5:\356\352\3209\233\205\036\272\201L\026\270\026x\2538U5R\272\325\365C9\316\214\3479\000\\\3508\313\215\014:B\241\0379\227\217\3439bx\3119\365Y\277\272\306\322\250\271U\276\344\271[\373\"\272\262T\3279\254\332\240\272\276\n\270\270\334D\0149\251\376P\272\325\323\232\272a\242Z9\347\201p\272~!V\272U\342\231:\277\257+:\252\251\0239\027K\3779\366\3665\272ES\217\271{\261\2178\020]\240:\336\270q\271\265\223\300\271\346\016\2518B\272\2608ZRp:\373\177\275:\0068W\271/\261\3159\207\334\255\272\320\327\331\271c\006\3128\217\237h\272\225$N\2725p\202:u\220\001\271\223\354\006:\302\351\3679]\326\2129\310\235\361\271d7\233\272V\216]9!\204\242:\236|^9\370%@:U\305\311\271\332\314U\272B\207\202\267\303f\2279s}\3169\362`\3019\223+}\271\010\277\236\271\030\023\263\272\267\337\204\270\231>H\272\314\332T\272\010%>\272\375\273\000;@f,\272U1\204\272!]\030\272\205] 86\254\030\272\004\313+\271\020\320\221\271\277a\001\272\261\317\2379k\177\3659p\036\341\271\310\022\242\272/\317\246:\327\330\3219?\272\022\2720d\3149\005\217\200:\2052\200\272?\327v\272 \3229: J\2459e+\2378\3208e9\034E\267\271\1770\n:N\270\214\272\244&\274\271(\261\0139N\377\265\270J\035#:#B\242\271\303\201\211:s\366\020:\303\325\r8\223\014\271\271\001[\203\271\032\227\2467\315)\234\271\375\337\033\2723\227\000\270\253\233W:@\242\276\2725\375\200\271\177\033\226:5\372\2739\303s\254\272\253\305*:)0J:\250X\031\272\263\233b\271.\317\251\266\263\346\000:r|}:\331\236\215\271\317u\\\272\25348:\363\361\0149t\032\342\271\214\240\3019\233\222\031\271\007\253Z:\371NT:ZQ\252:\273\2439:\005\231\277\270~r\202\272c\314U:\346\311&:\203\340[:\365\035\3357\005\030~\271\344\032\311\2719\234<9\333;M\271\345\0067\272\356\333;\271\030GD\272\346X\222:\325\236I\272H\030\243\272\300\224\242\270\272\333\306\271\242r\346\272\241vK\272\247\263\232\271\251V\2369\215,T9\314\336\004:bc\2078\\\222\303\2709\360\3629\037!\201\271\205\000\306\271\036:\215:\004\264q\272\242a#\270|\363\3457/\n\213:\320\274e8\251qc\270hp\312\271\021\345P:\ts\2119\034\375>9Xo\235\271[\367\2519\352\2102\272\203\365\207:\243\341\030\271\227\236\310\271kD\t\266\313*\211:\177\276\227\270\031\320\0008\255<\216\264\330\032\332:A\354[\272g\030\0179\300\005,:\252\311\205\270\310\253_:c\345\0169\270\315N\272u\234\n\272<\363\353\271X\203}\272\265\356\177:or\2729\214\360G5{\0251:\006\267\30688\273\200\272o?\206\270\377\235\2627\247x\216:\177\354a\271U\'#\272\274\364\225\271\326 ~\272\004\224\2639Z\3075:U\031A\272\323o\217\272\030\243\0348(.\0229rBM9C\204H9\033d\207:\023\226\016:d\354\350\271\377\001$\271\354<\375\271\033\357#\271\341\242\235:P\215~:\035\345o\272\332\316U96\235\202:)\211\026:\237\324\2539\236/\3459\310n\2147\233F\222\272\346\002s\270\223\036\035\272\306\013.9\352i\357\271\366Zg\265R\321d\271\226b\356:\360Vk\272\352\001\222:\320\326(\272\342\034R:h\316H\270rq\271\270\327\247\307\271\300(\327\271\273\206\217:6\'\3415\023\314\010\272\244\033(\272c\273x\270\317-\362\270\233=\202\271\335d\243\271\324g>:\336\020::\'\275Q\272=o<\271\375\317\2739\247]\203\272\272x5\272\333\360\2649J\363_\272\275\214j80\274\2019\010\365D\271\342\254\2079D\302>:\350\332\031:\222#U:N\260$\272\256\356\235\271}\027\\:\326\031\304\271\331\252\241\272/\346\310\271\006\327\253\271s\360\3059\302\322\002\272D\037 9\373\225\001\272K\304\027:\254\330\2578~N%\272\351\010\3079+\2565\272\331\245\013:\266\343\277:z\373\3419\236\257\204\272\322\343B:Es\205\272\025\310\024\272S\260\033\272\251b\032\272\314L\2039g-\307::[\222\272ll\3179G\320=\272\024\r\3179\0308\030\270\301\\f\272m\023y8f\362\342\271\236F\216\270\006T\t:\"A\2379\'\316\3049\347\'\2759\240\230\214:\313r\231\271x\263s\271\353\325\035\271\250\r\2729\255\266\310\272{2t\271&\324\334\270\220h\334\270\212\016+:\252\336\264\270f\014{:)~\004:\023\273\3379$\255\037\272%jy97\374\361\271p@&:\255\267\025\272\0051n\270\376\344\337:\351V\031:\030\315)\272c\365\025\272m\201\":\210\251\326\271\251\377v\270\3123)\271@\321\2309\020\266\361\271i\326\334\271V\360\2139\326Y\0139\226\310\021\272\351\252\333\271\232j\004\272\370\177?:\310\275\266\270\205\361\n:\335\354\204\271\224\333\2059\343\325$\271\342}d:\362\276T\272\322\177\3549/\322d:-\372\0369\330\344*:\0373\203\272\020u$:E0\2419\033\364\220:\311\350f\270\023\177F\272T\200\010\272\330\214\205\272|\370\226\271VQU\271p\235\254\272\024S\225\271\273\224\253\272\217A0\272\347m]97\216y9\246s\246:\010\242\3719\020\346\2759ZN\241\272\250u\324\270t\257!:\006B\007:\251\351#\272R$j:\312\277\3238\357J\307\271\315T\3179\354mc\271g\025\2129\3623\r\271\357\214T8\326\324[\271\254\334r:\254\274\0139(\206\231:[\371\320\271\017\207\216:G<\021:q\020\217:\2133\275\267zx\243\271\266&\251\271\302!\3359\2779\017\272\214\007L:\020S\005\272\340\245\317\271\354s\215\272\207\035$\272f\010z\272\351\344\344\271\215\320\221\272\3036\0057\300a\211\272!\323!:\'\211\2419\212\022N8i7\267\272\316\362s:\233\302\0019\265 D\271\206\260e9\2005\321\271^l5\272\010\311T\272u,\000\272\222\253\302\271\246\n\322\272]\3611\270\324-L\271\203=\2049\031\266\245\272\212\265\226\267x\303\200\272\3625\241\271\005\322]\271}H\0179S\321#\271\263]\n\271\236\300\034\272k\346m\272\032\242\365\270\310\2410\272\316go:\324\002\241\270Hs\005\270,\232+:\21579:\004\305\2509%]\027\272-\327\0249\304\353\0166g|y\271\270\322\201\272\307\221\231\271<\370}\271L+\023:\216\3458\27167\3609Q\374\365\271\317&\3409\32352\272\321+\211\272U\235\2369\306r\032:\177!\212:\353._:\001\024\225\272\317?\006\272J\377\245\272^.\3539\002\220\215\271\201\023v8I\204l\2702]\3376Q\336)\272\322\274\'9`\303\020\272(-\034\272>!\263\272\001i\275\270d\030\3059.S3\272\004\336\002\272\252{T:\224\031o9\007\262\274\272j\3322:\\B\315\271\276\016\242\271o\322o9\204\267\265\272\376\237\\\272h\370\3249a\226\202\271\361\357\2537}p\2269w\321\2259\0063\2169>\363P\2725q\2728D\007\3229\014\345\322\271\004\245\r:0Y<\267\356}\033\272\010i\003\272(\257\307:\247\032\340\270DF\277\271\361\255\2309^\025\303\2710\304\217\270\372\017\027\271\207ap\272cX1:.\243$:\240\342~\272\323\013\2239\327\277_:r\360\t:\260`\\\272\"\247\216\272Y\301O\271\356\343\267:}\331!:7\021\242\271X\032\000\272\304\247\216:\263\006_\272\363>\2039\207\307\2739\307\347\306\270\333=2\272\201\276\360\271N\355\3626K\223U\272mkj9\270!\223\272\323`\033\271\020g \271\320&t\271\314\326<\272\tq\217\266\274k,\272\306\010):\377z\031:\332{\0329\207\217\206\272\271\220\233:G\037\2749G\026k\272M\201W9\264\372\353\271\334\230\351\271\2654\014\272\"\000\261\271(\375\307\266\"H\':\331V\020\272K\326!\2700\r\321\271\345\341m:w\365\3367ci\202:\277\202\3469\214$\252\271\035\302\330\271V\001\310\270\034\226\253:/\2769:J\200\332:\020\342\2418\224X\0209Wv\250:\336p\004:\033MO\272\337\201J:lj\026\272d\273\n9\006\200D9\020\225\216\2704\331\n\272z))\272\316t\026\270\032\325\301\271\331\005\352\270\220\270\202\271j\037@9\"2\214:\375wD:\230\004\0269\230s\254\271>Q\036:\265\006\3348\331@\r\2705q\232\271\242O]9\007\010q9d\302\241\272\324s\3329\303\272j9\300\214\315\270I(\311:\211\221#9\236\220\2429\277I\251:\223\300\240\271\374\325>\271\354\356\2659p N9oB\2567\337\254\346\271\212\240\207\271\210=;\272\323u\2409\206\362\3348f\221O\271\\V\376\271\225l\214\271,y\204\272+\262\216:\357\305\023:Y\202\2339\316\2440\271\020\013\362\270\375U\3249|Vv:*{\323\271f\031p:\256}C:Y\240t:)8=\271\306\027\225:\265\352\035\2671\372\251\272\241\242\221\272q\320&:\203\004\017\271\350j\n:\350\263\215:\236Lb:\352\325\260:\216=\r:\217\206\236\271r;\007\272\263\301 9\036J\2538\006\372\353\271\365F\020:\232\234\t;\303\331\031:\217\000X\272\3236\2439;Ce9kl\222\272\362\246+:\307%%\272\027iJ\272\253@\027\272\376\302\242\271\314\352\023\272d \2348\263\326\331\2718\350n:\017\215\021\272!\223\241\272R$\2069\003\365L\271\216\217\211\271>#\2029\007\026\005:\006-\034\272\226\250O:\212\260,93P\200\272D\263?\272(\320\222\271\257\036X:\253\236h\272Ut!\272R\375\3129o\257:\272\307\241\243\272\367$\3219!~\32782?\212\271\262\333\2239r\r\244:{\377\355\271\020\n\234\272\001\273\034\272*^D\271Z\241\213\272\243\025\241\272*B\227\271\307\025\2267\377CF9\"\037\006:\222rX:5#\027\272\000\361\21684d\2249\273R\272\272\016\314\025:<,\223\271\224LT:5C\377\271\216X\2077\332\347\357\2713*\263\271\201\205e\271\223Y\0059\361\240M\272\217\273\212:\365s\016\267k8\3479\234\t\016\272\030\373T\272p\002\2568\251\361\031\271m\333L9\030r\325\270\274\242\177\272\226}#\267_d\245:\030\330,\272\017s\013\271\257\014\201:\270D/:\"\370F:\r\226)9AS\356\270\335\006D:\352=0\272\021\356\023:\360\201\266\271\226i\2659A\374_:\267\216\217\271\037\034\014\272\301\000;\2722\354S\270\010\3560\271\232\200\2178\246N@:\3335\32398Up\271\347m_9\320\\r\267h\26796\337\320\302:&:&9\222\267\t:\353eV\272\244\226\004\271\007r\033\272\222\003#9\216\334y\271vr,\272O\\\000\272^Uc:N\273\201\271[iw:\r:\230\271\203=\265\271j\336\262\272t]\215\271\001\204\311\267r\336\0229\256d\2039\370\237\200:\377\032\034:e\341\214\272\013\331/\272\263\2372\272e\014O:\006\347\243\271\334\377\305\271\220\343\025\272\234<\355\271\204_\2728#\375\0039,f\204\272Fo\":~\365\240\272\233D\247:\005#-:\226\261\3229\263#6:*5\342\270\307\251\256\272:\305W\272\0142\212\271m>\2649%\010\177\272\304\302S:v\213\214\271\244\332\013\272L\272~\272!.\302\271\327\307\'\272\323\365\"\272M\363 :\240\3369\270\306.\005\270\374|\2719<[\222\271\210K<9\270\003j\271\273\026\267\271e\317\005\271\355P\271\270\315.\356\267\020\303m9\322W\007\272\217\201\3068\377\236[\272\364vN\272\366j\241:\370\261\347\267\221\374y\271\243\330\031\272)x\2218\021\247\210:Rnu\272u\n,\270\036\224\035:\2764\2149\177&%\272\356\352i\272L\367\232\270\345\302\3118\nAH:!\333U9-x\030:D\010\217:\0039\':E\300\3508\257u\315\270j\327\002:d\306H\271\276\362\024\2720\2516:s;\2739\240\205\004\272\"\025\3569*N\374\2711\247\230:\3372S9\220\33429\334\270\010\272j\036\2709\304\003\264\2728\023\3509\240I\2278HE\266\272\233\022\3579\340(\244\271\314\037/\272\016\335\3507d\376\216\271\230%\0349r\235\033:1\353.\272\354\027R:\301\216\':\004M\3337\3656\3669\236{B9\252\353\201\272\240\257\1779\350\007\0309\\169\2467d\272\216E\233:w\301E:B*\337\272\260\210\032:\332)\2338\311\341\n9\376\210\354\2710\\\3369\315K/:\235\236\n\272-\3041:(\020\263\271U\305\2128\244\013\357\271y\236\0009:\345\3609\367\203\n\271\302\t\2709\226\301\312\271\373FJ\272T\276\256\271\006l\"9\'\227:\271c\023\36493K\213\271\260\372q\271\200\234\230\272\347\r\2409\200\256\2749\366\253\3137}Ra\271\260\r\236:\370\211u:\341\000k:\036\006\201:\225Z\351\271\2167\010\272\234/\017:\261\014\233:eV\335\271\202\327\315\272(\301!\272(w\3269!v\232:\320\345)9\200Y\003\272:\177\240\272oq\23096\321n\272o\226\001\272WVR:\243y\2149\367\305\233:\341eD9g\340\221\271\321\360O:\255C\3429\2463\214\270\276\323J8\315\374(:U\362:8\013\300S\271\006U\3769\273w\231\272\022P~\272vu\2209\346T\037:\321>\202\272\237\232\245\272\035\200\212:=\274\335\272\020\246}\272 \237\3379)\373\0278\350\322\'\272\356\361Q:\017OI8\207<\333\271\0304\2019\357\366\1778e\016\346\270P\025\206:BB\2119\237\270\213\272\371\211\236\271\315\037\3779s\033\031\2723\006\232:\323C\3577\322\273\217\271\036$\213:\035\216\002\273\345)\031\272UZ\3308*\314\022\272\235\035\n:$\204U\272\024\225?9\321\324\2169\335\000\2038\026\001\225:Q\032\302\271>\027\034\271\343\201\2629\303/\2478\"\221\241\272\267\265\0078\263$\227\267\242[\01383\013\002\272\017\232\2779,\033o\270\037\221\232:G\244\376\271\321\010\207\271\273\316\2608}\033\204\272EP\212\272-q\236\271\260\247\226:\\\023\270\270gHP\271}\014$\272b\244?:T\020\024\272\270\037::\214\250\2609d\202\n\271\202\004\215\272\200)\"\271\254\223g9D\034\353\271{D\247\271\256z\210\272\345\311>\272d-g: \027u\271L&\2048B@\206\271\356\251\02499\367t\271DEF\272L]\3008L\372%\272\377++:p\036\364\272\202\267V\272\002\364\221\272\233\025y9\332b\3279\031\225\270\271o\370\030\271^k7\271\241+\2229\355\356\227:|A~\271W\n\245\272\026f^:\277\017!\271J\347\001\272\325\336U:\014\3077:\212\375c:Y|}\267\374\003B\272n\233\215:\217v\020\272\035\212\222:\371\351\210\272h~@9\206\00797\037_>\271\333A\236\270j-\3618=\233x\272\277$\n\271a\022\252:\025\360\030:r\333\222:\377\034:\272\034[5\272\264\013Q9\327\026\2769&\300X\271\305\230\355\271\323a\3329\002\004\36297\022a\272\307S\005\272\342N\3219[,9\272E\274\272\271W\035\206\272P{\224\272\207\264\254\271\300V\2619j6\2709\261\241\277\270\351\271\3358b}\0079\000\344\3678\221k\331\271\002\347\0219\344\341\235\271\263\343\001\272)\204\234\271\251}\t:\225\252\202\266N\255\376\271\014tW\270,#\024\271[A\273\2719i\204\270v\302\027:5D\034\272\221B\030\271O@\036\272\333\0103\271\333\003\237:\0004\2758\225\214\237\272}T\2078\345\264v\272\201D\0069\311\232\2579\236<W:\276\230\001\272P\021\026:\232\223\330\271\226\02309\224+\206\266\312\240\234\272\321\002\300:\364\3607\272\376v!\2719\031\310:\275\320\325\271\272\037,\271\367\234%8\226b\246\2724c\3319\277\206\0338\220+\2379:Rs9(\022\036\272l\010\3709\331\222\3029.0\007\272l\221\252\271A\t(\272h\264S\272\276\244\267\271\373\207\267\271|\013O:\017\032\002:mK\014\272\341\223C:a0\3679h\377C:\224s\263\272\376O\2439\332w\201\271\207\035C:\240|\201:xn\004\2722*\210\272\301\311\210\2712\0251\2723\350j\272\271O>:dZ-8\267\213\206\272\276\240g\271\375\241\351\272\354\253\243\272\274\237U:\242MJ\270d\23469a\210\333\271\314\301D9\370Y&\267\2408\':\236\"*\271Y\250e9\2247\322\271\262\2659:\027\205$\266\3401\025:\367\242O9,lS:nD\211\272\253%\2068\204t\3629\330\2065\272K\272\326\270\376\204\347\271Z\000|\271i\344\205:\000\330\1777\370\376\2609H\226\0249\303\202\2069O@\240\271e\304N9\031\322\323\272\206\031\3029\223\20449\253\01418Z\007\212\272\360\032\017:\307\312\036:@Ai\271:\031z\263\333\367\242:\233\346\034:\300\035P:.\207=:-\034&:\254\257%\272\241\026C9\352%\001:Sw\2438)\336Y\271\211i\030\272bc\362:\274\317m:#\002\016:^1/\271\337k@\267\010t\212:\331%\035\272\005{\341\271ej\235\272\"\320\364\271\3423\212\270\221`m\271\336:\371:\326\330\202:\240j_\271H%\2107\250\027\033:\t\274\2169\225\224\221:\375\301\023:\264\023\027\272I\333\242\270\3363C9*\344\2519d\'\333\272B\331\327:\320\370R\271\024B6:uB\304\271h\341\3718\336G\3359\255kU\271\312\235(\272)\210<9\341\003\255\271a&\245\271\027\355\363\271V\225\2359\257[\2549\020[r9\\\003_\272\265\201\2469AV\344\270\376\024S\272\001\206\232:d\004A9k,\020:\020\252\037:\334\251\032:\347 \2068\243\266\270\272\202\010\000\272;\032O:^\201\201\272\202\323\323\270\276\345\2559\2259>\270\"\242\026:\204\213,\272\332\"\276\2715\036\2529\244\252\276\272[\326\221\272<\377#8Z\207\2549\325\355U\272D:8\272h\201j\270\032\030H\270\"|\2479s\262?\272\251\270\001\272P-\335\271#\002\334\271\277\214\205:cvu\2716R\227:\365V\2069@\206\201:\2609\021\272\203\201\2169-\2470:\010*$\272G\211\2429]\246\'\266|\371\2658v>\207\2713\202\2349\244d\021:\317\"\3569m1n\272)h\2019\216wK\2715\031\355\271\312\003b:\356\377\032\271\0330\013\271A\201\316:`\000\0059\024A\3069\331\307\207:\353,h\271Fl\017:\021\210[9}1!:\332=\325\271\354\205Q9\0251\2579\202\267\203:u\322\2469\"*\020:\262\227v\271\311\200\022\272|\025~\271\'D%:\371p\312\271\276\310\t\272r=\212:i\305\0319\377no9\2073\177\272H\026#:/>\222\272\275\201i\272\225\035x9\252\030m8\266:=\272\3657j:N\356\007\272\372_\031:\230m\3328xP\020\271\237\\\233\272T\036\3049\353\321\256\266M\243\246\272\021\374\023\272>kk:\030\340\037: \020H:s.\201\272\370CJ9\251l\201\271\007\317E\271\301c\021\272\252\212\3419\377\262k\270\326\001\305\271{\224+:\232\346L\272\002\275\033\272\264#X\271\353X\243:\303PY:\262m\256:\214\340\3729p\242\362\272a\026\022:\023\267\001:CT\3669\236\344\007\272+\212^9\007.r8m*;\270\333\256\n8+\252\3269\300?\023:\243@\232\272\332\323X:\274\315\2208Y\233\032:sx\2449\276\233\225:\311\032N\271\005:\325\271\253\370x\271\244\330\030\272\023\324\23199Q\2408<\236\033:\364(\211\271\020/\3269`\003M:\357\020\3749\225009_\355,\271F\376\322\271\275\260\236\272@\227\2749\353\026\213\271\013\265\025\270~\344~\271\352\000R:N\325\177:f\0300:I\271x\272{\371<:\322V\205\270u\027\3629;6\0139\327~\372\270\244\037\023\272\300\232f\270\215\313\3649\201\347\3019l\013\201:D\014\r\271t\314\3169&!9\270\244<q\271d5\035:\270e\253\272\010*\24790&\0218\210\225\0139\235\017\2118\3228\2249:*N\272S\023\212\272\244\222j\271\3154\234\270\244\216\017:\000\245i\271#\272\326\271\353\313\r\272\210^\001\271\354\231;\272C\245\202\270\275 }\272\241\037b\272\374\316}7{0\265\272\230\304h\271\256\274`\272E\364\022:\360(\211:)yD9\323R\3069|\03437\226T\234\2703\317\037:,\231\214\270!\357\"\271\261x\270\272\206\3006\271<\365\362\266\364D\202\272I\321_:\217\211\336\271D\255\"\270\3319\324\270\321\007\221:\034pQ\271\243\277:\272\263\246\200\272\033\026j\270cj\004:\321\276\250:\320\020i\272\257\263\267\270\346\304\205:p;\375\271 &\201\272dh\3219t\026\370\271`\210B:\333\327\237:t\016\006:i\264\0319\331\t\235\272Q\003\036:a\334@\2716->9\312H\313\271\030\272\\9\224d\37592Y\215\271\177j\007:\240\020\2479P\3230:\357\247s7h\027\244:\355\370\212\271\277(/9\326\001\224\272\364\326d9\345g\215\271)\016p\272&\272\267\271e\362\034:\326\3145:\304\363,\271E\377\330\271\217\224&\272k[\335\270\226&\345\272dw\033\270\315<\032\272i\022\264\270\220p}\271\233=\355\2717o`9\013^\3159\024\326V9RJ\024\272\301\314\234\270\030\".\271\211y\372\271\311\3245\272\230\276\324\271\260\322\344\271\321F{\271\270Ue9\204\"\340\272\320\247\270:\\\260\3349\026\000u:\2705\217\271\032y\344\271\236\304\210\272+\231/:K\225I\272@\351\3578\335\360n\271\314d`8\214 :\272i\263G\272Aq$:\324\360\3309\371yf\271G\216\216\271\212\304\3109\226\255\0109\277\217\n\272\226\023\2768\320\321\2519\272\211c\272.\324\230\271V-\340\271\307\362\026:\362\325\256\271^Z\375\270\030D\2638\024\033\210\272u|}9\255Fx\270\303?\003\271v\027+:.\257\3358\307\264l8x[j:d5>\271\364\311\0269$\277e9/Yf\272-Y\1779\204t\0139\345,\024:\356\305\0019\177\265\2439\345\021\222:k\246;\272h\311\2139\"s\206\272\346}\0039\010\276/:\242VD:\271\200\2119\304+\2629\301\023\016\2714/\223\272\243n\212:>\203\234::\374*\271\346\355\017\272B\263t\272X&\271\271\260\363\303\271\221c\2109{72\272\367R\3739\326\211\335\272\315\236\315\271\245T\020\270\343D\0149rW*8\351+\214:\253_\3239\240\\6\272\357I\2129\253YE\271u\371G:^6G\272F\327\362\271\252.\021\272\222\202\265\272\000\206Y\2725\204\2269\005\005\252\271KiY\272w_X\270\344\353?:$W\177\272\221d\244\272\237\376\3579LCn\271\013IV\272\003\027/\272\355{\21186\322\316\271\261\007\033\272]\221\177\272g\240V:\001+\231\272\037#Q\272\361\033V8\230\024d\271\003\210\364\271\320\025-\272\211\002\007\272\326m\246\270\367\220\273\272\336bS\2727\375\2769\270W_:\370\240\314\266LEV\272\307\250\370\271\037Q\014\272s>\0237]Pj9\034\310\031:\371{\n8\314K\3729\274\373\204\2724_\226\272\331\324\307:\233\2148\272I\013\230\271\353\233\036:\325O\3779\333\367\254\272NV\3319Z|A\272Q\037N9I\340\3568\027\242\2679\010GX:A\300\n:s\305\2419\362S\000:\231d`\272\357\202H:\247\223\211\272\3502\2179\031pi\272o\234\210\271\273\321\031\272\2638r\272\266\321\267\267hF\3659\336\tj9\013\367!\272\203E\237\270\215Z\002:\217Z\002\272\272\330\226\271\'\021\221:b\331\313\271\212Du\271C\006\000\272\272\021\3068\n\32249\036H\3328\376\365\332\271\274v\024:\363\334t\271A\004k9\321\307H\272\353\340;:\024\320l\271)\02658Dz?91a\3639\274&\035:\003\032\314:\220\215\300\270gp\\9{\'\2549\276U\230:\177z?:7<\263\271\377\274\2519\0020\276\267\210N#:^\233l\271\243\332B\271\306\327\2449f\333\314\271\342\376\344:\362 S:\375\355\005\271\001\247\222\272\341\321\3769\\I\352\270\036B\033:/V>\271\205[`\272\212\343\2549\252\300\221\272\361\332\016\272\257\304\216\272\020\034\0139\311|\256\271\367\214`\272\211h\005\272Bq-:\374Y\337\270h\22299o\207\001:\202`\023:\331\266_\271[\266\2739p\223\342\270\001\264\2179\330\326X:\267\350\373\271\361\206.\271](\024\272\032\221\\:\020\335l:Dj]\271K\300\213\271\177\376\215\272\371b\026:\016\344\324\270\033\3607\272@\033\253\271O\361$:\311\217\3758\213\205\200\272z\330\000\272\303\234y:\2671\2119r~\333:;6\274\272\014\306\035:\031\277?\2721j\2119CtU\272\310\021f9\300\346\2649\330\231\221\271M\370\2117\230\222,7\343\370C\272X\205?\270y\016\203:|\246Q:\302O<\270\227\330B8\023\033\211:eA\212\271\254\313n\270\020D\247:@Q\204:\200\231\3718`.i\270U\250\2259Z?-\272&\366m:\324\004\340\271\034\232A\271\004\360\\\271R\234`\272W\224\335:\240\242q\272P<\300\271\263\217\247\272\032j<\272\366u\3749\257\201\2129\352\233\323\271n\313\013\272E:\325\271\271\253e\271\355\345\003\272\225\313\250\271@Qc\272\355\365\215:|f\213\271\272m\3139C\020\317\271{\242D:\202\361V\272K\000\205:N\376\222:\350\336\330\271\370\345A:VZc8O\265\n8\300\214\367\271\t\226\223\271\346\316\245\272\023\034\225\271\221\273\016:\220\250\023\272\016+n:l\303\204:\230\310\2759\326\245c:n\256A\271\301\367\272\272K%S\270}G\3139\361<\010\273\266x\3038x1a9\245d>\272\361\230\007\272\032\304\2539\220\325\353\271?\2353\271\025\247\033:^hk9\273\001\350\270\276I\223\272\254^\267\271E\351~\270\366p\3238\001\320\364\270\244Y\021:\223rv9+\035\236\270\364^\272\272\217}\365\265p\255E9\313\214\002\271\240\252\001\272\212\322\2359\275\276g\271b\354\340\267\027\027\2169\013\260\0219\244\352\200\272[\355\3158\216\230\304\271\377\310\006\272D\303\37092\323\2448\031\266\024:\2340\204\271\232\242:\271\342-Z\272]L\2629\034\"(\272\344\227\252\271\205\232\3339\'\233\3338\214\335\031:^>\3379.\21109\250\337\2418\241D\234\272\235O\2569h\031g:\353\357\0309\334\363\363\271H\356\006:\311R\002:\347N\321\271\020U\3439\234\214\2569\275\021Q9\313t*\272 \351\331\271t\313R:\"s@:\231\"\023\271\322\325K:b\221\306\271\215\351\3719\031\376\2049a\223*:\303\237\231\272c(\340\271c\023\3619R\247\032\270e|\213:\355\325\022\272<d\2479\r\3662\271\325\202\3149\001\327\r\271,\301\247:N\277\346\271\264\275 \271\337\213v\270XB\374\271\257\006\2209i\316\211\271,\261Z\271m\302\305:\232x\013\272\337\310\'\272\316\372\000\271\372\214\200\270e\031\2779\177\200\':\r\361\030\267*\022\2148\221-+\272\261C\220:Jd08\321\360\206:\342-F:?\225\025\272\234L~\272SP\313\271M\203J:\354S5\272M\335:9\\\264\234\272\2368P:\246\303\3569\007\030\n:\337\325\2249=M+9q\374{\270$\266b:\265\201\215:\346\251\3119\220\315$\272\374~\2059t\301#:M\362\226\272,um:9s8\272229\272A\315O\272x\334\241\271Hu\257\267wJ\3279\351\336\2628\337\312\3679\314\3574\272yo{:t\254\2129}]\2239~\264\270:g2\355\271\027~\2759\271\241\2379\255\265\347\271\024//9\233\n\214\272\327\201\375\271U{\006:\351h\3279CV\3768$\017{:\230~\251:\023)\300\267\344\326V:\340(m9G0^9\347\264l9\002\241\002\270\255\377\251:~\343\005:TW\r\2724q\3048\267\343\005\272h\360\217:\025\204\020\272I\253\3157u\n\243:\250\2526\271\210\'\n:\336xn9\346 \214\270Z:\020\267\317\376\023\272\353$\034\271\235*\2077\377\326\265\271\002\201\t\272\241#\265\271\331/T8\203\235H:l\021\3648\321\326\17797\034\267\270\352+|\271\023\262\375\271\311!\203\270k\"\233\271c\tr\270v\000\276:+\273:\272Z\320@:\274##\271\227o\2506j\013H\272e\317\2019\206\2563:\037\257\3556\003\217\205\272\365\212C\272K\332\206\271sy-:\200N\253:-Jd\272\272\016\3338\234I\2739\3118\246:\255`v9\265\274\2149ls\002:\213\267\276\271\r@\007\272Z\034\226\272}\362\230\271\246)\213\270\210r\326\271\206\031\2648^\334/:(8k8\347H\276\271\354+\2369\211\336T\272\212\277\n:\"\241\031\2727s\007:\247\022\3028r+\244\272T`\014:\024\0031\271\263f\013\271\344\236\2628\207\035\013:\n\265\021\272M\235\326:\222\n\363\271\215\023\2709)\312\317\271\226\254\243\272\346<\2179H+\340\271\033\234\2329\244\315\311\267m\267\344\271\220\321<7\334\241\202:\177R\365\271\346\322\037\271\240\007s:\376\017\350\271%\321$9B\266\323:\270O\3079\333\221\020\271\227\201g:\353\344]\2724\013\3339\324\266\246:\207c\177:\021\263\376:s^r\271\211\261.\271\362\276\202:\367x{\272N\274#:\362\227\277\272\021{\024;Q\316\010\272(l\203\272W!o\272\362\251\204\272R\302\324:\260\372!\272\226\014C:\267\374\3648s+\3179\353\027E\272\024`\3268\355\270\3738b>\241\270%\006\0359~\262\303\271BQ(:#|l\270\265\0178\272\201\t\0337B|\314\271<\037|\272\377L(\272b\022\200\272u;A:\315`k:\205\214\3529uXr\272\036f\271\270k\240\307\271\030\326\2179R+\207:.\307\372\270\224\005\241:E\366\230\271|{\030\272\263\326\3719\362b:\271\350\213Z\272^&\3407q\211\307\271\211\243\2109\350\366\217:J\233\376\271\031\320@\271\271\200w:\002%\3378X\315::\302\0102\272x\264\316\270\224\031>\272Y\306\360\270\005X\273:liT\272-\366\243\271D\244\205\271\030\315\256\2717,\243:\304\321\3438m\220\002\272\007LH9\253\344U9Q\024\0309\256\234\1779\360[G\272\036\260\307\271\036\225\220:\223_\327\271\257\323\242\271\377Y\250\2673\302\224\271\211\030\033:\027x1\272[D\235:[\2368:\re\2179\306\373\250\272\301;\210:\205y36\201\033F\272\266r\320\272f&\0109\2260N:\250-59\225\230\006\271\017\237J:\016rM\272\365\347\252\272\317P0\272\370!&9gR?\272\214\252\340\271\2435\3679\272\010j:\236\223\243\272 \264\204:\335t\t\271\014=\207:`e\2079\235\306\2139\302\336\022:\215z3\271\335\215j\272\222\267~\272X\352\2148\233\207#:\205.\220\271\327)\2449~\010\2359\302\232\3448\212\247\272\271\024\006o8\207\330G:B\316\2137M\336v\272\225w{:\t\313Y:\034-\3658~Pq\270\372\331\360\267\322k4:\232{\274\267\335\253;\272\270\317\0229\254\275\332\270GR\013:\276\001]\272\362,\203\271\226@\216\271\345\222M9\225XQ\272@F\2479\305\236\216\267\225$\2479\303g@:|\212\0069\227\363\034\272\035\357B\272\261J\317\271}\177\2449,\2562\272k~!9T\215\177:\242\316x9\342#\0079\231C\"\271D\356D8\235\275\330\271#\020%\272\300U/\272\221\017\034\272\333\237\203\270Z!R\272\244u\2779\020\261\0239\200\354\3779\327\275N9b\200\225\271\237\237\34691\315\2218u6\36391T\2359\300u\016:\270Bz:>\310\213:\'\017\2149\227\027\032\270\024\004\2029\034S\034:J\263\"\2677W;:\310L\030\271t\025\203\272!\374\356\270\214\030\3309\341*\201:eHN:\'\3311\272\263\034\3619\002`^\2727\nw9ZB\030\272}g\254\271\017\331\016\271\032\312\024\271K\335A:\226\203+\272?at\271\315Ua:x\307\2159\330H :B\024T:\021\035\034\272\354\024]\271\021\320\327\271\261C:\271\021m\202\271\204\036\272\271\010\273/\272zV)\272\255\375t\271\205\036D8J\003(\272\317\215D\272n\002\350\270\240>f\271\346\252\250\270\027g\031:\225\0255\272\355D\\:\250I*\272\353\364\023\272\314\037\3279^\273\351\270\226zI:\001\203\257\272\2216\016\272\221\222\013\272t\030\317\270\243O\202\271\325\216\3569/\357D\272\370\347)\271C\'\2378\332\276\030:\021\207h:e\370\2127\217.\2209\337\206\"9\002\210\2139\033&\3228\361\256\1779\300\024\245\272\256\332\2619\263\r\002:*\245a\272H\227[:H\360\252:JS\207\272\264)\200\272\331\017\200:bk\240\271<\232\255\271\240\330*:\220\'\007\272Q5\002:d\215G:\330\267\245\272\343|\':;7\210\272\333\215\2119H\001f:\'\"\266\271[N\204\2723Ol9Uz\3358S\265\356\270\2727\014\272$pK\270P\342O\272\262Ba\272|\274\006\272\241un9\222P\214:\330\245\2569\363)\337\271\352\2242:\220P\271\270\221h\305:~@\263\270\266/\033:E\340::\352+\3069\037\203\':E\367\324\272\027UT:\005\370\003:\341\016\256\271\215\032\235\270\371@\314\271\206z\004\272\033\207\035:\315\250\022\271\320\225\2219\357\367$\272;\376\302\271\227\343E8\305\234-:\374\370\223:,\234j9]\371\2119e0\261\2703\332D\272^\000n\272\335\351D:\216\002(9L\002 :\332\332\314\270%\302\033\271\253\365\2059)\300\3767\366-;\272C\010@\271\005\323<:\"q\332\271T\371\221\2716G4:i\324\010\272\306<M\271\351l$8F\027\005\271\033\245\3509\344\255\327:M\317|:G\003\3069\360\262\251\272z\334\274\271c\263$\272\177\256I9\332\367\030\271B\025\032:*\371\3319M\353\267:V\364\2029I\226\023\271e\001\3008*b\3749\020\315n\271\215\243\025\272\201t\233\272\" \025\272\350J{:\303\240\036:\332vW\272\366z|\272\036\014\016:\217\312m\271Cf\014:\364L\3219\337\325\3779g\266J:+\020\256:\375\341\2706+\202\023\272\371\364\n\272IyV8`\020\004\272\3520\214:P\332\2159\243\204\004\272\325\r&\271\242\356\034:as\014\272\337\321\260\270\376Q\2239\225\314J:@\251\2269$\243\021\270\237t\313\271\250`39G\326\241\271u\210\2129\245\024>:\246\341W\271\316\020\3109\255\217\270:iU!\272\342h\2408\360\017 \271\265\300\177:\265\33708\010}\335\271\246\271\t\271\377\317W:\351\345\3319{\245\345\270$\342\2018\226v%\271N\303C\272\323\315i\272g\323A:W\211S:\3063\213\272\013(\233\271\340]\203:H?\027:v\31699\314\374<\272=\365F\272\037S\201\272\375L\':q;\3479\314\354\214:6\363\307\271\206\254K\272\333\277\3359!\231v\272\223\302\211:\014[8\272\325\370@9&\301\321\270\377\351~:\306\r\220\272*\214\223:\301\206\203\272\212V\223\270\321\243\252\271\022\034T:Cbs:\234\361V9\340\010x9\317\331\035\272\000t\"9\2262\230\271\025\340\216:\361\010\013:\314)C\272S\310\235\271z\251\241:\266\034\264\271\270\277\2169\347 \367\270[b\355\271\246\362\2209;Q\3279C\004\023\272B\267\254\272\371\347A\272\375D\241\272\3750\2259\032G\3509\267\316\0039\325\245H\272D\374\345\271%q\372\271+\257\3759T\335\232\271C\352\2059\224\025\244\271c\306\005\272\255\250\2409t\264\254\271\332.\363\271\022\302\224\272=\346\000\271Wm\003\270\300f!9H\310w\272\217\274\2468Lw\3549p\247z9\202\364\245\272\2370#\272L\251\366\271\350\217\3619\261l\3249\267\345\021:\270X\204\271\245i \272A\363\006:v\377\217:O\r\232:6\260\231\271\265\201C\272@\334\014\272\"\343\031:_n\r\272\373/U\271\274,d\272$\272\035\272.IF\2713\217G\271s8\034:\206B\021:\336\345.9T#\211:4\3518\271?\2213\272*\271\227:\242\005\254\271/\255B9\264\247\316\271\035\376\000\2725\222\230\2717\374\206\271M\333C\271\332fc\271F\252\235\272\307i\3539>a\230:J.G8\233:7:T\001\241:\355\263\222:\331\242\025\272\002:\021:\nT\0357\225.\3678Q\007\2328\254\343\3429\240\317)\272?\234\034\272\360]M\271c\035\367\270\255\025_\272\347~(9\'\204g\272\307\253\022\272\225\244\002:c\266\026\272\2423\273\270\343k\2229\354{[7\222n>:\277#Y\2727\215\0028g\263]\271\357\236G:Oa!:\345\257\351\271\033\017\2569\353\322\204\271`\277\264\270Re\032\271\212A\263\270\340\017/\272\221\215\034:\217\202\2418oK\232\267S.Z96\234\2019pS\2259\211i\233\272\234A\244:9\221\3779$\362B:\267#\3038\347\302\3179H\324\2269\353WM\267H(\017:\314\275\3549#\244\003:\\!\030:\242~I:\376\013\033\272>\271\004\272L\030c9L\311[\271\271\276P:\377\253u9\303KA\2729\200\3519l\036P\272\347&\3569Mr\263\271\317\177\331\271!\304\256\272\240\375\3319m\004\2269\033\343\224:*\265\2358\'\"\2449X\241\257\272\212\240\3178\250\345\007:\347\301\213\272!\311\\:\3107\3139V\277\353\271\336\016\3377\207\t\20598\273\2739\357\276<:\336m \272QV}\271/kH\272G\270O\272\311\2478:\252^\017\271\'\037#\271\372w\033:#r(98\365\257\271\236\233\302:.\r\3129|\021\2539X\022$9\200\025Z7\331Ff\272#F\342\270\234\267n:w\326\320:nE\214:K\346\0229(q\370\270\303\320\243\272\302\320;9uC\3509&r\202\271\202\315\323\271\325\034\220:\317\000\3267Z\234\205\272\324\210P:-b.:\361\264#\271in\227\271&\253\032\272\363!\205\271\214>.9k\002s:\010\033#\270\302\205{\272\320\326.:j\004\220\267\002\27199$\200\201\271/\270)8\230\2135:\355\355\210\271\210m;9\3019\232\2729\212\213:}/\t\270x,\353\271p&[\272\n\304\233\271\2035\356\271\013\034\3119\304$u9\225\311\031:\343e&:\243\270)\270\n}\231\271"
      }
    }
  }
}
node {
  name: "global/pc_dense//w"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//w/Assign"
  op: "Assign"
  input: "global/pc_dense//w"
  input: "global/pc_dense//w/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//w/read"
  op: "Identity"
  input: "global/pc_dense//w"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_dense//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_dense//b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//b/Assign"
  op: "Assign"
  input: "global/pc_dense//b"
  input: "global/pc_dense//b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//b/read"
  op: "Identity"
  input: "global/pc_dense//b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_4"
  op: "MatMul"
  input: "global/Reshape_8"
  input: "global/pc_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_4"
  op: "Add"
  input: "global/MatMul_4"
  input: "global/pc_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_8"
  op: "Elu"
  input: "global/add_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_10/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\006\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/Reshape_10"
  op: "Reshape"
  input: "global/Elu_8"
  input: "global/Reshape_10/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/Shape"
  op: "Shape"
  input: "global/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/pc_advantage/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/pc_advantage/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_advantage/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_advantage/strided_slice"
  op: "StridedSlice"
  input: "global/pc_advantage/Shape"
  input: "global/pc_advantage/strided_slice/stack"
  input: "global/pc_advantage/strided_slice/stack_1"
  input: "global/pc_advantage/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/pc_advantage/stack/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "global/pc_advantage/stack/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_advantage/stack/3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "global/pc_advantage/stack"
  op: "Pack"
  input: "global/pc_advantage/strided_slice"
  input: "global/pc_advantage/stack/1"
  input: "global/pc_advantage/stack/2"
  input: "global/pc_advantage/stack/3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\004\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20412415266036987
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20412415266036987
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 625
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/max"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/RandomUniform"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Initializer/random_uniform"
  op: "Add"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/mul"
  input: "global/pc_advantage/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_W"
  input: "global/pc_advantage/d_W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_W/read"
  op: "Identity"
  input: "global/pc_advantage/d_W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_b"
  input: "global/pc_advantage/d_b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_b/read"
  op: "Identity"
  input: "global/pc_advantage/d_b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "global/pc_advantage/stack"
  input: "global/pc_advantage/d_W/read"
  input: "global/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/add"
  op: "Add"
  input: "global/pc_advantage/conv2d_transpose"
  input: "global/pc_advantage/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/Shape"
  op: "Shape"
  input: "global/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global/pc_value_fn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_value_fn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_value_fn/strided_slice"
  op: "StridedSlice"
  input: "global/pc_value_fn/Shape"
  input: "global/pc_value_fn/strided_slice/stack"
  input: "global/pc_value_fn/strided_slice/stack_1"
  input: "global/pc_value_fn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "global/pc_value_fn/stack/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "global/pc_value_fn/stack/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_value_fn/stack/3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/pc_value_fn/stack"
  op: "Pack"
  input: "global/pc_value_fn/strided_slice"
  input: "global/pc_value_fn/stack/1"
  input: "global/pc_value_fn/stack/2"
  input: "global/pc_value_fn/stack/3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21320071816444397
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21320071816444397
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 650
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/max"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/RandomUniform"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Initializer/random_uniform"
  op: "Add"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/mul"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_W"
  input: "global/pc_value_fn/d_W/Initializer/random_uniform"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/read"
  op: "Identity"
  input: "global/pc_value_fn/d_W"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_b"
  input: "global/pc_value_fn/d_b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/read"
  op: "Identity"
  input: "global/pc_value_fn/d_b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "global/pc_value_fn/stack"
  input: "global/pc_value_fn/d_W/read"
  input: "global/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/add"
  op: "Add"
  input: "global/pc_value_fn/conv2d_transpose"
  input: "global/pc_value_fn/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/Mean_1/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "global/Mean_1"
  op: "Mean"
  input: "global/pc_advantage/add"
  input: "global/Mean_1/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "global/add_5"
  op: "Add"
  input: "global/pc_value_fn/add"
  input: "global/pc_advantage/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/sub_2"
  op: "Sub"
  input: "global/add_5"
  input: "global/Mean_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/rp_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "global/conv2d_1_2/Conv2D"
  op: "Conv2D"
  input: "global/rp_state_in_external_pl"
  input: "global/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1_2/add"
  op: "Add"
  input: "global/conv2d_1_2/Conv2D"
  input: "global/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_9"
  op: "Elu"
  input: "global/conv2d_1_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2_2/Conv2D"
  op: "Conv2D"
  input: "global/Elu_9"
  input: "global/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2_2/add"
  op: "Add"
  input: "global/conv2d_2_2/Conv2D"
  input: "global/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_10"
  op: "Elu"
  input: "global/conv2d_2_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3_2/Conv2D"
  op: "Conv2D"
  input: "global/Elu_10"
  input: "global/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3_2/add"
  op: "Add"
  input: "global/conv2d_3_2/Conv2D"
  input: "global/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_11"
  op: "Elu"
  input: "global/conv2d_3_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4_2/Conv2D"
  op: "Conv2D"
  input: "global/Elu_11"
  input: "global/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4_2/add"
  op: "Add"
  input: "global/conv2d_4_2/Conv2D"
  input: "global/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_12"
  op: "Elu"
  input: "global/conv2d_4_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/Reshape_11/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "global/Reshape_11/shape"
  op: "Pack"
  input: "global/rp_batch_size"
  input: "global/Reshape_11/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global/Reshape_11"
  op: "Reshape"
  input: "global/Elu_12"
  input: "global/Reshape_11/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/rp_dense//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\345\255\r7\024\014\\8\tn\363\270\"f\2249\250-\3329x\317\003\271e\036\021\272\033&d\272\246Y0:2u{:\206[\007\272k=P:\020\036\245\2718\360X9\226$\r\272:t\235:\326\337]\272\020EN:\347e\207\2726\003b\272\366v\000\272m{\016\267\003\361\302:\010G?\272y\306\3229\216\227q\271\226\231\2669\347=\2329x\032\2509\303~\2217\240\334\232:\001X\211:\006\322=\272b\203\020\272J\344\204\271$\001\032:\333`\2019\334M:\270\r\315T\272\254\311\240\272\350\362\2738)\026*6\'\327\346\270p>\263\271\216\342Y\272K\006\n\271\246\005\37694a\3059W\3740:6OC\272\335\254\323\271U\2234\2728\302\212:\241O\3519\037\373\361\272\331\240*\272\313J\2657\031\216O\272x[\0038\363|\002:\\k\370:K~)\271^m\0148\235\336\243\272B\007\325\271\241\34519\212G\340\271R\'\032\272}\227\274\270\004\222&:G\221E\272\346\335\005:\323\037\251:M\362\260\271n\034S:\340\256`\272\223\251\2029\365\227B\272\310\201\242:=\345\3059\341\235s:(\257l9/D\2139\354\316\':\353\376\314\271\253\013\267\272\236\3658\272k\025\341\271,U\306\272\n\231\2318\000\263\230:\261\315R:\371\201\317:\037\252\201\271T\347\222\272\240\2659\272tc\3479b\272\333\267\263u\235:R\226\3359\376o\030:\312\270\2519\177\352\3279|\034\230\272\274\334\0209\216\360P9\330\226\3537\006\334\204:\312\"\307\272\033k\001\272\313\246\222\271\304\206\027:cj\014:\234\266(:\270D\006\272NR\001\271\304\354\2469\375\317\"9G=\301:\340&\037\272\254\260\0149\2108\267\267\345\360;\272P\005\016\272\002\031\r:\025s\216:F|\233\271\"\257\2369&O\3049f}\262\272fS\025\270\363\275I:;m\\\270wb\313\272\214\275w:\271\377\303:\334\364\000\272\356\230\r\271\2255i:\363\261g\272\375\340\2349l\261e9\301\227\024\271l\263\3639X_h9P6E:A,\035:\030\277\037:\034\'\217\272\366\2335\272U\300\2749\274\201\2349\211n\300:\303\317\032\272l\000\3609[\252\3749b\276\001:\377M#\273\204\003R\270\213\351\3409\004\331\031\272\240\252M\272\251b\227\272\350\230\315\271\330\324\r:\237\007W\272\221\212\007\271{T\001\272u+\341\272\267@)\272\301x\277\271\325\005\356\271\365v\276\2720w\311\271\r\216\2229\370\375\216\270\301\\m9`\325\305\271\353\346\013\272\2140\227\272(y\3419\253\216b\272\tu\3138\232f\2409\356\306\032\2721\037:\2722\216\317:\264\026.9\021\026\2119o\\\\:\310\303O\271V!\2569\337\033\230\272\277?\t\272-\345\261:\353\224\3148\310\205&\270e@3:\323\354\0359\232\000Z:\001a\034\272\264aH:\353\275\261:\377\014\036\271I\302\226\271\302j\027\272\270Bh\271Qx\203\271\276\226d\271\313R\2149\301\247\001\272\275T\0149\277w\332\270\027\355\3148\242+\237\272\021X\301\267\357\035M\2701=0:\305\2450:\\\314S9D\322(\271\362C\323\271\312\304\312\270\n\035\227:\035\343f\272\324K\3348\354\273\2517\204\355\230\272\237\354r:h\306\2739O\375q\272\020\266Q\2726\360\367\270U\274\n8\t\010\365\271\035\250j9\035Dx:\202\326d\272U\201\3669\231\r\244\272k\265\024\272\3134\377\270\374S\371\271\346\237\215\272#\206N:>\366@\272\2125\3439\004&\2429\342 \3667\274\335\254\270{\322\000:&\307y\272_W\016\272y\224\252\271y\355y\271\304k\017\272\200\214g:o~O8V\330\2269\252$=\271\365\214Z:\363\221\3579d\312\205\272\373\025\271\271&\351_:N4\3579\266\320\203:\022\331\026:&\320\2278q\212n:\303\256\3019o\256G:\2262k\272\225\001\r\272m1h:\314\017\030:Z\244\035:\212\252\203\272\330\265n9[%s\272\036\356\2469WH\273\272\022\3610:\223\364|9#|\225:{!:\272\320\214\200:\266\244I7\261\200\247\271Q\\4\272\355a\0239\264;\333\272\343\23218{\017\312\272\215\016\034\272\300\366\244\271;)\2639<\2471:\272\277X\272f\243.8\306\02119\215\356\202\271\321r\007:\317\336]:-x\004:5\330\304\271m\325\0079f\354\254\272A\004c:\007\020(9\'=@\272l\276g\272t\301d\270\365\236a\271`)\376\2723\251O:\033\347\00797<H9\013S\014\272\301b\317\271\366p\207\272\230$\245\271\341\016u:\257\2752\270\0161\2219\320y\220\271\251c\203\272\257\177E\272\361\2273:\272\020H\272\243V\275\270/\372_:|\034I9\213\362\217\272\310\332^916\346\2701\032\203:\264\027Z\272\016\250\220:\213\271\242\270\344\326\3428YD\006\273\330\273J\272\255\013\364\271\343b\214\271X:\0039\215\363\334\271\277\234V:)\364\326\271fC\'\272u3\010\272\211^\216\272\373L69\322+\255\272\230PZ8\304\322i\271h\017\217\271K\233\205\271O\264H:\345\342\004;m\323\262\272\333\254\317:\201\312\013\2725\220{9g\234\021\271\317i6\272@\256\003:\360R28\365\340\374\267\300\331\032\272\365\314\305\271\214\254\235\271\345x\"\270e\323\261\271\023\350\232:\021>\327\272\365\352\3628Fn\304\267G\226\3378\037\"\022;\300S\3428\033uu\272(\215\273\272$_\253:\017X\335\271\2156+\272\306M\342\270\344c\035\272^\372\2017\224\266\3149\304K\3139\303A\265:\213\351\353\270\310\273\013:\250\317\3779\330\352T\272\005\237l:!\021*\272z\334\'\272D\240y:\301\210\3079\026\352\332\271\305\007\233:RJ9::\221\004\272\266\007n:\325o\206:\341#\2619\375\224h\272\354\246\2449I\363\204\272\332\354(:\025\212\205:\361\2312\272^\004c:-\234\366\272\020}\032\272:\331\205\272\275\022\265\270\217\332\365\270\\\300s\271Zd|:\332>\3238u\240\215:\366\337\255\271\030J\t\271\306\243o9%zJ:z\362m9p\210\215:o\257\3569~/\262\271Dl\265\272R:\006\270=\023\301:\241R\2409\2047H9\335\352P\272\311\315\007\272O\253\013\2721\306\300\271\256z\256\271S*\003\272\210\303!\267\236^b\267T|g\272|\366\233\272\364\212&\272\364{09I0\3009\344\364\246\266\264\240m\271\216\352\211\27180\246:\036\261^\270\006\353\205:je+:t|s9\222\003\3547\367\376\360\272\212K\204:/q\010\272\002\021\030\272\331\'j\272\350\254\261\272+\216c:+\312\317:\313\233\0039F\214f:\354dC\271\314J\3069\317\230\207:|#\230\272\360L\3079\364Z\031\267&\243@:\177\244\353\271=dI\272\3140\2739F\351\t9`\020z\272\221\272\000:\203\0268\272\275\271\234:c\263]:c\177\377\271S\337-\272/\231f8b\212\"\272$\207\026:2!<\2729\276\3269\374m\250\272Th\2219\231\200$\272\336\361\324\272l\352\003\272E8\271\272\275\272~8\220\207%\271]\217\200:$\373\305\271\312\n&:#\234&9\032\362\376:\365\207\320\267{4 :\032\034\262\270\021\222\021:\375\027E\271,\234^9K&\356\271\373\317\243\272\371\021\':\270\233\256:\0342\341\270 \314\\\272@\200\0369\254\032\3358\270\361\223\2714\235/\272%\271/:\246\3237\272\334\327\3439\036\243\234\270R\024\023\272\263\013f:&\257/\272l\253\351:9\271m\271\035\326\014:5,J9Spp:\002\252\316\271\034\\\014\271\340\245\0239\"\234\314\271\007\3534:\234\357\232:\004\354\2657aS\237:c\355q\272\264vp\272\373\314\257:s\231\314\270\0328\2549\221\213\245\2707\375\264:j\347\014\271\273\177\004:\210\346c:\232\365\336\271&\203\365\271\310\277\007:\340\252\n\272\210\326\2078\251\311\"\272\325\014\"\271[?F:@\35157\0108\2058f\330&\272lF?:\343\343\0148\211+\021:\200F\203\272Jz\2519X\332\201\271\23275\272\255[\3029\265\215Q\272Uk\236\270Q\003#:\324c+:\251H\030\272\342\2266\271\350\003\263:\026\032\2508\302\240\177:v&+\271\244\220\3019\207XO\272\360o\252\272nMU\272\265\005\232\271-9\344\270\315\254\204\272Ehb\267\243\275T\267\371\373\353\270\352\241\2079\237c9:\233\324&8\257\251\2129`\253\256\2721\005\0329GA\3429\214LS\270\002f\221:\337k\033\272\316\245m\271,\010\362\270^Z\223\271\177\213H:\354:\013\271\237\264\342:\333E\313\271h%\242\272\322\201\2629\310\303\256\271V\n{\272N\223\347\271/\373\023\272\005\352R\271+\236\207:Ov@\272H\245\013:\024\302\214:t\356h\272\001\2712\272\002\021\3339\264\335\025:\232Hd7\256\250\340\272\220\247\200\272\256\371\253\271\337c\'\272\347D\227\271\222\247\310\270M\002\030\2724\204\2059v\341U:\275\021\0148\345\345\000\273\224^~\271\276\0165:\027\231\325\271\321\302\365\271\316q49M\357\375\271\033c\016:c6\221\272\367(\231:L\324\2129\307.C\272Z\357\277\271\336.\301\270Hv7\272\227;\004:\270*\3079\334\274W\271\306\271\273\270\346\341\305\271\323\\,\272/\023\2569B\366\210\271H@c:\215\0323:\266\021|\272_c@\271B\200\\\272\227\217*:b\235\227\271\307\\\347\270T\235\3238\r+\244:^\342\024\271\360z3\272i\346\204:\\y\003\271\0269\3349\346P\014\272\203 _\272\277\266\2339\337dz\272 cZ:\220\3379\2728\222\366:\344\034H\272V\266\255\271\365Z\271\271\003\240\004\272\231\"\001\267\t[\000\271\356\031\231\270\275\223\304\271\341h\204\272\362\355\2157\361\247\'\272\253\234T:\305\273F\272V\033\246\272\221\237\341\267M6\3179\025\376\221\272\036\032V8&\215l\271\342F\036\272N\377C\271\3316\272:\276,\0109\036\247\3658mLI:\331\016V\272\"\263\3008\374\262F:\225\251f:\031\224\233\272\033x\241\271. *:D\363\253\272\366l\0228\354O\275\271\333J,\272g>\234\271!>\264:\017\244*\272\013\022\302\271B\234\221\271\357\203\2007\2509\3149\356$\032:7jQ:\202\230\213\271\'\306\036:\ryH\272\343\361\334\271\305p\240\272\253\257\260\272\352\345\037\271\372y$:&\035,:\013~\345\271pJ\313\271]5=9@CU\2726\216\t\272/pK\272\241\000[\272\332\202O7\252\3578:W\211\0079\204\244J:i\277\244:g\010\221\272\2051\0328\347\003\3559\327\3225:\267r\0367\375\2446\272\2363\222\271\251\276)\272Sz\245\267\005\207\'9Q\010\366\271NOE9A\225c9\010\366c:\242X\230\271\264}\201\271\246\212\335\271\340\320\0279\263\244\305\272\237$;\272\004\221<9\373\363\206\270.\370\3559\233\320l9\313U\201:w\327\223\2720\234[:\335\027=:\325%\243\271\'{\004\272\275\236\332\271zV<:\301q\236\271\3006\3219\210\350\016:\216y\225\271g\206c\272\336M\3529\370\n\n\2722\362\230:\355\351\2739\200\230U\2712\203\024:T\356\3579\256\323\\\270|\005\205:\034|\2317\240\236\253:\031\254\216\272U0\205\272\212|*\272\331\325\240\270\200\31719%\007\3139\264\236\246:\0009\274\271\036\\\362\271\316\377\211\271\266\302\207\272\266\004\300:m\251s:\216\213\017\272\007\367\007\271\267x\232\271\032x\2309\231\037\266\270\324\225\3669\'v\306\270\274\2612\272\353\256\006\272,Y%8+T\342\270`\035\\\267H\315u8\324\243w9j\263\374\270\'\347\240:\032E\367\272\321R\302\272\350\177\0269\247\020\233\271\244wh\270\373\353\0358\276\226-:\320\315|:\302W\215:\3167\317\271\306\032Q:@\245_\272\275\235\206\271*#(9\032\002\232\271/\223\337\272\311]\302:\266\251@\271\014\200%\272\000\363\t\272\253\343&\272\014\2301\2728\236\2227\222\374p\271\333\243\027\267\221\300\n\272\214U\0009V\366\3539\002z\372:<\215\247\271\033\261\327:\235\362Y:2%\274\270\305U1\271z{\344\271\302oy:0-T:\270\335\276\267HV\2729\232z%\272\t\177\n:\027\235Y:\\\017\2529H\315\240\272p\303n\272Qs\t9\232\035v\272\323\215.\271:\346\2427=\220Q:(FX\271_5\222:\035)\3036\315\315s:R\324\2419=\350\313\272[\201\010\272\300\325\274:\322\236\266:\255\'Z\271:%\036:W\204\322\272d`\371\267\343\344\0018\224\230\022:\301\325\2517\226\352\3568\347\251\336\270@R\216\270\343c\r\272)M\33485:\227\272Ry\3158\206\t@:\306\327z\272\032\376G\272\220\177\345\271\270\032J\272*\221\273\271\200od9\342%\234\271\002\247\236:\315n\2419n\007_\271\007\340\263\272\221Yp\272-\275\231\272\237\341\3568\252\364#9\313(\301\271\203\227\035:\240.\'77\034\24091\02069b\233M6\375\234R\271H)\211:\306\2502\272\352\335\3279\3307?\272\213\357\0107\221\263e\271\204g\3209\360\020\271\270s\317\2749g\251\037\272!\324\202\272\004\3426\270\374`\366\271V?0:=\345\007:S\215\2178\314\32609\307K$\272\244\216\0059Cl:\272\242.\2639\024\256\256\272\226>\241:LK!\272\267;\330\270>B\2629\356\325:9T\330\210\272\264<*\272\022[\004\271\221 h:\300\244\2429n\323P\271Xb\225\272\306(`\272:\013\2719\000\315\020\271y<S9\226\033+\272%\365\2208\364\215\0329@\304O\272\347N?:B\221/\271\264\341x\272\362\341\240:\240\200\204:R\261\013\272\270\262M:\337 c\272\222R[\272A\366\357\267@\366V\272\252Y\036\270\304\227\2209\305\366\r\271u\225\3719\023\371\2219z,3:n(\265\271\244\372)\272\253T\231\2713\307\334\272\273\214\0079\210\215O\271\026E&\272w;\2648}+\214:\261b\213\271\304Z\306:\241\226\250\271\330\001b:\273p\327\270\253\212U9\026pJ\272\357*0\265\312T}:\t\013\211:r\263\203:\362\017l:\321\215w\271k\273\316\271\027\216>\272PS\2519R\241\3279\254v+9\030\333\321\271\374\306\333:\311\2421\271\307T\0019\007=r\271-\322\007:\214\234\022\272\213\311\032\272\312\375\322\271\216\312]\271(\303\213\271}F\206:A\352\221\271Q\373\026\272_\346]:\300\230\3479\243\347/:a\210\001\2725\035l:\237%7\273\204!\0269.Z\304:\365.d:V\032\331\271DF\250\271\275\r\272\270K\3100\272\273\026(:6\nw\267\223\313:\271^\005%9\210rE\272\207;8\271\020\201\2468\350\224\3558\'>\264\271\2416\234\271\350\376\3469\372{6\272\272\260+9\263;c:\361\037\221\271\3329k\272\231\211\3419\205s\325\270.eT\272z\322,\272R\225\2029\320\212\357\271$\264L\271\036V\323\271\377*\365\271\253\276`\271\354;X\272\273s79\315r%:\022\017\263\272/\301\014:\361\\\2639*\214\2329\256\312*9\207\363\n:2\331\300\270\351\226\035\272n0|\271\016W\257\272\036\215)9J\001\2319\340\"\2439\222\261\2239T\201\214\272~\373\204:\313\307\244\270\351\031\014:\366\351\022:\004q8\271\244\t\014:\253\311\333\271\213\376S8\t(\220\271t+\2159\225\013\203:\037x\022\271\0364\n\272%?l:\342-@\272\267\261\2647)\202w:C\332l\272$[\0169d\205#:\335K\2138N}\212:\246\226\227\272\345\323\t:\360y\210\2724) \271\320\277\006\271\016\020\t9a\222\251:\252^K\272\303\360\3349\006\351\266:\263\020\221\270j\371|:\022\237D:\302\217\230:\246n\342\270J0\0319\217\206x\271\212\266\312\270I/\2239\265\310\3159#C\036:\023\201\3678\030B\3119\320L[:\247\340K9\273\354\3169\243?\016:F\024T9\037\277k\271\363I=\272\331\373\264\271\nB\004\272\3760\364\270\317[\203\272\3608H\271*\347\3268\240g\332\267\241j\'\270\257\246n9\226;U\272\354\237\026\271\250\023\023\272\365\032\r\272\241\2260\272\'\2243:T\314\2509*\265\214\270\360\253[70\030\2609bH\330:\216\254\005\272\215\034\227\272\215\311\024\272\232\336(\272\332\320\324\267Z=\231\272\010\006\353\270W\3734\272=\005\216\272\346qz8\223\014\034:*\301H\272\340jR:\316\311\022\272\253R\304:\002\352\310\267\342\242\341\2708\000\207\272\223/1\2717\235\265:\2150\005:A\320\224:\006\247\252\270\330\220\257\271\2431\3619_\022\032:\311\352V\270ALt:\273\026\210\272\220\274\353\271\006J\226\272\025\317\33299\255\227\272\021^\022\270\231^-\272>\241\301\2724\376\202\272\275\364S:l6\300\271\377r\2249\275\305\3579\247\033\343\272\331}\300\272\367\315\2558\033\375\267\267\335\241\000\272\302Fl\271\006\274K:\240m\010;\013\236\262\267^\336\0138\033M\252\271\303\204\000:\370U\210\272eK\33699\207\267\266\004l\017\271kk\215:\342\266<\272\301M\023\272\025\253\3218@\321\210\270\377\210\3468\021]9:\362\212N\272*\311\362\271\324^e:\376\316=94\270\216\272k&A:\227p\223\272!\256\2439A\215\n:\013\330D:v\237I\272\302\010?:\276\270\355\271+V\310\271\252\005\0379}\212n7U\025o9)\201.:\024\231\3069\232\344h\271\007N\210:\377\214\024:\316\371b:\177\230|9\243|\202:\222\317l9_H|\271\240\206k\271vlj8!{E\272\303y\2439\\}\247:t\225\n\271{\037\020:\354\007\014:\212\205\227\271\277\346W:\024?\200\271\326\312a\272\\)>\272\246\251\240\2710\254N\272\333e\n\271Sd\3558WX_: \014N9\020\273\360\271to\355:\267\255\3419F\204f\271\201\330\3079\007B|\2727\360\302\271|j\326:\031\013j\272\275`\':3T\307\271^\275\037:<\211;\272\241g\017\272\234\321\2209<\344\301\271\225\233\221: \246\035\271\265\036\251:\271\013/:\273^\007\272\306^\371:\346\301@\272\275\225\r:\230RJ\272&\361\242:\220\341\323\2711\370\2719\006\241\177:\210<\2568N\240\276\272\362\030\026\272j\r{\272I\213\3339H\004P\272)\231\037:+_%\272r\242\235\271\266;b\2729\240\3018\364\016S\270\261\344@\272j\010!:$\026:\272\373P\3358\317\354\315\271\201d\022:O\264\2529\342\356\376:\210\311\3039_xo9\022\324\t:*\260\032\272\023\313\010:\300\337F\270\255\267|9\001)\360\272\010\2630\272\324\341\2329d.x:\210\313\3108\2541\365\271\315ry\272\322\033\312\271\003\224U\272\212\202\3319\201KP:!\373/\272\000Y\0258L\007p:\226/\357\272A\344u\2728j\311\272\301ar\272c-\220\272\252>\037:\241\r\010\272\366\315\205:GF\316\270ZY\245:\017\331\242\272\005\324\2439\031\016\2449\021hF\272V\331\3659K\347\223\272\n.\020\272\224k\3568\231\030\016:\277\363h\272F\r\215\272\325\335\257:w)}\271\252\344,:;\033\2309\016\rc\272\217\326\016\272\002 \2779L\305R\272x\307U:\001\241\031\272B\253\262\270y.h\272\343=\264:\214\366\022\272\310\014d:B\335\0009\333\207A9~d\371\270h#\037:\246J\220\272\224\020\345\271d\352\001\272\220\247\206\272E\273C8\010\010\36094\315\017:N\346\0348\353\002\222:\\\215\352\272\"\031\325\2725su8\276\371.\2724\020)\272\277\035\220:\035\363\340:\210\022:8\376\311\264\272\324\306k\272\263U\202\272J\363\032:)F{9\'O<8\020\233\227\271h;\036\272u\006\000:\rK\033\270\027i\250\272\347M^\272.\3057:\320\2757:\016v?9\375[x\272\354\0106\271\333\271\323:\214\370\036\272\320k\36774o\214\271\312\312o:A\020\177\272\205\2719\267P\020B:\235E\177\271?\236?\272\020\202\2759>yy:\353\247\266\271\201T\326: \177\007;\037:\004:\275J\006;\200\000\n:\030\352Y\2718\024\323\270\226\202\221\272R\213\004\272\204?\3649\217\300\2409ebz:<\020\255\272/E\210:/M\2338\1776F8\331\231\354\267\017f/:\362\023&:\204\227\265\267\247\331\204:>\377\3249\3173N9\257\025\253\270{\022,\272p\261\254\2707\327\341\270~6y:\013\345\2329\205\204\3069\305\327\230\272(\334-7d\222\232\271R\366(\271\013J\2578 \330\3248A\205\3559\324\'B\267T\rB72Q\237\267j%J8r\224\216\272\265\210\303\271S\346V\272\241\300~8\362\317\237\272X\231#:\001p^\2719\010\025\272\263\210\3139\320\211o:\2042\237\271}\334\216\271p\316\207:\t;.\270);l9h\003,\272\261\361j\270\346\260\202\272bF\017\272u\302\335\272e\310\3106&G\037\272\324\000w\272\361\203\024\272\t\317\032:\034=h\270\243\205u:\354\303\231\272\351\227b:s\273\310\272\310/2\272\330se:7}\326\271\204\253\316\270\345H\203:\350\311f:\374.\231\272\2455\025\2738\352\037\270\373YL:i\035=\272]\377.:h\257\265:\210L\3279y\0244:0(\330\267\327\305\257\271XoR:\000\316\\9S\215{:\naI:\314\222\022\272\317d#:o\245\314:i\2218\271\350Eb\272?\014\317\271\346T\200:C\333`\271V\250K:%v9\271\233\r\305\271\216\301\t9\306\366\020:\263\0233\272\031C\030\272m\307S\271\202\274\222\271\n\"\3319\032\\(:ys\230\271pg*\272\207{<:\234_P8\360\256S:\241\222\230\271\321&\n\272M\325W\272_\225O:\216$\243:^7\227\272\'\334.\272\204\266\3609Hn\3749\013\252\003\272\343\371\006:\262\2053\271\350\237\2329\352\342\353\271u\354\273:\316S\3248Gv\2539\2660W\271\010\212\\\272\223O\211\270-\374\374\271\222\272\236\272\2304\365\271j\014\231\271\220\265 :\214V\017\272\326\250\240\272\001\245P9\357\254\3259\036(\314:O\265L8\3620\201:D\215\0039\252x\211\271\017\263\2038\226K%\272c\230r9\n\373\266\272!\3417:\345\000\3218j\271\225:\352I#\272\302g\224\271\231\230,9\301\306\3369\25530\271`\002>9\025\201\306\271}~\3218a\00499+@\300\271\215mQ9aaB\270\204\261\024:V\323|\272\010\021s9\024\320\244\271\366\306g\270\261*\204:W\363C:\233.\234\272\372\3271:\200\211\3019\202O\333\271\312\021\021\2707\r\223:\013\306\2259u\353\226\272\274[\r\272\213\243i\272\231\013\201\271\367\322\226:q\221\261\272\230\017\333\271\335\202\211:H\376\367\271q\251C\270\241\215_9;\371s:\306\013\222\271\021\004\3249\255\267\343:ti\211:\337\266\004\2728\031\252\271\313\234k\271wf\346:\035\2138\271n\202\213\271\004\267\221\270\027\037\036:\232\355t\271`V\3229=\240f8r\340k:\033\371O:;u39\020\305d\272\362\033\370:W\227\234:\211\337\0069b\371\23092\014\200\272\252V\303\271t\363Q\271<\350\311\270\306\374\026\272\313s\023\272\037\310\005:z=%:8>\2209h\027^:q[j\272\027f\2519\234I\257:\346\273\375\271/\200\226:@\016!:\020\001\2258\342\242\240\271(u\027\271M1::a|0\272C\225\321\272\255\277\030:\001z\245\270Q\204\3409\217\300\200:\320\231\2269\344o|\271\254\223\233:-\325\350:b\344\214\272Rs\210:C\274\014\272:\366\2269\027\301y\272\026\242F:J\250\030:6\234\232\272\2552\"\272lT9:K\212\\:\247s\030\272P\327^\266\375)\2569v\226\354\267\346\350\331\271\322\302\332\272&\306\253\272\255\007\242\272\027I9\272W\253\312\270\342!\203\272\306\237\033\272\305\2612\272\351\"\265\271)\217F\272vk\001\270(\360\257\272\206V\3419\3362\252\272}\304\217\271{\356\254\2718\216\022:<\340\026\272V\352\206\271\327F\310\272\004C\037:B\315c:{\243\010\272?\244\350:\335zM9\033i\3507\177\216\230\270\276\250V\272C\343V:\275\225\247\271\013\320\002:\271\035\327\271j,\310\270\322\357\177\272>`\006\272*\246\004\272%\036\342\271\317\344}\271\305\230w\271\343\317L\272f\260Y:8w\2129\367h\3556\351\354\014\273Y\223w:\375\362\014\272b\352\235:\007\257\332\271\223\362\200\272\307\026\272:\001:\207:\251m\261:\277T.\272\005\313%9x\300+\271\'t\026\272(\243\320\271\304T\037:\033\304\221:\2357b:\205R\202\272\263/&:,d\2559f\037G\271\357=U:\267z\240\272\025\360\356\271\305\357D:\201!\3679\t\206\242:\377\264K\272\373\343 \272v\010y\270xW09\037\201\\:E\213\203:\237Y\316\271L\033\203\272)=\360\270\317}\263\271\251(\255:\':\222\271\313\323_\272\3022\033\270\340\036\220\272\277Z\3438\242\363\342\271\256n\310\270R\252M9\016\204\r\271\364\013\022:\370\3257\272\222\241\316\270\346\230\206\270\333\240\3058\016\337\000\272\330\t\200\271@\"\223\271wmA\272\217479O&$\271\235\235\006:\335c\2439\211\361\263\271\356Kn9#`5\272\223\257,:#\0000\272j\336X9\240\320\243\272\nZ`\271\031k\021\272\224\026\2579\370\207\001:ZL\304:fH\370:\201\226\2769;\002\203\271\263\323\236\272\255b\033\272!\366\010\273[$\224\271\027&\201\271\303%\223\271\352\034q\272^\253\214\271\001\3212\271\255\241\325:`\224\2429\314;\255\272wo\215\272`%\200\271.\314\224\272\\\212\261:\373r\2179z>}:\006.X:\346w\027:\207QK\266a^J\272\006\006\210:E>\0179\300\311\235\272\3215\005\272N\201\2729w\314\374\272\254Y\t9\201}\014\272^^b\272\271\277\315\271\272\241\310:X_\3629gW;\272w\260\305\271\255e\205\270\260\214\3649v\261\2349\233\3174\272\315tP:\036^\237:\356\005\324\270t\362$\2717\267\035\272\346d\334\272\013\260@\272\333.\0378+\253\033\272A\260\214\270\002A\031\272\235-\025\272bj\027:\340\371p:\334+\3608\3331\217\272\350\002\3316\247\232\223\270\366\321\2109\215\242\260\271\222\2025\272+U\234\272\317\222\245\272a\357\2469\027\020\303:\241Z\013\272\340V\2709\255Q\220\272f{\265\271\014\216\243\271\220wg\271{\213\3169\027\265\34786\377\2439\037T\3179Je\217:\321\027\2149!/\240\267y\216\246:(\220\\9\324\325\232\271.\201\3259\273r/:\200\346\213\272G\260\211\272\0164):\\d\231\272\023\271\3019\367\376):\256r=\272\313j\253\271\373S\217\265\316\006\r9\251\310\222\271\205r\2409Q\226\230\271\276\034\305\271\372\320\254\272\250\002?\271s!\016\272\346\031=9\310\213\024:<\341\020\272\315\2267:@\nT\270\223mK\271\232\201q:\343\034\020\2727Y\220:j\333\3249l\025>9|x):O\363\r:\362\21729\023\007\\:\\\020 :t\313k\272\\PR:lU\202\267\3138\260\2708\244\3159V\030\3169:\rb\271\266\276\354\271\201\351\002:\220PU6\372\034+\272\233\235\324:@\246!\272\335\245`\272a\325#\272\301\337|\272\240k\2747is`:\204A\3038`@\":\344v\211\272JzH:\230\204G:\031x\235\2705\361V\272\2376\2319\177\315\354\271\244Z\3348\221\306\2319 gb:;D\005:\327\255t\272vO\277\272g%{\272O\203H9\034\013\030\272\005\357\220\271M$e\272F\246\206\272\037\361\322\271\022\321H\272\004\257\3658\340Ba\272\027f\003\271\251i=\272\360\030x\270rV\014:\223/\035:\316\006\310\271>8\212\272\0138\367\271\3217g\272\217\303\3309\203\332\010\272b%~9\014\227\3739\215(6\270d\234\241:\021x\306\272l\t\3269\006P\000\272\357\325\2329\303+!::\270\232\271\377-\250\272\325<\2139 \330\205\272\316\323\020\271\3677E\272Z\251\226:\257S\025:\326\033\276\271\035\030\211\272P/\333:\000\332\3279\325n\0176\r7+:\207g\346\271\350b\201\270J\324\375\271\242v\343\270\320KH:uS]\272H>g\272\265V\2149\264\333\035\2729n\364\270\365\357\2609B\330\":\272\354q\266\273\004\361\271^\222\202:\205\025\222\271\244\017\3029\014R\210:\0329}\270\324>\223\271~_\3549#\330i\272\350{L\270\315f\2008\3249\3669\001F\36384\242,\272\027N\273\271\253\350\2468\271\305O:\031\235\2718\n\360\024\270\211\375\3019y\327\351\270\252\235\0169\025\275Z:d\301\207:y\321G\272a\310\266\271\337\230\306::.\2728\265\362s:!P\033:\311\346\0179\252 d\272\352\232\312\271\246F\303:\265j\201\271\rm$\272\303\004\0239\307\325\257\271\"\035\202\272\023\300\2419RR\0359\216\003\201\271\312+T:\354\272i9G\333\003\271\303\036\202:\004\243\306:\366\211\2649\227(\016\272\317+\237\271\250\272J9.6\3239-\317\370\271G\324\2158^_?:\310\322z\271\361\254i\272\302U\264:\254\231\0279\327\260\357\272\246\336\254:\002\224\340\271\177\207\237\271O\036\3238\314S!\271\221-k:K\303E\272e\346\335\271\201\351\2128\376\315b7\376=(:\244\221\333\271g\3656:\212V\257\272_J\007\271$\003\025\271\327n7:DY\241\271o\376\200:8\376\036:Q\356\222\270\206\341\3579\276\004\"\271;i\303\271Bsp\272\035\250\222\2707V$\271\322\224H\271\317\313O:AmA8|>\211:{U\t;\312]\0209}xZ\272\3737I:\302Mt9h\237N:\345Rk9\350\342X\271\223\203\210\271Y\243\203:\006\312\0219}\225l9\317\353\235:\257>=\272\325\254O:\0263\032\272\262\233n\270\275\\\355\271\211\201\2008\347\243Q\270\350)\345\270Z\2304:\347\201\243:J\263\037\272,,\035:\365\353\r\273\3645H:dw.:\314j\2068\256E]:\213\t\233\271\322\310\017\272\300O&9\017\017\0249b\201\034\271w\010[8\2221\023\272\276O\307\270>\037\2209\020\300\0369B\244\301\272\305y\023\271\032v\2709A\203\241\271^\263\254\272\233\227\002:$\245\207:\352Mc\272\355\025\242\270G\016\366\271=\356 9\320=G:\2054\3069t/F9\277\353v:\006\301\3469\370\334\233:19\2129\r\304\202\272\2617\202:\372C\241\271\200\243\377\271\316\374`\272.\230\312:\202\310>\272\215\375U:\212F\2539\371\000\023\2716\254;:\244\250\034\272\366zG8.!|:G\346\204\272\243\250k:\201B\272\270\341c\021\272[\224\007\271\335\337H9\254\322\0009\353\0207:\275\023\233:+\265\026\272\017\336\3249\261\330\240\271\330\225\357\271\370\354.:%\367\3278\2426j\2711\276j9\213\'\2139\200\225-:\321\034v8\210#\2519\360d\360\271\242\301\335\271\246QY\272;r\3709\2306\0319<\333\3569\240\353S\270(\035\20592\304\221:1*,:\377\350X9Ad\024\272!\025;9\247S`9\300B\2149\203#\222\272\247\367=\271\266\357\264\270\324\344\2079L[u\270v}~\271\311x\236:N\377\3518\003m\276\271V\362\0359\025O@:\257X\022:\327U*\272v!\3068\202rg\272\230\275K9\277E\2258\013\202\272:\341\177\243:\216(;:\234\371\215:Z\267v90\243>\272\257.\0078H\217?:\035\375\3119\233\020\225:J\305{9\016d\206\271\360ut\272)e\004\272\351\353\002\273=\371\2039\255\257\02387\032r9Oq\3279-\222\264\271}1\251:\222Y\341\271\302\374\0179\216\376)\271\215\316\025:\360\371\033:B\343\0029\375\037\276\271.3=\272\350\227\3729uKM:\275\314l:(t]:\3769I\2726\207{\272E\002^\272\320j\010\271\255\004\021\272[\305\221\267\227\200\235\271?O\31097\202\250:\253BE\272+7\3429\370\265\267\272\327\215\3739+\335\364\271\356\251Z:\031d4\272\223\024\217\271\200\033\"\272\331\226\221\271\225N\256\271TC\345\271\300>P\270\327\251\316\271\312_)\272u\026T:\204\247\r\272\241\236\0219d\271\2039`\013\322\271\353c\264\271&!\0139\306z_:R\2210\272PF\014\272$\356\256\272\342\253\263:h\222@\271\330\276\022:\305\200\2439\332\370\177:\346\006\2309\311N\2519\260\217\3768[\201\030\271,\226K\271\360\303\3237\204\214\242:y\370k7z\026\326\271^_\235:\034\222,\271XZN\272\271\363y9!\206\0049\030)?\272\006\323\337\2674R\231\270\306A\\\271\354\313\255\271S\240E:I?\2379\267X\333\267\233r\3109j#u:\026\226\265:\330\347v9/\200q\270\331/\241:\215\331\210\271\323I\3159P\204z:\335\014\017\2726\"\317\271\350,J\272\212\002L:\205\225\207\272\010\362\225:1s\2278o\261\033:\022\016n9\350R\253\272\333?\025:\201I#:\205\206%\271\000\375A\272\024\323i\272\225\013W9\301{\0018\225:\024\272\023\307\005:B\265\305\2714\024\227\272\266c\2668\332\177_9\240*8\272~\017\013\272^\356\2368\221\246\005\270\311\237i9=;\347\270a\260\":\217\212\231:\225\275\3509F\306<\270E.\266\271\264\333\202\271\177\332\3649-\003\300\272\257r\242\272\3005\335\271`]\233\271{\212\206\272]\217\204\271\\P\257:\333\230.\272\325i\316\272\245\352\2578\007C\031:\244\327\000\272b\201\271:\340\274\021:\'\301\244\272\236x?\272\206T\3458S\322D9M\001\227\272\243se\272\333&@\272\\\334\3759\223\'\020:\202\312\305\271i\345x9\213\0311:wD\\:l\202X\272\360\244\251:z\3420\267r4\342\270SI\007\271\361\2203\272ObO\272\343\252m\272\\\336\017:h\037\224:\010\004Z\271IGm\271\244\2161:\341 \232:\201\206\0107\032\003F9\177\371_9\023\277\r:\0237\2319\002OE\2721lA\271o\325\223:\366\362+:O\3544\272l+\017\272\312H+\271\307\225\032\2727A\t:\334)\2539\376/V\272\334\300\362\271\322\271\2669\300\027\365\270\005 \346\2715\342^\270\177\2532\272O\t\r9\345\325\0369G\316\013:l\24399i\253\2559f5\205:\341\021\303\271\336z\261\2673w$9\034\342\323:.\37408\300Sl\272\023+!\272c\235\027\272r8\0079\377F\027\272\013\321%\272\334A\221\271\r\036\264\267*7\2548\306\014<:\326\234;\271\327\314\2039n*Z\272\255V\2169M\235g:\262&\230:D\000\016\271\352\221\3739\355]\312\272!\331\255\271s^U:\3529\0168\373\323\017\271bh\3439\263\230\366\271u\2448\272\307T\363\271\202\216.\270\341\334\002;\306\316\276\272\334\202\r:\310\t>\267o\017\027:\220\207\205\2716\212\2077\244h\223\271?\254z9\213\272B\272\037}\030:u\256\2069\246\027\211\271\351L\3149;\374R9\3324\010:y\023#\2727\303\007:O\213\347\2728v%:\025\214=\272\353!\2249\265\305\236:B\375\2069h\356\250:q\026\032\272\364~\302:!\2300\272\216j\3719\250\234v\272\330\322\301\272\335t\203:\036\2656:*\236\r:\371\214\033\271\241\036\270:\244R,\272\364\237\3177{}\t9\211E\231\270c\234O:\341\261\210:\243\204\313\271!\037\3439\362\313\226\272\222Q\257\271\303\231\311:\344 I\270\255/\3139\254\277\200: \247a:\203Py\271\207\251\266\272\021\272\3319\224-\023:h\314W:\322\022\213:~\300G\270\360\020i8\233\373\226\271\027\371\2359@\033F9\273_\2649\253\2669\272\035\351B:,\302\322\270\036b\374\264v\233\344\270\227\244\321\271l\311\255:\027\250\214\271.p.\271S\026\n\272\343a,:\314\"\\8p\372::\371\222c:\020\244\256\272z^\005\272E\224\2139\333\345\3109\017dZ\271\245%p\270\020\206\2159\372Q\013\270\022N\212\270\026\346\374\271N\371N:{\351\3379:\356\350\267\360\3259:K*\2479\355\270\021:z\335\027\272\3653R9\353Y[\272\244\343\"\270\021\205\257\271\0265\341:\2602\373:\227w\2629\366\230\365:\201Q\026:\357\215[\272r\211\350\271]\250=:\002\227S\271\244\255\231:\260\0346\271\376\371\256:}6\"\267\264\255\3709\355\314\010:/\324\0249\037-\30393\317\216\272\366\324\237:!\t\t:\327\365\031:\322\260\231:\240\341\1779\002\215B\271\305#\22193\323\245:\267hs\272ke\221:\270h):\037\352y:\023\300\230\271\370[2\272XZ{\271\366\007\301\271\312.$\271\326\333\261:r\320`\272\203\336a6\013\003\021\272\260\206W9\240\216b\272\340zz\271\001\255\274\271\257\222\004\272\306\320\0349\002 3:_\243U9\017\332\253:\010P\3629\022S\2779\235}\n\271H$::e\334\217\271_]\302:S(\276\272\262\224|9\363oY\272y\266\235:;2\216:\272Pi9\256R@\272\225*\020\272\347x\266\272\357\361\230:\266\341\026\272+\022\2579\006\342\013:]|9\271\244Q\3229\027\331a:ws\037:\021I\207\271\034Vm\271Tq\204:hv\2079}\352\02688\254\036:\034r\216\271\354\220\037:\255n\3018\3443\250\271K\217\222\272\375Z`9EB\2239\333\003]\272{n\032:\302\'\315:x\364\253:\256\215\212::fE\271\353\332g9=C\337\271\355@\232\272\362\356L:\231\227\035\272\315\261=\272!\021\000\272\213\006\204\272C\306g\271\\\301e\272K\025\222\271\305\310{:\257\361a\271\227\341\r9\332\305\227\271H\360\357\271\023\230\004:\261\277\202\272\276s\350:\3517\311:\335\233\216:\250\326\3019\031\230\025:E\250}:\205\017\023\271\346\3765\271\374\224\3029\244\247\304\271s\342\3309\237\231e\272\277\304\2678\323\341\2119bj\334\271\223a\260\270\353\346\304\272\323\344\236:L\353\276\272*d\353:]\244\0229h\256\014:?\002\357\270D\313\210\272X\370#:\261I\242:\374\217?\271#\364\230\272\231\013%:\3667\016;o\226\261\272\177\373\2026\217\333\226\271<#\237:\276S=:\222e\210\271w\355\2468)\326\021\272\232)\327\267c\240\213\271\305\256\2558\377\376H\271\2242\032:S\362\2529\207Q$\271\273\315\3349b\026\210\271\204W\333\270cPk\271k&\006\273\230\203\025\273R\037C9\351\323\201:Z;^\272b\022\310\272o1\232\271\000\000\240\2729B:\272l\007\310\272\371qV:\301\331\257:\205\311^:8\350K:\"ny\272\037\312\3268\306\266\n\271\331\216\217\270u:\034\272\212\314\205\272\006\361\031\272\360\237\261\272/f\272\271\325\341\2469\003\023\211:\226L\246\272b?\022\271D\362\2019ME\316\271\365\003\2748\014\267L\272$\201\0378\016m\3669)\221\243:\017\341\271\272\370\313y:\266\023\245\271\215\021x:M~\232:\260\326\367\266\217\230\221\272\236\250\316\2700?\202\272\343\260M:??\24599\356\017\2727\240\214\272\n0^\271R;D\267L\212\2029\207\034\273\271sd\3549C\262\212\272\245\026\3519\252\265v\2720V\006\272\311g\217:\361\342F9p\3730;\202b\222\272~\177\024\272q\246-:\312\217\314\271\252S%9\014\217\234\271\367\272-7\026,j:\243\t\2329B+\020\272\344\245\010\272\377\361(\272\271m\006\272\010\374R9\017,\257\271kP\006:,\204\003\267M5\2629ohk:j\231h:\347G\257\272W\020h9M:\2108\274\277\230\272\365\215\302\271UJ\t:\004\026\2609\031]\312\271\357\336(\272g\021a:\242%;\272\372\324\311\272\254\310\214\271\246>\233:\232\213~9\200\222_:\241\360U:t\367j\272\364\035Y\272\036\030\2479\265\346\254\271E\034\353\270\275$08\270\356\302\2707%\234:\320\330\2728\251\271\0029\212\335\267\272\2045\021\272\365\321\021:\202\'\246:\207\353\2139x\334\2109\272Wf8\006\\\217:=l\222\272#\237\205:Y2\032\271\3235\2028\335\271\267:\240\177\350\271\241\3565\271\366Y\237\271\232\007\2079\240U\3759\301\231\271\272\212\207\200:o\340\260\271\271\0044:\371\217\3319\013\253d\271\226E\n:\372\227K:\323S\0069\344\210\013\272\343i\265\271\016\307\036\2714\333V\271\312?C\271g\277\236\271\212\025/9!c\024:\310\325A\272\362is\272N5\233\271\032\347\236\271\312\243\203\272\022<}:\030\205r8\230\351y\272\360:\2678\033e\021\272E\227\020:\340\232y\271\214W\271\271\\\327P:\307F\303\271\000=\357\271\271\200f:*\204\2749\274\276\356\271\235MT:wD\3449\263\003|9\365\227\343:\"\252\0139\303X\245\272\375\274&8\210\376\003:-\336\323:y\276_9lj\2469\225@g\272\234\231\217\272\310\031\3479K\360\024\271\014L\2609[\037\243\271jYB\271\312m\267\272\252\206W:\023\254M9u\037`\271r\366\0369\310\342\256\272i\351\321\272\312\353H:TPC:#O\2549\230\355$:{3X9\271\217\2349\373\301%:7\016\3769`\242=\271\260\036B\271\2422\3439T\277\031:S\036\35091\242\212\272Bg\"\270\020ID:\314\021\0139\232\365\3159\326\222\016\272\310XA:\225$\":]1=9\332\\\3259\245\362\007\272\026\341\240\271l\204\3739^;&9\024*\337\270Yi\3058\261\345y\2724D\":\366\010\220:\234\000\3259\347\326\224\272\337m\n6\250\377\002:\000I\2309\222_\355\271\255\262\020\265\000\353\260\271\332i$:d\270t9\217*\202\272\324\034\300\272~s:\2728H\232\272\232\036\343\271\362A\2549z\027\2639\035\261)\272=\311\204\272I\t\277\270\031\351I:\374\263a\271p\276\247:\373Q\2359\210[B\271\344\313\261\272\277u.:\026\331\260\272\014\276\025\271\237\202\3058\324I\247\271frA\271\261/\210\272\265aQ:}\270M:j\304.\270\3752)\272\362\213_9v;(\272\276\353\214\272M2\026\272\255#\025:,Y\1779\327\302\304\271F\262\243\2726\014\2609\320h\35193Es:\231\210C\272\267\230z\271A\177\3329\367v<:\004\263U\272;\301\3377KR7\272\\\221\350\266\300\212D:\216\013\216\272\236n\212\272\260<2:\006\340>:\277\353\206\271#\274\377\271 \232\3049K\217\374::3l\272\313j\2117Z\260\354\270X\226L:\005\337\224\2707x\3458\313\276K\271A\202p:;DK:\235b`\272WN\335:MWz:^\270\3569\356\3206:\217<\2139h9\'9\315 )\272#\222\2108\277Pe:_\274\023:\213\004):N(\\\272\313\222\276\272\227\217\3569\245\001\237\271w(c\272\240\3078:\025\275\006:\226\206\274\270\321\275y\270\364\374B\271T\271v:I\026\204:\377\346\2029\315O\361\270\307z\304\271\335J\232\272r\252\022\272\350\021\206\272\274\t\251\272>\003\3358\242\220G\272\217\"\0036f\302\207:\251\245\243\272\244\257\230\272\343`\3549\246\376@9g\263\264\270?\007A\267\177\357z9\024\237\0107\366\326H\272wl\277\271\260\3770\271(\r\260\271\356T\214\272\\\324\321\271\211\333\000\272\350J\247:*\302\364\2713\325\3259\262\357D:\367\221\210\272\257\343\303\271\177\026w93\203\256\270\354<\200\272}\244\254\271\240\207h\272\374\216\353\270\257\345\031\272\246\344\n\271\343\213Q\272\301\347\272\271\016g\t:\346\010\310\271\324^\262\267\320\004\013:e\214\\:\306\240\200\272#\035\342\271\217k\3059\200!\232\271\302\026\206\270\347^O:\352\270\000\2721l\214\272\350\235\2768\232%I:\265\266\2608NO\252:\356\371.\272\301\350\274\271*\035Y\272#\356\027:\217#\214\272\016\2208\272\315dv9\270\261w\272g\233<:|T\3477\t\370,\272\221\362\034\272\334_\231\271\277 f9\237\305\3678\227\226\0379%\237\013:\270p\216\267{I::+\016t:}\253\304\272\007\224\3217\342_\264:R\245\201\271\326]\214\272\223\026I:\216\2730:\277>f:c\371g\272@,\2009\333\361\304\272\233s\217\272\332\227~\272>\307\2439\307W\315\272B\313\230\272W\330a9`\3009\272P\375\224:\007P\0249\342h\037\270<SE:\031V\':\013\220s\271\214\250\340\271\306\026\200\271\006\347\014:\362\241\316\270<\006\t\272\326F$:?\3756:>\232\t\272\205\255I9\037\305\257:b\214\240\271\001\277K\270lZ\232\270\037\035\302\271\002tE9\020\203\3629\365\016\321:\230\210E\271o\234>\272\251|\237:\007\374Y9 /\2049=%\2379\217\336\3519\'\261\242\271BDV8\253{\27191w\3169\210\345\3239C$p:\360K\332\271\342\371\005:\320TD:N\007::\324\227[\272\010\244T\271\226\351\004\272\305\323_:-g\2029$\307\3019L\3030\271\021z\346\271\332$>:a\371\205\272)b\013\272&E\356\271\252Q\327\267\371\017\224\272\017\340\016:\244\274\n\272\371c\021::\'\2708\211|\306\271\315\n\343\272\341\252\254\271\257\014R918?9\364\233\200\27249\3369\266\327\r\271I\321\2249\331\220\331:\306\210M:\225\225\272\270-\325,\271Y\236\232\271\370\334\3328p\313\244\271\304\347\n\272\336\024\327\271r\360\2738D\274\227:<\001\211:\307`\002:u\254\3628d\2533\272k\272\254\271\3414\303\271\224\232\2478\032[\023:\200&\002:\026\370\3479m\274=:x\\\013:/\017\340\270\223ZX:-[F9\241\354J:s\010I:O\016\307\271z\0316\272\357c\017\271\325\331\232:3\220\340\271\222\276\222:\242K=\272\306\375\260:e\325\217:\007\253\366\270n3\2119\301\017x\272\346t;:6a\241\272D\244\030:0\331\262:\226\014\3746\233S\327\272\010=\007\272\354\311U\272)D\204:\326\247\':]O\332\271&\221\t\273\376\237\324\271\360\220\210\272\343\243\335\271\233\032\2418\366nV:\347p\002:|\243*\272\300$\021\272\360pR\270|\230\237\2715 \3459\377\024\036\272L2\3549I\255J:\342\005\241\271\272\346a\272\357\005,\272\000\263;\270\354\035\357\272\372lH\271\260\214\3569q`B:\275\240\034\272X\361y:H\220\341\271\256\377\032\272\333TF9D\\\3019Lp9:\364\221\220\271&m\220\271\032M\3128\366\r:\272\222\260\207\271\225\275d\271\335\336\231\272T\365\0327&\023\277\271\310\361\240\272\323|\000\271J(\0308\361\3413\272@\320\202\272\345\224\361\270\210[\017\272\305Y\3039~\350\014:\374l\036\271\007\250\307\271D\265<:S\206\3738\253\343\n\271@1\222\271<\023\3209\200\020H\271,\001~:\305)\021:\345\266q:,2<:\317\326\244\271\231!\0309\204\250\306:\263As\272@?d\272\350B\016:_\r\3169\241GT\272R\230\3049\2070\2449\374\215*:\311n\001:\263\335Y:\340E\221:\004IM\271\023#\323\271\355\2157:g\252(:\324\035t8\253!c:_\00129\373\343\003\271\374\201=\272\337\001\2359\002\264\246:\255\3744\272\177@\223\271\274\304=:2I\226:\321\365\215:G\224\354\271kH\2649\373\202n\272\363\013,:4\243\245\272\261\223\"\271\370_#9\252\356\267\271\223\222\":4(\n:&\311O\271\211\347y9\311\236\275:\342\023>\272\267j\016:\302\257\3069+\010\216\272W#\217:\3353\3027\353\320\":\364e\0269b-\347\270\202\221D\271\346z\3529`\340g:FtP:@Q\214:\311\215\302:\357\261\350\271\0219\215:\202\027\033\2723\362Y\272j\276\246:\313\321\306\270nf\177:-I\022\271s\"[\272*Y\037\272\005\245\3169J;:9\327L\213:\314\370E\272@\021\2619\303L4\272\266\242\227\270\215*\253:\355\327\336\271\000\212\2419yDa\272\274\374\3268\276a\251\272\342&\231\272\324N\\:k\210?\272\277\273\3109q\330\321\271\244\236\3419\221\37739\312\316\'\272\346\245X:\252\366w9a\273!\272\251\326\025\271cN)9-\271\2107\\9\250:\020\033\323\271\204\345\3269\217!\350:\340s\024:\234}\036\272N\220H8\234\372\n\271\251\275\037:6\353\310\272=&\3159\004\016c\271\270\203$:\205\3059\272;!\341\271\2142\3619\305\367\013\270\221T\2749[\315\3139}_\2169\266\021\022\272\326\331C:\231\241%7\342\336=:\\%Z99\017\000\272\302\334\":\365\013\317\271#\004\254\272\323j\024\273\275?\2269\002v\2609x<\2029\266d3\272s\360\212\271\3448\320\270\216a\003:\342\353\335\272\026\033\213:i\253|:\312\007\224\272%\255\215\270\\\250\207:\177\225`:N?\310:\300\3458:=\205\031\272\205\254\206:\\\335\245:\026$i\272\232\270\204\271\221\370\2509a\013\344\271\243\254\232\272_\277V\272\013\002\210:\213\213\272\272_\207Z\272\355\257&\272\3407!:\357\310\3519\014\250\004\271\201\342\311\271j\226\301\271\254d\2029D\346\004\272\256hd\272\205\226\325:\2741X:\302\214\2328-9\315\270\360\345@\272*\253R\272\213N\2169\327\322\2339mK\223\272\325\272\203\272\214\341\030:2`\211\272:\205\2059\211\033#:\202\360\227\271\251\377y9:\3764\272\241\014\271\270\324mz\271\332\361\235\271t\317\004\270\362=p:E\t\003\267S\315\313\266\346\004X:2\030\274\271}\002\2559!@\017:\355FG:@\220Y\270\315\3317\272%\033?:\3138\002\273C|\3709\300S\250\271\013i>:\357IH\272\323\204k\271&f\210:T\306\204:x\241\004\273m\373\0309\320-\013\272\206\204\317:\232\211\211\271\' \007:\227\316R\272.:\3328\261\005P:\2067i\272v:\3727Q\205\3619xDG\272\271L\243\271h\231\013\271MX!\272*-\3779\276\261\003\271\300\232\2329\223@s\270\036\247E:^\355\006\272\027fD9[b\0249\313\324o\272\366\256x\271\243\026\2649\372\333\003\272 8A9\347\310\210\272\002a\373\272\rcP9\2162\3038\261\356\016\271wd\3058\326\315\033\272I-$9,\027\2278\220\003\2059\265\364\221::m09\355O\253\272e\246\251\2727\226Z\272\315\344\022\272\'\226\27092\037\2169<o\3657\364\205K:\314+\3669\365\275\274\270V\265-:\257\343\022\271\340\306\3009S>1:\233w\252:\226~)\272\262\326\2628^\2710\272\242N\323\272\205\203\000:\272\3613:0\243\2679\203\rH9\240\030R:a\265\\9`\221\321\272O+\215\272\211\331\337:\300\252\030:\340\033>\271\346\023\367\271\372\366\224:\351\276\274\270\375]\344\271\025\2470:\017yc:-[\2568\023\316\237\271NG$:\211\0019:\261Pc\272%\24108\341\240\205\272\244\372\0209\374#\310\271\217\306\231\271\207\000\331\271\275`\253\270V\340\014\267U\327L\271\034cd\272l\"\2579\372nA\272\232\314\3519\333\317\2749\005\332\027\272\326.h\271\3371\000:\274J\223:\010\013\3569\267,\032\272[3t8\306\217\2139\027\246\231:\307\206\014:}u\262\272\206~\027:\272(F\271\340\224L\271E\201\000\272\235F\224:L\335\237:\300{\230:\377^\034\271\267\350\2279\014\311Q\272g\235\245\271(\223\005\272\252\321\221\270\313Ys\272q\3458\272\\\372U\272\211I\001:\3179t\272\033\'\034:ET\324\270i\025!:\033\361\204\270`]a\272R\262\006\271 \315|:D\22558R\240\215\2717\226\251\271;\330l\271\226nI:\016o8\272\223\223b7E$\r\271r\327e\271\021/\2038\360q\314\271\240\231\215\271\233\017\247\272\003\243\2179\277\365\020:\316\223K:\271\352i\272\241\341C9\020\206\336\271\340u{:P\301\001:GZ]8T\361\2279\312E\24493\037\33393W\3367\026c\220\272\333ka\272@\232\317:\235\376\344\271\307\263\316\272\311\202\313:,[_7\022\361\r\272\344Zd9\255\261\000:\215o\2439\321Y\273\270\327\246\3729\'\315r:\230d\036\272-\353\317\271\t\353\263\272\221\252\265\271m\347#\271\024\212\213\272S\220F\271W\226\320\271{+*:I\216-\272\212qQ9S\024\210\271}o\30785\207\010\272\n\241\212\272\370\357o9Z\035\230\271\304Q\200\271\243\341\2418\267\253 :\005\256\000\272><\222\270\005\334F\272\206s\264\270\3676\2318\355\265\204\272\207\342\2259]\257\202:x\330)\271\006W<\272\372\350=8\010\367\2029w\362\036:5Z\2458\3359S:H\277\2418o\215j\270\237\230\2729L\265\3019\330,\024\272\246]\023:\0301\375:q>\023\272\223\022\2628\261\2236\272\265\202w:\234\373\206\272\216t\034\272\267\307x\272\035\353\2149\014FR\271\025>\"\271\363\221\273\271\273E\246\271Fo\2569\315M.\272\220\t6\272\034\366\2248\363\356\254:\010|\3519,\232E\267Bt\30594\005b8K\260[\270\375\306;\272\031\320\250\272\036\234\336\271\315\3538:\236\303{:L\234d:]\344\':\266Fr\271>|M:\002%\334\271\352\320\225\272\245\2203\272\'\330\223\271\343\2040\272c\021\201:y\202\213\270\226\t\331\271\364l\0049<\230\270\271%\031z\271\003Y :\334\030\\:\274d\260\267\310],:\316T~\272\260\244\0008\\\244)\272t\265\322\271\002\301=::-\223\271A\277\320\271\367[E9R]\003\272j\261\345:\360\367j\272\360*n\271\306h\361:<\275}9x\234\003\2714\322\2468\350\207\235\271lh\005:\3463\247\271k6\0319\2342\006\271z\226p\272\317\373h\272\000\244\221\272\362\355\253\270\227\242e:eh\021\273x\314\221:\215\\\2149h\335\n:\2339\346\271 \264\3449j3\271:\275\033\2068\233\332\330\270 j[8k>\216\270Lu0:\255\307\223\272\336b\2449\363\256%:\366\251z\272\334\033\2169}\357\032:]\"\021\272QS\2379\004\253\2539\270_\261:\2508\3629<\354\2769\257\352l\271)\254\263\271\225\002\206\272S\310\2255g[\213\271\347[\211\272\355\001\225:\334\314n6\2618\005\271(\313\211\272]\025\270\271\204\354.8U\336\323\272Z<\023\273FC\3509\331\351\252\272h\021\r:\034\202}:;\t{:q2\2069\020\000\2548\367|\013:!}\212\271\324\264R9\350$>:o\260\201:\025\360\320:\242k\207\271\264\250\000\272\220\240\034\2720\004c65\205\3039\323|\237\2728^\2738\375\022\342\2714\337\"\272}\3647\272\337\260*:\330\254r:\315\247\311\272\202\323\324:\021~\2059\3050\341\272`\331\214:s\334\324\272\312\023:\271@\273\334\271\267(0\272<\232Q9W\366\247\271\253}\376\270\300m\244:\237\241\3439\256\253\2209\303N\360\271@Q\207\272\274i\000\272\317\013\n\271\357*\3518\324i\014;\t{\013\272\233rt9<\010&\272\\\327\t\272l\225::\240\005\2709\020^\376\271\022\376\3139\032\336\322\270\033\271L\272\254\032\336\271c\205\024:XD!9\325\211\341\270\345\204\025:p\371\3568x\"\2668\270f\226:\213\350\225\272\"\021\2309\261\375m\271\314m\274:\005r\331\271\344\237\235\272\253\013\3359R\t\22491\207\'9]\307\371\270(\265\001:\221w\252\2721\r`\271\324\313\2349\303u\225\272\266\270\3619\255e\362\272\326Kd\272\347\227\210\272\273;\372\270\353\240&:\300\017\3009\272x\013:c\257>:\023\327\3349\221F\2059\21107:\272S\\:|<&\271\036Mg\271\315\227F\271\302!\3379\363\340m\272\213\226\216\270J\332I:x\246\013\271\316\023\'\2713\t\226\272\216\200\2048{H\0179\346\342?:k\037]\2718\300\356\271[\272\332:a\247:8\220M\270:\032O5\272\361\311\355\271!\326\006\271\232\254\315\272\307\001z9o\323\2439\303\204\033:\366d\263:\200hL:KK\2409\343\023\373\270\314\031\000\272s\023\245\272\244@-\271\275Z\034\272\022\002L\2712\303\2409\226(L:\206D\360:\277\346X:\306\375\3649L\345\211\272c$V\272G\242\333\271\2255\312\267\254\350\303:L\3134\272\347om::\203G:\032e\225:\246\010O9\246F\323\271\356\211\031\271\236C\2209A\350\2269\030wD:X\n\305\271@\344X:\325W\343\272*\231<\272\341\366\200:\274\346=:\333h8\272\"3\3038\354\356&\271\231N\310\272\307\261@\272\256\242\2619\2305\314\271\354~\221:bG\247\271\023s\3429\316\312\2359\351q\\\272ZT\216:V\357Y:-\026\003\272\202\023\377\271\214{\225:\377u0:\004\373D\271N\203\3269|\006\234\271i\316\311:,Z\206:\024\267\371\271\005\231\225\272\000>\256\272(\230\031:\007$N8\236\302\205\272t\367j\272\210\235\354\271g/\200:\25733\2725\003\023\271Q\323A\272\371U\010\273\227\t\024\271w\'z\272\220\034v:\007s\255:\305S\2009lg\"\272\017$M:\215\346<:\007\325+:\236Z\036:\337\001-:0-e:\203\362\\9q\245/:\354N\323\271\306\324\201:\002\333\344\270zt\024\272!b\3359\'\2368\271\316I\331\266\223\026E:\210\216H\272\266+\210\271{2v\271q\302\027\271\177\016\2019\351HC:%\352\0169I\255\375\271U\016\3729\032z\232\271/m\316\271\221-\301\271K\004\300\271\3472\3309C\223d9\354\351w\272a\300\274\271\216\336\"\272\002\211\206:\217aE\272\022?\2609\277uY:!A~:\337\330\204\272\224\214x\2728\322D\272\235r\360\271\335\237\366\271\325L\216\270\372\2071\271\344\2516:\274?G:+5\034\272\260\315\250:\221\303\320\2715n\3239\336?\221\271r\217+\272\034)\2779|\275\'\271Ml\3238f\310\3329\210\375\2109B\\%\272\nE\3378\020\251\3038?Q=:\214\370\313\270\314\027\3479o#\2558wz\352\271\203\277\305\271q\035\206\272\036>\2578\026\005L:\214\020-\272\357\252\3169s\222\222\271\257\2376\271\025^\002\271\031\255.\2717@\230:+\024q9W,\022:\272\364\227:\343gT\270\224\003\3148\3241k7\220\230c8\272\021\206:\252!\342:,*\235\271\271\234\034;\227\351\034\271\264{\202\272\226\032\006\272\023\351\207\271\006;\204\272?-\3449\321t\':\325F\3338\375\202f9\314\352\030:+3\3779\212`X\270\333K\353\270.\235\221\272\2027\3149\210.F:\017\212\177:?\312\016\273\264_B\272\0057n\272\332\223\34382\2462\272\263\304v:xC\356\272A/R:*\242):w\300\203\272\343\030\211\272\tOY:\273\303\207:kcM\272\314\272\253\271>\357\217:?\27229\014\301\273\270,\224\225:\232\303)\272\354?\006:\271\242\200\272\3345\222:\321\000\271:\005\317\322\267\330\021\223\272h\245\037;Y3J\272\010\302\022:f\\O\272\224\225\3529\025l\2119\212#r\271\310\217\0079\023\230r\272N@Z:\261\320\225:od \272\343\305\332\271\200\260\263\272\353j\244\272\376H\'9\251_\375\270\006\354\216\271x\273\203:$V\341:\241\023F:\353\3144\270+s\3769\027\351\345\271B\331\317\271\357r\276:\r4:\271\226C\030\272\316\256\277\271\253\'A\272\336\324\221\272\306\266$\271\314os:B\316\020:\227\353\213\271\344\277\217:\267~\360:\234\025X:\357\205\243:\350&\0259N\304w\272\253L\"\271^\006S\272\350%\223\271\016\177\025:\260\356\3508\222\344\002:\244\351y9\356\231S:\237tD\272~\037\267\271\354fd\266\332\301T\271B\307)\2718\302\026\270\236\t6:1\2321:&\020~:\250\224\3359`\306\344\272D\217\3459v\231R8\323\376z\271\300\203\001\273\302T\3359\0310\201\272\000\224\221\271\0036\332\270\215q+\272C\002q\270\244M\2409\215-m8=\274\2519$\304\'\272>xU:W\n\n\272l4\3469mh\003\2714\377P:gmU\271+\360\0178\275<c\272\274\273d:\321\'{9>\227V\272[\220\271\272B\017h9\275\355\2039z\364\3769I`,:W\210\034\271\220\367+\272\272\032D:\362\t\237\271\200\324/5\312s\271\271\323\2440:\255\212y\272QA\370:\005\234^:6\223\002\272\374\355\233:%\355f\271\222\2303:\233\344w:\363\317\3609\351u(\272\002\357\n\270l%\323\270.\355K\271\313Ik:\254GG\271E\300,:r\247\207\271\357\022?\2715\323\250\267\240L\243\271F{\2159v\345\314\272`\230\261\267\365r\356\272\002z\001:\361\323\001\271:u.\272\262\371\241\271<Xn\272\031\003\213\271\240\003\204\270\215\276\3247\n9\0259\207\200O:A\303\3238\3612\002\272y<]\272\230\005\336\270\\a\317\271\217\0336\272T\213\2549U^8\272\257#\024\272]\357l:\322\276\252:\221\014\0269\003\3550:\302<\034\272\236O\213\271\247-\263:\306\315\314\272\312+,\272\215\217f\272B\\*\271>6\3778\t\nm\272\354(\\\271\000\3602:\265\037\302:\265\370V9\002\267\307\271q\273\231:\274B\2468`\337\374\271YzU\272\031\350\316\272\331\247b:\220\217\272\272\205\220\242:\377\356\247:\010b\2409\375\352r\271\"B\302\271o\336\210\272\277\310W:\314w\200\272\021\307\214\272E\257F\271\334**:\320\336P\272M\034\233\272\337\315\004\271\265\006\001\2724\226\005;\371\221\371\270\005\340\013:\333\033\2039\264\274\t:c\2713\272\226\240\2069\365p\3069\260N\r8K\340\220:Z\216\002;\223\211Z9\307|\026\272\234\227R\272\272\005\004\272\270\003\004:LFf\271\236\362\026:?\302\304\270\034{s\272\351Xz\2725\255\300:I\34447\326\225?:\273o\23686+\337\272)\024.9\3517\2409\230\305+:\330\212j9`\027?:\245\335\\\271\'\013V:\rL\3259\270\272E9\352\264e:\326d\325\271w8\347\271\355}\022:k\0272:\375\021\2339\226\272#9$c?:\306\355-\272}\336\2348\372\270\006: k\3059<^\227:\272j\2039\211\000Q9\n\303\242\271 \2220:|)\0359p\253\3269\243\030\375:t\004\332:Oj\025\272\010\\:9\257\0215\272\223\267\3629t8v:e8\211:J\316t\271\206\311\277\271\010!\201:\001}::u\234\030\272tZ\263\271\n\350\223:r8l\270\270\027\213:\241}\034\272\217\031P\271 \312\203:\331\021\0078\203\255\234\271@\'\2479\036\307\311\270EfH\272V\027+:\376,\010\272\010(\234\272\213\324\312\270c\270\2549M\205\2569Qv\226\2722\354\213\272\013v\210\272<\356z:\321\207):6\336y\272\327&q9\014o-:\244#y:\0136\036\272\257,\003\272\331%7:d/\032:\202\001\010:\\x\224\272\352\203\032: \323\211:\350cV:>\n\014\272\306>8\272/dM:\215U|\272$\33669&\325\337:u\370t\271\220\025\236\272\032\323\004\272b\020\010\267\214\277\0009\315\263M:\331\321\3359bw\0179\267\026\3529WSD:\367\343l:,l\3439\036\315\0079\000\226\321\272Op\224\271\325\233\2359\231\352\0079j\307\375\270\316L<9\311\327i\272\025\220\0309\265|\273:\377\333\260\272\246\\4\272\375\271\261:bR\316:\274\207y\271\351\344%\271\330%\266:\325\260\3748\022?\3117\201\372}9%L\357\271\021\205\023\272P\340\216\271\212\236\3247\310\335\317\271\033[ \267\266\371\256\272E\313<:V\302D\272\006\336\3109s\224\3748\2145\3059Y\312\n\272\243\365\225\271\345D\001:#\303\221:\371\202\242\271\210u\013:{\034\2318\343\026\217\272\244\007\2779\200\334\273\272<&\304:\345}L\272\220Jo8\207T)9W8\037\272\376V\023\272\020\332\3239\370p#::$s8\2444x7\310\263\355\270\367o+:\265\341\233\271k;\243:\026\315^:\324\246\2439m-\036\272!\0328\272\207\353\2649\347\247;:\037\230\243\272\022v\216\271&@\\\271\335\016\243\2725\223+:\016A]9\037\035#\272\330\210\310:1\266\003:\037\315\2249\003\231^\272\245\346\263\271\377\200\213\272\373c\211:O\221\032:\037\227\034\267\265\371\222:\217\n\n:\355\330E8tTR9\322\305\334\271\373\n\362\271\023\267\213\2718\330\206:\344l2\271\250u\036:\002b\177\272w\363\'\272T>~8\207\253\014\272d\006\246:[\221\254\272\371\374x\271\221\356\2279\305d\0018\014\227\r\272\251W\244\271\370\222\3269\037\232\214:\2763\020:O\"\3219\nC3:\"r\017:M\244\"\272\034\264\244\270\261\354\326\271\212\330\2036d\301\2509\267\242d\272\377\002\006\272B!\3769 \035\2079\026R\302\272O4\337\270\230.\3319\305\223!\272\225\331k\272\221\217\204\272\007J\225\271\000^D:\354[\251\272aoa\271\333w\243\271Y\265w\271.b\'9B\313\037\271\000|\342\271\373\347\241:\325\327)\271\3146$\271N\213\226:\264\317\225:\024\323\330\272-/A9\251\033\2279\252\204\2709\345\363\n9\267\267\2669\030\373\035\271\231\000\320:\345\300\267\272\342\327\230:\000\365\016:\\\363\227:\217\374\2379\205V\030\271\334m\2218|`\256\272i\276\2629\324\034\3178~\240\r:\307\027\022:/O\336\270?T\302:\304-\211:\034\365]\271z>\220:8Rv:a\316\2459\214\271\2459B\355i:\357X\r:\017\215\223\272\344\'\250\271\376a\2719^\311=:I\2325\272?\017\235\272\031I :p]\361\271\336\037\2049\027A~\272\032\274\2149\227\0268:\032(\333\271\3174\2259\267\202?:\204Ct\272/\037Y\271>H\2618\261\236\2649\302^\004:\244\350\2568\206\204\3258?\313\267\271\360~\200\271M\320\0149e\032\37198\372+\2725/\2629\336\357\2279\333\342\355\271\336\231\211\271\227\364n9\002\237\2449\017i\2149b\223\36285}i9\300+\2539\226\313\0179\300\264\216:\007\0035:\006\324\342\271 \027\n9X\314g8\024\277\3459_#\r9C\345\202\271I\270x9\252\271\365\271\275E\373\271\274uD\267\350?\247\271\007\031\300:#\354\206:=\026\231:\312\331\001:\356@>\271\261Ph9P+A\272\020\216C\271p\000\202\271\302\211\243\270\t\333\216\271\327A\":\370R\364\271o\365\007:\224\013\3549P\321\r:L\225\007:Eq_\266\036K\277\271CD\231:\347\204\200:/\322E\272\236\246O9\250n\247\272\303\001\030\271\325v<9tF\037:\227$\2766\2034\203:\252\367\204\271\275\305\361\271\254?\3029\264M\r:Sy\3239 [>\2728U\203\272\3773\2609HO\210:\375#\007\272\262\333$:\335\234\312\267\034\363\2619o\222\3659x$H9\003\022L9\226\345Y:\257I\2528\004o^\272~\322\013:\325\002\213\270\240]\2339\372\341\3779\230\372\026\272\022P\3638\335tX:\224\013j\267\001q\"\272\327k\245:D\220\004:\334\226\3578\"\231\200\2728*S:\317\215\273\272\246\323\217\271\224\206\3448\267\347\220\272W2\0036I\265&\267\341\002\004\272\313k\2029\035\251\3047\024e\2337\317\306`\272w\320\320\271a\213\002:<\030\335\271\235\260\020\272[\3760\2723\013\211\272J\353]\272\375m\254\271\221\324\n9\226\270u:\236\337\032\272\030h!\2721\220\3178\t(\2169~\033\033\272!1\2228\"^\0279\005\\\202\271\305\216\031\272aJ3\270\344;G\272;\234\3019\024\341\211:\232\377\2708\252\013):\000\331\3208\313\000>\272\n\251}9\346\277\205\2720\034`:4\245\3409.\312q\272o\017d\272^+\2318\t\3420\272\344\025^\270\311\3058:\2671\370\271\227\322r\271\272\251!8kL+9 \3125:\')\n9n#\2379\027]#\2714k;\272\235(\3419&G4:\342\273%:\023\202\205\272O\247\2619\277\243T:\255Dh:\302\322r:\177U$:\234\255\207\271O\226!9\321\331\0254\022\307C:\ne\316\272\201*\251:\300z\3319\272\345\0239\024\265\267\271\020\371\201\272R\276\2259\002T\0339\333\271\031\272\031\361X\271\211\353f:\222P\3177\242\304o\271z!\336\271*\276l:\333\317\3049L\035\033\272V\206\216\271l\252\302:\034d\2149!\232!:\215\3464:P\261t9\213d\241:\330\346\267:\365b\30080\3071:\353\342\2109NmW\272\206\247\257:T\330\250\272\343\347\271\2716V\325\271\365\t~8T\350\3349\226\'\301\271\250:\325\272\251\301\202\270\327\310\3169\230j\026\272~\017::\373\334\333\272\270\241\305\272\340\207\215\271\320\251\267\271\n@\211\271|\026G\272\324\r9\272\267|\034:\t\210\3649\260\271?\272Md7:\235\222P\272\225\342V8@\036$\272\347\'\2359\007\003\271\271\272\244\036\270e\312\002:\215=\202\271\205\327\007\272\021u)\272\023\206\3449\201\207\3718\237l\034\270\025\201*9\340^o\271\214\323\242\271\320\226\347\271[\361\021\267\334\261$:\371K\233:+t3\272.5\3009\243U\026\270\330\202\000\272\215E\205:\033\"\276\272-\200\020\271\300\205\253\271\233\201\205:\225Z\316\271\021c[:5\370\251:\225\200\000:\001\377c:8 ,\272\306(\021\272\355\337T9G\364N:M\240\0169\227zt9\026\211A:zW\236\270\310\223\272\270.\360\2104\241^\212\271\336\376\277\271\206G\014:k\212\022\272\010\233[\272\200W*:Gd\236\271\340\232j\272~0\313\267\034\033>\271\350\030W9\212\347%9\202\312\200:\t#3:\232:\2419\341\032\335\271\006J\\9\230\000O\272\216#;\272\261\364]9\317\'\354\271T2\303\271\220\000\216\272\267\247P\272\022^m:\212X\3768\306\213\30195\343\2259\212\356\2029,\331)\271\035T\314\271\210h\354\271\322[\2149\354o$\272\003\313\0139Ep#:\366\236\3069\265\006E9\323\360-\272Y\347\2469&\025\r:\374Q%9\252\207v\272S\025I\272\345\363w\272N\002\330\271\237\260\027\272\032\247\025:\234\300\2478\337`\2128\'\036+\272\346\3464\272\223c\016\272n\013\256:aI\1779\364\246\2779\222\266\3719\251\311\2159\213K\266\267\323\325\3078\032\342\3249\370\023\336:\372o\006:\035\331\2068\260\004 :\342\263C\270\331\275\215\272\302\370\305\270r\310Y8\374\364\r\270\272{4\272k\324p8\204\025\2368\232\036\251:\335P\3539\346\'\265\271\"\004\0079\036k\2509b\240\353:\031\373\313:\234h\3269\267\351&9\214\366&9i^\220:\225:\345\271O\357\2739\256\0034\272\367\273[9\325\237\242\271A/!\272M&G:\211c4:\336d\033:izV:\315\250\\\271\316\215\233:\3004\227:\261\303\231\272\375X\2719\2405\261\272\r,\3249\362\243\\\272h\003\3669\355&\r\272{0\021:R2/\272]!\033\271\321s\347\2707I\232\270\273\t\351:j\273q:\025>\0029k\022\0229\356\025\026:\351^\322\270\\\316\374\270\375\313)\2728\240\030\272Z\0337\272\204\2440:\307~\203\271\277\216\027:B\257G\272d\325\264:{\326\247:&\244\'9\370\313:\271M\262\36092\360z9\341A\352\270w\372e:\t\223\3317\023r\353\271\022\335D\272\303\357\002\272Z\032\022:+M\214\2701h\205\271\270\007)8%?/\272\337\251\t\272f\010\010;\347bX:\007[\253\271\000\317\316\271U\202/\271\300\271\030:\2479\002\272\373\001\333\270\303\263\317:\326c\234:4\005\3509\344/O9s\2756:\236\020\2259\303j\373\271\016\257b:\213\233\220\271^\004\2526\304\274-8\332\334\2739\246\353\233\271\206\221\253\271\310\270\3148\207\224C9I\301\260\2701-\022:\005\357!:\004F\306\271\010\357F\271\364\027\003\271\211\034q9?K\2029S.\262\271\252\346\247\272(9\371\271\225\374\335\271\210\352%\272\272G\200:_\266:\271\367N\3475\357e\030\272\251;F:\200\261x:\277\"\227\272T\333Z\271\210\023\031\272\273\010,\271\320o\3378[J\3449\'\336\r:E\221]\272\360\375\2029-U_:\203C\t9:|\0359v)^\272=\335\203\272#\034R9\237\225\037:\373y\022:ID\2419C\234A\272B1\3718\354K\031\272\211\351\210\272\031\226\373:\273\005\211\2729\302.:\216K\3419>\216\354:\251~\265:\232\330=8\262F-:\334w \272\353\223&:\342\354\214\271\211@\3329(\275\250\272\375\315\320\270N\001\2549]k\3217\224\2174\271\273\302e\2721\276\221:\206R\277:un!\271g3L:\002\326&\272\351*\000\272!\214\0318t\253\34491\220\266\270l\254\334\271R\005\036\272\032\007\307\270\214\365q\272W\202\034\271w\247e:\000\341\335:\323ur:\307\207%:}\362\0276\264Ef:\235\201C:*\204v\271<C\302\271\216\025;\272a\"E85\36689\016Q\001\271dsi:P\265\2778#\342p\271\253+\3029\207\352\31197u\207:\375\207n:\323\321O:U\nT\272\306\036Q\271\0137]\272^cE:)\025\213\271\236@\274\272\017Xo7\263\250\257:\365\332\227\272.\214\035\272-K]\272\313B\236\271\343f\265\271k%\204\272\256\307\034:RQ1\272\032\221\3609K\333R9V\000\2317Ht\020:\254\313\000:`\025\336\2711\225\373\271vSL:v\003I\272\312w8:\257\037;:4\200Y:\036\031\246:\001\340G\271W\243\3179[\277\333\271\010\375\2629\361E\036:\036~\366:\201-\304\271\235\203\225\271\310Wp\2725\265.\272\301Y5:\021\206X\271k\nC\271\252\317\206\271N\203\"\271\233\254\3609\315\311+:?\006d\272\014\362X\272\320\244\207:<\346\2478\031\026I9eo\211\272\302\005\010\272\305\220\200\272\032S\2029W\001A:\301GP:\265\225Q9h\241\2469y\344|8p\007\234\272\371\347o\270\224\315K\272\251K!\272s\307\2129\302\005\013\271\232\021\0358\205\307\300\270\2070\271\271\010\021\211\271\037Y\340\271\217\001\221\272oj\216\271\260\233\2279\354\324\277\271\316\017h9*\357\3709Q\031\254\272\212\303H\272\202\353\2778\300\313\377\271\031\2375\272~\350\251\272\016o\2449\344E\246\2716+\205:BW$\272&\273::\345\3472\272\351i1\270\266\250\2529]\352\017\272\3656\335\271:\356\333\271Z\205\210\271J*\213:\314\235\2049\272\246\263\271Tj\026\272\007\023C\272\313\020\2739\250\2266:\336\212\005\272\270X\024:\007\016\004;T\243\246:\345~\321:O\334?:\305c/:.\253\247\270\315\0254\27213\214\272~\277\014\271\302\210\034\271\325\020\213\272\356\215\262\271:\361\177\271\t\277\010\272\337\225\245\271\210~9\2729&\014\271\215N\217\271\022\305Z\270\000\367\257\272\216\310\350\271\321[\302\271\321\306d:\325V36\233L<:P\002F\271\2776\2159\370\276\2609\223\354Q:\003\021\253\272d~\245\272\351z\037\272\317\014\007:\342\006\3138\004\356\3529\203I-:)\006$\272\212gz8|\266\203:m\036\211:\031=\233\272v\245\227:L:\227\271fk\257\272j\364&\272\227\330P:\352H\231:\376<Z:\234\226.\272\233C}\272C\334\361\2719\031c\270.[\271\267@\372\2169\207f7\272\211\2128\272\035\361d:\203\207_\2726O\002:r\211\217\271\360c\212:\031\300\3539\262\313\243:\230\276\3059\240\027\217\272\261[L\272,\200.\271\333A\2509?\210\3029\221\314p:z\237\31588\014\360\271-E\2107\250\252\3149\222\336\000\272\r2\257\272z\204\036\271\260L\214\272\331\272\226\2717\014\375\271P\2427:A\031\2349\252\246\2368pU\316:\210\304\032\272wA\3378\315U\307\271\002b\225\272D\262\3269z\347\220\271\026?H8\334\235\2079\333\215\0179\276!\374:u\00448\220\264\3528V\356K\272\237\363\227:\241U\2739b\353\253:}N\0059-\264S\271\276\372\007\273\220\325\340\271\321\214Y\272\010X\3448\340\320\017\272l\177`\272X8%\272\027\254N:\240\373o9\234\221N:\201\366=\2721\254\0359\257\231\226\271;l\343\271\253Mq\266mg 9]\206B:q\014\336:E\333\276\271\243\270\303\271\322A\240:\n}\207\272\311[\246\271\347\010w:\311\371\005:#\t\306:\256\207^\271S\233\2117b\214\2709\333!/:p\307h\272V\251\317\272\273\37059\203\372\3439K\023%\271V\203\272\271\026\352\310\270\217A\2119\372\3371\272^1\307\271~L\3079\346`\227\271\320\305\216\272?\243\220:E\244\003\2726]\024\272r\251\301\271[\006\033\272\t\27318\312\235F:\322\320n\271\232\014\337\271\202D\227:\264o\2739T\224\2009\036w\227\272.\342\2379\242\202\177\272\236\311\237\271\n\375y8*\330\256\272\001\350\2179\250\210\200\272\364Y(\271\320\002\031\272\235\232\221:\325\334v\2718`\221:\257\370\016\271|\235\334\272\277\n48y\307\017\272\314\34759\372E\2249\212\320\0279K\350\274\270\365\330D:3\334x:\277\234\3038Z3\227\271$\273\220\272\330\030\353\271f\263@\272Sl\326\272u&\251\271<\352\377\270\202\347::\356\006D\272Y/h\2717\372y\271:\023\003:\262_\022\272\252:\":\232`\216\272\327\256\271\271\241\206[:\243\274\023\272-8(:}?\273\271\037\242e:<\347e9\344\327]\272\3379K:\347\366\304\271\223\250y:.\314\200:\373\303K\272h{\2537q\274\\\272\001I\2606\203\246A\272)\253(96\343\301:\236C*:\273\200\254\271H\324\250\270\311\"\361\270\206\252W\272\370\225k:\212\344\201\267\001\033\232\271\241*#9F\2041\271}\272\026\272Q\371\332\270\323\227B\272\365AB9\016\326\350\267\235,\3469\014A\247\271\270}\300\271\231\245\213:\233W\3017\362\031X:\021\276\'\271\0050\261:\252\t\275\271\203w\244\270\276\254_\2723\346t\271\303xR:+\332\234\272\242\230r:+\267 \272\363\343\205\272TF\2669\000v[\272\352\302\0379\035`:\272\322\000\225:%\371\2658\020\340\374\270N\023\3739\245<\020\272\222\361&\271\236\243[:\217?\017:\273p\322\2700\372\312\272\255\232\3779\252\020V\272\272\377\373:\253\264\230:\\\226\3379\244Y\370\267;R\2709\273j\006\272k\372R\271\340\346\203\272\307\332\010;\235\025\327\267\344\210I\272\021\373\3469K\214\274\271\315\r3:\344)\267\271\340\210x:\326\352A\272-\\\0008T\246\263\270N\330\234\272\2661i:^\354\2639@@\r\272\311Y\334:O\210T:8Z\2439\207\245K\271\330\346\337\271\301\305\003:\342\267\301\271e\317\3169\252\201\273:?+w:\003\301\3079\210\251\231\271\303\270\257:q6\261\271\370\300.:P\303\374\271\210\346?:\214\364N\272u7\234\272\351G\202:\367a\2609\005\333\202\270\025\330\273\271\264\231.\272\312j\265\271O1E\272d!\232:av@\272%\333\246:+\346?:\256Z\3548[@n\2728JD:o\244\023:S\317\220\272\313`\3049\"B\227\272(:\274\2718\371\277\271\241,\202\272\356\034P\272\335h\337\271\360b\223\271\004X,:Ky]:[\2410\272c\235\025\272xp\226\272\377\031\2249g\210T9\273\325\2039);\215\272\344s.9\241\230\303\271\265\351\305\271\212\224V:\210t\3339l\034-\271\376z\204\272_\360\257\271\320\355\373\2714*8:\263\262\036\272\374\232\2059\006\230\273\271@5\245\271\253\253b\272\271\233\213:\275\310 \272\212\227T:\227\234O8s[Q\272\2622A\272[\274\244\272\255\030\302\271\337@:\2715A\362\271=\302\'9\221\375\0339>\252\177\270\244J/:NV\":\000\224W\272\023\'[\271\221\344\"\270\327`\003\272\200\201\016\271\0353z:\324\004$8\322c.\272\026\270z\271pF\226\271\334R\251:\213QF9\344\253\342\267=\236Q\272\247c\312\271\253\202x\272\300\"\216\272\253\224Z:p\013\274\270D\244\3029\377D\340\272\335\016T9Bn\240: x89:-\225\271\010\302\r:\245\026\032\272\350\243\200:\256\360\3718\\\346\2168\"~\2769\340.g\272\247\343^9M\263\202\271o\215\336\271\"\007\311\272\004\'p\272\241\223(5\355\247u\272A\274\3509\226\320#\272\322\315E:z\261A:\246\253\270\271\302iI:KpR\271\017jK:\2269)\272\241\014\345\271\216\017\370\271\241\260/:\225\200\2668S\232@\270\371\026\236\266\335\302\022\272\021\335\212:\215\006\325:\317\235\0049\217\327A\270fA\024:\234F\030:;\037\2249\346\016\3108\014\256P:\006n\014\272\252Q\252\272\246\373[\271\252z\312\270\363}\37098\304\356\272\311\345\006\272\013\226\321\271\202\231\276\271\006,\273:\306\\\030\271y1\326\271m$\027:\246\361s9\224+\222\272I\325\001\271\355q\275\271S\312\362\271iF\264:\207\365\215\270\221s\235\272\023\272\0349\002\255v\267\r\330v:|\241C\272\3770.\271\307\331*:r\220\2468\252UO\272\344S 8\331E\214\272B\3538\272`u\262\271\253\345\006:3~\251\270\324\373\016\273\315\206\273\271\253\026O:J\254\366\271\255\275W\2707z}\272\350\346\234:\355pZ\272cm\\:\362\271]\272\024\270\251\271\034\325\3018<\336\022:DE\212\270\246\326\3679hf7\272@\003\023\272\362\254J\271W\330T:V\270\251\272\031Z\36592\257}:\251,[:0K0\272\214\334\3739G\003%\272D)%\272\211\301\341\271\222Z\0249\004\022\n\272\355\335\2109f\022]:\355\3114\272L1\3449\255\254\262:\024\227\2308\200\206\3649d\311\3609\246T\251\271\323\r\027\272\316\364\205\272;\264\20793\377\362\272\377\026\002\272\262\rV:\235m\n\272\252\215\265\272\311\030K\271\234\333p\271\252\265U9\201O\3279\225\356\000:\010\316\0209*\347\3329\2507\016:\253u\376\271\336x>\272\241AL:\363^\036\271\'\347\032:\372A\2177\241$*\271\034Q\300\272k\367\2028\226_\202:\315\301G:a\213\322\272Zn~:&z\277\272\335\276\3629\262\374\022:\034L/\272KW\274\267+\3558:\317\323\370\271 F 8\r\346;\272g\341U:{\273D9v\007$9\257q\031\272?o\3339\236\302\3528\335\266\222\2714V\3739\237\272\0249\300Cn9C|\201:\006\271\272\267b\245H\272#b\2029D(\2259\252\317\260\271\303\203\3756\213L\253:9\241\212\271\2030[\270\023\315<9\344q\230\272K}t\2724B\3439S\027\3549\331eO:\271\305y\272\272\036\037:x\022\226\272\2672m:\253\330\213\267\265L\005\271\253\341\2549\266\341\215:\301\362r:L\351\013\271\020<\t\272\342\022\':<\204\3739|\351\024\272B\225X\272Ow\241\271Y\310]:I\257\310\271:\257\206:\243\034\2769\354\326\231:<\210\377\271\2620N9ob\2247\222N\226\272\315Q\2548\340\022;9A\377\237\272]a89\250\261\3509\034\344\\9\301\242\242\272\217@*::X49\205{&\272\021\245S9\226\257X\272&\304\254\271\242\342\206:\t\351\261\272\373m.\272%<\224:\311\267\232\272y\2249\272\3429\332\270v\007G:{\256b\271\276\025\230\272&\206<\272\025}j\272\007\332\2479\351\3633\272\303J\003\272\331\002\332:\"O\225\272\251\236O:P\245\2739B\336\3349\341:I9r\325\205:\030r\213\272\354\256l\272\025Uk\272\247\023+9\020\260\324\271\014\316|:P!*\272}d\005\272\226>V:\220\200\211:\301\234\207:\271-\2316^\210\3469\320\033\342:s\316\371:\320 k:;\332?\272R3\002\271\325\2012:\364H\233\271\0308\2579\244U\324\270\242-\2369\2629\2039\230$\340\271\003\347p9\277\021\3757\331\233\250\272{\351\347\271\244\301W\272\247\223\252\271\274\260#\272\006\372\034\272\234f\2708\220\316\317\270GCB:]\307\202:vD\301\272\376\263\0328\361xw:\t\337\230\271\021\336\227\272c\265\3019\262\266\354\271\357Ow:Bp{:\327\252&\267P\365\2059\2318@\272[\350\263:\304\314\274\271\341\377\226\270I\330a8\300\361=\271\024\210\023\272\024\373\202:\214\205\365\271:+T:\2462\2359H\313\t\272\320\'\373\271;O\244\271\357`\216\271\202\207X\271\2567W\272FF\3659\256\025\2219`$\316\271\250[\3669\275\017\017:\005\3124\272\233\275<\271o4\321:Z8=93\271\013:z\252::4V<\271\026z!9J\367\2069\220F\"\272\n\3311:\005\256U\271wv\317\272\222\241r9\0005\2579\362\227\013\271\253Y\0229.\25148\344v\350\271/\n`8\253\013\0308\027\277\3119\227\361\217:g\361\177:\211\037\207\271B1\027\271\t\224\205:\276$\252\272-\334}\2722@q7\331\360H:.\020*\271\212\217t:\020\'\n:\232`.\271\n\003\006\271\373\374\327:\000\224\010:ZJ!9QMc:r\356\235\272\304\230l\272$,N:7pT\272\004u\3019K)\2169\016Q\026:\2775w\271\"\317\3319\014,i:\320\330 9b6?:@\377@\270\247\243\234\270\315e\2319\036Z\2469D\330\202\272>\376\263\271\226\332|:\241y<\270[\201\222:hw\2369\030k4\271\350a\327:\332\"\0237P\216\0339\240?\3049\024\030\3778jH\365\270>a\302\271XC\000:?\350!\2728e\0078\267\006\206\272?L\314\272\210\376t8\274\307\2248\313:\2359\343\305/:)\273\"\272\241\26049P}C:\262\334\236:\024\327\035:\004\316s:hhK\272\331\300a:\224\n*:\207\225Y9h\217+\2710\'\177::\317\311\267\250\275\217\271\303\201\235\272Z=\233:\347\210%\272\360\333\3239JBq9\2457\206\272\266c\231:\257[=:>\251K\272\303z;: Y[:a\347\371\271\330Z/\271,\231\03073\205\300\271\377\217T:@K?\270,\024@:\303\315\004:Y^W\271H\314\253\271\262\305\037\272@\217\0249\300\177\350\270\253\017$9\260 \355\271T\031d:\027\311s\272\272\031$\272\216z\001\2722K\001\272C\370\2659\250\217\n\272\264ms\272\010C_:my\376\271XiW9\327\212p\272\317\323\343\271\254!\007;v\373\223\272\227\330H\272\252\333\330\271\235\366\236\272(|\002:%\316\263\271\326\226m:{\037O9w\302a\272/\241\237\272/M\221\272\342\221\3219C.\0139q!\n:Z\\\272\270\000\203\264\271\304]t9\201YX\271:\266\251\271\300\247e8[-\210:f&E\272f*\022\272\r\206\256\272\t&N\272\357\032.:\025\226y97t\224\272\036\331Q9\n\026\3508\377\366;\272\260:\243:\001\303\2318\351\177\252\271\264\375\3309p\000\3048\302Z\030\271\204f\252\271\334\326\2479\031\343\304\271\226\022\24375%H\272\027\031\2609\257=\3128?,1\272\010\243\233:dd+9\314\225\2719\307\244J\272\007f7:\252\022^:\003\n\003\271j`&9\276\252B:Mt\2739V\353\024\272\033:/:\257\\\322\272{\273\205\272\340\340\3209\t\226\2569qh\0209\304mi\272d\211\3219\234\251\223:\'\031\236\270r\357\2108\3426A:\r%\321:\032(\010\271um\r;\234T\250\272\244]\244\271\t\001\2529\033\244\271\271jz\027:\251\313M:g\357\231\272c\276H:\nP\0079\021\264\233:\020\374#:D\373O:\316\2014\271\377\366g\272\021\305R\272\376\265\344\270\327\031\210:/\266\242\271\003<U9\345\350\273\271\0341\235\271\031\376l9\353\243;:i\314\326\272\272R\2759\273y\337\272\300\275\201\271\327\265\3229\254\351\2769\241\225;\272Gk/:\271.\2719\250\253\263\270\250\327\263\267]\303>:\307\206\020\271\340\216f:\256\225\025\272\206m\3319\tM\205\271\303\256\243:\227\210\201:\317tq:~Xp\270\232}\016:\374#\2529G\n\235: ai:-\006\023\272(\013\340\270Htn9X_\322\270\322\221\2159IA\2709\341\356G\272\020u\206:yrS\270B\227\214:\233\306\2739\006Hk\272\374\226\3059\365h\0279]\014\027:\235\"\2059O\035\270\272)\234\r9\002\274\266\272\335\220\321\271F]\265\272Z\361\3209\0007\201\271\275\232\222\270\275\345\202\272\242\254w\272\334\357\324\271\265z\227:ip\243\272}E\275\2728\316\336:\240i(\272\241z\217\272(\023/:!X`:\003\230|\271\355|\3008\035\264\2769\006\263i:\366B\366\271_,\270:$h\361:\323\230\256\271\327\031?9\017\274$:\240n\022:\320\003\245\272:w\":\366\3526\272\311\206\310\270d\241\270\270\240\255\n\271r\342\003\272\363\340y\272\271\315\2769jv\334\2716\277\016\272\026.\2249\004V>\271\242\253\304\271\222\017\2729^(\377\271\177\237\374\271v\300\3539\215p\231\271\247*\331\271\270\014\3719\372\370\007:\300\205\3749H\253k\270\274\322\225\271\202\010\006\272\231\276\2159\362\265A\271\376@\350:t5\000:]\343\001\2721\277\2759\034\372]9EW\221\272\341[I\272n\224\0149\246f\251\271\036by\270/9L:?\256\307\270UJ\"7bE\202\271\231Z\213\271]\356.:\302\212\3329!\351\225\271&@T8\361,\337\271\333\225J\271\n\220\026\272md\':\\\017\236:\213!\221\272\221\252B:\366\362\252:\244\314\264\271Q\210P:\225\025\022:\300e\2579/\362\014\272\n\375G\272\017\236\2139\270\037T:\200R\013\273\331\201Y9\030\233\014:o\253\317:P \005:\337Ut\271\263\007\236\272\253\360\016:\014\005.:=\256\0148dN\254\2716I\2678\336\240\227:J\313\3737\352\231t\267=_\3079E`\333\270\313\314\344\272\351A\274\271\007r\330\272\037\023$:\372{\n:\303\301$\272\235\222\2628\235\262\0039;\356\2079\020G\t\272\037\235\300\270\252Y\263\271\242\021\007:8\263\"\272\224\346V9\\\311V\2716\262\201\272\325\205\201:\341\271\246\272\276JJ9BA\377\2718\025\364:X\261\340\271`@=9\304\276\2029\345Ql:\303\267\2739\020^\341\272\271\202\265\271\031\177C:hjD\272$\274\344\271\210r\210:\027\227\260\272\233\254\014\272>\340t\270\334)\313\271h\217\013:\312\327[\272\004~\024\267\252\301\003\272\252\306\236:\n\352(\272I\n\3309\253\033\240\272\222\325\202:\014\t`\272\007]\033\272\351\234\3459\260\370\322\271v\000\275\271|Q\004:?\251\346\2712;\027\272&\002\031:\014o\002\267\233G\031\272\270\277\017;\2443M\270\t\002\023\272\315\343\014:\255\331c\2720\22508\260\226\231:\350\365\207\271\206^F\272\206\231f\271P\n69\031u1:[;\022:f-\2479\326<A9~_\223\270J\210f\272\305\255\237\271\215\232\0029\364\211\211\271\250\252\236\272\013k\3019A\237\315\271F\307\322\271yTF\272o\317\007:2\000#\272\001\255\017\272,\364\241\272\360\301g\2722T\255\270\251\267\3349\324t\3008\335\037\261\2715TP\2728\324c\271K\350E:G\025\3659\236F\022\272\273\377\0259\000\274\245\271$P\3779%,\r\272\317\231\245:i^\037:\306\2526\271\331\030\333:\310*a:\036\371Z\272^=\257:t\316\322\271\035\000\004\272Fq\205\272\204\346\36199b\244\2714\374}\272\334\313\344\271\271\350\224:\314\306\262\271\177y;:\304\350l\271\242^\0029K\345\027\272\244M\247\271\230\220\007:\205\300\251\267\350*\204\270\200\252\313\271d\327A\272I\256\364\271(\260\3138\231>\250\270w\346\2379\334\3430\2721\225\333\270\212\036\3549\205\033\215:bC\3279\303\030\363\271\312|\354\271w=D:\253\002\203:\343\367N\271\002\035\262\271\003\020A9\014\n\027\272y\020\357\271\243\230c:\274\305J:h\306\007:\223}\207\271\010RL:,\276\246:\306\326[\272L\\\2609z\272\2739`\010\002\272]\007~\270\323Xv:S2\3618E\236$:\223\360\2779\233W\2619\005\237\222:u\354\"\272\224\017\274\271q\005\253:\366(\206\272\004\3433\271\2101\323\270\313&\212\272\274\017q\266\025\334\005\271T|\205\272_\331q: -{:K\036\236\271\257\027\276\271o&]\271\326\024\001\273{p\2139\31689\272\024^y:\204A\303:\002\177E8\334w\206\272j\224\3129>$\036\271\277\254\3608\342[\3709\007\265\361\267\005\236f\272\007\224{:\347`\263\272\305TI\270\n\325\256\271\025\007\035\272V\345.:\355529\366\360o\272@hA9$\371\006:a1\250:\232\277\032\272\341p\230\271\034=\233\2724\232\3459\007r\2039\207n8:C\236\3449\314\231\":m\203\270\271\345<\2218\300\340-9\207\236\224:\334+Q:\312]\3469N{\215\272I6@\272\014G\3709a\275\312\272#\30169i\254 :f\216\265\272\037\273`\272@\302\2629\337s\"\272\343\311\2459\351$\312\267`X\3579\261(\010:\237f\2609\347\013\312\271\355lN\272K:\204\271xj\211\271J\311\251\270\241T\331\2723\020Z:\372\347i:\206\320\2039\312z\2659\264\tp:t\311\217\271T~W\272\001\016\013\271E[\215:8\377\346\267\375\273`\270\000\224\2339\204\014\0309\013\340\312\272eL\356\272e-\3318\266\306\2139\000\026\244\271\343\304\301\272u]\215\272\016S\021\272\264\213\206\272\231D\227:\340\016*\270\250\316\\:\301\332\006:v\356\2449\321Y\2749\317\323\005\272\356\204[\271>9w\272<\254G:E\270\213\272\232\272\2069\300`h:\020\312&:\233\206Y:\350J\306\271\344\202\n\272\341\246\315::\277\313\272\267+\2068\315\031\241\270\240\312\236\271\204\274\300\272\301*]\272N\255\242:\323\020`\272\027\016m:\032\321\2179X\257\277\272\244\371\201:\264H\331\267@\026\2278\336$Z\272\3234\343\271\030\272A\272YV\346\270\350\244\261\272\217\027\3129d}\320\270\243\332d:\235_\247\272,p\2349\3445w\272\273\350^\272\255\260\203\271NJ\2649\2613\236:)L\211:\204\373\2238X\327\022\272\332\327\210\267|\337\013:\302\337\232:\220\362\210\272\231yP\272@\032\317\272\214\275\207:B.\203\270\353\315\326\270\272&\324\267\277\232\360\271\322\342\276\270j\202\212\272\337\022\001:7]!:\005\031w\271\224,3:\370K\325\267\270\373\305:M\264\2738#|\002:\020\201H:\345\013H:\334\302l:\363d\037\272\033\322\255\272\273\371\3029\014\303\035:9\337\225\271\322\332\370\272fx\2129h\370f:\t\2562:\307\213\3569\303L\020\271\356\265\007\272t\372\300\271\017\334\2339\312\2329\272]\277\3059\204u\034\270\272\201\214\271\036\007i\270%\351\3619\225z\212\270\217E*\272P\026\227:\305QF\272\256\203\303\272@hX:\317\360\363\271;\354\240\272T\355\2719\264\nx:Z\252\252:\022\226C\272\307\246\025\272\205\035\021:\233\370W:\024\344\335\270\260\331Y\271\374\352\2478\263^P9M\343S\2720\022\2439\345J\331\270\303|m9\177t\265\271\330\257\024:\241\004\\:\250\372?\271*b\360\271\356\025\3769x\335\3249\024\270\3129\247\222\230:\251*\2068\262\334\2208?\203p:\211\250\205:P\3140\271\275\367X:p\335|\271\r\354\3329\275jG\272!q\237\272G\207Q:e\367\271:l\005\213\270\335\307\':\014{\301:;\253\025:\024\177/:\\\247\2149P\377\32184\002\257\271\256/\3349\030J,:\321{\2148\346\230\031:\376KK\2726\274\232:\023\177\276\272P\355\3419\306^\233\270:\255\321\272\034\357\257\271l\026\3169R\037\"9\205\372\2339\251\317\266\271\276H\3148\217\013\032:\355c:9a\242\325\270-\0030:\224\254t\272e\200P\272\256;588GO\271\276G\376\271\177\002\252\272@\0005:\344|t\271\260^\2039:P\224\272\016\t~\272\013\001\005:\306\215=9\227F\t:Q\344\276\271\306\017\222\271+\301v:\260\213\203\267{\314\034\272\210j\204\272\333\2537\272`\2472:Q\253\205\272{\300)\272\003I\2309hP\242:,\366Z9Wte9G\263M:\222\211\036:*\356\2768\001\200\24696\334\014:/<\2269\352\267&\271\2672\3719U%\340\270\"\202\224:[\316\3619\220.\2369\002}\354:\025^T\272\263\337\3709\376\034\3018\0235\3148\2448\234\272\3463?\272\231\232\001;E\353K9\333\325B\271\343\024\0059\377r&:\242\207\2309\340\003%94\010\":\006\202\345\271\007\'\310:\313\364\000:.\372\000:\201\263\232\2728^\003\272\217\261\024\272\241\200o\272_\032g:\372\210r4\352\355\361\271\317\324\3249b\343\2478]t\264\2708@\272\271<1\0009\325*\277\271l\306l\271?E::\211\225\036:\022x\207:\222\321\013\272\022\255%:\301\\\025\272\203\021!:\2606(:rX\302\272\247\321\242:y\324\331\271\375\024]\272;!\365\271\207\212\201:sz\020\271\273g\301:\214@C\272osc\271\361\267\007:\265Sh9T/#\271%\210-\272\307\245\003\272\221\364\327\270\310\353B\271\322o\177:\'\223\314\270\207\"\004\2727\365\262:\266\202\257:\000\035\3718\224t\230\271\210tf9\351\376\344\271\225\025/\270\022[\242\2721\247\222\272\234,w\272?\366p88\"\3319\360\177\3669\320\335\302:\234\270\024\271\335&\3116\027\320!\272\207f\3179nP::\225\013@:\3059\3677\351S\00396\023\\:\240F\3368q\255\251\272O\326\2768\346\t\004\272r\243-:\321\321V9\360Ti\271\273[P:\277R\006:\335=\2267\303\013\3049\000\210L8\236B\277\272\035\030Y\272j\326N:\037\226A:\256D\221\272[\375\277\271\t\377\3439\0076X9<6\240:#$\217:b#\001:\255\227\2468\250\252\036:\362b\2609\031\313\370\270\000\r\2049\337J&:\317\274\206\271\307\260\246\272\311\347$\2720\363\267\271OB\324\271\342\277\3329x\2626:\261\234\3269\037\221\3259\005\0200\272p\305\264:\360\347\3778\004\274V8\230\245\251\271\005\254\206:/r\207\271\035kg\271\331\205\256\270S\035\325\271\331\024\3779x\032\241\272\370\212\356\271/F\214\272\215\340k\272\027L[92O\212\271\217\246a\271G\374Q\272J\201\267\2719\'\370\271_53:\177@\2768\3614\2738B\272\310\270\'\020\261\272i\235B\272\005\r\322\271\365w\203\271/Q\014:\351\013\253:\005\230\2148\231\307\302\271-\343Z9>s\013\272\013\213!\271\\\177\002\270\234\0176\272x#\2146\'\2722:\324\353\216\272\321\271\204\271\261\222\2728ge\246:M;\2548\002G6\272:\316W:P\200\2529\301\310\3449\250\341\0258\023\242K\271>0(\272\206kA\272\271\252\264\271\032d\2759\201\361x9\246\320\r\272f\3107\272\032\311^\271t\275\317\271\303\274\032:\332\025\033\271\307\363\313\271Ym\247:\273>\370\271eq\022\272\371\251\002\271\004&\233\271\331>\002\272{\002\207\272Gw\\9\205\326\2559\205\336\251\272\025\353S:\202\347s\272B\316Y9\207%\2339\270\276\224:\277\377\3608~\003\337\270\2328\240:\306\201\224\271\314V\310\271e \021:\251\020\2549*\312&\272\177Nr:\246\352\027:$l\027\271\304\0038:\035\256\0109img\272C\275O:\264K\247\272\340[.\267W\244p\267\261\374\033:\303%%\272\237\003r\267\374c\367\271\323\332\t\2725b{:\240\022\226\272\236\376\2447)\316z:\275\323v9\367\312[9\237\272V85I\213\270\337\003z:\306\350$:I\207\261\271P\005\036\2719$<8\312\222\201:\346\360\032\271\372\341D:\365\366(:\'/h:\327?\214:\353\252.\272\r\352\200:\346\241\3159\204~\2229\300\317\307\272Zyd\271\203\355\327:\306\312y\271I\237\301\271\"\352C:S\004:\272\014\210\033\271\203\314\3749}\314\0049\272\377%\270\016\020\331\271Kf=:|\025\276:\007\271\365\271u\200\027:#\347\213:\325\037e\272\234\267\270\272nT*:\356\355\300\272\246\331L:\310\255<\272\205OX\272\207\230\305\271\3253h\272}\023\2429~\023\016\272\325\315q\271\177\364\025\271\367\263R\271R\343\3159\242\234`:\343c\026\271\231N\303\2711\333\006\272A\363h:\020\005\236\272\322$\2129\347\017\0239u\271\202\270*m\2679i\261\017:\301%\027\272\223#\3119\324Qb9\003\376\036\273\242Z\022\272\275\275\207:\244>2:\353\332t\2724D\207\271\201[\2138\237L\3279f\t&:\3454\301:\231\210J\271\307\276\277\272\021\371\317\271W\t[\272\037%\345\267\201\023H\272\340\326\202\270\200\004_\271t\347\2119\2300\232\272[\347\025\272rh\207:.\324\2079\252\336S\272\376\214\3639+\374\3038\274\013\004\272r\232\256\271\334H\3249\205\363\221\272\261`\226\272\350\206>:\313\333\202\272\2402\314\271\257 \032\272\212\242G:;\363i\271pmM\272\000\263\226\272\344\207\200:A\267\023\272Gv(:c}\241\271\334yu\272\034@\277\272\212\334\262:\027\210\2739\021j\372\271\006\262O9\342\200\0269\'\314\3359F^\2049\201\254!:\004\365\206\272\257{\210\272#\3123\270(%\215:\325\306^\272\340as\272u\002\240\271\212~\204\271_g\306\272\317\263\t\270\351\336\236\272=\033\0249V\314\3149\276\253\210\272\313\306_8UY :z\272`\271\343\0034\271N[\366\271i\322\243:f\306\024\272\220\345\3039\204\225\302\271\223\275m\271\272\023C:\014>!\272*\270\2509\341U\256\271\\I\300\272\313\030\2729jm\2067u\215N\2724\206\2469d\336$:\275\367\2359S\310\0179\266\\\3568\205\317\202\272R\024\02398y\267\272\252\254\351\272\304h\221\272v\324\237\270Q\356\006:B\03189\216\202\032:\206?\212\271\274]\0039C\n\217:B\344\016:\321o\2219d\365\376\271\336)S\272`\342\211\272\037kB9\273\224\014:\226\301\033\272\207\263\3579[T\300:~z\353\271\2062\213:\272/d\272T\317~:#\204`9\010\007|\272|\022\231\270\374\213\311\271\343M\302\2717\205>:\000\333\2168\017J\201:\246\202\267\271\nb\235\272N>\3719^\327\301\271\33427\272\333\212f:\317\310\272:#\334\2419\020R\254\271\222b\3209.3\034: \265/:\023\017\243:\rf\2169\226\364Z\270<\246\3609\276\207\'\271\0264\025:\344\267\261\271\303\231V\272\016c\035\272r\261\301\271\001N39\214\304\346\267E:k\272#(\202:\201\tZ:\200/\3419\021gY\272\255\320+\271p\177\006\272\032w\027:\261J\312\271\341\276`9\n\234\226:\'\372L:\031\200z\272\377\363\326\266\313B\244\272|\374\2159\226>\004\271\027R\243:a\227\016\271,\217]\272\214\235\032:\342\221E\272\220#D\272Y\332\3479\301\205\031\270La\004;\362\355\n:\245dy\272\000Y\200:\370\215\000\272\r\0179\272\260\324\2469\266\\M9\352\360E:\004\264\006:\347?\177:m\325\0258\251\314\006:\342\347\237\271\027\324}\271\225\355\237\270\301F\3539\315\323\2759%b\216\272c\010\3469\254\246\3578\325\201Q9\027^\237:\224i\311\272;\277)\272\035]#\271\330\334\246\271\270\355\251\272z\342\206\271i\337\212\272\020\357\222:WO\"\272\377\027\207\267\306\260-\272&\013#\272\330\327F\272\007q\00498=\2156s\037\316\271gen:QG\220\272\225\016\253\272\377\n\232:\304d\204\271\375\362\203\272\322\2175\272\333\333\2527\247\277,9\220n\221:\003!\3349Q\263\004\273\350p\006:fW;:%\333\316\271%\327\2575\207g\251\271\247)\340\271\222\000\024\272\270\215\2268\350\013\3209\313\334\3138\365a$\270t\220\204\272\341$L\272\205\373\":m6\255\271\'He\272\353O\314\267&\225M\272\267\266\267\271\372=\202\270\342\014{\271d\212\226:\350\374\250\272\331\330G\272/R\2079\2045\3159\364.\2449`n`\272\037:\206\271\236\224\357\271\324\221<:SO}\272\324\305\3409\365\025\2039,\020\2569\307\220z:\234\260\3628\211\035\022:%0\2609!\213\231\271\035\224[\271\240o\3658U\205#\271\247\221\017:>\264R8clH\272`\325\206:\267\235*:@\032\277\270\361\255J\272\370Y\237\267=\347\327\271\302\245]:\346[\251\271IOw\271W\373\020:\025eK:^\342}:S\222&\272\271V\221\272\030\215)\272b\235\037\272$\254\212:\262?\230\271*p\026:\250\253\204:V3\200:\tZ\310\271\204\343\3629V\263\000:E\366\36795\225\2019\t\224\004:\003\251\r:e\277\374\272\236\374\024\272\347\252\315:\237\302\204:V\353\266:\311\242`:>.\266\270\317\210\2059\032\275A9s=\215:%|\2429\204F\221\271=H\005:I\301\306\272\n\177\2159v\350\332\271\0023\030;\236;\263\271\234\t$\272\035\007\374\271\364:\r\273\025\375\3229\370\002A:\375\246\261\270\003\217\217:\244\367\267\271\003G!\271}T\273:\006\275;\272\203\'l:\366\342\004\272(\312$\272]rF:\036\325Z90\002\3358\023\322\256\271m\024>:\276\220\262\267\031q59\242\207\3165\270l\256\272\343\036j8mr\3639AxP\271L\355\200\270\336I\260\271\277K\332\271\343aw9Ou\264\272r_\243:s\271\002\272\031\277z\267y6\222\272\000\314W\272\266\036\3209\020AN\271^\342t:\004\304\016\272\002\250\010:SU\377\270}EY\272;l`\272\367\305\343\271%\376,:\320\r\013\272\353\026\r\272\353\254\323\271\242\252\370\270CJ\002\272Q\260\317\272(<\200\271P\312\3108a\265\032:\224dp9\361lf\271\\\363\312\271\370\2475\272p9\235\272\016\n`:\022\373\014:\006\266\242\272f+\021\272TP\262\272\035r\2738X4E9cQ\307:/c\276:eJ\035\272\323e<\272\367\324\3337\203\313X:\364\214\362\271\266\177U\272|D\253\271}t\036\272\262<\r:\254\017j:N\317\256:J\004\320\271\262\374\256:\2304\2329A\307:\271\345\000~:\230`P:O\372\224\272\323*@\270\340\223\026\272\252g\362\271\362Q\323\270\357\214h:T\001\3768\364\275X\272#\036\'\272O#b\271R+\037:\234\363i\272pe.\271\272o\2029\343y\256\270C\005\200\271\264\027/:\273\234\257\272\352\242\324\271\332\363\275:\333\013\2718\351|\3149\360\265\236\271\034j\3466\320\302\0348=\375j:\266\375R\272)\020\252\271B\214\250\270/;!\272_\264\2469B\260N\271\324\003\342\271\312F\312\272\023\321g\272\365/\340\272d\351\000\272\254\371&:\324\002\2678\363\177b:\350\336\261\271\026\325U:\273\340\226:\227\242\2129 \301U:\341^\2149\351\031\375\271\267\237}:\257m\235\272\352e\3749\331\215A\272\"\361\2739\221\313d\271o-k\271\013ZH\272\352\2005:\322\204#:\316\001\35690\256\3558\334\361\203\270\364\227<\272WW\2309SN\034:\315\311\257:\201]6\272F\244\244\272\263i\240:\017\263\202\272Z\251\030:\326\020\236:\002\2501:Q\350h9~a\2729\227\260\3349$\343\302\272\351\033>:eLd\272F\340O:\216\242\003:\3473\260\271\014\222\356\271W\356x\272\'\3771:\242\230\361\270}\340\3509\240\005\2377GI\r\270\033\021F:tV-:\221\017`9\322\356I\272\366\210\212\272\216$5:g0g\272\021<\016\272\277Q!8i\321b9\367\363Q\272\234\315\231\272\016\313|:\337\023\013\272\244}\227:\007j7\272F\245\213:\301\177\254:\030\254\301:\272\014\0029\354\336_\272\376\353\304\271\272k\353\272>\003\3318\340\200\020\270\001\377\000\272\275\331\257\271\232;\277:rYi:>T\363:\324\335Q:\330\002;:5\274\27499q\3339^T\024:\361z\230\271\\\275\3548\"\023\2108\"i\247\271u\225g\272A\250i:YF5\267\004$\3729\256\350\":\243\306\0138Hc\223:\274RT9\262w\261\271\002\337\202:\007\361\347\271\272c}:\257\020\3608\221\336\350\271\342T\332\271\014\216n\271*\267f:\"\326\212:j\024\3026Z\264\272\272:r\201:\330\367\000:\310\223y8p\333\277\271\311\241\332:\222\256K\272\210\210\017:a\3123\272L\333\030\272\010a\3118\270\221\2369\343\221\3439g0Q\2718\373\030\272p<\353\271NK\312\272-7z\271H\324\316\270\200\216\306\272\353l\3109FB~\272\033I\263\270mM\310\271)2\027\272\357\314\206\272\023\034\274\271rK\214\272\231\025W\272\237rb\270\231\277J:h:\2239\307\304B\272\333\'\351\271\'\221\233\271\006\217\224\272\001\026<\272\363)\0039w|\260:\344\347_\271\302S\306\272VU\000:\267y\2179\271\222\3369\377\002\270\2704\3129\272\225\277\002\272b[\213\272i(\275\271a$\2357\264\234=\272\200\241!\272\027\305v\271Lb\267\271\031\177U\272\344\002n:\n\223\2719\257+\'\272\340X\214\2714\314;:\237b\301:k\243\':B\316\233\271\264\t\322\270KTU\272L\215\r\272\216\277\023\272\001\253 :\021\235X\272\342\276\326\271d!.:&\001\2279i4q\272\345\233\275\272xO\301\270\314|F\272;\212)\272\227\365\355\271\310\177i\270Q\263\377\266\177\342\333\271#9\003:\373\251\":\357\302\3528\341\325p\272\333G[9L,\000:kYv\266.\003\217\270\237\245\3108xLR\271\267f\264\271\221\273?:$\362\351\270\362\233\357\271\342!s\270Og\263:4G\224\272/Q>\272\021\260\030\270\201W.\272l:\320\270\224\341\001\272#.<\272U\253\231:\363m\2219\203\025\333\271\314:&\272z\032\'\272\315\036\024:\245\376E\272L\316\272\270\245\035:\272\310\341\010\272X\332\2569@7\r;\213+\2337kX\3519y/\203\271\246p$\272\"Z\2109\3324\3017\010\032\236\271z\321\225\2729\n :g\243-:\010\"X9\362\031\264\272[\373\3109\346\027h\271\210\"\207\272\310\253L:\212ps9\243\260{:\304\024\22599\344\252\271\354\343.\272\037A\237:\375I\177\272\214\316\264\271\354\304\3258M\024\327\271\230n\3419\363[i\270\342p\2055d\240):\274G\3648\270r):\256g\373\270@\022\2029`|\020:\250\323\217\272\360\027\014\2720<\2068\247\027\232\271s\371:\272\253\315e\272\262\017+\271\014P :\265=\3375=\362K\271\372\262\2008\345\310\323\271\262\370H:%}\2119\016\360\027:\\\214\"\271\342}9:m\010\007\271SC\323:m\"u\271\213Hb\272\204\236\320\271\305da\267\276\322\240\271\205\367\244:\0143w9l\3250\272\347\035\021\272\r\215N9\274\215\262:\216rK8\r\366\2469\n\024\3117\371Z\0268\365\245\210:!I\t95\346\227\270\'\345\"\272C\356\360\270\021\366\020;\311z\030\272\336\001m:\033\300\260\271\234\320s\272\243\034O\271e\311\275\272\"F\034\2724\261\2229\216\321\321\271\332Jn\271\014?\234\271K\261\32196z\265\270oV\214\271\363\336=\272^\342\272:\216\314 \272\203\356\270\271L\005\030\272nB\217:2\351\034:\201\323\022\272\026\025\271\266\357\000\032:z\216\346\272s\001\0079\357\023\316\271\017\230\256\267fa0\272\026\227\226\2706+\205\272\243\252\2669\252\306\005;\215n!\271\014\246w\271\277\222\3179\236\254\263\272\277G\265\271s\337\"9\342l;:\245E1\271\344\342\005\272\340\037\0259\335\023j\271\371\003J:\356\243\3239\206\261)\2708H\322\272M,r9\323\245\1779\257\013\3557=a[\272\241\357\023\267t\322\2627\341\013\3409C\217\210\272\002j\213\272$\362\354\271f\233r\271pP`9o>\307:M:\3429\"i\244\271MF\227\2718\007\3659\223\371\3749n{?\272\201\335\203\272\313\312\231\272NO\250:\342n\273\271\2507C\272!\2476\272P\270\223:.\033\316: >\2648\347\353\0019\373\016\2359\215\242j\271T\366\2339\006\337!9\344%\202\272\264@i:\231\031\007:\235\306\256\272bD\224\271\177\005\222\272\331\264k:\362w2:s\034q:\300\233\036:\314\022L:*\002\2419\253\302\002\272\013h\204:C\335\205\2719\304v\272\365w(:\230\n#9\004\362\241\272+\342\027:Iy@:\372\236R:)9\310\272\210\227\315\271\304L#\271l\000p\271{O\341\271\273\213 :\247\232\202\272\034\230\240\267\024\365\t:\025z\375\271PdZ:\326\253\204:\264\260\263:\201;\0349\005:\240\271\204\237n\271\031\320-\272\372\256n:\211\236\242\271\304\306x\270\301~m\271$\353\210:y[\306\270B\2023\271\203\rH\272\352\241\017\272\365\236\247\271?\236Z\267G\264\0209\372\253\007\272\320\372#\271\003\315\367\271,gu\272\022\365\214\271U\325\007\272\273u\213:\027I\030:5\0144:.|-:\227\205\231\271\r\0046\271+o\325\271\034=9\272/\351\231:\023x\324:\372\177\2009\214\215\322\271\201&\033\272\215\t\241\272\340\003\247\272\014]\213\271\232\027\243\272D\023\2239\034\027\315\270\323\211\222:s`\2018o&i\271\222\021p\272\342\021\r:\251$\0079\014V\2069\342\027\327\271\267\350\3179\205\212L\272\"\371Y\272\030N :\232\206\200\272+L,\272\002\306\327:y\342-9\262\025\301\271\241\247g9\336\373{:\314\331\036\272\203.\243:Dn\270:r\236\256\271\017\377\3469O\220\3058\343D\2437_\272\001\272)\005W\272\233\036\2409\204\200x\272\350\325b\271\300\000\347\270\236\003&\272C\342u\272\014G;:\031\010y\272\021\214M\272y\315C:~\000\210\272\372\217\200\272u\020\205\272K\304`:\267~E:\251s\0109\273\344#\272.S@9\340\023v\271[&&9\206eq:\324\350\3019f\t|:;\372.\272\335\233\025\272\211f\313:q\t\031:\251\022O\271\351\310f82\261\335:*\370\0229(\243\261\271\r\\\203:\317\021L:$V=\270\211\344\223\270?\300\200:W4\311:\005>\211\267\0175\3248\355RO\272\352\tS9l\216\201\271\371\243\0309\02052\272\352ll9./\007\272\367\221^:5\257N9\021W\316\272\030\377\006\271\303\227M9\370\2738\271U\274M\272\220E\373\271\316\316\20795\226\220:\'\\\026\272\324\373\r\272\242\320\2469Ju\n\272b\324\000:\247\007\250\272.\241\311\267\377\320U\272\303\312D\272\360&\367\271\257\214\241:%~\217\271\240?\226\271\272\373\3279\362\316\3069\203\010Q:\226\026K\272<\002\017\271 \340::8\244\243\270)4\2468`\211\2649\324\307\300\2729\"\3069\313\346\244:A%2\272\336V*9\226Y\36075\004\2779\354\3464\272U?\207\271!\252\1779\357\005\3229\363\352\3369=6\3029\272\206\231\267\300(\031\272\"\2210:>\332\327\271\204\262\3429_U\2449\210\206\302\270\316W\n\272\033X\220:\217\250\014\272\353\373@\272\302\203\2079<\300\322\271`%\203:M\230)\271\313\374a:\362J\214:\023\250\200\271\273`X9;fh\272\314\025-\270\366UI:\300e\330\270<\262*\272c\361E\272\3632,8Z\027Y9W\320\2279\001pw\272\004\376\224\272@\322t\272eZ\212\271\375j$:\260\n\2079O\026+\271[<\205\272\336\276\007:q\022\r\272?\227\233\271\365\252\357\271\321z/\271\376\204e\272\037\356\270\270]\325\264\27062\022\272!\264\2129{\373}\272\313\202\3549\274Y\2709\321\333\3019\023\007\211:\336\271\3559lD\215\272T\322\3519Oh\331\272\326\374I99T\020\2729Q\216\271c&\242\271\220H\031\271\013oP\271\323\205\001\271\036\335\2177~e\200\272q\253\257\2711\306\243:\350\324V9\004\243\007:Mm)\272\336\024O9\031\022x:d\344c:1\222a\272\214\265D:\241\302F\272cP\243\271c\233\256\272\250\372!\272n\326\256\272\351\250\030:@\277\3148\177\023.\272\365\250F9dk\272:M}99\0263T\271\022WL9\306\260\3427\367\033?9\371r\2679\004\304\020\271\345 \344\271\330\335\017:\332*+9\"\2138\271q\354\2439\261\024N\271\207\264\246:\025\034\22196]f\272\031 \277:\216\366\3738\325\027\250\270\235h\0148\366e\207:\021\224s\271V:r9Y[\003\272(\021\026:\202\310\2419\343\32359\013\322\3238\315\272f\272Q\024\266\271\2710I\272\220\254 \272\314?\2039X\212k9\030m\240\272\354P\177\2722&\030:M\006N7duQ\271]A{:\334s\3347\027\222\001;?\231\3608\013[)\272@\236\3609\223-\2149\337\277L:=*\316\271}\340 \271&\375J9\310\227\322:\312\255\225\272hW\2119\244al\272\rz1:e\036n\272\357\235\220:\353S):vF\2069\341\002\3709\247\251M\272\206\337\205\272\371\245m\272*\240N\271B\217\321\267\014\203\204\272R%&9\357\257\034:A;\3269\330\277g\271DS\2229\003\300\307\271q\224G::\242\324\271\002^\n:gG\2529v\26789\326\253\2619xp\202\270\022e\035\271\307\024\2569J\002\3729\200}\n\272\r\314\3169\211\247m\272?[h\270B\226\310\270,\353I\272\010\177\004:\343\214\177\272\333\313W:\334%\027\271\302\311\023\272n\20008V\022\3049\324\336p\272F\261\341\271{M\002:\363\361~\272s\001f8d\254\2258m\006g:\236\345\3329\315\323\2079\202\313e\272\t\337\t:\3204P9\022D\013:u\342?\272\034\253\227\271Y\022\331:}\025\3007\013B\212\271\016>!9\221K`\270\001`29\242\340\004:\230\322\205\271~Go9\375\270N\272!>#:V\215v\267\336\010^\270\265wb\271\345\373=:\206\372y\272^I\325\270\307x\010:\270\247\021\2728\304\3179EhJ\271\345\004H\272|\022#8Jk\032\271\313n\250:H=\3409\037e%:4\304\321:m\024\245\267\033#$:U\034\030\272\346O\2178\216\373F\272\326\306@9\025\037\035\272\003c\2239\177\226\300:\024\274\241\272\270C\2439\234r09\230\004Q\2724Rv\272\320o\310\271\340q\010\271\251fk\270\300\256\361\271W\006P\270\001\253J91\204\263\271\360=\356\2700\265\3749\270\330&:\022\341\354\272\306\312e\272\322\203\245:\014\237f\272U\264X\272_\006\303\271\016\216\007:\343\004\002:M\361\272\272\034\311#\272\234#e:\200xX\272X\312\331\267h>\002:V5\266\2710\321\3219\324\276\004:\002rL8\037\017\3669)S\341\272\271/\010\272\373\371&9\000\262\236\271v\344e:{\2159\270\250H\r:\261\354\326\267\347\330<9\246z\304\267\276\017\210:\333\351\203\272y\215]\272\221g8:\372\253\352\2713\247^:\344\014\022\270d\343\':\027\217\207:A\213\230\270S\343\375\271N\373\n:|\376\251\272\325E\27284U\3369\'\322l7\225\241w9\265)\2249\037NJ9o\264\2779\035x`\270\253m\255:\351\352\034\271k}/\272\006\035\373\267\227/;:}\007\t\272{\235\004\272\316]6:\326\217\006\271\205\226q:\"\030=9;\305\212\271\234\026\2258\316W\2239ix9\272\0276>\270\354O\337\270\"\324\3708\337\244V7Q{]9\235\273j\271qxp:\346\354\2319\027L\n;\377O9\271\034l\231\271s\207\304\272\332\374\2079\030\301\302\272\266\034C:\255\342<:\3656`\272S\251A8\336\377\016\272%\274\212\271B\326\2209\334u\223\272RLO\272*\232\017:q\3204\267\234[\035:\2123\000:\323u\360\271\000\0233\271V\2634\272`E|\2708\330\331\271M\343\215\271\3611\025:\263-\343\271M$\021\271ut\222:\305%\r\273\211\327\026:\347o\3328\233C\3209\025#\216\271\270\213Q\272z\256K:\267\374\t\272\014\257\3109\273\205\207\271&Ql\272\232\205\276\270Z\311\371\271V\232\361\270R\372\3269\020\235\370\272\372/(\272\234\335s9\200X\2419[\267n9R/]\270x2\027:xUV\271\222\253\200\272Xw\217:n\202q\272\353aC:\254\016q9\304\377\202:\200\300\274:\356L\225:\372\3246:b\202M\272qG :<v\027:\360\352~9N\013\014:\231p\220:W\013\215\267\375K\214:\222/\224:\252\214\240\271\026@\362:\372_\3507\236\215\237\272^\344K8uf\017:\241\036\337\272\233\357C\271\243)\202\271\346\'g\271\212\226\320\272\306w\211\272gN\2539\221\276\300\270\364\254\3169_S\002\272\306\2427:\245\332\003:\361[\232\270\247\301L\271w\224\264\271F\366\n9Z\232\027\272\367\256$:\340=q\270\364\277\204\272\034\240C9H9\206\271\227mY8\244\367\252\272\313w\2249\0252\010\271N\247m:\370\026\000\272=*Q\267\300\336\262\272\345=\210:j\206>\272\223q\032\272\335\3131\272\314\0176\272\276\376\344\26710\3259\353x\3029\221\211\256:\260R::i6\245\272Q@\025:\271\"\3369eY)\272\363(i\272\033\2410:\260/\3019\224\316\256\271\024\337-\272:\352\305\267\030\365\2749\027\255\233\272\264XW:\272.\205\270ky\363\271z\203\272\271\377\003\3039XT(:\343\370):\350b\002:^\334H\271\265\324\034\272nP>\272&V\202:)\327\217:\323\271\3449\233!\307: \262\207:\310\233\2379H\266x\271\265\211\353:\265h\2409%\251\223\272\277\016\3129\325@\220\272\215\310\2749\341\205\307\2706\231_\272V\366\2249\3400\3039\204\234\0319\232\033\014\271C\026\322\272\364\010\':\227\210&\272,\027\020:\207\355?\272\334RL\271jG\201\270\253-\n:k\207m\272\307\265Y:\321*g\271\320\210\\\270\3232\230\272\323\007\214\272\345iX\271d\001B9\036\031\302\271A&\013:\252\274\356\271\207\375\2378\251\322Z94\370\36184cd\270\031\303\242\272\031\376\212:8\003\2439F\251g\272\376(8\272\353\243\t\272\337\2702\272\262\247\001\271\265%\020;\327c,:\007\023#\272\331\266\036:\204\216\t:\r\340\3677\376*):#\307\235\2726\240\224\272\036\220\374\2719\202\007:\332{\2179~\336\000:E\37209u\225\032\272\221\275q6\t/\367\271\263\231\034:&\014J:B\036\215:\016r\214\272\206\267\017\272\273\350\3709a!~\272\341\255\257:Ej\3669M\247\201\272\347{\001;\211\363\026\272\375\260\214\272%\202\374\271\001k\271\271\332\026,\270\336\242\236:d\212\317:\313\241\0309\336\252\0228\260Y\3709\362%\255:n)d\271\353}\202\270\370\310\0039\200\241\272\271\023q\364\272\336\367\':\365\031\253\272\230\313@\272\360\225\377\271\275\377\3169\002(\0229\202B\2679\364\2548\271r\022\034\271\214\333\013\271\242\367\2279q\341\26396\002\2419\272\240&\272rv|:A\0141\271\t\366\3729\007\214U\270v\347?\271uv$\271\351{\020\272\260F\212:w\333I\271\273\365|\272\270\246\2519^S\255:\202\253\362\271\336\205$\272Ln\2249\326\376\204:i\347\'\272\026\004\334\270mU\364\272%-?:\270\362\210\272\212^d\272\216a\247\272\271\000s9\302\026\232\267\353*\207\271\0208\2068\324S\324\266\223\246\n9!_\0239&[\307\271\022\323\246\271a\t&:\240\010\3249\224C$9SAc:\316\024;\272\210V/\272T\222\007\271A\201~8=u\315\267\260T\243:\344\372\232:\334\233\343\271W]\253:V\033}:\356\223\002\270,\273\256\272\202\030\n:\325\346\3039\275\365\036:\236\000\236\272`!\017\272\230\264\3149\016R\203:\177\360J9~\235\002\271Z\275.:\304\216\3369\377`&:\004\315\304:W9\2769k\221\3369\377\252\364\271\371\005+:\027\350#\270P\277@\271\332\036F:\240\361\321\272\256\245\026:\352G\3707\350N\030:\3610\034\272Y\311\237:\026\320&:\006\234\0219\030\2548\272fI\2638TP\022:\330\234\220\271?\377\2708\264\214\2129\306\202\216\272\346\246{9{\261\302\271\211*\334\271\343\224\0339nd@:c\343\000:\237\"|\271FDU\272_Z\307:\"i<:\344\337\2169Y\364s\272\274\006\221\271\n\010\307:\226\330q\271Z\354\337:\247\245\025\273&e\2159\341%|:+U\343:\213\232\2719\300\302\273\271\322\203\232:\206\205\252:\321\203\247\271\027K\200\271\203\271\023\272\265\t1\272`!\320\270\201m)\272O\24499\250\321\373\271\250H\262\272\246\326\255:\r \227\272Y^\n\272\021\252\005\271Ve@9\234\201\010:\201l#\272\327\021v\272\035\206\037:\277\264\3049\374\010\276\267\230R\220\272n5\31096\252\3209U\322\010\266\366\317D\272\247RE\272\322\263#\271\244\313\327\271\371U\2659$\232o\272\271*Y9$!O:\224\244\241\270prG\272\362\350\021\272\367.\222:\367;\300:V\014\227:k\274\203\271\243w\323\271\271N\032\271\320_\2536\227?\2269\243\002\35498G\233\272\205Nl:\337I\200\271\033\266\207\272\002\275\014:!\336\2349\360.\034\270\313I\n8\030?\255:\016\232\2629\244\343\2219\255l\241:y\376\216\272\265\333\026\272\344\216\211:\206yX\271b3\0006\024E?\270a\325\0049F\237B\272\210\177\204\272h\351\0349\274\025?9\247-#\272s(\207:\007Q\2779\243\001\013\272!\315k:\031\356\3309\037^\2647\006v\2229hNc:-x\3309\006\222R9\244\362C\271ED\224\272\252$\244\271\256\323\276\271@\366\223\272\277\351\26593\202\262\271:\222\"\2729\250\000:\312:\0259\330\312\250\270\360v\222:<v\0339^\221\236:e\272\255:&\275\025\271\362<H\272\007D\027\271l\242\275\271 /\2128U\257\2269/\277\002:v\'\207\272#\374 \271\005m\316\272\2349%9t\021`:\336\354D9G\330\025:\367\346 \272\002\3268\272\243\207+\272\3433\205:\301\2035:X+\235\272\353\234`:\321Y\2739*\300\3119\364B\2719\005\377\020\271~\202\2439\365f\320\272\373\021\037\272T\360\016: \303\240\270\263\332\333\271=;\303\271d\373\345\271s\010\020:\2069\241\264\360;\261\271}\243\006\272\320\361\200\271\031\262\214\267km\016:g9]9#\306u\272\270c\2759Z\'f:\307\225\270\272$\253\037\272Z\246\200:\310\373\r\272zR\3619w;\25379\233|9\354\374\033:\317\236&:EK\233\272\r\351\267:W\034\2739\347\232\217\272\243\257\253\271f0}\271\177Z :\0104\264\271\320y\243\272\247\343\014\271m\304>:\224a\316\270\302\3329\272\241\276e\271\243\221\254\272\n\246q\272\375\350x9\013t\337\271\372\207\237\272S\275?\271d\\4:Z\033\253\270\347\0100\272\375\016f:\340L\300:\231\300\215\272\310\325\0039\3269\211\270:q\035:\362}{\272\363\240\334\271u\273=:\237m\235:\027C \272t\273\254:d\352\2679\303\352\226:d\237\2659\246\242\226\272\367\200\213:\320}\3749Q ~:\347NE:\325D\242\272-\026\371\271\234\t\006:\346\321k: l\3419\321)\030\272\362\262<:\210\203\264\272\237\370\272:\221\220\230\272\200tL9\375\340\214\272\2644%:N\326\0279#\013\034:(\342\350\270\351\"\211:8\331\034:DF\277\271\334|\363:\000P\031\272dd\3679s\247\355\271{\234\274:\026\000\0239y\204b\271\273\206\013:\222\027\272\271\256_\004;\250\016\336\266\200\215c\272K.\316\272]-6:\007(\2719\230\027\004\272\r\273*\272X\343K90\343\375\271\266r(\272\224\352-:\312\022P:\330\215\t\272\251\237.\271\217\311\246\271]\222\2459\327\211\2449\243M\0049\346\206\":\322\243\312:\276\255\3218\253\242\340\2717\245\204\271)(#\271\2720I:\330w\n\272\\!W:\035\204Q8\233i\004\272N\304\202\272\266\311%:S\335\310\272\r\362\350\271\2261\233:\302\035\215\272\210\326\265\272J\243\3567\233T\r:\343\236\253\272n9\241\267\221\2500:\273\234\365\271/\007\2079\231~\320\272\244\321$9\024\216\351\271\322\rG91n\3308\032\002B9\027\360o\272\365@.:@\204}:&w\234:\235\272U\272b\035\014\272\3769\2629\003\366\247\2723\177P:\236\365\267\272+\0053:\375\3513:\tF)9\343\'f:\3700\2668N3\211:\245F{\271u\227F\266\210^P\271e,\325\270\027\323t\272\032kj9S\345\3169R1\036:\314j\223\272\251\317\373\271\226\245\020\271\334\\m\272\017\200\216\272U\253\217:\202|\226\272\207\325\0379\347\331\017\272\007\245\3659\003\243\352:\322\242n\272!\356y:\030\353!\271ng_\272\246\202R\270\224\217\001\271\376L\223\270BV\177:\" \220:C\014\035\272\353\236\306\272.\017\307\272\227\224S\2726\266 :\204.\241\272\340\317\016:\252\301[\272\256\007\021\270b\201\035\272\033No\272V2a:\314\2343\271\214\031;\272\337\301\2368\266\230a\272\277D\n\272f\342&:\222>W9\304\006\343\271\373\305t\271\n\357\301\272\336\277\340\267\231iv\272\335(9:\226$\026:mW\025:D7\221:^\'5:\246\227\257:}-\204:\266\265\201\272\327\036\310\272F\215\t\272%vZ\272.\301\226\272\"W\261\271k\263\26098\023\237\271\254\207\334\271:\013s\272\244\017\235\271\342\321L:lg\3679\261\267,7\323xB\271\270\357H9{\253\013:\227(\3519\336Q$\272g,\231:\266|\0179\204\322\221\272\250q\3256\225\250\327\270\362\021\314\272\246p8:u\307\211\271\324\333\2769\363\256n\272\310\251\332\267\363R\330\272n\300\321\270\255c\2748\336\"\36497!\017\273\367\007\030\272\311\240}8\370{`\272\265v\271:HB\202:\317\352\2769}\326r9$m\2539\315\200F:E\242\241\272|b\0348h\335\2259\341Le:\2437O\272\316je9\235=\255: pM:\306\327\017\272M\t0:\260\325a9\242\316\025\272e\016Z\272\n\237\305\271\242f\177:\334\267\341\270\235\270\013:\002\226]:\354\301\355\267\'OB:\242\336P\272\255\315\204\272\270 =9\276\312\226\272\211\267\343\271\255\331\036\270\261\362I:-\313\016\272]\215C:vHz9d\016\2179\371\205s:/Vu\271fr(:\367\350\2719*\277X\271\350\267P\272\337\006.\272R\031.:k\014e\272O\016;9a\010\3378]\302X\265\300\301\335\270\272\306\201\271\273\tw8t\351\022\272Mf\267:\261\351\340\270o\255/\272\262\376\3179\027h\2209\320g\250\272\247\020@:\374\367\215\271\346\'\241:\223\303\021\272\211&\020:\003\024\3367I\252\322:\210*\341\271N|\235:=y\241\272XG\273\271\267\306P\272\303X\376\270UO3\270\217x\207\270\001\307\340\271\235\r\3158\261\010\276\272\t\177\312\2716Y\250\272<A\302\271\370o\216\270\010\006\2428`A\2248\321u\3009\276\200\3179\201\333\311\270\264v\340\270T\265\2049\230\346\364\271\315G59\254\010u\272\005\234~9\375w&:\003P*6!\316\243\272(\232\3248\t\001\3359\357\361\001:\325#\223\271\240\306J\272\021\301\034\271`\211C\271\"B\2309+\311;\272\260j\312\272\346@\256\271\342\275\243\271\235#\2739\026v>\271D\316\2219\225\301\320\267\231y\322\272J\030O9)\374\0027\267}#:G[,:\262\205\0179\371\202\001\272\313u\017\272\354\nk\2712C}:B\235\263:g\247m\271\0308\034:Z{\235\271\254X\013:\2722\206:\314\250\':\366F\2709-\261\3109\031t\340\267n\270a:\302\177\263\272\324\352\307\272\333\240\201\272Q\226\3659\"=t7\242\013\200\271\352\013H\271}nn:\264-_\271\220E\025\272+~\177\271x\370.\272\022\375\t9X r9F\244\3359X\266\320\270\315\256\027\272\214\277\':\n\263D\272\371;\"\272\252\337;\271\243^\235:9o\223\271\337\2319:\005x \271\257Y\217\271\2275X\272\250;~\272\360w*9\r.3:\'T\310\267\337\301\334\271\037\202\2048\342g\246\272\363a69\311\257\221:\304\276\214:\360\017+\272\353\373\330\271D\222[:\016\322&\272\344m%:\223\375\0008o\372\253:i\"$\272Bb\2049\005\215/\271]\215\322\271\225\200\223\271\036\024\215\2671\006\2249\010-\0168\240\007\2069\375\377\274:%O\345\267[$\2439\317\356n9\245\357\003\272\357\010&9\277+\207\272lLL8\027\347\344\271\312\321P7\223\031\264\271\231-\223\272\334!\300:Tr2\272v\233k\272\337\260o\270\224\rr\270\321t~:\355\003%\272a\201\2169\222k\2549B\322\010:\340c\2578\223\325\2249\273X\014:\n]\006\270RP\3639\262\241%:\250\2441\272\247\200&:?\262\205\272\273\301\3049\214\347c:l\270j9\033\332\037\272\023\321\000\273H?E:\250t\235\272\255)\344\271%\27389A$\220\272\270\001\3379%\274,9\230\357\315:\301\255\2167\274<\304\270\330\0317\272\327\246p:\216\026\350\271\354lt9j\366K\272\327\364Y9F\305O:\322ar:\345E\":>\327Q\272\033\302\207\271k\026c\271\316\335\3469\276\002\2579\314~*\271uJ\232\271\360,\026:\"\204\343\272\275\\\001:\257J8:\002kt\272Fa\371\270\031\323\325\272y=G\272\025\240\314\271\017\255\307\271Cs\213\271\253nn\271\260?\2658\005\275k:;N\347\271\253v\301\271N\354}9\316>\245\271^\216d9\000\037\205:\231[j\271\327\254-:-\202o\272x\014\376\271=A\352\271\324\247|\272\306\010\226:Q\335\3479\246\342\204\2724\026\3448O\032\354\271R\272\r:\034E5\2725\356\026::\322\271\272\255\334\003\273\001\376\177:7c\300\271\236\361\246\271\007\332Y\272\316\321\000:o\252\010\272aJ\262\2714\333\013:\374\373b:\210\216):2\344\031\271\361\320:9,\234\3009\354\332\307\270\351\325\006\272_\2441:_\306\224\272\266\304\006:&\2002:\302\017\345\271\300J\245:\223yh9\355o=8\233^B:\376s\001\272\"`\0279R|-\271\324\177e:)v\2118\301\022\2279\211\237\026\272\361\032 \272\307\213\014\272\362K\025:\003\021\307\271\232\025g:\023v\022:\374/\334\271\223\010\224\271\261e\003;\000p\177\272\341\03529\266\340\3258\201z\350\271w\001\204\272\347\322\2549\246\322\2018$\374x\272%\221\253:\322Z7:\233\006\240:\342&D\272\232-B\272\242i\006\270\255t}\272\250\003\004:8>\2629\021\237\0039zy\314\271\327\310\237\272\323E\024\272\327\351\314\271\275t@\272\"6\353\272\017$\000:\363<\014:\261bm:\337\203$::\252\2249\243\224\212\271\'/N8\317\n\231:\021\325#:!\202Y\272c\311\0309\0208\017:L\306g:\317\037\006\271\037\"\n:\275\235\025\272\201e89\n\202\3149\352\341\320\271\nv\000\272\357\020\000:\031\303@\272\241\2514\272\327 \207\271kd\025:\345\310$\272\016\226\003\272r\355\2429\375\304\017\272\324\367\2308\207\324\034\272\221\372`\271\365\377\022\272\204\031\371\272\372z\235\272\202S\007\272\034wG:\350j0:\266\231\0279x\301\300\271\271(\350\271n/8\272k\020\027\272;\235\211:\337\265O:\237\014\3128o\343Q:\365\3003:\311\244q\270\363m\222:\t\000\265\271\334j\016\267\313\030V:y\300\212:,\362N\271:;\2638\340\000\316\271\314\362\257\271gA`\267\023\340.:n\\\254:\312/\266\271\010\005\2129\231\347\264:c\245\210:\335VT\272]\342\221:\2557&\272\216\356\033\272\256\31488\325\367\024\272Y{\256\272\357z\333\272\'_\3668\317\212\0009\217^\210\271\252\r\222\271\230\250\3158Y\234t\272\004DQ\272F>\3079\3316\021:j+\240\271\2716\033\271Y\261\3419\241Hr\272\326\037\202:\t\351\365\270D\336<:K\346\2127KjB\272@\010y\271\274$\266\271\001;e\271p\014\014:\252\253F:\207\2155:\216+\034\272\237\225r\271=\254\3418\253\226\243\272\033 \r\272\213\205o7\242\364\037:\227\302i9l\376\0139@\331\037\272\234\247\n\272\270\207\2509\243\206\216:\230\200\316\272,O\210\271\354Az\270\2118g\272E\021\274\272\314\276\226:\036\007\205\272\264\226\3639\207\003\001\272\2653\t:4\221/\270;{\305\271\346\350f95\327\024\273\251\364\267:\3647!\271A\362Z9\355\273\2728\272;\330\271\364\241\243\271k\306\3006i\006\346\2714\332\217:n\352\004\272\251\010\2559\013\177\2719\306\251B\271g5\'\272$\027\2209E\255\202\272\345J\326:S>Z\272\371\353\024\2722u;8\205\333\004:\240\337\2149]\307\2638\333\n{\272\350j.\272\330\350Q8\344\024\216:Y\234\230:\313/\274\271\005\234l9\252\240\2717r\210\3448\360\307u9\007\342\234\270\022\213\026\272\3529\0209c\367\264\267\220\306\037:\031M\264\272\266V\234\271a\005\245\271\335\3272\272\000\001G:,\014\3359\321:{:\341X\266:\024\277g8\242\261x:R\353\2509\2663\366\270\n\000\3659uvO:\225\265\215:\335Y\3279\350\250\2568\310\263\3739R\372\3749nh\312\272\005\251\277:8v)\271\343\252\3709!y\r\272\275\331@9]\275\315\270SST\272^z\3539a\231\2118\266\265\007\272\201\376\253\271\361\355\211:/\302\267\27241\3319\340B\025:\371\355\032\272w\301u:\236M\266:;\230Y\271\272\"/:\317\312z\272\256\324\3779\032e\024:AE*\271\326\025\2347\335)\000\272j\007\361\271\026\022\2057\034\300X\2727\335\032:\305\305\255\271c:u:`\256\2708\242\275*:\3644\235\271\263\035\2129\301x@\272\003L\003:\305\313P\272%n@9\n\0234\272\t#\2546\327I):B\200\331\2720\377\0149\2758\216\272\247\307M\272&v*\271\325\234\216:\346\014\n\272eo\204\271K\\4\273;$\255\270\203\246\037:D\353\3628\025\t\3255\305K\226\272 \263G\272n\016\317\271\217.\250\272\252V\211\272\221\340\211:\020-\3139\320>\277\271\016j\027\272\030\341\343\271$\321V:f\247\2739\232J\220\267#3\007\272\016\010\022\272\370\210X\272S\346\3709\313\034\224:\250\311]\2679Z\031\272\217LC:0#\254\272\037\237\024:FC\007:\0313\033:\276\177\204\270\315\202O:\300\177\236\272\324\265%\271FJ\2739Ip\217\272\006\300\2119{(-:\352\360<\270b\255\310\271\034m{:\361\322\373\271\215n\\\272\321\033\341\272\256\357/:D\270\341\271D\024\302\2720\304?\271\202q\2419\0201\223\272ui\034\272Z\363\211\271o>\205:\017\210j\271_\t\030\272[\177\237\271\341\021\3137\356\016\361\271\327\216\2279\217\325\227:\344\312\241:B\256M\271\247F4\272\267\265?\271\314c\2679\213W7\272D\024\204\271\372\365\240:/\271\244\272\367\326\t\270\025nT\272DO\275\271\226\344\032:g9\3519:158\217I\':`\0019\272\260\361[\272\302t+9K\t\206\272\206M\033:\263\220\0149\310Nx\272T\320P\272\0050\n:\354\01458\245\r\026\270GC^:R\241\266\271\203\262\254\267\237\344\0368@x\024\271\374\306\003;\372G\3527\307\022F\272\217\251\031:\t\035\021:\252\036\207\272\201dJ\272\376T\3559\301F\245\272&b\014:$\2515\271\177^\257\271\334C\3518*u\027\271\314\334O\2723K\314\270$\254\026\271\360\354M\271\257\221F:\353\372\006\267\344\252\300\272{x\3339\230\227\035\272H\3351\272\264\224\226\271xw\372\271a\372\224\272\201\311\213:B\252\241\271\300\223\r:6\306\260\272\275\326\271\271\200\034\254\271K\346\2349\246hS\272n\20319M6~:\220\234\273:Om>:\201?\"\270\307\240\212\272\365\334\273\271\230\357\010\272A4\220\266\200\033A\272\373\032U:\254\006\0379\2532\217\271\264T\324\271n\205A:,\377\033\272Y\336\034\272\336YP\272\211Sc9\021\324{9\026}\0109\036\232\335:\014\016\275\272\356\t\240\272\263a\230\272-\032\356\271\001\257\2578M\262$\271xzj:\224\224\244\272\030\327`\270\331\345`\2724t\231\270\355=*:\306iG\272=X\2748mNz\272Q_\222\271o\014b:>Z\246\272)\220\373\271\033S\025:\021\240\n:\347\326A:H\215\2037H\334\206:\227\314E89\350\030\267m\243)\272\035\315\036\272m}\265\272\315n\2708\361\346b9\3741\362\272\201\024\205:\352v1:\250W\330:\317r\224:n\357\3049\356\332n\271\005o\227:\264k\206\271\227?\226\272\343$a\270\255M\307:\307\356\3159\236\t&\271\215^\2139\232p\272:\300\250\315\271>\314\204:cP\274\271}\332):\226Ze9\254N\215\267\177\267\227\272\305}\2069\210\347\201\270\014D]\272JdX\271CZ\006\272\310\000\0338f\346\020\271\343d-9\026\n\2769\006\305\r\272\027\274\3016\n\335\261:0\212%:g\340\0049J\rN74Y;\272f\303\325\271KR\002:\225\355:\272\377\267\2659\"Y\243\270\340\005=9\t\3572:_V\223\272\"\370\2768%4\3039\365w>\272H7\2219\212\202\241\271\2308\241\271\362\271\224\272L\333\260\271\233-j:\0355\020:\210&\"\271\005\320/:\376\013~\272\354\372\237:ac\214:w\345\035\271\237\352\014:`\255[\271\266\313\004\273c\312/:\216@\3179\005]\265\2720\366\2629\013\375-9\312\\\242\272/\265\207\270T!\006:\223Qu\272\000\234\336:\320\3304:\200d8\266\017\304X9\276L\010\272\234p\370\271)\231\2629\234\270\3549\363x\027\272\343\006\204\272\301){\272F\357\020\272\337b$\271\267]\332:Wu\257:cC\3539\210+\232\2726\313\3268+\345\251\272\245\017\0209\003e\026\271\013\250(:y>9\272\241\\\2747\214.\222\271\247\372\324\271\311\335\231\272\004\355\3559\335\253\216:\374]\031:,\370\3729@K\026:\215h\0309\021\206{\271\236\213\210\2713R\016\272&\204\016:\333\204\346\271\204\026\317\271\313\244\000:\236`\200:\023\177\037:\"\317+\272\251t!:\r~\220:\0314\302:\205\305\210:z\367-:d\234\3609:$\0329~\005\030:j\207\252\2717\010\025\272\355\031\20291\202\020:\360\217\251\272n\251):\367Se\272\220\031$:9\360#\272\257\210\303\272\272\347\034:\020\261\0379\261\351\3479\211\331\223\270>tq8\0142y\271vgJ\272\266\364$\271\177P\r\272\330\222\257:\"A\250:0\316;:\t\206\344\271\357-\221\271\021\206\365\2716\324\351\271av\2069\336\341\0068\370\223\2169<\377v:q\343\2219\022\311492\236G:\007*\000\272\004}\3749Y.\2629u\301\3139(\332\3159F\271B9\005;8:L\000\3479\005\205\222:NT\213\271\207\314\2009\037\343O\2724\220\2109\035\366\000\271S\'\227\271M\364\2449\354\364\247\271\240\374\350\271`(g:\215\000\307\271\225\341k:\211\2449\271\244\370\3118\023:\3429?l\207\272\227\276\000\272\325K>:\031\322^\272\'~\013\272E\001\3136\300 \213:\335\177\3009\251\301\2449\035\205\250:t$\320\272\020\305\247\271MaF\266:\306\376\270\037\256)\272*\302$\271Ug\207\271\034\024\2349\370$\3569z\026h\271\257\370\277\272\3712\371\271}T\000:)w\003:\014\2659:S)I:v\"T:\226\355\276\272tv\352\271\346\014\007\272\027/\2539\035\374\3709\330\315\2258\241\315i\2713\213\336\270\366\256\223\272\350\034U\271\345h4\270\306\340[:{n\270\271\3550\036\272\025\225 :zny\266\014c&\272\330\372\203\272\350\225\014\272\254\024\253\270_\302?:\246\377d\272Y\311\013\272\314t\223\270Z\230\3419=\000\345\271\2021\3138_a(\271\201\025\351:\277d\214:c#~\271O\370\001:\277\250T9\205,L:U\213\001:={f\272O\207\2349\233cl\267\341y\253:\003\010\360:\352\356\206:u \007:\203\260\r\272\204\374\230\272\312\023\217\271\344\004V:hK\357\271X\312Z\272\330},\271)\274\336:\005\340\275\271A;$:\037LQ\271\346\263#:J\021\2429\002}H:\217s\372\271\254\356N\271\350/W: \317*\272\334\206\226\272\304>\2349\263m\235\271\341\220\321\270\355\262\0229\313y\226:\002R\027:\271\352\326\271\254%\026:\346ec9|\263\225\272Yx\2349O\305\266\271\203\203\357:\225\371\2249\337\336n\271\327O\\\2718\355M9\224\352R:\321i\026\271\320\240\2379Z\330\3239\245\336\3609}\355796.\3079yLD\272x7\335\271\234\355\240:\252a\313\272cf\026\272\340?\355\271\000\270h\272\024\372\203\271\252\024\205\272J@\351\271\254j\344\271&\304\"9\311\030\237\271\257$\203\2713\230Z\271N\241\245\272\031\031\344\27138\340\271\310\254q\272|\346)\271\350\"\256\271\303-\3769{\301\2669\035\2015\272\226G\t\272\206\311\204\272\300mU\272T\373.8\303\n\2409\2121p:>L\035\272H\326\r\272\367\314\2459\372\211O\272\360\376\240:f_\034\272RK\2639\202\270\230\271\346\177\2449\2146e:\331\000\221:t \t:[\032\3028a:\227\271\201\272\270:\277\346\034:\023gA\270,\244X:8\326\2518@\276\217\271\263G\301:\273\224\020:\233v^\271D\267\3338\235\234\233:{p\366\271\313/\307\272\014i\321\270\301|\216\272\275\217-\2727\367\2039\010)\223:=\021t9\3213d\271\363\003\240\271\274\272.:k\276\026:\016% :\344\325^\272\324p\247\272\376\'a\271<T\2519\246D\021\272~K4\272\371\332\3229|\346i:\270\342\225\272$\235\204:\224\'\323\271+\330x\272\332\312.:\251,:\272^\014\267\272\021\366\303\271\357\023e\272Y\007q\271\341 \2639\350a0\272\320\341\204\271\007D\320\271\343x\216\272\331\024(\272\3456\227\272\007\236W\271\207\301y9G\237\"\272\2447\225:AI\3019|\351\3347b\245\2028\273\314p\271\351\236\255\271k4P:c\246T\272D\242\231\271\363x\364\272\332\364u:\2327\2139\263\263\266\270=\262\242\272\0344<:\212\270\010\272\300\372h\272\204\253\t9\323E\257:rb\205\271\346\'\307\271~\206X:\255\035\205\272\221\310\n\270\215\033\014:\301\277\2329c\225o:\022\351\217\271\207[\0327\317\001\243\271\235\365\203\271\311\007\020:T\361\3439\206U 9\213R,\272G\273\306\271\306G\201\270g\276\3009M\207*:\026\177H9\2178\305\270X\252\0209\356\260\273\270\312\034\266:\203\351&:\256\r?\272`\346\266\271I\265:\272\013\010\032\272F\0147:\345t&\270l\tu\272M;\014:uft:\233\236\r:\224b\357\271\205\237\3309O\264\304\27152\2248\314\356\304\272\347\253X\272\006l\366\271\303\234\006:9\327\213\272BV\365\271\243\351#8[\231s:\340\222\244\272\220.\220\272\271\321\3019\375\274/:\346\255x\272\333\241\r\272\230\370\200:\352\201\3349\334\271\3349W\ts:\333\325\223:\376\346l\271\232\032\211\267X\262m\272\266\331\037\272\3045\364\271>\225\247\271\016\356t\267\271\362\024:\026\345\251\271er\232\271\332\242c:\034:\2419\341>9:\315#\351\271T\'\246\272\002_\2417\t\207>\272}\353\\\272\030\362\233:Y}!:->\265\271\005B\2406\233uY9\372\272\226\271\306\337^:qD]:+2\240\272\305\253\2738]B\r:\341\301\263:9|W\271-R\217:\177\344\220\271;\355F\271Y\203\305\271m_\2739\307\313!8\003\310\n:e\010\224:\005\220D\271\025\300\213:#C\346\271\271\rC:z\305;\271H\346n:\275\355\2678\245\217\227\272\210\343\304\270\021\034Q9q\002\0329r\251\262\272\031\017\016\273\207\33048\264\20649j^\335\272\031\014B9\270\267\264\272\307\021\2079\355\24629\336\3332\272\221\355B\270q\222\305\271\\\003\3759\344\022H9\206\234\2107Sr\\:\323-\320\271\372\347G\271+ZU9\352\206:9\350\003w\272\002\314\215\271\346Go9\317\023\3529\376$2\272IDQ\271\222\277\177\271\023\034s:\334\205\024:*H\223:\222\377\0279M\271\0318\212\024\201\264W\002O\272C\244G9\346ka8\'\321\017:\317\243\2429\2768\3119\263\025^\270\313\247\027:\214p\3019:\235\r\272\3604\004\272\363\340\2639\343\320\031\271%(\251\272U\344\2078YM\2119R\002l:\243\377\257\272\030\215\2149\256\316y:\014\013\277:\006\304q8\207N\3649An\247\272\257\016\227\270\202\252\376\271+\201\004\272\033l\3449/\"\013\272!\032Q9u\346\306\271\224\204\305:\'\317\235\271\3213=\270RK\263\267*&0:\260\020\317\272\200\374\305:\323\2650:\334\223\3569\306\302\274\272\214\014\0239\016\361\034\271(\255\0258\224%\2039\200l :@3\2259xIM:tP\337\272a\332[:\243X\2048\256\247/:\273\361\030:8\002\025\272n\357\3638@\\h:\036o\2239\262\264\\\272\001\244\3279\350\363\276:!F\333\271\235\246\233\272\320v\206\272K\274\203:y\035\303:\250\207\2339p\363\266\272\201O\2006\362\256\2048\\1N\272y\277\202\272a;/\272*]=\272\002>\374\270nj\023\272_\20359/\276q:\311\330\256\271|\323\3019\221\206\"\272=t\273:`J-9\022B\235\271|\356\246:X\001A\270{)\272\270@h\024\271\n\225\2278+\257?\270\332>::#\027\206\271b\010\361\270\242e\000;\350DU\272X\275\21681A\253:O\373\002:\370S\273\2711\254o9\205\216\225\272\232GE:]r\0219e\253\036\271\245\004\013:\313\206\027\272(\350\236\271\303\266`\270\372\031F:\303\323G:Ew\032\271\261\362\026\272%w\214:\223\0328:\014)[:\201\n\031\271\362t\302\267Yz\334\270\007\026\010\272\331\311,9TX\3627\020\223\272\271\352v\266\271\312\230\005\272\276\220\023\2727\242#\271\351 \356\271w\253!:\306\361-:\247\032\025:?\224\":,ld:\370\033\022\272\034\377\232\271\374O\301\271\255\301%\2705a/\271\327|\2069YO\000\272\202dL\272\361v\317\267i\016\212:\354\335\':\312\363::\314\231\0219\333\257\262:>\2618\272\026\320\3439\366VS\272\215\306\0149q/R\272\226B\201\272\330x\206:T\374\217:\316\247\002\270\327\272\001\2737|\224\272,\030\2267\007vA\271\030\334\226:\265D\2739\005\017\033\270\277qR:W\200\3278v\215\230:u\367\233\270\004\006\0249\007@\250\272\025` \266\303\325\"\272P\035\274\271\225\371\2227M\001\004\272\351;l\272\000\367\377:\243\201\3219S;):\255V\0049\345a2\272$\270\2769`\031j9\006\341`\272\r\n\025\272\035\367\211\270\347U\2459\0016v9_\352\024\272\010\342\246\272\034\310G:B\365u:\207\360\2339\363z8\272Y\031\3719\177\225\'\272@\311t\272\032#\010;\021\315\235\272\201\236\005:\317\003\222:\307\357\026;j\005\2659\014\022 8\303\021s\272h\20719,,\203:]\263\3279\376\375\2669[\032\240\267\3506\247:\003\221(\272\2714-\271\277\275m:q\006}\271C\240\3019\215Z\3009O\010\317\271Z\357\270:\032\232\247\272\265\335\2739-\213\014:\000\230.:\251D\246\271\313z0\272\331R\206\270\220&\271:\003Z\217\271\321\337\275\271C\316\310:\223y\037:E\335\241\272\366\373|:\236\017;:\222\237#\270\213\367X\271\220\264\032\272\177U\3748\255\004e9\333 \270\271\271*\030:\2336\3129^\2143:.f\024\272\214\374\263\270\0318\243:\202\346\353\271;\212\301\271\262\240\2239\021r98#\010\236:a\315\2439\267:!\271\201\314\324\271\224\377\33286\310\301\271\274\335#:\323\346P\270\350\010\255\271a\200\266:3M\210:\333\353v:=\221\2058F\241\275:\352\326C:\232\030h::\02448\274DH\272\246~\3719O\247W:\024\262\243\271\207S\261\272m\300)9\273\273\3779\270\254R:\364\010\3658\026\312\2179\367\27599\202\233\3478\326\202\2446\204\251\361\2701\257\320\271O\256\2608\313\372U8\356\003\003\272~\363b:\206\277(:\367\316\275\267\213\025M:{q<:\303\000\0179KH\3768\364^\253\271\020d\377\271\r\204m:-T\004\272\360\330\021\272\235\332\2429\037\002\331\272\252\313\2229H0\260\272v\332S:\036\362e\272\360\301\2129K\355\002\272\341:\026\270\327\311\3779o)\001:\353\205\007;\367n1\272MW\315\271\020\032d9zp\2329\244\331\276\271\321U\201\272?\337\322\272\245\202\266\272\021V\2058+\210\263\271\275\314\341\270.n\221:\026\261\2169\363\003-:\017\233\2019\211\213\2159\216)\3528\336\374\204\271\200\017\2519\340C\3539\373\344\340\267\271\351\346\271\247\203\2317\345\035\234:\004\r \272\344\000\202\272\222\035.:V6X9\215\205!:\006\322\223:\251\037m:7\371e\271\253\305\345\272m|}\272d\345J\272\3604\2146\330\205y\271,}J:?K\020:\326\277\223:^?r:6v\277\2729\256\n;\'d.\272\301V\0217W\3158\270\376FI:t\356g:p\340\016\2708\326~:;\357\222\271#\232X:r\013\3139Y\t\2018\2235\3778x\202t9\316o]\271\013\216\262:\307b\3179\361\241C8&\245\\:f\376^:\277\357\025\272U\020\277\272\335\362\254\272\326\275g:y{&:\347VS\272\357B\2008\230\005\356:Ru\230:\003K\034\272\362V3:\250[6\271\376\034\213\272\236\265\025\271\327\362\3719\267jt\272)k\2568\333\255\3169|\002o\272\226\361\037\272\322\013\007:\355r\233\270\317\340j\272\335\205\215\272}\337\002:\341\025\0269\003\017\370\267\257\224\3039\303i\3719\331S7:iJ\210\270\316\226D:\231\211|:!\252z:\341F\373\271\320\237\003\272e\327Z:\331\344\271\271P<=\270\356\350\351\271\177\030\376\270K\177<\272$Uv:]Y\0007%C\260\271\033\031\"\272\25271\272\277\1772:\303\265\206:\024&i:/\322\301\272\203\254\007:x|\330\271\270\325\2308\240\371?7*?\311\271\20570\272o\020\035\272\027\364w9\253\260\250\272J]\240\272\341\222\315:\004k\210:h\361%\272\033\334\005\272u\327\0349\215b\2549\343\224\3778\027y\003:\027\226\312\267\363\272\0359c\335\3349\274h\377\271\004+\0038j\231\0209R\007\344\270\016\351\010\272|\032C\272>\360\372\2710T\342\271\027\370$:\333N\0359\277}+\2726\350\0169\254\231\211\271\225\226!\272\322k\'9\\\2613\272E\310\3439q\265\261\271<\233\3449\241\001+\272\342\355\2608xI+\272\"m;:\222\r\216:A\336\020\272\002b\013\2726\331e9\243\374\230:\016\013A\272(\324\224:z(\376\270\301C\022:7\240\316:{I\005:v\231\253\271\212\224i:\243o\2459\325\021\210\272\251\244\241\267q\024&\272\025e\2609]\001\375\271\216I.\272-Hq\272v]\202\270\304\212!\272\303\367\246:\325XM\2715~\3179T\016X\272yL\327\2700\3209:\375\362\342\271W\313\371\271\355\243\250\271\310\200\311\272\r\"\375:\277\251j\270\234\324\3629\031n\223:F\027\2329\336\300D:\310\025\3419Ei\240\271\200\306\355\271k\222\3038n\200\'\272$\261o\272\311\300>\272\234\211/:\276\210}:\206\313O\272\203\2524:\373*\222\270\324\242\223:\366\353\310\271\235H\317\270\230\353\216\272\225\205\3178\177\251\016\272\024_\0319\2431\3719s\220\215\271\267|\202\272h\213\014\272\232o\037\272\004J\203\271\241\312\303\270\375\277\010\272\024D\3568}\001\3419q;\213\272\257\237+\272\"%4\272\325].:\257\331\035\271\217y\210\271\300\207\254\270\214\304w9\033\230\323\272M\270q92\305\262\271\357\327A:\001o\207\272*\355\220\270\033\021T\271u>X:\"\257\3559\307\346\025\271\350\3677\271s\206\357\271\362;\204\271a\0213\271\373\355!:O\2740:\006\227\234\271N\225\2747D\226\025;I\273\350\272\331g\326\272\321\315\2149\353\362\221\272\264|\005\271q\320\220:\\\251\347:\203<\250\272K\2670\272w\231\245\271zg\005\271B\210v9\320PY\272\252\257\337:\375\344\236:\014/\307\271`\334V9\373\014\'9JX\260\271\260X\013:q\211\3149\225\006\3659\220\271I\271\255\263M\271\027\2340\272\036!\3759@\344\005\271|+o\272\035\323\3269\203\3441\272-g@8 O\023\272\234\22449\020\"B\2716\276\003:}Y\2619\254\000<9j6a\272.\216P\272c\t\246\270\207Rl:\357\232\2619\315\0269:R\346\314\271\226\355\242:\010\260^\271\025*\3578\001\353\203\272\251\353\306\272g\252\351\270R~\327\271>\316\020:\261\345i:#RI:[5W9\206-\261\271X\245$9zc\006:V\"\3149F9\2719\355\374\006:SY\2279\244VN\271\351\311\265\271\275\247\266\272\177\353j87\013q\272\030\312\016:<\324\031:\374\363.:b[\340\271\204\227q:W_8\272\276\204B9\035\365\3459}\272\"\272X\267!\267xf\2249\251\367\3049\315\027\0249\202d\2379\311\243\3679,Kp\272\271\027\3538\375\017\332\271X\\\':\3241\':\217\220\005\272V\005\306\270\360T\3449\330o\371:\305?\0079\034z\3668\374\341`\272\252\027\254:u`\2228\354aN\272\367e\2759o\223\024:\331\"\010::\2649:]\240\244\272 Pi\271\330\365\021\272@\266\240:j9\323\272\324\251\2549\372\251\320\271r\277\355:I\006\000:]\030\337\267I\374\273\271\037\302\225:\231\272\3419\310\217\251\272\311\240\307:\301\350i\272\314\304U9\246\372\272\271\\n\0149y2\244\271\344R\2169y\324~\271\220\210\251\272`V\226\271\340}\026\2712\215\214\271m\230\352\271\2277\r\271\233~\2559\304#\001:\357\267\313:\345\372O8\007\233\351\270\365:\221\272s\263\221\271\235u\331\271\351\36079$\000o9\n\007\263:ZT=\272\226-\001\272\276\007#\272\361g\r:\265K6:x\331D9:\360\2139\300=C:[\235\347\271vd\342:M\'\223\272\337P\007\271\377\321&\272\026\331\3339\303d\245\272\016\333b\271\321\231\\\272\034\305\211\271\200\027z\271\003\177\":DFN:j\210;:u?#\272N\3020\272\245\251u9)9\256:\310\033\003\272\207\221\022\272\231\031b\272\201@\243\271R\253\3359~\205\314\270\237x\2209\006\252>9\244\240#9\2318\213:4\317\2248\250\357\004:u\243+\272\216\327\247\272\033N\263\272\025\343\3159v\247\2659\27080\271\210\267\202\270\275\241\214\271\024\305\315:6\252\33786}\221\271\312\270\3719\262\373\215\272&\234k:\013P\"\272\376\357t\271\341\220T:O\273\243\272L\312\226\272\336\302\211\270\323\023\355\272\324\326\300:\005\276+\271\207\322\014:O\325\257\271\217\262\033\267u\306\361\271~\264a9>\212\201\271\211\241\030\272\215\342N:=\252Q:O\037|:WT$:N\323\3478\337wT\272X\254\"\272\302\345\247:4\223\3579j\377\245:\356\215-:\214\353\004\2718&\013:\216F\3518\036\241\300\272\372\265j:\003$J\2705\260\251\271D/\026:M\204\035:d\n\312:{\200\3339s\316_\271\256\266\273\271e\201\0328\365\331\366\271\036^\220:$W\027\271E\360\276\2675\031*:L\361\000;\337\372!:nV\266\270n\323\211\271\272\031\027\271\004\321\211:i}[:\022e\261:y&\302\267\243d\330\271e\'\3059P\250\277\271k\242&:\366\341\350\272C~\371\270z\322\n\272\355\006\261\272\354}\216\272\"\306\023\270\003\343m\270\260\337\246:\030[\3169\376\\\023:\0206\360\270\3502\3619\373u\220\272?\317\006\271\3315\260\271\0225 9\365AJ:\315\214\004\272\210\206\330\271\331Z\004:\001ol9\264\365\370\271\222.\002\272\314;\271\271\224q\211\272\350\327\235\272\324^G:G1\3509v\325E\272\233S/\271=\203\3167,\264N\271\253\373\032\270x\236\3428\177\320):_n\014:I7)9\210\t\244:}\263\301\272\2652\237\272u#\3529\344\265\3759\027vR\271\375\245\0109\0003\2269\2215\314:H\377\353:SC\305:\210\217&:|!\023\272/\325\2029wxm\271\333\377\014\272\036p\271\270klY:\316>\004:+\326\2279\256\t\3749\371\331\2338\031\304v:\346\243\226\271\234\006\364\270\001y\"9Q\340)\272\316\201\006\272X\031!\272\324\251\246\271=`\233\272`C\333\272C\251r:\032\236\264\272m\030\207\272\000\241\033\272\213\005*\272@/\250:\365\342\223\272\253\032\227\272#m5\272^A\222:\357\202\32280\232c\267\035\333\225\272\312\257c\272?20\271\341\333\r\272\255O\n9\373\326\3259\2041\2176\277\352N:\257\355\337\271Y\213\323:u!\350\267#\253\261\271_\213i:\254\226\353\271\241\212\251\270\360\2263:[R\2009\'\256=\272\332\207\331\271_\\\243:t\031H\271&\243v\272\365\250$:\330l\244:$\313\2659\336,\204\272:\273\366\271\246,\335\270\035\350\252\272\326\337c:\200\255n\272\235\301\332\270\177\"\230\272\002\240\213\272\276T\234\271\315\210\027: \347H9\3405\032\272l\270D9}p\255\271`n0\271\326\217;9tW\214:%\305\222\272\351\277\336\271Rf\2139C3N\271\226\3174:\200P\2209\313\331]\270\004,I\270VL\260\271\333r\006\272\340\251\261\271@\374\355\271\342\331\0218\331\205\2028O\304I9}\361@\271f\375O\272B(\260:\013\310!9nS\0205y\003/7k\223\034:\007\252$:q\315c\271k\202\252\272\260\227\004:\350\3376\270\025\037\2669\333\t\315\271\312\247n:\271\224\3449\342\370\304\267\272`,\272\341009\246\351C:UX\3049\031;\272\270\351\214,\272t\203\374\272g8\202\272\013\203\271\272R\000H9j3\222\271\202B\n:e\261\214\266\344\307\3669\256\323\201:\255\026\0249\354W07\311\3649:a\004\2429\244\232}\270\326\005\n\270\311j\004:O\377\006\270}zh\272\250\2274\271p^\033\272\351y\206\272a\272B:\237$\2669\255Gb9(\007\267\271\r\213=8[\312\0358\244\034\020\272\217.\004\271S\277M\272O\2324:9d\3219r\266\311\271I\304\211\272\317\213\335\270\\\233h:\222\350\323\270\332o\3659\226K\226:c\021k\272\252s\247\272\336\276\214\271\304j\227:\331\2217\272\350_u8g\2115\271\263\350~:\352(\277\272\263\'\237\272\')M\272\236\360\3726\350\345\222\272<<\353\271^\3645:\320\232\301:\354\304\346\266#\366(\271\254c\207\271}eT:\267\212\305:\231\270R9\310\n^\272\002\377\3549\267\307^\271\335X\2119\320\r]9x\ry\271\302\214\0239\373\260\3059w<R\271\276\240\234\272}\255\020:\231J\3109\331v#\271\340\007\003\2725z#:n\313E:\310m&9&\301K8\1775\\8\316\003\234\271dU\0059\306\266\252\271\021K(:\026\322\016:\356qs\272\335\253j\271\364T5\272~>[\272\357\014\273:\263\362e:U\265\\\272GeD\270\331\016\316\272_V&\272\035\220\030:\233\322\202:\327>\024\272m\255\013\272C\220\022\271\345\236\2609\355\036N\272\023Z\247:\345T\n\272\023E\2509.,!8\231\232m:.\303\216\272\353\273H:3.\357\271\205~s9\212\273s:\364\027|\271\352\341=\271\232#\311:\330\225\3509\0313T\272A\203&\272\360\0212\271Y\303\365\267\315\245\2609i\267\005:\177:\210\270\2415I:\245Kj\272\366\310)\272\351\036\022\272\362\264\256\271\242.\03784\311I:$\213/:nD\0228\200\351?:\240)\271\272\264c\227\270\0167\017\272\'\334\307:g\234\333:\360A\"\2717\237I9\177\272#\271\324\004\226\272P\247\216\272d\260\263\272\255\005\377\271\010\177\2769Z\375_9\275\241!\272\353\350\210\272*v\311\272f\302,9\335\303<\271\350\033\034\271\246,\":\233F\2759\316J\037\272\220c\307\271\273\277\3129\321\321S\272p\216\343\271\326q\t\272\203s8\272\366\235\247\272\276\222\203:s\266\036\2720\014\":\340\223b\272\252\236g\271\036x#\272\033G\013\271\035\275\027\272\350\020J\272\0266\000\271\347\024\227:2R\332:\2148\002:\007\333\001\272\001\262,:\314,\370:\212n\302\270hN\202:\272x\246:}\212\002\270L,\2448(>\271\271l\007\2769\216{\000\272\345K\004:a\350\3759\304:\222\272,\023_\272\326\362\007:|i\r\272E\322\2678J\256\226:a\321\026\272_\035\3229\373{5:#W\026\272\220\007\240:\315y\351\271\236\346e\271nL\2069\203u\0219\377\223C\272\324n,\272\010\\\216:\345\233\262:\333\254&\272md\013\271\006\270\346:\330\265\002\272\323\342@\272y\2175:\373i-\271C+m\2725(B\272\305*\2169\367\314K\270\372\213\302\272\275~\3319{g\362\271\031\372\2219\377\227\026\272|S\252\272\260\260\314\270\366$\217:Y\343\2026)8\3368\245\n\2049\3722\341\271\303^\2467:-\351\272-\020\013:Q+\037:\217\\.:\036\270\223\272G\324:\272\217\351\3178eY\222\271\215\177\004\272\304\005\350\271\303\'g8\364WG\272{\354|8\346\213\0308+\303\2508x8\312\271\350\250\2718\302\202\203\270\310\231\"7k#\036\272l\330\0179\252s\'8u\006 \271\241P\2739w\212\036\270\261\005\317\271\026\27769\tI\036:Q\255u:\2631(:\004\005Q7\371\222\2779+/\t:\226Y29\271P\2079\316\345s\271\364dq\272V\024\226:s\332L\272\220\344q8\004g\331\271D\263J:\360\303\3429\330/q\271\nP\2648\026/\3659\202\301N:\220\375\266\2671\201\3728\204\'\022:Q5\237\270\372Z5:K\235\034:|\371>:\2472\005:I\266\004\271E\301\204\272$\315a\272\231\222\034:?\362G::R\365\270\365\376E\272Or\3478\034\201\010\272\006`\354\271\323e\034\272]\306\2529\3032\3019\305\374\2229\024a\002\271\325>J:^\366\3178\223\230\002\272\255\317\036\272ffF\272\325\266\2729 \267\3139\302\310/\272\002\363m\271.&c:W\0079\272K\242%\272\210\031\2539\245Jf:\321\0305\271W\010\030\272\331\325X\272\300\314\373\271;\\\3549\211C\240\271\014\336\2379\026\371\001\272r\304\2459|\273\013\272\216z\204\271\227\365\367\270JPm9^\241\002\272Vbx:\315W\257\270h@\3249w\233\237\272IA\2269\374O]9\014\373\260\271\034x\\:bZ\370\272/Z\026:\351\237A\271/\220\224\272x\232\201\2724Q|8A\305\270\270\266\256C9\370\352\343\271T\337%\271;\023U\272Y\353\242\271\363\016L9K\316\033:\000\017\201:\005rX:\314\307\0279Q\300\034:\241nP\271\310\037\2169\255\035\236\272V\023\367\270\033\374\n:\255\t\002\271\351\375\n\272\222\241\211:\021\350A:\032\2722\272yL\005:\035\010\3029\"\340\274:~e\000\271H\340\2078V\371\230\271\274\276m\272\335t\003\272\335\343\200:\227Hk\272\273\221P9\247\365y9\323\351\000\272\374\247\0169\364\2311\271%?O8\207\342\177\271\0205Z9\265\262\017\271Z\253\265\271\253\330\0009 \"\005:\312\217)\271\243\210-:,\024\007\272qt\3349_\251m:G\021\3238\027f\345\271.\306\344:I;\224\272\254\341\233\272;\230L\272\370\316\317\271\376\373j9?\023b\266\262\250\2739G!H:%G\3719)\372\235\272\201DT:@6\216\272\367q\3319\217\346\003;\275\360\3559+\317\326\271@\332n:Q\010$\271\304X<\272\357\372\242\271\003W\023:0\213D\272\233\017\264:\240\350\2179\246\227\3559B\377\2359\237\273F\272\207UL\272^\222\206\272\002\234\254\272\030\263M:\224P57=\210\2269S\216\241:s\365\262:\304\243\2679\262\276\222\272xa\240:\301$\000;\207\'\347\270\365\265\202\270\345\0010:\3233\2148\234D\004\272J\033\230:L\213$:jkY:|\"\2248[\206\241\2715\t\210:\360\300?9-\335\\:\365:i91{\240:\250\255#9~\223\2249\272\361\211\272\\y\034:\343\\:9\314\271}\272?\376)6\303=.\2723Q\276\270\204]\274\272\014\240\363\272D\225E\2711:^:%\220\202:(\241\237:\334\372\3738\\\360\215:|\3309:8\350\316:%\365j\272\207\221\234:3\241\274\271<\305\246\272\337\344x:\266\351\3409}cR:$\'n9\224\240\2659\234\2078:@a\2679\332\225|\272l\036;\271\351\237\207:B\263#8\202\345p:4S\002\272\336\354\2779\217.v:]s;:1\034\036:\241\313\206\272\306\\\250:c\032q\267\242+-9\340\214A\272|\020B\272\325v\305\272\021\211\217:\034\265\34499?\211:\372\027\"\272\014\264\204\271j\310{:\"\366\237:\366\247+:\254q\":\213\020\271:\255m=\272\220&\3546\240\3229\270\311\177\21699:\2309\347\327/\272$\314q\272\273|\233\272\234\320>:\177T\233\271B\221\3419\375\357&7\276H$:\271T\3578\217\353\032\271Q\025\213\272\034\264\273\271\034\227\000\272\364QI:\221sw\271\026t<9\n\021\022:\237\376\002\272/\260\273\272\014\277G:\252\206\242\272aD\217:3\352\001:\230\224\333\272\027j\031\272\n\276\3729\270\303\027:o\376i\272gtA:\210D\236\272\277\205\250\272\257\312p9\265%\262:\321\362\212:\221\017\354\2719\346\2769\271\267\277\267\017?\353\271J\026\033\272\220\201Z9\262\217\273:f\351/\272\030\242\245\271\351\266\231\272I\302m\272\214\2757\272\335\302\3319K9\2178x\2378\270\252\373\271:O\005\336:\337q :\352\237N:\007G\215\270wM\030\272\303t\3249\313[\3207\242\206\001:\251\364\326\271\275+\257\271\307\177\220:\316(\343\266\341m\203\272\231\\\0018\017\255\023\272n\024\037:]\243\276\272\265\367/\272@0\366:\023\037\000:>\326R\271\256{\2529g\230h9>1[9\347!\002\271e\247m:\254q\363:\201\371\243\271v\213\3319\250\252B9qo9:Rm\237\272G\003\327\271\276\003\255\2725\n\260\271u9U:\364\302\t9i\254\203:\374\030\200\271H\341\3508bT\3369v\314\22397\2729\272\367\023\202:\225\237\211\272F\316\010:C\016\0018\236\366@9r\275\212\272\235B\2118<\177\3428\271%\2339^\'\3079\032\004\\\272\371\026\2739Q\312\213\272\027\322\201:\314R\016:PE\021:V\273\3108YP\032\272\203)\345:\242v{\272f_\267:j\302\3338P\302\t:\252/\023:\354\355H:\217\233+:1\256\n:\357\3202\270\232=\2159\265\210>:\361|\036:\317I\3419aB\210\272\213\207\032:\214g\3559\237\221\3719\032\366{8\322\361\316\2723\263\362\271\037\340\007\272\202\220\214\272.PE9x,\003:K\031\205\2701\375\024\272\325S%:\313\004\0259\360\244\003:\242\244\3208\225\331\n\271\206\361\3569\335t\234\270\242~]\272\247~\0219\273y\020:\225-e\272U\310/:\\e\301\271\002\025t\272KG\323\271\375\177\'\272JK\3779\007\332\035:.\277\017\272\362,M9\233\037N\271\313\0242\272 \211.9D\255\t:\343R\361\271u\252\"\2717\374\021:\376\262i:w\346\200:\377\004\254:\037y`\272\217\263\017\272#M\214:2\nB9\3751k:\3464H\2722\377\022:\002\301\007\272\316\016!:fy\274:\342\000\017\272\236\260\252\2705n\330\267\004&\204\272i\000\3079\343J\205\272#.\325\271N:4\272`\257b8\024yj\271\243S\3359\340\236]\272\222>\200\272A(\3439\205\\\261\270\372\371\006\271}p\2249\235\350\021\272\024\371\273:\301\002\315\272\335\tF\270\321\242\363\267+\226\035\272\033\200\2609\364\231\3478z\374L\272z\345T\272\243FC\270\362{\356\271\305\210\3369\357\246\n94&d:G\265\027\272-M\276\270\332\352\276\272~\277\2339\0376\301\272\340b\021\272\313\341\000\272\236\251\214\272=\263\2229\264T\3339\325\271\203\272\310\341.:FF\204\272\266\2566:aI\3068\303\004m\270\325\374\347\271p\332\320:\324+\020:\326\342\016\272\216]\2238\031m.\2729\317V8\301\232\303\271X@\2249x\026\0149\227\347\240\272\326K\321\271\t\356\313:u\254p\272g\240\344:_d\000;p\327\311\271\230\030V:\307\242A:\365Mp\271\341\302\301\272\263\317\':\272\375\300:8\2400\272\031\314\315:\215\243\232\272\'\246`\2715\256\003\273\'\214\3219\346\372\373\271H\351V\272\332\271\24086\271E:\3512\235:\010\364%\267\366\221r\272\004A\014\271\331\245<:\2462\315\271\305\177\257\272\010\263\251:F\215\202:\272:\\\272\331%\215\270\203\266\3549O\277\351\272\255\242\351\271)\30349\016\204\025\272\225\216\3479~\000\036:\305Qp:d\324]\272\2648\014:\n@\001;\230\366O\2727\325@\270\320\027.8\254\203\031\272!\006\300\270\026\035\205\271\236\230;:7\326\301\272\206\211}\271p\367\217\272\245\342<\271Q\226\":g\202\203\271\253`X\271&\217\261\270%\346\315\267C[\3579\242\365\001\272r\252\276:\025\374\340\270\245;\275\271\340\027H:\317\273g8\t\272\210:\025\260!\271\233\320\334\271\337\236\336\272Fi\202\272\274\020x\272\212\272\202\272\3242\3739\377T\343\270\376\030\354\271O\352\216\271\024!\000:mMf8{\270\252\272*g\224\272\037\353\0327,\332N\272\031.\005\272M\315\321\272\335\255\225\272\322{\014:\265\317\3419.\323\220\272\217\277\24395\002\002:\032g%\272\344P\255\271\304~,\272\030\235\355\2700R\230:\317X\347\271\233\323k\271\360MD\273\212\271M\271p}\2739US,\272\277@\267\271\177\030\214:H!,\272\201\251\234\272\303\342#:\245^\246\272\364R\007\272z\237::\211\253\3449\330\352\314\2716\251\036\272\317\376\347\271\370\220E\272\326\'/\272#\016\247\271\217\250>\272\035\021\343\271%f\215\271\\\342\3478\032g\2459O]\3768\'0\336\271\321^\2079\255\223,9~%\252\271q\010-:}e\2079R\362?\272\002\265k\272\261\211$\271\346\324\3678$\016l9\324X\2509\177\201\303\271\245\006\250:(\236\273\271\370\212:\271\001&K\271E\2731\272\253}L:\223\200\314\271Q\310\226\272Q\252\207\271\303\371\213\272N\372\022\272\277vA8\237\367\3727ZC\3749\2342\003:~\264,93\205q:=\207\313\272\263\207\262:.\233\2467k\035\016:\252\3464\270\260X\2529\027.\215\271\025\252/\2727\001\334\270x\210\223\272\t\tV:[N\250:y~t:f\016D\272S\343\26487\353r:\310ie:P\335b:\271r\033:\337\322U:{\0346\272\320\227I:\257\250\232\272k\003\201\271l7{\266\254\254:9;\361\026:\326\202\3549\251\033]:\036\224<\271p\326\177\271\005\034\2208P\317\310\271f\026\2759\027\262\232\272\270\325\343\272\265\234\226\271\006.\035:G\027\270:\310:\245\271\207\240\003:\242\366&8\242\340\313\272\263p\2019\335\t\3339\363\370\335:Qb\3759\\%p9\n\313\303\270\3737f9\223W=:\270T\244:\014\321\355\271q\\O\272\314x*:|\334z:\025:\3349\204\321\217\272 w\212:LA\260\272\021k49\230\241\3509\230M\3569\274l\3709B\200\365\270\nVD\271\245\257-\271\272\334\202\272\357^-\272wi\t\270\311\301\030;W\216\221:\272\010L9Q\225\t7\202\302\213\272\004\215r:\215\000\202\272;\022>\272V\372<9\207\310\337\271f\310\271\270\032[\2379rW\202\272\326\312\3458\250\331q:\237\261&\271Q \345\272,\323\211\271\256\010\364\271\261:\230\272q\177\334:\026\332\3769$\315\254\270i\222\207:\016yt9=\272:\272\316\272\227\272EW\214:\222\360\017:\274\000\3549\223\003l:\376m\372\271b\310\333\271\351(\266\272\236\371\025:\235\377\026:2)\0279\367\226\3209\267\363\n\271\240\3606\272a\324\265\271-\0332\272\261\325(:j\257\321\271\311\236\027\272\311\207K8_=z8\002\225.\271\030\223\321\270\202\341\333:\216\347\3669\265\343n9\310z\353:u5\236:\t\350v\270\241\246\201\271\317p\263\271/\311\032\272\242\212B\271\"\017\242:\322\241q9.\326H\271fy~\272s\205\300:\246&c\271\336\306F:\347V\2339\023\033C\272\320\261\331:{\240\3679\361\300\3339\005g\\\271\360\256\3709h\203\226:\003\217\371\271v5\021:\3058?\2724`\205:\316^t\272\202\007\264\271\000\224\024:\273\331\255\271\376\306\246\271\363\370\031\271r\336\020;D\331\241\272\245\325\206\272.\362\260\271\3503\220\272\'\250\322\271\026\264\3259]f\3659\337{L:&1\205\270\255\326\323\271\3737\2709O\210z:\r\034e\272\2314\241:\300\270\213\272)AT:\275m\223\272.Ri\271\177%8\272}\371\371\271\222\351\3719\265\021\262\272\331_\365\267\246\021\2059\036\200\005\271\003\323r\271\302M\334\270Kn!:N\254\006:\376\344\237\272\374+D94Bg\272g6\233\271\035g\306\270l\307\260\272\213\302\2729\206x\216\270\256\260\240\271a9\323\272\267n,\272\334\327\\\271i^!9\261q\017\272Jr\212\2722\316|:\024~\2669\\\215\322\272/\316\275:\0039k\271\231(/\271\031\00249\250ZA:\316\210N:\300\335\'\271\314L\246\271\316D\":7\222\020:)\217\026\272\003\007\341\271V\206]\272\372\221\226\272\213\322\3579q\201\265\271\020\303;\272\317w\353\2705f\000:\343u\235\272H\026\0209\'Q\2169i\244\3419\021\023\3028\03715\272 a\310:\212\322%\272Bk\2578\274\177i9\3648\3209u\203\3339i\267W:R\274\253:\021WD:\004b\314\271\243T\3519\035u\r\272\024\221L\271c\331x8\236\226t\271\305\312R:\265\036\205:0\373`:S\305\260:\370\220J\272\207@\224\272\244^\2419C`\3249E\231\2519\240~8\272Ls\3478\303\213\327\271u\235~9\021\022O\271\020\211\3457\344\332\2719\3154I\272\315\254e8\3210\2509\026(\245:gC\003\271\311-59\313\251\2228\\\247A:\004\026185N :\022\237\001\272E\277n:n7\004:\2037):-k:8\014\016\201:\177\'\223:Q\0069:\207\271-\272\326\324*:\265y\260:\274Y\235\271\364\376\263\271\230\3318:\252\376]\272\364\270\3055\327@\3709\035\250\341\272E[\223\272*\014\007:hc\027\272>\230n\271E\303\"8\"k::\255L\353\267\343\364\216:[\370\343\270\374\352\2538m\370\3249\255/\321\271\361\206U:\260]\023\272\261]\251\270\221\203\215:\3249\3159\231\351>\272~M\202:\021M\256\272\254O\272:H\021\3077\373\366\020\2721X\275:\215\017v\272\3523\321\271S*<9\236\342a\272LL9:\316\030K9\031L39R\364z:\024\r\252\271\313\020`:\333\013\253:w\247\254:\337\016B:\370\327\3369\023\245P:\010\305f8ki5:\307l\2329\231\254\352\2707\374\3459\330J\025\270\204\345\322\272\246D\0109l\327s\271Z\367f9\243\n\2408\222\315/:m\306\225:\354<\020:x\201&9\204\035\3777\324:\3606\233\3037:@D\362\271\212\010\031\270\013\274\014:\331\235\2409\330\200\256\270\311\253`:\316\334\212\271R\371\203:\264\344\243\272\320\323\255\272\3711\263\271\305c2:\305\'\3429\346K\3319\366\215\021:\361]\2378\211L\307\271\251\273\266\271\323(j\267\036\276\2139\345\366.:\231\301\2629\304\222\2679QH\3629\217O\235:\270\334~\271la%\271\0309R9\350\333\2679j|\236:\311\223\0279\254\276M\272\r\005W:\377Z\244\272\236\227^\272\263\372\303\271K\336#\272\'\271&\272\367`\347\271\201\267\220\271rE@8\021\226/\272g<C\272\021\334\321:\363\202*:k\316\374\270\004\230\204\272\265\203\3118~\366\3009\362\212\353\271\267\340\2259v\335G\272\367\014\363\271-\000i:\235\266\037\272\n\324\020\272\024\325\001\272\266%\245\271(+\305\272\321\2712\272T\024V:Q\005I:\274\366\360\267\336\374\r\272Z\250\r\272\303\243\307\272\242\302\020\272\247\016\035\272\314\254\2549\210\374\207:5\204\226\270eQ\013\272\352\360>:R\223\207:\361\276\277\271\337l\2249Cs\2569c\'\374\271\032\366.:/yE\271r]\370\271\247\250\231\272\222\032L9\034\2750\272`m9\271\022\252m\271)\310\246\270\340i&\271e\260\212:\204\322\361\271\341\032\347\271(\r\332\271z\270\215\272\2440\240:+\372\264:vr\223\271\341L\2528\216R\345\270\0278h:ner\272\037\246\2419lxV\272^A\005:G\243P\272\254\255\313\272\234\266_\272x1m9\003\210=\272\334\240\224\271o\362\027\271mP\223\272w\255\3139J\373\t\271\217nz9\350\343!\2721[\021\272\264OU9\021-/\272\010\271}\272\317lL9\353s\004\272F\223\2629\207\365\236:l%\3069M\035\01691\273\1779\023\300U:\270-[:#\006#:\221r\3279\0053\230:\357\261\227\271\'+S:D\371\010\272\204 \001\271\240\213\254\272\275H\234\272\211N\225:\235\240\274:\244\021\225\272\016\361W9R\317\336\271v\236\0258\354\030\370\271X\017?\272M\255,\272-\224\207:\254\002\234\271TT\006;\004\340B\2722Y\331\271\n\352\225\272\024\345-\272\373\360\220\270\203\365\263:\270\372\314\271n`\247\270\212R|:A\210\3677\250\345[9\357;9\272^g\341\270\235\262u9\326\256\206\272\265\204\t:\350\334F\272\275\027\014:nJ\277\267\352\314\266\271\221\305,:)\224v:[\337\354\271je\226\272\267\366z:\201\247\2139f\247\215\272{\242\203\271\323)\3179\346\207\2069\244\363\210:3\337G\272X\226\274\270\216uD:n\nY9\274\236\252\272)\361\024:\202\001u\271\303\367M\272\346ea\2722\212\330\270@\203\3517\365Ff\271\346\224-:g\324\244:M\236A\272\302\213\201:\301o\017:\311z\2069w\003\255:\306\310\031\272\326\370\226\270\"%\226\270ff9:\230m\000:<\242\021\272\3652\3318\010Q\2339}b\005:\350Y\362\272o\204Z9\004\307}\272A\\\3319\257\337\327\271\r\2540:\021\212\302\271\2106\345\266\224\365@\270\n\221\013\270\327\363):\003&1\271\205\366\3678\007R\3739\270D\3209*z\263::\356P:E\332\3329Am\233\271v5\031:\274]8\271m?\021:f\265_8\226W\023\272GN4\272\257\345\001:P\311\023\272y\033\337\271k\272\247:\201\331#\273,\031\276:\226[`\271\214Km\271\226]\222:~\213\3179\240\275\350\270\255\201\3379v\256\024:\321\267\260\271\207\273\3159j\300\2339\256$\2559\036\335\\\271\243\007\3249\274\345\033\271\273\203\210\271\331\253\324:\264\342\360\271N\260\036\271h\020\026:\265R\2208d\277\2169\"\352\2379\352\267\257:\r\306\207:\007\232{:\366\231\212\271\025h\\:\211\177\020:\257\227\356\271\334\357G:\230\030D\271\347\226\224\272k\373\225\272\202\247\230\272]\25799l\220\010\271\335 \025:l\347w\272\266H\2369\201w\2219G\376\2669S\312\261\271:h\277\271\212[\013\271+\327\205:\200S\003\271P\275\3059u\373\025\272\374\254\260\272d\375\013:x\236\213:\366\3424\271\347%\001\2718c?:\240]9\271\332\361\312\272\243\257\1779\354\212\0067M\317\3149\330\317Z\271\326\353\371\271\241\255\340\270\331\"S:\304\003.:\362|\234\271\007\264\005\271A\334p:\274\026\3218\256#\233\272\020\300\n\272\207\236=:\227.\352\271\201\213\2329\274\030+:\005\007\3428@\372\2419u\233:\271D\236\301\271\351@\2359\253\365\2559\263u\':<\332\242\272_B\2249Tf\037:\230p<\272\234\222W:\255\322\3239T\003\000:JU\2329\223\037\017\272x\'\005\272\256N\310:\2502\3609\342Z\352\271\034\016F9\366\234\3127\331E\250\271v\200\020:\306\203c\272 \217\357:-\03438\311h\202:S\306\017:\321\223\260\271\254\326\3149\264:\007:ii\374\271>\306\275:X\362\3618\212\236\3759qvs9\272p\2014\335%#\272@\341\226:\340c?\272w\237+\271\223A\235\271\363J\306\271\301E/8o_\'9\221\225\0379\0352E9|\262~\272\216\364\221\272\375\203\005\271\036\330m\271\332\375r9M\\\035\271\365\276\223:\237\276\206\271\347\226\240\271\202\022<\271\351\177\353\271\330&.:\202\003\2139\253\300F:Or\001:\313jN\272\232K\':\355Bw\272n\006\243\272\322\363\24599\371o9\004V)\266\003\225C\271aF{\272\215\"Q:#\020\260\271\325\354f\272\222cM:|\025-:(_\013\272\275N\201\272J\377\337\271Nn\225\271t\nH:\2530\3318\027{U\271}#\t:\t\006\335\271n(\234\272Q\214\3327\267\324\":\257hv6)\345\2218\237\276\0348\342r\276:\376\304\016:h\020 :\350\263\263\271s\366@9\254|\363\271\377\275\n:\267\225\2319\316b\n9\344\277\376:\020\\\206:\200\305\2068\020\251X\272\331\023\2109#R\3509\247&\317\271\273\262\021;.u\326:\277\305\010\271\030f`\272V\245!\272\247:\017:\000T\0069\331\374\3119\210b78G\2762\272B\232\214:t\316\275\271I;\331\271\254\223r\272\261\255\2139\231\344^:\335-\331\267s\255\365\270QBs\271\236\354\000:\276\2372:\242&_\272b\260\n\272\241L\376\271\226\357\262:\216F\237\272\353\007\212\272&xg:\223z\30495\022M:\246\323 9s\213`\272a\350\0229%?\366\271C\'J:\217\207\3349eVZ\272\247\317\3429\377\343r\272\377\001\r9\304 N:%\177\341\271\312\254=\272\3440Q\271F\236\037\272W\037\222:\204OB9~\005+\272d\363\0379o\200\0279\341\327\3536=i\244\272\370\257\227:\260\330\2109\320\324\307\272\217\207\0179\234\013M:\227\375@\271NWP\271E\316\3109\'L\207\271KP\20675R\204\271\036dt\272hx8\271h7\3148\2553\014:\037\311\205\272\301\360+9\3573\327\270\275\'\016\272\030\023i\272gz\3108\003\230J::!\320\271\031x\264\271\353\357e9[\336\0209e\274\3279\003gH::Yp:H\005\223\272\377\216\376:\264\035K\271\263\270 9z\324I\271\302\272K\270\211\211\223:\264\361\3719\"7\3739\375\253\2658eg\2328\261\331\026:\270A\3649\211`\264\272\313\217\247:\220\200\3338\232$\020:\330\031\313\271\221\n\254\271\277tJ\271sT\204\272-@t\270\202Z\242\271\374\357\3149\252\361\313\271\314\222\301\272\033\3249\270\003\360\260\271\276\307\3308(\031\257\270|9h:L\373\020:\377w\036\271\316~P\270u\213_\271L\255\267\270P\264\3169\243\254\220\271\330.\3157\343\244M9\030H\243\271bS\355\270\216\212\222\271ufT:\\\312\0019%\002\306\270pXs:\357\305\2508=U\024\272>\277\2419\000\000\332\271\255\361\312\271\226`\257:D\347\006\272F*\272\270\262\014q\272\262\206\263\271I\223\000\272\016\216\016\272x\317`:/\033H\2727\277G\272\n\013\360\271g\377\2037\275\2246:\377\350\251\272@`\355\267\2342\340\271\353\317\241:\257\032\002\272\230y\212:\207N\210\271\240\305\374\271@Y$9.\201\375\271p\rr:\323\333\246\271\365N\201:]\253\2409\246>o9\215\021\3729\361\260?:\257q\216\271?6\n\272\313FJ\272\203\263\2349\034\212\207\271\023\266\253\271\313K\244\271,\336\0049\300JA:AD\277\272\r\243\2738P\023\260\271\312\177\021\271<\206*:\030\322,9I\315\3219Q\32577z\233\247\270\354.\013\272\207\3746:\322\272(\270i|\210:\242\321D\271\311\362n\272\021\327\272\271\000\002\003:\317\244\364:\3363\0239I\334\3639\340xN:\262\t\230\271\371\242\0169h\310\356\271F\023\212:>?\2759\177n\3259\221\275Y:>J,:A\240\235\272\013\225\3747\373\026*\272\306*\004\272\006\037\276\271\351\0235:^\370\205\270%1\361\271\206!\2438\311\275\225\271:p\225\272\347\363\274\272\373\374\202:8I*:H\357\257\271dhK\272<\334G\272\304\310\235:\353\201\256\270)r\222\272\025\367j:\216\246\022\272\307\375`9\351\302\016\270h\313\2309C \223:\211\233\226:5?\257\272iX\"\272\322\354\":V\376\n9PgU:\2705\3428\3170\322\270\365\003\2577\026\355\345\270\324,\254:\235\005\3638\334JS:\006\216\210\271L~\333\271\367-\203:\276\236\r:-\224+\2712\325n\272sY\365\271\241\0245\272\217M\212\271\231I\254:\332\222\004\267Z\376\n\272\320$\2128\027\256k\272\276\275\2539\3431\3239\007m\320:UV\263:7\263\253:\020\242\235:\0000\2039\363\343\2269\263\314\022\270D@U:F\201-:\rU$\271`\363\007:\256\274:\272\247\005+9C\322\013:\306\307k\272\310\275\345\271\372\317\225:\373l\3207I7\177:\356\264\036\272;\212\372\271\373D\256\272\246\222x7i\340\2709\2660f9c\317>:\374\346\276\272>8\366\271\306\207`:\177\005\036:\217\026(9\204\201\215\272\352\204;\272\226\221\214:\275\030%\267&\201\3409\251\025\277\272\312B\213\271y\233\230\271\200\271\272:D\034Q:\261\307\314\271\342\216U8A\033\310\272\'\233\3619&+\223\270~\362\3719t\2201:\262|9\272zj<:\016\370\203\272\253\253\34496\254\222:\210\237\221\2728\\\026\271\2313A\272K\220:\272\251\024\335\271L\234\267\272\026\200\336:\260\367::LNq9\214\3127\272\241\206P9\247\350`9\220O\2659\317\033\230:(\254\375\270bT\217\271e\357D:l\351\272\271\243\240\240\272\204\342F\272\2570v:\003d\001:\366\303r9#nS:T\347\331\2714\023c\271D\3056:\215\360G\272\273\215\270\271\363\034\'\272\275sV:\324d)9\241\33009@\010\3627\365%R\271<\027\3049\345(P\272\356l\324\2718E\241\2714\023p8U\007\016:\340\361/:k\23398\204\277\274\2721+.:Y\2326\271W?\216:\372#\t\271\n}\372\2704\377\272\2716\207O:\215R)\272*\331\257\272\353e\3379\275DY\271,FD\270\235\377R:\257*w\271\320\002\r\272\327\n\3209M6$\272\212L\'\272\342\247\221\272=c\202\271GbO:\341K\224\271\317^D\272\331\2653\272]\263\0338{d\356\272g\022\000:\355?q\2724p\341\271\305s\323\271/\217?\272\323\261#\272\222\256Y\267\225\215S\271\276X\033\272ig\036:\300\204:9\262\323\3169K?8\267\345\216\014\271\3028?:\334\311]:\224i\2438\325\213\34795\213N\2721$*\271\262U\372\2711\264r\272\265DA\267C\035?\271\262h\2029%\346\262\271a7\277\271H\352\2359\373\023k:\246\214\277\271T\350\2019\200\374\3469\377\027\215:\356\203\247\272\2449\336\270\326\340>:\325%\3569\255#\021\270V\034<\270[\346\203\272\270S\326\270S\277]\270\215 \222\271\363725\010\261\2179\260\345\3269\304\r\203\270W\260 \271`\313\255\272@\205D\272\3270\025\272\261\320\005\272)G\"8n\313\237\271\267\333N\270\272\203\200\271&!\2069E\270\3238\317\224\032\271$\212P\272\353\355\2679\361&\223\272\243aR9\316\213?\272\224\330\2169%\361;:\310BE9\036\357\031\2721\250\3149\364ed9\253\320#:e;\255\272\314\025\0009|D\024\271wg$\272zet8h\345%\272\365\372*:<\213\245\270\2301u\272\344\214\363\271\314\026\032:\227\362|9\356\251\2069\365\363\335:\321\222\215:\244\361\002\272\376H!:\331v\272:\365\250\330\271kJ]\270\333\204\3528)\025\3438(p\2269\364\350\206:4Z\2179\343\0257\272\272,\217\267.\353\211\272^S\016:v\1774\272\272\365\2719*\221\265\271\243~\211\272\310\203\207\271^x\212:\216\273\0358\267#\2079\000\250\004\272\260\360\235:\300\343\305\271\345\014;:\3744\3149\"\310\200:x\313\003:SSH8\341\317\242\271I0\323\270\350\302\371\270\375\233\3029\016\203\210:\r1U:S\017\253\271\200\342\211:J\257I:\2063\021\272P\250u9r\035\0329\025\345\n\272\270\0368:\206\334\2418n6\n:\323A\366\271(I\343\271\341\020\033\271\316\223\22699=\035:\374q\2529\rM99\031\315\353\2717x\331\271\311\253\233\271\202.\216\271\007c\0039\327C\224:\331l{\271YV\205\271\224\302\327\271\263\1772:\347@\264:>\036|\271\307\265O9q|\336\271\210nS9\266p\250\271\267$z\271\001S\3119\2760\2509\255\320\37582e\2529\275i\013\271\003TJ9\367}\27585t\302\271!j\270\272\374\022y\272\254\007`:VH\n8\251\237\234\271\'\030{\271\222\347\271:\336\361\2429R\221\271:\324S\3049\345\266\207\272\321#\2749\3167\027\272\306,\215\267,\352\344\271+\332\022\272\003\r\233\271\327<A\272*\325\0149\031\262\310\272-\017c8\302+\2039\302\272\201:W\257\204\272>\356^\272\255m\223\272\336\246N8\253g\016\272\032 \016\272)8b\272?K\220\271pI=:\202\317\2329\006\242f9\273\261\010\272\306\rp:41C:\322]\017\271\034Y\216\271\325\351\203\270\326w\261:\234\265|8\000\373/9\003\350\013\272\305U\n\272\267\371h8\343\364\263\271\t\024\0239\273Ig\271\243&\3109\026=\232\272\210z\353\271[?\206\272\\\267\317\2718\245\215\270\001\304\241:\363\373\245\271\032\276H9\036bD\272\307\350\2618\025P\230\271F\221S:x\216&\272%\36058\337\254\2478\2726c\272j\313\206\2719\252Y98e\2217\371\334\002\272\342\331\320\271p\016\2649\251\003\241:>\332\r9\020w0\271Q\025o7\034\260r\271\2346\214:6\004E9v\1774\2710\255\270:\004\206\211:w\322\0229\300\356]\271\207N\2579\323\341b9\356/]:\274h\270\272{\376\243:\372S^:\313\214\270\272\234\275-9=\211\025\272\013c\370\267a\025V\271.\365l\272\315DX9D?\341:\377Sh\272M\342J:H\232\203\272/x\007:\301\326\n:?\036_:F\022(8+a\t\272\264\254\3068^X\2349\005X\0029r\373/\272\244\307\0059%\365\3038\241\324\2619\177\357H:\373w\'\271a\010a\272\030\200\0029\230\035S\271:\333=7\340y79\363\216\2129>\205\225\272\032\037\307::\31359\322 \032;\255\034\020\272PE\3209\221\323\2119\004\235G\271B\232\373\270\200w4\272\305\364d\272\260\375Z\272\006\237<:\003p<\272\254X\244\272\2162\357\271,o59\252)\n\272\331\024\344\271c\256\230\272 p\021:\004q\376\270\360\003Q8?:=9^\305X:\250\331\214:x\371\027\272p{\023\271y\326\002\272q\236-\272p\265\265\272ef\217\272\344\364a\272\031\001\234:E\261\216\272\312t\212:K{\2079\251\301\226\271jy\016\271\264\352R:\267T \272y\356\330\271\200\304:\272=\354u\270Cx\241:\317\010\3629\"\277\3669*Sa9\355\377t9\207\260\2279iJ\211\271\\\003\1779\225W\3755\304\222\024\270L\237e\272~\336\3607\276\325|\271-*\300\272\177D\3369AHI9\320V\350\271\"\232`\272p\2431:\350\220):\016\234\303\271\003\033X:0=\305\271\021\300\202\272\226\277y9}\022\277\271\nc\273:qU\306:\252\233\261:~{\235\2728\266;:\335!\237\271:\367\276:\206a\003\272S\007+\272R\222\032\272\021,\3239jD\236\2707n\3748\351\245\337\271w\224\234\272\330<\2379\370\352`\272\276\027\3008\237h\3039&4\016\272\324f\265\2706\202L\272\215EI:I\350\027:B*\2039\241\303\277\272\227\363\230:\342\247\006\270\363\320`\271\305\350\261\271Q\227\001\272\331s\275:L\027\216\2716*\3158#\374\2069\016\337%9/i\020\272\307\241\3067\361\336\3319\370\261C\272!L\261:\024\273<:J\340\322\271\304\177\200\272&\030l8\303\267\0329\005\357\364\271\342WI\271D}\2508\346\321|9\033\311\210:d\004\213\271\213\263\031\271\033\330\2167rd\306\272\237\013\2169\2508\3249\260\277\253\272\203e\235\272\343=\226\272D5\'9H\005Q9\026m4\272\033\255\352\272\311\311\001:>\232~\271\337\237\2119.x\20094QH:\243\302 :f|\244\271\263\367[:\033\273\370\271\204\023e:$n#\272\273-\242\272\0340\270\271\310\032\306:\3629\3059\024_4\272\370H\":\250\315\225:\356\300\005:#?\227\272D\022w\271\321{=\272\271\345\3668\016\264O\2721}\313\272C\036s\272\374\366\307\272O|5\272\006\362\3319\025$*8E\260\3759\223\037)\271\013\222\3429\303k#\271b\0065\271\0017\2069\004\363\3148?7o:\332\326\3369~\320{9\320\0225\272Z\004R\272X\254\206\272\377\241y\267/3\260\271\000\355\226:\312\213!\271\351\035\335\271\227/G:\264\27748xg4:c?\336\271\177&\016\272jg5:\357\326\2477@a+:\207EI\272nPh\272\326p\"\272\303\002\2519!\301\2379\354sb\271\324&\217:\210\007(:4\214\224\272\277\017\022:\224*\260:\321\222\206:U\227\256\272\204kg9\204\222\347\271Rb(:\221\007\3008\215\021\363:\026\235\371\271\333u\346\271\247\355+:\231\272F\272N\010\207:1\216\3528\335Pu9c\274\326\270u\374\3259mj\020\2712\\d\271\\\265\326\271\177\273\200\272`\211\273\271v\357T:H;m9U\225\214\271\317\270\336\271B\006\255\272c\244|\27201\013:\234\002\021\272\023\273\3719\354\242+:\200\227\3528K+#9\260b\2459\327\343\302\271)\005\027\272k\275\36691\357%:\254\370\232\271\202.\257:~[+\272\322)\2749\203\272X\271\322\03029\013E\330\271\264\225\000\273\\QC\271\220\303\240:1\237A\272\274r;\272,\240\217\271e\0163\272\211Q\212:\230\244\237\2716fM\272\221\037\3409\017o\33673\377\006\272\264\256\031:\366R\22298\323\3328\363!\200:6C%:rG\213\271a^\252\271Q$\20194w7\272~\035K\272\305\\\203\272HN\0308^\260\230\271\230\007\214:\243\013I:\316J\227:\242\004\3729#\305\000\272\332+[\271\357\265\374\2713B\3155/\031\3029\363\344S8@\307N\2712Xi\272i\304\035\2725+\361\271\254\014a9\235$\221\272\336\177\017:\230\343p9y\\E\272m\271\005\272\373\025\013:\222\016\3438\370iM:\214\270\201:\2632\020\271\213\361B9\003\371Z:[~\017\272|\017I9\357\030\302:\316\243O\271\316\013.9\242\305\245\272\337\353\2659\202\220M:\371\377\2419\313\241U\272\212\277!9\301\353\263\272\206c0:\006\266\016:U\1771\272\346\347q\271\253h\3249\372\351\006:v\333\2079\213rZ\271>rn\272\377s\224\272\204\262\2439\376F\014:\255\210\344\270Kp\3759O\305\266\271\300:\274:\315R,:W\200\2629~\203\351\271u\330T:2\022e9~\307\3679@8\256\272\254\274\340\271F&Y9qt\243\271\320\030M:\210\241\0149\004\\\2058\240\373|\271\273\250\307\272\007\255B:9\003\354\271\234\303\2369\263r\343\270\327\263\013\272Ct\205\271\342\"F\272\016\306\177:S*^\272==\0079F\322\364\271\334\036\221\271\255\270F\271\244\013\264\270\241\203\325\272\005\247^9\235D98\362\302%\2729d\2079\261\276z\270iZ\223\272\342\227\2756?dO:v\322\0369n\016*\2717\207O\271\037\343\335\2659\027\3779\016\313\271\272\t\225|:i\337\016:j\213\003\272\343\215\006:\362\274\251:\331\237\2119\346r\013:J\273\3609H\242\340\272\330;\250\271\366r+\272\\d\2378>n\271:e^\000:q\225\245\271\016\3626\271W\211(9\242\177\233\272\202\356\2739\331\024\005:\243\262\313:\372\204@:\342d\024:!K\005:\324\207y9|\270\2469\241Rl\271s}P9:\207O\272\037\315\2009\037S\250\271\321\3119:\010\316\372\271\250\020]\2729\324\033\272N\327\206:~\203\2329\3712\233:\322\035\2129\357\354\352\271\345\315\213:ZE7\271ItG\272\301\267\2649\315\250\325:\371K\022:\357\374U8\003\375\3119\362\243\202:rJ\215:\005\212\2729\026\202\212\271\031J\225\272#\315\352\271\306\371i\271\267\372k9\243\020\2659\253;]:S\002\302\271\310\370\322\271\313\021\3569T\224\205\272\352(\2068\3504\262:\340i\232:G\017\034\272Bv\364\271v\324\2129\026\023k:d\316a\272>a4\2725\365\002:/5\000:p\245}9\207\307\201:\334\243\021:n\324(\271\225\003\222\270\266\035\3149\2559\253\272\265\274O:\014\0249\272\\\013\025\271\333\374j8\005P\2229\354J\005:<\031\303\271Il\206:#?3\271N\027\301\272\266\210\261\272`$R\271\367\213\3228D\242\210\271\346k\273\271\003\220\3009\000;\320:\377\032\204:\001\304#\271k\202\004\271i\261\033\266\347^\3029k3\0239\203[\336\271mB\022\272\242\311\246:/\200\257:\376\310\2748J\211\2739\021\245\3549A\216\003\272\315\363\224\272\004\033^\272\305\234<9\024\325$:>\217\222\271\363$\200\271\007\216\272:\203[\2719cQ\3069\354G4:\255\315\037\272\201\233\253\270\222%<9\030\304\010;\315:\3608\037\241\001\272u\204\352:\264\\\\:[\362\223\272\336<\2109Y\261?\271z\300\212\272P\027\377\271\035\220\000\273\016\333\341\272\264~\1778\025\224I\272W\264\237\271\262\250\021:\345{\211\272\212D\222\270\244\353\215\272\342\225D9\316\301\375\271$\257E\272\225\365i\271\325\306*\272\\\374\250\270l.W8\017L\3348\355\262\3608?\216\2009\304p\177:\202\226\240:\263\351\34497VM\272Uf\352\270\327\326\010\272\036\005n:F\201?:\231i\024:4\320j\272\362H\267\2715\'\354\271\003Y\232\271\232>!:P\2306\271\'\302\234\271\026\346\367\271\024\211z\272XB\n:Gk\3169\350K\315\272\354\330\250: .E6\021\235\002\272\026\341\200\272\275~\027\272J\240\226:\2045\3569\214\032\233:\373\322\2607H\327V\270\260\217$:\266\300V9\351\201\3527\314\265\3369s\377\263\272\217\314\212\271\226\343<91\207?\272\255<\3259h\223\3039\017\364E7\021c\234\271\254\2078:\ru\274\271,M\004\272N4\202\271\276\200-:\001\317\272:\213\257\300\272\232y=:\222R\270\271\242^S\272%\236\232:]\326M:\274i\210\2726\025/:\311\2200\271A\306 \271\035P\240\272\336\2614:y\332\201:\341&\273\270\350\267\2259>L\220:\023\357\264\272,!\336\271\027\024A\272\311\023\2709\255\347d9q\341J\272\227\316\214\271\342^Y\272\363\227\n:\241\207\217:!\300&:\014\224\221\271H%\227\272p\270X:\226eS\271\274uS\272\367A5\272\034\005\211:=\362Q\271z\334\267:y\325\210:\370\205\3359_\036!:8\263q:\335\307\216\272P\016\014\273`\364j\272\225\2617\272s\ty9V*\020:\245\010/\272\302Dy\271P\247\02093\2130\272IrT\272\3552\':\274\255\000:\000?\r9\265^\005\272\233J\004:\311\244\336\271\200\007C9\027\306\2439{N\371\271\332\341\3319\n\030N8\260\211\013\267P\241H:\274\246B:\350w\2409\351\206\244\272\331\201\3159A\032\0139\025\314\024:d\366\354\271\310\377\224:.\026\030:x\245)\271\373\316\250\267\222q\375\272\300\2659\271\203\275\336\270\033H\326\271\'|B9\211&\026:\351J\257:\020G\2029V\324I\270Lg):\351\263\362\271\342\220\203\271\256\316\03597bZ\272\361\307o\272Y:P9\377\001e9\2216\025:*Kn\272t7N:;5\003\2705\277.:\216\225\022:N\357\245\271\372\\\271:GGE:r\205\2579\211\235\030\270:\307N:\275\334\317\271\330\030\346\271q\344\360\271k\255\322\271\002\022I\272\241\326\323\270\273\334\250:<-\330\270\210\362\010:nV\317\272\341A\2026k\036\032\271\001\354\252\272_\210\0018\265~\r\271\361\271X:\215\216\037\271\222\313\312:Px\t\272A\213\3548\200\370\347\271\304\354<:\032\017\316\270\223s}:\"\216\270\271[a$\272\354\266\374\266 \270\003\272\373\344\343:\021X\217\271~U\343\272D\256\010\270\223.\316\271r59\272\277/\310\272\260\270\2058\307\241\265\271U\356\332\271\010\001\232\271\325j\2058\267\374!\272V\351\006:\251\315f8\351]\262\271\332S\037\272\036\324\0259\257&1:\027>\341\271j\tP:\376\311\"8\236G\\\272|fs9\211\245S:\371Gm\272\250\241c:\233o\227:\377\204\324\270\005Z\326\271\032\\\035\272\235\004\003:*\266b\272Ji\252\271\230\240\215\272\206c\312\271K6\\:\215\361\2429\266):8\031\336\2668\223\235\3509:h\363\272\372\001`9\372\243\034:\251\277\2609?lN\271t\300\326\272%\216\0319zg\000:\315\230k\272et\344\271\372E%9\317\004t:\202\227\206\272\2079\035\270\344\314r\270\260E\037\272s\032\301\272\302\230\007\272Ik\320\271w!\001\272\301J\3469\347\311S\270H!\3768\343Q\016\272\332%i\271\371\321\2518\r\235d\271\363\237\266:}\307\3508\223*\224\271\211\303\201\272F\264\305\272\325\316w\272\261\274\277\271+z\215:U\233>9|\352\004:\275\234\014\272\3517\217:\014\266\2358\026\376\336:\375\215A:\306\217\315\270\007\320\017\271A\271M\272\022\324\036:J/\320:\177U\3119\247\207\237\271[\332\3059\342\275\r:\272M<:9\326\2469\351\264\235:\rX \272YU\214\272W\275U8{\343\2249 \340\374\271\256\272\2308\203k`:QH!\272Z\375\202\271\220\262\261\272\002S\231\271\275\037\2128\206\237\244\271f\251\260\271\032Y_:\014\023$\273\2022\021\271p\227\2448\007H\003:\350M\252\271\322l\311\271!]h\272\036\260\2259,\310\242:XB6:\001\264\210:\253\363\r:(\027\270\272?RO\272\231\251\370\271\260HY9\340\311\2758&4%\271=\026`\2720\346\257\263(\224Q:\323\363\303\270c\375\3508\314f1:\344\027\214\271uZ\021:xT\r:(\266\207\272=u\250\272\263\342O\270i;\3468v\377\034:\000\036_:c\302\300\271\206\375A9p\274\317\270\325\247d:\376 q:\020\\\2349y+.:FJ\r:\237\025\0149\337\016?:\021\235\2019\205\355\'\272\030\022\255\271\367\310\3269\323h\231\266\320\t\341\267FU\241\271@dZ\272\252\002\244\272i\21489\266\327\3519\352\373\2628\263\272\2329\377\3033\272|wt\272\312Mr9\277\310^:\362\247\210\271\347s=9\332q\216\272\227#\357:\257#\233:\213\345\272\267\t\022c9\022\205\3409\027z\0339\324\303l:_y\353\2716\177 :\333\366\2569R\220\3619\2774\212\272\360\355\220:\237\372\3438\033B\007\272\037\246\332\271C\236~\271\035\234|\271\314\032\26790\224\274:\376\342\034\272\346G\3218#Z\241\267JI\270:\300Nb\272\364O\232\2717z\307\270\367f\007:\032\263[:\206\260\240\272\256*\034\271+\014\022:\231\313d:\223\350\274\271\004<\2549|}\215\272\366\344\037\271\027\r~\272\017\234\264:wC\r:t\0352:4\237\260\267\200\262\3769\333\337\206\272\225\005_:Lv\020\272\376\014\240:\225\223\262\272\327\34578\325\023\253\270\334Z\357\271\227&\3759\306\n\025:\326\214\023:\370<\3139\rE\2308\256M{\272\030\220\252\271+\263\223\272\252\035\2617\250:\233:4ow:\200\311\3729c\343H9O\301\223\267\204R\3059N=A\271\323^\212\272\324D\227\271\005\\\330:\007\034[9S\034\362\271\031\362d\272\310 \310\271\020\3746\272\001B\"\272\272~\370\271\344\357\245\271\002\005)\272\353\222\223\271\366\370[9\312\022\2539k\301\2469\007\255\022:\360\014\005:\327\321\3318R\322\322:4\353\205:\265k]\271\205\037\014\272\263\271\2329\247\323;\272\320>\021\271\273\024\001\272\346\343\271\271\251\013\2509\262`1\272\211\252Q9\0371\367\2703di:\227\334\246\272!8\3768\345r\001:$\231\0308T\331.\271\357&\211\271<\332\3629\036\257\323:J\317\3209 \304\3709\250\346\206\271\024\321\3729e\022N:\034!\311:\367z\2129\345Ia9\266=d\272\364\314;:\267|\2608\243zO\272>\207\256\2719\000\344:\254\221D:l\207\034:\251\363l:\252\267P:\377z\003\271Oo\201:\302=A\272\210z\3509h\262#\271\317\024g\271\313w\227\272\237\006A:\rL\034:\003\313\007\271\314iw\272\330\321\207\272\230(\200\272%\346D8\231\3326:E\341\0109\213\375\262\2716\243\235:g\017\267\271\2715b:\205\016v:(\313=:\006Z\034\272\2439\3109X\366T:-\342\306\271\300~\0169\236\362\275\2715\377\2709\257\273\2709\335\210\337\271b\303\275:\337\312q9\030\353\200\271S\371M\272\275k*9k\311\217\272\2135\222\272r:\0318\243*\205:G\300\275\272O\211\205\272|\201\214:r\300\212\272\375t\2349[\332@:z\034\2749~C\177:\353u\3739\370\240\2739\351\223\317\272.\203\242\271\213\257\342\271\n~\0349\021\345I\272DK\2629Cj\3239\336\202\032:\n\032\034\272\312\365e\271\023G\032\272\310\217\023\2724N;:a\212\265\272\2505\261\270\031\365\351\272\363lN\271\300\341\037:\355`\3408<u\2028h\200L9\326\206\035\272\026t\324\272\343\213\272\271\326\217\2179_\325\302\270F\215\3439kd\033\272\256\306\014\272\341N\22096\324#:\246Q\\:I\\\226\270\305R\2269<.m7\226\321_\271F\256\257\271H\371\3509L\344P\270\303\256\2329k\333h\271\320\016\2769\377\201]\271\373\361\2319\306\327\234\271\225\251K:m\373\023\272i\222\232:b\324\2768=\217\020:\313\277\210:\272.\223\272\361\033k9%~\236\272):\3549\236P\210:\224.\3139\030\3756\272x\317\255:\027s:\272\331u\243\271\347\247\010:\347\311K\271\"o}\271\200\300\0318\t\271\031\272`\267^:\253b\312\271\240\n)94\356p\271\022\335\245:\257K\007\271:\006\260\270\370\322\277:4v\206:\220\255\3569\205\202\0209\014\024\2269^\304\2708\247\250\3779\"8\3019X\005\314\271\331\303X\271C~\367:@0\202:\01716:\327\316\207\271\262\341S\272\315\3023\271\273=\235:0\313?\272\007#\220:%\362\344\271\305\345\366\271\267Y\010\272\245\320\246\271\255y!\270w2[:\024\014\006:\316\317\0209T\233\235:\314]\022:\367\t\211:M\377\3119p\327_:\267\217#:k\n\004\272\204\021\245\272\024\224\2229\215\352\372\271\274\334\014:\205T\354:\266\222\0379\301(F\271\361U\t:\020\027[:\203\016\3679\317\252\323\267\'\374\226\272\360\341\223:\366n\364\267\226:\3748\030t)8\331,\363\271\r\333\2559\222/0\272\032R\202\272\2670\324\271w\315\035:\353\333V:\357\243+\272\272\'\024:(\014[9\t\206i\2713a\3409d~\241\271\212\341\320\271\024\254\255:\000\'|\2724:\2278#\375\252\271\312KI\271,\235r\270H\\\3639\221\000\010:99m\272\373\30359(\033\2758^\344\3539\216\205\3318X\022\2718\243\341\215\271]\240Y98\227\3149\373@@9^\262\2519E\1773: \330]\271\0000\301\271\330V\2667z\365X\272\274@\316:\222\\\242\271\177\366\3239\35113:\226Oi\271\217N\3408\021?\315\272&Ou\272\016\306\365\271\274F/:b>18u\031\37571\023a\272\225?f\272x8:\270\021\305\355\271`\252x\272g\301\340\272\006`n\270\313\032\355\272\037\310x\271\261\210\276\270\301\210\303\2713*\302\271\373v\'\271y0u9\002\371D:\331\316\000:C\361\023\272N\345\2648\331n\256:\020\027h\272\200\254\317\272\315\344k:\350\260/9\007\222$\271\244\337\010:{H\206:\r\257\2418\242!9\266\")\025\272A\275 :G\235\3029H\006\3119\034\272\001:\252\220;:\315A\3779\267\3712\272\t/\002\270EB\215\271/\212\265\270@G\356\267\332X\2079\353+M:\010\371W8\321,\2468\260\346r:Y_\025\2727Jj\272,c\370\271\225\370\302:\321\223\236\271*\245j:\367\361\0019\202+\\\271\277\245J:\271\271\026\270C<\177:.5#:vN+\272\236\177\3069\030qE\272\242\257T9pC\316\271(\360\2708\310\310\2769\322Y\366\271\275\220\304\272\266\272\227:\256\321\374\270\205\272\2469\210\302\3069\220\"F:\306\037\207\272\037L\207:T2\2479De\2179\332b\3249J\343/\272\347\377\243\272\246\022\2679\303 \314\266\265\036\017\272@*\315\272W\220\001\272\0214\177\272w\366\206\271[/\354\267(\031\212\272\262\313V\271\270M\3569\377L\336\270\363\230:\272l\330\300\266\t\001\200\271F\026\262\270~\360\314\272\357\301\210\270 \335\n:c/\033\272$:\2018\333(0\272\200\215\245:\271M\306\271\370D\312:\244\037\367\271\031G\200\271<\310B\272\273\223\243\270\230j\254:\324=\177\270\272\031/:\315\312|:j\205\237\272\374z\260:\303\224\215:\005\331\203\271\247c\3219\313Ay:YV\0247 \373Y\271\372\002d\272\27369:\244.\376\271\316+\220\272\263\210\242\271\201\362\230:\222.\025:\241+\331\271+\022-\272k\352]:,2\3609\335\270\2749\341T\017\2727\337$\272\321\007K\271?#%\272@\266\002:\313\256O\2713B\205:\340O\2128\003\337o9\266\305=::\326\260:\032a\223\272\345Yd\272\200\242\256\270\352\177\037\271\224;[8\236\005\017\273\033\035\014\272\020\'\240:\"\331\3649\006\330A:\203\252\0269\032\242\2339O\036\376\271R_m9@X\226\271u\002X9\265\307`:uw\3418\227r\"\272\222\031\212\272&#k\272\253\210\220\272F\307\327\2722Nc:\200J\3579\225\267\3519/B\334\272x\306\223:\344\274z\272\031p\266\271X\305\2148\2030\n\272\250\242\231\272Y)\021\271\344\273\274\272:/m\271.)\255:\310}E9@\202\0029\307\016*:\213 \323\272]\332%\273\324=\026:A\222\033\272\226h\233:m\226%\270\035)\332\272\205\2572:\202~5:F\005\034:\036\227\337\271\345\227\'\271\343W3\272\303V\3328\233\031\200:!\356\346\271g\226\2148\374>\3369!u\3529\237k\026\272\rc4\272\n\360\004:P\343+\272/\024\2069Y\355\2568q\312\033\272\322\242d\272\374}7\272\"\22169)\026\2109\223A\377\271}\236::\333\273@\272\277\347\345\270\225\270\213\271?\273\215\272\346\253\357\271&c\267\270?l\214:\200t\251:Bs\241\270G\333\371\270g\n\2719\272x+:\207gQ\2718?&\271~\030\2577\216\003\243\272\347\202\027:i$r\272\242\3216:\205!\265\272`\3536\271\'x\033:\230\354\364\267C\377\3219\302@\205\272\374h\372802\362\2718\200\377\270\3329\327\271\020\342\236\270\244\252\365\270<\205>:\031\n.:h\274A\272s\247L:\177\242\255\272\'\206\3568!bv\272{z):\260\006M:9p\3429\272\251\2469\253e\257:[!\"9\030\236\2149\266\305\0028]\204\277\272\271y\331\271\204\271\0347e\025#:?\373\215\272\213\232\3249\320G\352\271wGn:/k\3459\353\334M\272\262\377\2459\"G\34490\322\2678\304\326+8\271\020U\271\227h\352\271lW\3229\363\231b:\032\352J:\225*\307:?~\306\2717\2568\272\352\341L:\035\3236:P!\273\272\261\005\t:N\305\235\271\235J\324\271^\217\316\271t\315G9X\023\371\271\335g\0078\256\257\226:A\317\211:/979\002\004&\272\210\010\307\271\331]\351\271\030\235\345\271\226\217g\272`\234\222\2727r~\272;\333 :\374\030\2309\021!\266:\226,\241\272>!^9ldb\2717\260\312\271]\362_9\021i\307\271R.\2769(g\035\271\217\232\020\272\245\357{\271\306\253\216:_\021}\272!\232$:KxI\272Xyg\271\332\374\223\271\005w\2139|h^:\272\350\010\271%\023P:\256]\217:\355\341a:vz%7\340\005%8\367\204\0028\220\327!:N\317\242:\243\277|\272r\247\221\272%xT:2\216\243:\242\323\3569\353\000a\272:d\316\271gM\204\272\346\331G9\343\202\002:\333+\255\271\025\351\0219\036\00219\353.P9\347\274\205:,F\3716\240U\020:\014py:g`s\272Hr\001\271:~\222\270g\260\362\271&S;\272C-\2639I\266\2639\026\332\202\270l\305\027\271>-w\272\274\352\225\272K\0311\271X\202\210\272\266\252P:\376\345\25491\203\023\272\203\303\214\270S\355\2368\231\036 :\271_\241\272\233uR\271\177\376[\272\341\305\216:\252f\241\272\274((:1[\000:?*\301\271\343\316\333:\360\211A:\027\021\3159&\251\334\270\033\202#9\030\264\307\271\227\37388#\347\0359_\272\3609d\365\032:\037\233\316\272\333F\235\272X\246\024:%\351\2679\306Z\233\271\000a\024\272}\032/:\336\217\030:@\016\3278\021\305\245\271\326\352\256:\235h\202\271\354k\313\271\026\324\245:\1773\034:\007\206\341\271\365S\202\271w\261\327\271\021\234k\272\364\023\214:\014H\':\223>]:\355g\034:\252\010\2769\330f;:\236\270\271:\253\271P:\331J5:n\031\202\272\0316\271\272\000\316j9E\211\250\272-\025\\\272S\327\2309\016\363\305\272\217\020\211:2\233\034:\321\324u:\031\344U:\372\300H9\233J1:\335\0301:\205\023\3628\261\361\350\271\347\252K:\237?H9\355\223\306\271\375W\3749\202K\256:,~\206\271>\304\2229t\242\220\2713\361Z:G\023\3439<&\2207o\223::\355=\013:G\213\264\27144\363\271\027\330\231\271w\224\0308\013\023\n:\0368\002\271\360e\024\271\245v\250\271!$\300:\327D\214\272\337@\232\272\216\323 91\323g\271M\316\t\272\3152\231\271!|\336\267#\020\3679\357\366t\272\2205\3529>\326a\272vb\020\272\371i\2679x\241\304:fj\2669>Y\323\271\017q\236:\276\220\";\351\250\004\273\010h\226\272\\E\0338dm\3019!N/:\262\313\n\271\360\nZ9\364\256\220\270e\333q:\324\213\351\271o\027\2629H\267(\272\272\263y9\344\374\2069\320\014\0319\364\340h\272\035\241\276\271N!\3608\324\020.\271\323\220\354:9\360\241\272`\364O\271\376\214\237\271?`(:o\340\312\271h:\341\270+\206>:8\233\t\272\266\252B\267\251-\023\272t\'%9\341!E9\223\247\021:{\304j9\014*w\272\254\250\035:\377\312\204\271c\270\303\271\357S)\271^\327\260\272\351\346\2229\337\322\2018\303\200)\272\223$\0058h\336\225\272\243}\264\272\327\357C9\310\215\034\272\300\252\3219e\357\3348_\24699_v\r9\326\220\222:\236 \234\272\246\313\2459Ex\2509\316Em\272\230.\347:C\322\t9\277\357\036:\220\311\010\272\356\247Z9\226\251\016\272\322\214\"\272\263;#:\030\2021:\266\271O8~\221\342\271+\261\203\270;\262/:u\321\3338@\373|:\351\360\200\272p$\2209QI%:8\215\272\271\326\351\3509\317R\221\271\t\242\232\272\264\032\235\271wK\303\271\265\343\324\271\313\032\2009+\251\265\270\3438\0259\034\224!:1\322\216:%\021\331\271m\232\242\272\256Dn:\\9E:\241\t9\272\210\242A:\036\336S\272I~\014\272\031\352h\272\331\343>:\241\343\2048\277\230\016\272i<\374\271\236{A9\\\235W\272\266\332\304:\350\327U:\225\324R\272\344_l\272%l\030:\206\242\3379\356<\241:\317\334\2569\\7\272\271\216\324\246:\234`\0279O\334/:\370\243\205:\260\233\3129J1\316\272e\226\0019\334^\371\272=\265\262:\323\33029$\257\r:\220{\030:\t\243\3559\371\026\037\272Ms\365\271-$\276\271\354UT9\270\323\010\272\254#\026:\241\337\\:\345)\3319\375rp9n\240\3058\234\032\211:t\260\r\272\314\2733:\nH\031:\236\3105:$\177\3039\3653\006\272\257\013S\271\335A\201\272,\323\213\271\243Z\022:\240\364w:\177\256\206:D-Q:88\236\271\231p\t\272:\233\2029k\342\323\271\013\220$\272\003\300\326:7\365\204\271\250\255\032:\347\301f\271\376\221\305\270\037WP:\007y\3168PO\345\272\261\3617\272\033\034*6\355j68\212\221\204\271\216 \303\271r\325*:W\223\310:Tj:\272\255L\003:\226\212\301:\231\330\205:3\331\2547\316\000\376\271\020\326\'\271GH\000\272\314\211\0169z\373\265\272P\377T\272\364\324\262\272\235vf\272\375|\024:C\272~8\330@/:9\237\200\2721L\227:Bq\204:\t\213 :\006\273,98\025-\272\323\237\3359I`~9j\256\277\272\252\200\224:_\347y\271\337\333K9a\234i\271\356\003^:\240\341\025:}\036Y\272\346\366\032:\360\371%\272\250\0109\271\317v\256:\252:\303\271/;\357\270\212\332d:\340\211\243:\256,\260\271\2239\\\272\\\250.:z\242\244\271\342c\221:D_6\2729h\316\2714\272U\270\317\226d:}\226\000;\034\242E\272k\234\3659>\341\026\272484\272\003X\014\271_\267\251\267\177O2\272>\371\200\270%\202}\272\225T\0349\336\347\034\272\262\257\3748.)98\270\214\265:\2056\177:\022X\'6{\000 \272\006\375.:\354\263\333\271\242\n%\271\r\223\021:+\340\220\272C\214\036\272\206\206\362\271\243\263\0109\354j3\272B\325\347\272\227\007\215\270\010\321O\272\235\321\004:\272\321\3057\021\325O:\0346\351\271\306\341\351\271\346\322\224\272w\266\234\272!\336\021:.\345\3569\216\t\267\272\377B\213:8\213\322\272<\230\3478\030\032\021\267\034\373\305\270\306\320\255\272\336\305\250\271\02421:t\356\0049\227\261e:\371!\241:\213\003\2179(~\332\272\242\3122\267G\310\2029\275S\031\272\333-\225:\350\302\35398f\021:\203ZV:\332w\323\271\317\312O\272\242-\3159aA\200\272\355m\002:\363\202\023\272\027\337O\271\244m/\271\274U\247\272\200%\002:\346\321\204:)\215\240:\203>\2239\303\370\006\267s\33368\024\220\3448\267\322\':sN\027:\215\304\003\271D\304&\272f\023h\272\026r\024:)\3248\272\345R\205\271*\2204:\201&\361\271\311m\026\272H9\2759\275\322\005:4C\310\271\005\324):Q\234\331:s\366\0009$3\340\267\362\313\2547\001M,:\033\225\200\271\000\021M\271\3603\014:\222\236\31297ko\271C\265\233\271G\t\367\270\001\236\021:\037\304b\272\265P^\272m\"l\272R\005\022:\210\340_:\324\314\206\272\320)\r\272>h :]\356\3668s\233\016\272\275!E:\361\300\2279\3539\0029Y\271\330\267(\253Q\271\260\326\311\271\0370\0329\344\325}\272\265\033\2158\033\2169:\203\235\215\270<%\t8\315\177 \272\320\3312:N\374!\272\276&\203:\007Qe:\353\331Z:}\332):)\337\000:R\206R\272\000\254F:\230\337\2079\035\361I\271$\3163\272L\242R:e\22067\373\355\202\271\311Y\n7\345\250<\270{\036~:\340\264\3529sil9\250V\000\272\232\374\375\271]@Z:\214\005\257\272\372\322\30298\363\3609\343\261b\2722\303\252:DY\3509\024|I\272[\362\252\271w3\266:\235\346a9u\207\240:nT\024\272\321\025\222\271;\237\236\270\362\270\367\270\007^\230\272\'\376\3647\336\273\\82\303g9\311\272\240\271\244\253\024:\247\303\2009)\246\2508\337\000\36796\345\272\272N\240\2549@\351\245:\\\303\3377\343\274\007\272\025\352\302\271\n\033T\272\325;\214\272u>;:E\371\3729\3479|8?p{:\022\372r\272\207\365\010\267a\003\220\271N~\316\270v\"8\272\003F\2379\226\327/\271\312J\201:\014j\2239w-;:\307I\335\271\247h\232\271sJ\314\271\246\'\034\272\256(z\270>\325V\272\211\347\030:(jE\271\374\377\235\271\354\"p9\236\310@\272\335\235\2729\307^%\272u1\342:p\360_\270\0218\207\271\026a\212\271\224\362\344\270\206\025\2349#.c9\212\035\226\271\362\324\034\2723z\317:,\252\201\272\240\274\024\272\344\017\0219\243X^\271\002\346\257\272\023\'\026\272\t\250\337\272:\215\0306\264\337+\272Z\177j:v%\001:m\322G:\334\367w\272U\200\3459?\362\246\272\372&`:\332\256\217\272}.\327\272\2711\272\270\242\214u:\017x\202\271\375\307[9P\327\027:\230ym9\350hd\271^\003b9\341\026\2339\035\204\324\271^<\320\271\037\324\2378\350\373\310\271}\210\3249\3416\235\271(\326\206\271\344\024\202:\253\005\217:w;\304:;\342V\272\021\332\353\271\0258C\271-u/:\006@\332\267\036\023k:\030\345;:\363\361\360\271HZ\272\272\320\316\031:\246\241\2668\026\205\224\271\255a\230\272\275c\361\270G\264\037\272\371\260\2678\203\321\2059\377n}8o~M\271|t\274\272\276i5:\214?a\272[hw:\345\372\034\272U{\017\272\233\227=\271L\336\2349EE\206:\037\333\2158\241L4\271\2251<:p\2514\271\240M\332\272c\035\264\270m\325H:6\311\232\2724>\247\270\365\017\211\272\367\266^:\241\351\013\271 \222\355\271&\371\2259\n\004a\271\264\205-:\201`@:\007\200\244\271\232\360f90\204\177:\273\274\"\272C:\245:\031\252\252\271\276{X:|8\307:\303\010\020:^\312\017:\026\244\212\272\256w\34498\027\335\267g\370\277\270V\033\013\271ZT\202\272\217#\232\272\331\277\210\270\034D\3607\200~\216\272\342?\26699}8:t@\220\2716\222\325\271fQ\215\270\301\251k\272$y\2109\242z5:hV\271\271;-\3429#\376\016\271Fk\2509\277\370\031:\230\266\n\273u<\237\271\262\303(:\313\241\2418\032\241\013\272\227\327\216\272\210r\227\271\255\243S\272M&\242\272AkF:\275\315\000:\340\332\3367\"z\2278\322\032\\9\032 \225\271k\311F\271>\372E:^\257A:\226%n:\274p`\272\366y\316\271M\026X: \266b96[\021:E\355\236:\\\033\265\272\036\343\2009\026\332\3019B\354]9\211<,\272J\232(:\027\027Z\272Y\222\3729J+\303\271\\\257!:B\017y8\233a\2528#\006\0229\372\343{9\272\244\252\272nJ\214\270\022\031l:\t@j\272I\006\201\271\327.M:=\030\345\271\354^\017\272b\300\253\2722V\371\271\236\000\3679!\355\246:\346W\266\270u\323\251\272\010VS\272\017\212\037\272\035\270\2209\240\343\355\272\260#\256\272\367\215A\272\327\"\3706\3620\3179\242\026\223\272\030\036E\272\342)\3149\320\377\2618\034\332@\272\263\243\307:W\365\010\267$J\2179\213v\3669\036K\0279\241UP:k\310\022:\333R\3059\321\022\005\272Cs\213:H\246k\271\274(\37680)\2519\367\250\001:\014W(\271:@?\272q\273\2568Y\247\306\271\027\n\241\272grT\272n7\030:\300\220\206:m\236\n:\010J9:\217\236\261\272\227\346I\272>%\2778\335\254\2139\2401\3419\\w\303\272\255\007\2419\251\035W\272\255\241\213\271\372\233\034:\322D(:\204Q\212:{F\3519?\302\274\272\356Y\241\272:9\377\272\363\334\251\272-\303\026\272\201\376\250\271O\276j\272\235\225\245:\354!\317\271$\217/\272jT\2658W\242(9#t\014\272\307\263z:I\327x\272\215\241\264\272\007\226\210\272\'\222\316\271\037w\375\270oD\331\271\020\267\213:\021t\2719R@\3139A\276E\2713\316\010\272\326\351\212:\232\023\301\271b\327,8\213\244\2169$\271;:\n?\2239\274\212\032:i\357\3039\270\220\266:\207\324\204\271\336\267\3109\"p\214:\320{\310\271\013\312\242\270\321\24619\231>\223\271\023\301\2169\036\206\2048H\253\354:\323\264V8\020B39\304s\2419T\305]9\226\022\027\272\246\273\276\272\265\312\022\272\331!i9~4n\272>\340-\271\001\37218\326\346\024:\014\247/:\226\311\264\271\221\244-9\036\304\250\271\324\266\217\272\002\316\357\2717\225\\\272\253?\032:G(>:a{M:\331dt\272u\362\003:z@\231\272\221\346(:\356\367\317\271\326\rS\272\227\362\036\272\336K\234\271\005\216x9\236fQ8\213:\3709.\352\223\272>\227O\272\032e\036\272\346b\205:\306\305\2639\020+\324:\3749N\271\255\270\263\272,W\0218\252\222\3359\262W\3579q\201\000\272\002\277\2139\006\316D\272agy\272\336\356\2478z\220\037\272\327\372\"\272\020\364\2649\337\004\005\272Q\343#\272U\000\317:\337g9\271\254\'\311\271kE\205\270\347:H\272[\300\376\270\255\017\3519\260^\025\272\213\347\3379!\355G:\3443\337\272y\3066\272L\200\275:\017\254?:\251G,:\306\351\2157\014{p9]rk:ZD\3519I\333k:W\235\216\271\322\322 9\376\310\t\272X\303\2119\005\033\243\272\230\035\014\272\215\270\030\272\033\340#\270M\335\325\272\356d\3329\215\364\3659\210#\327\271W\276\3508\312\365\326\271\033K\2439\201:\004\273\214)\325\270\t\324I\271\201h\311\271\333s\036;\346\014\275:\236\210\033\272\227]\004\272\350\210\2077\361\314?:\ty\2008O\274\212:\355\317\215\271GgL\272\210\365\004\272\367\343\315\272a\343\266:\2453>:\003\246\3048{\002\227\271Lc%\272\343\0331\273\302\2558\272Y\035$:\355\311\022\272kY\206\271m\2713\272\024\272L9\236\016\3069C<\321\270\276\266\323:\245S\3758\345~\3019\206c\2739\354\351\034:\016\217\2578l^\32690-\3729z8/\272\377\21649lZ\272\271s6\2718\314\377d\272\001\275\002:\375H~\271q},\271LH\3419\2625H:s\267\240:4\031\3029z\275\2519Nj\215\272\335\037X9\243K\2428\305\177f\272B\276\025\271\306\272t:M\304\024\271\302\306]\272\247\276<\272\034\244N:\335\307\3657\233\\\3629\215\212\':\320\241@\2725.\002\272\250\346\244\271\006\373\031:\365\374&\271WE\252\271\215\340\250\270\277&\021:m\'\212:\271)\263\271\036\034\3277\232\323+\271\002N\336\270\300\023\2329\"$\351\271:JG:q3x9\242\010\235:t\345X97ly:\224\374j:\014\262\247:\227\236N\272V$~:5\243\034\272W)\252:\336\231\002:&\2524\271\354\306[:*\327\3309q\235\021\272:\302\3679q\304\202\271\261\236\213:x\350\0009g\340\024\266\005\256\271\2711\t :<d\2029\204j\r\272\202\255\274\270\336/z:$*\220\272\304@z9Mm\r\272\332\"\355\271\217\201%\272\314\376\353\271\371*\0137C\227%9\212mQ9\326h?\271\013\300\3709\364\006\304:\365[\330\271\36246:P\234\305\272g\264H\272\325\352\n:\016\261\237\272e\270\322:z\"\257\272\002\227\2439\232}\003\272\352`.:\331#\313\271\334\203\2639\254t\0036\300T]\270+\333\2769+\370\3129Q\213\221\272\",\\:\305~\360\271h\023\272\271 CJ\271\267Z\034\272\265\237<\272\007\344_:c$\254:=?59\326|`9\'\335T\272,.\211\271\032\345\3368\354_\255\2728:P9\026\223\2057\023\326\3108UEx\270\224\222\3359\032Mf:\\\334\2259<\366\2739\245\202\304\272<\241\232\271\347G#\272~\352\315\270\0355c\272V\375 :@\233\2279b\313\2049z\327\r\267\\\214\255\2713\235\032:x-s:\236\313\306\270\017a :\304=\003\272_\'\346\272\307\263\013\272\335l4\272\\\366\004:\000\323\205\271`!\3627\3309\304:.h\202\267{\341m:\317uM\272\301J\240\267\351P-\272sr\'9\235\327\3267_\204x\270\211\003C\271w\243\325\271\224\221\300\271\211\037\21687\031\026\272\320\312\2708!\251\3669\300L\031\271$\206\014\272\027k\025:\000[\3419\3405\3069\275\020\231\272G\247\304:q\242\177\2719\223\3669\246qi9\362\023\017:\010\376\246:1\216o\271?s\020\272!\353\370\271\355\020E\272\312\255\":\322\216F\272\305g\272\271\366IL9\366\334\032:\023\026\260\272\031Y?\271L\342U:%\353\243\271.\353~\272\224\276\257:g\310\266\271$O\2319T<\223\271D\315\2209\030\3514\271l\263~\272Y\210f\272\301\311O\2729\330\3149\302\214\337:\324\365\2059\346\360L\272\245\3057\272\027\022\033\272e3\314\271W\243\315\272Ln\214:\304\022\2109\177\017o\271\317\243}8\316\204\244\270\357\345\336\272\302\312$9\300\360[\271\256O\000:\242\325\223\271\212\360F9\n\370B\272N\307\335\271[\3711\270\003\203\2569\306?\035\272F\234\2749\356\r\362\2728\035\000\272\202\023\006\272\355\363f\2710z\2529\215\361\301\272w\022\215\272\364m\273\270+:\003:\357v\n\272\213\225\3319X\346\213\270&\270\014:l\367\3479\212\362F\272\204\34219,Z\3119\003XH:Q\035\266\272\303A}\271\205\203\271:T\254\243:\022\234\"\272Z\343x\271\204\255\3229\324`\276\272\262K\034\272\246\027\254:5\260\\:-\023\246:\314M\201\272\272\270y\272a\360w:D\014\035\272j^ :K$\227\271kA\304\271w$\3649\026\025c9\335\335_\271|\007\014\272\313\026\252\272\t\217\2069\322\0230:\310\023\3049K \024:\240f|9\3617\210\272\356=\t\272\374\357>\271\245Wl\271_l\023\272n\276\3139sJ%:\325\333\3139\334\014G:V\351\2669\335\000\335\270\336899\340F\3739B$#:\221<\307\2710va:\225\013\277:qEV\271\236\275\3619^\033c9\263C\2628!\312\025\272\376\225\335\267\200\226q:\221h$\272\247\225\274:\021\211\275\271\326\347\231:\305i\230\272\251\220\t\272\230\363\336\271<\314\0319Q\372\246\271\370\323\004:\267\237\202\272\342B\022:\220\215\2278L1_\272\273Fo\272\236\000\353\271Ny\3508\257`\2629\026<\2759\272\241\212:\262\343\341\271J\306\023:]\032\216\270\251uN:\016\203\217:\272qm\272\037`\204:\200R\0278Q\026\034\272|\202\372\271\206\341\327\271\237\377\312\271\257\017M:\235\270\2429\237\377\2309\200\341\010:uL8\272\252\353\007\271a\222l\272\233\267\253\271\307\227P7V\302\230\2726\260::\250\333g:\212\017v:=+\0348^}08*\"E9}\252\267\271y\312\340\270^\276\210\272\365\021|:{\277y\272\216\346\203:\237\005R:X\324-\272\347$\252\270\200I\247:\365S&:\202\350$9\305\305\235\272\266\207\352\270\025\221\237\272\365!\2329x\031[\272\371>`\267\244D\241\272\211@\037\270\275\316\002\271\352\232\204:-\372A:U\300\004:\"\222\3547\331\021\224:C:\2449\336tz:\312\252\2269\264\304\231:9\177%:\000\354\233\272l\241[\272\316.\026\272pm\232:\321\313\n\272\021\034\032:\'\207\210\271\323j}\272b\013\023:A`\257:\254\325%\272\272\273%8\207\306g:\255\254X9\242\031\002:\364\006\203:=\330W\272j\036\3548\034\010o:K\352#:\267f0\272\266\266\2569=\177\304\271\263\353\2739rna:%\273[:\204\252\253\272Et&\272o\254\203\271\233\345]\272\374\205\002\272\300\272\236\272S\024#:\236\330\211\271\3757l8\010\232\256\271},\215:5\021\300\271}o\230\272RX\2179$o17h>\360\271/7Z\271J\224\030\272\300\253\247\271=\215\010:\025\320\000\272wti9eZ\351\271\323A\3039\274\365\314\2710\303m\272/\321\356\272\024\r\303\271ja\177\271>\351\270\272\'\236\370\271t\356\212\270\212v\004\271C\252d:\375\207\0319{D\2679F\274\3315Nw\322\271\tSz:iT\325\272\206\023p9F\322\213\272\322l\216\272\335\377\3679\354\257E:\347\232\222\272]t\307\271\253O\235:o \354\271\000\356#\271\024\373\3259\212ta\272|A\212\272\3745\3259\3127\216\272\0314\031\271\231\215\234\272\3304~9g\302g\271(0c\272\314\236\2728\001\031\035\272\\HO\271\307\026\004\270\253{\250:p\014\021\272\267:\25291\324\202:\321\007c8\215\n(:\266xK\272\034N\3169\260\013\2139\216?\303:s\272n\272\317\266\2719\202\377Z848w\272\240\000V9\374\374\\\272\3775\2749\233\361\265\271+\023\2669\340-\2618(\034,7N\2616\272b\205\230\271N\317\002:0\307\\\272!\343\036\272\206*\235\271\342/\271\271d\253\303:\tI\035\271\303\302\316:\032\241k\272c\025\033:\034\3064\272]\034\340\271\014\325\3758!e\223\271\264M\221:\203\301x\272W\014\357\265l5\25280\240\2579A\272B9O\272\2778\232EH\272\320\3214:]\205\205\271\246\343\2449o\253,:\340\371\341\271\271>\245:\377\277\2419\343\270\026:`\355\2339\210+\0339\003k\026\272C\224\002\272\332\000\266\270\2049\220\271\2558\3579Z\026\224\2723s*8\262K?\272\004\220\252:\321\331\2059\2329\020\272\310_L:\t\273l9\014;\215\271\277\2222\271\316=\037\272?\370a9\206v\022\272\373\t\233\271\253^\033\272d?=:\025f\3409\t\336\030:\362\005)\272\330\247\2778\t\354\311\272\240\341\317\271[h\326\271\200\247\216\272\352xG:\021\364\206:~\202\202\271\366G\260\270C\246\270:\236\037\3269\177$\302:\320\352\220\271o\000P:\377\216\221\272[]\021\272\357 {\272\036d\355\272`\300\331\270dIW\272\022^\262\272.\221\025\272\034q(\272\335V\r\272J\372\221\271\325\367\03093K\354\271g\3735:6\344\303\271\324\247\234\271<\032\037:\333#\251\272\353Wv\271\330\ts\272n\217,8\rg\3329\362.5:\367\2042\270N\341\230\272\212\357\261\271\347V<8H4\361\271\227\310\331\271qC\0269B*\2247\254\356\2468\026;\3779\304\177\2339\343\rF\271\271\321\350\271}\205d\272&C\364\272\235\214\2719\253|\27492\360.8\247r\004\272\267\355\33686;\266\271\\\317\261\271\276\270^9\312\354\3359v\253J:v\325\2439\307f\";\022\223Z8\352X\3519\023\237\321\270+\221\3609\232\210\240\271\352E@\272\357\347\037\271\213\361\240\2721\220B\272\201O\220\271\344\364Q:\371\211\214\267C\220T9;\216\217:A\265\275:q\370B8\274\014e9\0274a8\206Ow\272=#\301:{\347Y7;\355=\271+E\234\272l\3610\267=>\2219MS\205:s\024H\272\314\000j:\337s\252\272R\217\270\271\036\237\025\272[s.\271t\361T:=O\354\270c5\026\272\334N\312\2716s\2339\322\'\2529\033TN\272\034Y1:I\350\204:T^\3069Q\241\3008\243d\306:C\325\2269\331-\246\267\340\314\3269<h*\272\241\306\3339W\323L:u\340Z:\350IU:\024H1\272*\304\32394h4\272D\343\231\272)C\365\2715\030\311\271\361\034\210\272\217\374\002\271J<\255\272:\372\341:\007\254I:_\337\2627\252\341-\271\250\255s:\234\026D:\360\"\0369\312\342\3129\027\255e\272q\'i9W\236\220:\236\304\243\272x\234\r6\367ip\271\336\332\275:9#\324\271R\001z\271^8\327\270Iy\022\272\331\365\337\271\3201l8\241\237(:\214\353v\272\205\237\2119\031\346\\9\353\000\007\272%\345\2079\253AX\271\027$l\271\247\'\013\271\213\322X\271\250\352@:D\260L:\234\346$\272\361xU9\002\007\263\272}L\376\271\277{\006\272\234\242<8Q\232l\271\377Qf9\027i\275\272o)\232:\002{\245:\320\236\2169\353\026I\272g\217\2118\030\016\201\272d\325\0209B\354~:\264\"\222\272/>\247\271\255\"\275\271;\016\235\272\251\\\t:\221\347\343\271\027|\261\271\2146l9\\\217\033\272e\350\224\271:\035W:(\005\377\271\203\315\331\271\305\203\30584\255T\272:\035\2529\300C\2147\353\210\000:\331\226t\271@\276\3229c\321\2437\271\033#\272J!\262\272O2\206\270\352G\311\270s\276\252\272\374\216\000\272\226\353\3549\036#\333\271V.F\270\267\360\302\271>\247\3549\246\231\003\271_]V\271\206\333\242\272\343I\035\270\370#~9nl\3359D:\215\272L\362N\272\014\245L:\025\321\303\271~\300O9\200\032\251\2727x\323\270\223.\216:\310C&:AV\3518:\352\306\270\266\224\3568\334\265\2747\262\260\3178=\352\2119\313Q\003\2730\235l\272\2508\243:\002R\021:\361\231\0349\370\3451\272\025\241\014:Y\262\260:i{O\270/h\026\272C\245\001:\267\350k\271\006\276t:\373\375-\271\207w\2179\'x\253\270\022\007\314:\226\007d\270*/\"\272\257 \233\272&\'\370\271O<\223:\007o(:n\020H9\353\314L6LZ\000\272|\243\331:f%f:\353\017\377\271+\261\013\272\364Q\3709mg\343\271\253\331\270\267\254\033\2308\202r\264\267\207y\0249\352v\033\272\356\211\027:\326^\323\265\356\006\013:x\316\356\272\216\216P:\337\3015\272\3031\225\270\nh\034:\334\r\2309\2519\320\270\347\301(\272h\215\023\267k\035\2278W\252g:\005;<:s\320\3369E\032\\:cy=\2725\270\2509\2253\0369\370\024\3148\034\254t\267v\032\201\271\374\325\021:\255,\016:\220\213\'\271d\031\n\271\203\2640\271\236\023\252:\316@\324\270\3072\2019u\214\005\272r~\262\271\243\351\300\271\014\2025\272Zw\360\271(^\236\267\263\341\2419Z3\216:s)|\271\374\241*\270~0\0029%P\203:\\\364\016\271\344\014\222:O\035\237\272\327m\354\270\026:\0278*\213\013\2725>h:\023\222\233\271\327\035\2039DD\2029@(\0338?c\274\271S\371k\272$\317\211:\336\\\2469{\272A9\355\\Q:\243\373\\\2712\017\273\271\242\206\215\272=\027\026:\017\243\3165\250\316I:W\231\2769\212\362\245:g\220\027:\346\247\232:\353\025\263:\032\003Y8k\037#\272E\023\003:\226!\1779\243y\372\270\206*\210:\315B\035:7\330\21299P\003:\270\352?\271\352\230\3239\367\343\2119\346\027f9\207\227\366\2719\\\251\272Q\205\2759\365\273\2149\355\r\245\272\310*\214\270]\'4:\201(Q:\003\274%:\321\370P\272\366L\247:\324T08\273c\002\272\342)\213:\221\347\2338\022s\3509\033\265\2079*\305*\271\210\224k:\351\320\243:N[w\272\3070\210\272\265\365\237:en\3449\320\344\":\037\355\347\271\t{\273\270\3665^:T\213{:\014\262R\272\317Z\t\272\2061k\272m\257\243\272LH\2668s\257\375\272Z\244\2479Q\233\302\271-F\0149\274\ni9\225\031\212:\327\201A:r\357\020\272L\000\2069Z\203\2469!\307_\272Z\326a8\026\311F\267C\371*:\006\323g9\342\262\255:\377/\265\271\246\300M:\352\312\016:\361%\225:\364!\267\270\203S\360\270\215\003\2348\201\216\236\272\205\377\2459\351\361\3579\232\250\266:n\227\334\270\351\024S\272X${7\030)\257\271\020BZ\271\3617\\9\325;k\271N\300\232\2715\271k\270\314ve\272\262\236\004\271\3514\233\2726\025\201\272\236\366\222\271\262\277\321\266\322\226\220:\343\210\36685\n\3439\355<f:\177\232\3579\014n\207\271(\351\2209\"Mm:Y\277\2609-\361N8_R\213\272\000\373\024\272\t8\3549;\246\277\266d\353\201\2726\010\201:9\260\3149E\235\266\272Ch\2159\254E\2769r\353\024\272\nn\214:\\\014\247\270\333 \226\272\375\275T:\260\323.\272\026^\3579H\255\240\271=wb\272\001\314\3438\014\314\334\272\037\310\265:\2611^9_\035\3758\377\227\201\272L\326\222\271\233$\013:\013\211\3439\373\222\320:\024\303\303:\334C\3079\001\022\030:\306\007\005\271-\262\3059\304\346\3359-b\33682\251+\272\225o\310\272]\033\271\271ckv\272\310b+9\272\357\367\271\n`\223\271t\344\2619\005x\307:\211\202{9X\262\210\272|\346(:2=\t\272\233\301=\271y\250\303\272\332;\353\270i\314\210\272\014\2221\271\027\016\2657\323b\017\273iS]9X\000\3329\010\2700:\026\261}8\223}\2648[\301U:\037P$\272\331%\2069\013\036\2309\216\300\261:\226I\030:\367\275\212\271\310#\31093\230\3268\354\341\034:\006K\t\272R\006\0219g\321\221\271\256$\264:u\337\302\270\315\017h\272\203G\377:%\316\237:\261\2242\271#\033J:!\016\014:\021\316\344\271anD9\003\030\321\271\202\214\230:\034r\223:ks\021:\351\321\034:e\207y:\017\304\013:Y\271\301\2713F\3749\026\337\2749D\177\001\272\210\262\370\271F\n\345\272\253\217\233\267u,m9D\367\":\357B^:\027\213}\271\261\217D\272\320\221\t:-t\2769\220\221u\271\306OU\270\271\311):m\246#\272\010dS\272{_\033\271B\324\27193\224\313:4\373\236\271Y\256\270:m++\271\3763m:\334\025\023\272\213g\277\271n]\0319E\215\3039\205\367\270\271v\0133\272h\217\n\272i|t:\255\271\3465\207VI7\321\020\204\271\337\273=97~t8V_\2369\356F\200:p|\0079V\221\207\271\2068\2739c\314(\272\354\271\344\271\234\034\010:H9\030\272\330\235\206\272E\357\254\270w\325)\272L\332\265\270b\220T\272*\177f9\027A~\272\372\306\333\271\320\210\250\271\373\217\217\267\356\363\363\271\316v\032:\316!Z\271\337T\3008*X\013\272N\037\0059U\327\3128#<{7^Nw:^a`:\360\177\233\272\277\223\2709,\241R\271\355\313\2748\017\214\254\271E,\207:\375\000=9GX\211:M\372m\272\212\264\235:\336\034\202\272\274\033,:5_g:\203oX\266\350\311\253\272\337\341Q\272\342\312K:+U\007:\210\276\304\270\035\365n:Y\267\217\271\003\206\002\272\234\330B\272\263\022\242:\037\256e\272wBa:n7g\271\320\035\255\271\220\027Q\267h\305\006\273\346\210\t\272\033Tw\272\033o\223:\336\243\2179d\303\260\271Ji\2509\241\014\24699\262\02183\366G\272\334+\3208KAT:\037\354\241\271\256\311\025\272\300\032(9\301`\215:\332$\214\2712\240\032:\206U\211\272\364\264\200:\204\231f:\255m\217\271\'\324\362\271r\244_\272\224\231\300:\371\322\211\271W\246@9\3368\3139\261[\214\272&w\211:[\3577:\251\256\363:Ky\301\271eg\3159n\021\031:\330\\\001:\316\377\233\272\\\035\204:\265d\0279,\\\342\271\271\227\020:\236\373\2369A\305\2649\003\320*:\2342b8\300s`\272\337\273q:M\303\212:\312#=\272i\352\214:\275\373\204\272O/\376\271\nG\244\271\\\275\243\272\354\024\222:g\310\304\271)(\2449\331\207\2368\367L\32371\253\030\272\373\2358:\346\34088\343\364b\2728\250g\272\027.j\271@\204p\271\243\263X\272X`{\272\271\267\201\272u6\224\272\r\243+\272\031K\3277H^\243\271i\247\224:\334\317\232:D\335\0139\032\213\277\272\305\344z\272\265H4\272\273\220\2268\364~E:Y\330>\272~$7:\t\036\r9`b\3119\377\246\307\2713\350J\272L^\022:=\200\3548\202\322\022:Cwe:\355\266\005:\236\257\251:\252\335x\272\"\034\200\271\020\332\027\272[\001\025:\007\316\257\271\267]\310\271\321\376]:\027Sb9\225\325\231\272\013\377\t;\351\376)\272.\202x\272e\024\025:\026\374k:c\327\217:\360Md\272\216\354\221\271\257_\030\272t\333\240\267\335\264\260\271o\014\322\271\214`\3249\332\254g\272\006\r\255\271\375\277\210\272S\026\311\271\001\340\377\271e5\246\272\203\347\224\271\253\264\2549*\346\274\271\003\331\201\272l\201%\272@\374\253\271\353\355c\272\344*Y:7g\2469\216\354\2377\306Y\2759\324\206\257\272(\017\375\271\231^J9n0\021:\004\001::\030\362O:\356\311H:M\'\010:\027\024\257\272\363\027o\272\3525Z\272\013\261\0268u\213\253:r\361\300\272\231J}7\021>\r:\031\304\347\271\034\316\347\271u\002w8\353f\3719\212\240s\271\362\010\253\2728:\2339\215\0078\272,\003\273\271\020\034F\270\237\325\023:#ch:\210\273\206\271@\240\3149\327Q\006\272\023\334m\271,\311\347\270#\"F\272=\312_:\235\0041\270\222Ds:\245q\3269\351S\2779\031\005H:1\223\3049a\230+9\364\351&\272P]r\272\336\36149VmT9\354\354\307\270l\331\273:1f\034:l\255<:\024\026~\272\022\030h\272\035=\2268\320\034\256\271\365\007\2227O\205$9\377\014\3349\245 \256\271;\334n:\220B\017\270H\320\244\267\213@d\271QBn\271\341\t\236\2726\235\235\27057\037\272\003\035\262:\007g[\272\024\360\346\267\242\332\263:\272k\2467\032\377.9\265\366u:\264\361\3739\343\271\r:=4\22298u\2719\306\322\2709\022\206^\271t\375\234\271\245\331\265\271wN%\272\307\265\327\271a\252\'\270\013\265\257\270M_%:MR(\270\326\262\210\271\240z\2639k\025w:\366j\312:]\376m:\022\372\211\271\335B\3049r4&\272\026\013\346\270\346Hx:{&\215:\321\274t6q8\236\272\347,\275\272\323\\\344\271\215\252\347\267\310\314\206\272\302k{:\331,\207\272\210v+:\004\177\2479\257\035\2049\214\371L:y\345\3659e\036\202\271G\363\017\2721[\3658\003F\277\272r\353\0339\333n\3019\2577\240\272\346\274Y\272\007\216r:`\340\2029b!\0069/\225\0279\322\227\0239C\242A\272\013s\216\272\263g\014:o\013\267\272\027J\032\272\267:\2419`r\220\271\210\323U\271bV\223\272\003\363\304\272\235j<:o!\207:\225\377\232:\306\3058:bF\244\272g5\2069\005\344\3719cG\3119\342\336\253\271\260\r=9{\217\031:\365\260\020:\302&\246\270\206g,\270\360\364C:\224\027\221\272\017\355=:\325\205b:\206\266\3048%\232\2138\235\'\346\272w\314J96\'\2659+\213\361\270\274\350\350\270c\306\211\272\340\2735:\001\3712:\316n\250:aq\214\2726\200\223\272?\021\237:\365\33599\207\320\260\271\341\022\3159\251y\n:\020\214k:+p^:\336\300\3078:v\206:\037\271\032\271\321\340\2649\'\246e\272eEr\272\354\327z:b\206B\271\207_\2139\334}\250\272\321\"\3359\004\013^\2713\312x9\256m\237\271\376)k:\264Df\271\3139\2069\267\202\014\272Z\021\347\270\0162\210\271k\256N\272\353\r\013:\272&\224\272\333\022\213\270]\032\3439+h\3728\330\235\365\271b\336\361:\210\342\2378\020\336\362\272\337=\211:0\305\036\272\021\023u\271l\234;:h\300\245:\370\230\031\272\264>\0139\353E\204\272\'\262\231\271\226q\023:\330Y\003;\274\200\007:\252\362\031:\374=\213\272\207\217\2718\332[\3549\2615\326:\207\331N\272E\325(\272\035`\2009\231%\221\271\352\217\207\272p\310\310\2701:R\272\372F\226\271\275e\274\271\3226\273\271ts>:\020\3505:Q\340\222:]&z\272\316\334\277\272\017\316\301:\253\351\226\271\000\315\n\272\271\010\3079A\251\242:~\005-:*\241\206:8\313]5;\340\267\271\206\276\261:\262\211Q:\272\201\033\272J\326\035:\342\300\007\272s_\270:@\203\250\271\323\233\036\272\256\267\2739\t6\035:\320\241\335\271\222S\3629H\034\371\271\tA\2679\201\312\304\271\341\364\277\271x\360\332\267yp3\272\275\354\366\272\2264\226:\032C\3709\360\257l8\361\013\353\272F\230=9\035\257\226:\261*\\9\367\263\3449\305\3232:\313 \002\272m\n\016:\375`\200\272\205\2754:b\316\2769\036\260\203\271\3350::NVW\272l\213\033:\307\035,9\316\333\257\271\016\223\312:\003\031[\2727B\217\267\332\242\356\271Q\252B\272\302\031\352\271\224\274L\272?\254+\272\377\376\030:G\260\033\271@\215\231:q\203\306:\"\236\314\271^\237\3309\355\314[\272?\013\305\272\370@\320:\220\367\335\270mR\007\272\002\261\2428\212\264G\272\264\260s\272\211\356\2707\202\367@9\313!m\272\356\311\206:Lw\3448\373Q\230:\2411\213:\024/\3019\214X\277\272\353\332\337\270\325\304\3068f\033\027:e\356l\270\003 S8V\021\313:w\220\200\272\371\237q\272\366l\200:\266\201\263\271\344\231\352\271\206\301\3359\030\365\3329dD\037:\254\357*8\r\006E:\362S\215\272\235\0201:\002_18\030G\2559|\033=\272\313\3667:\312\007\004\272\241J\2319\325Q\260\270\267\t[\272\007\314\2757|\251\204:Z\267\3658\236\260\2559\334))\272\237\254\233:\231e\214\270\243\350\273\270f\352\034\272\255\233\264\271\365\204\343\271\031\204\3749A\306\2309\344Q\376\271j\266\2119\306u\2107\216\227\034:.,7\271\247Y\320:6\264&\272U=\300\272\317\271K:\344\216\363\271F*b:\240\313E\272\356\245\2479o\236*:\231\255\032:\301\232s:\302\013\2779j\361\301\272p\35669\316\272\271\271d\t\2259S} 9\345\244\3277\374lL\272GD\274:\336/\231:>\t\031\271*\377S\272\332-\2719\262U\3349\202\211\3559j \230\272\313q%:\024>2\272*.i\272\342\331%\272\250\243:\272`\271\3579J\201\"\272O\362r\272UBv\272\027<\026:R,\262:\227\304h:S~\\\272\216O\3378\373\337\370\272{#\227\272\371\324\263\271;\034\250\271\006.V\272\303\372\3728\314F\303\271\214Y\250\272]\265/8\031\243s\272/\275\246:\001&6\267\301 \'9\237Ib\272\332\225\2358\214\267\307:\000\002y\272\223\0347:\371\365\026:\2217\013:\303\232H\2725\023\263\271\250\3103\272\nL2\272^S\2449\017\272+:\347\373\2428\340\270\273:/\326\221:\374\324\361\271\245\260\031\2724\203\026\270w\020\240\272R\245\010\271\376\244\\\271_1X:\337\217\243\270\250\010\016\272\274yG\272\026\312\0169\026\200\001\272\016nF\271]\215\0149\375\267E\2712\007\246\272E\213\347\272NMH9T\243\304:\304\211^\271\267\366\232\271\022\212\024\272\254*\003\270\362\220\2069\277\036\216\271f\034\3219\375\020\302\2721\026\030:,\307I\271\245\315\265\271\0065Z:b\021\272\271\220\300,:[Q\261\267\027MM:\205|t9^\341\232:C?\003:\234e\271\271\227\244\354\271\330\243\0339\222\370\3629a\263\026\272\033Q\2749\030\203`:\361Yn\271*\337\220\2714\036\276\271\277\204s:\034=\3528)4\340:O\342\201\272\257|\216\272\211\3713\272ho<\267\300E\000\267\255Q\3069\213\363v\272\323P\3307\303Np:\243\360\214:US\020:\327\304\225\271\351\343\307\271$\024\215:\363\342\344\270\301\237\211\271\023\2327\272\214\325\3716\224\262\304:+\213\032\271{\360\0048\313#}\272\037cU\271\376\030\241\272\374\324\002\273\221\353\214:\305\343\2369\323\374?\272\235\311\020\270E\365\232\272\350\036\034\272P\204\267\271\302\322\2559\351\242\3539a\310\313\272\226;\3739\222\030\221\272H%\215\271\370s\022\272\375\020y\272\001$\001\272\3337\215:\307\007\005\272A\300\312\271\270\013?\271\345\245\217:v\027\203\272\"\332\211:C\327z9Q{j\271\373\201\"\272k\330t\272<\232\3759\242\212\234\271\277%\275\271\314j4:H\241W:\307\202w\271W\301\205\272\252\010\323\270{&\360:\020\3277\272O#\2709\244@#:O\020\3408t\222k9\322\203:9\252L5\272\022\364{\270\030C\2337<_\233\272\252\221\345\2706\261\250\272\020\205A:\213\010\330\271\222\245\215\272\344\270\0359\310nV9\331\202\0229r\210\0279\\\371\324\271\347\253E\272\010\234]\272~\r\r\272\234&W:(\333^\272E\313\216:n}\264\272\216W\304\272d\346\232:\332\262\"\272\t%\273\270T\017\246\271a-\3269H\207\025:\374,\2019\245T\201\272\351R*:\017\222\3669\252\250}:\350 \273\272IN}9\252p\324\271\307\177\217\272\217U,\272\n.Y\272\2349p\272\022\007\2239X\224\2459\242x\231\272\215\263D9\36387\272\005]\3079u]+\272\025\230\271\272 \233y9\2644\2208<\362k9\2046\251\271k\211B9\206\30229#Y\025:ZoY\272\334u\206\272\243\272\n\2721(\340\270 @|\271S\230\306\271\275\2735\271\305J\313\272\211X\250\272\335\235\316\272Z\025\2559\351\372B9\344\326\006\271\340\247U\272\313P\2669\236\273/:1\333S:\330\276\205\271\215\226\013\272\221O\343\271\207Q\260:x\236(\272\307+\2679\254\274\313:j\322\020\272J\005\0049\261&\302\270\276\271\256:\327\304\0328\361\010\230\272u\246a\272)\270\20590\370X\272\325\301F8H\210\305\271k+\3139\374\367\004:\252\332\263:\373\226\2559\356\362\206:t\221\222\272;\216\007:\025\335\3277aQ\2269$o_:\262\255\026\2710\031v9\r\030):\301y\r\272{\211\2619\230\220\237\270o($:&_\0149\275\337#9\363\034/\271\355\275&\272\342\255\233:\375\010\361\265_\3361\271\377\023\3009\321X\201:\365\026\220:\236\262\226\267\007\234\3539?\260\352\271\030E\t\272\303\21328\247\306\000:0\231\216\272\375\343\303\270\021\225\2529\014\331&\270\347\300\270\272\236\35229\215=\342\267\204~-\272o\225\257\272\365\315B\272\336\307\242\2728z\201\272\300\323\351\271\210\353\336\271L\022~:\246\357#8\007\016\202\272\201\263\240\272\031\271\0048\t\317\2629\244\013F\272\256\350\254\271*\240\201\272H\256x:\352\276\330\271\243 \0028\202\005C:s\336\213:\335p\3259vF&9\344i\2659\357\245\235\272\\\327\364\266@*M8M\277\225:y\224)\271\3301\270:\302\213!:%c\213:f\215,\270\246\224\211:\323,M9I=\233:\355\226\005\273\354$m\2716\266\003:\341\330\221\272mN\30080m(\271V;\017:i\254\264\267\317\240\2649\251\304e\271\235 \2229\265f\200:\334V\335\271\004\016(9\231\033$9\230\363\244\271\376\312\002\272:K(:4iW9/UM\272n\215[\271\301\027\255\270\323\246\177:\2503\037:2I\214:\335\307{\271\307\352y\271\272k\3549\362\371h:md\2739g\006\2119\331}\321:\237\r-\272\010\251\017\272]\010r\271\243V\237:\375\366s9\376@\0309U\375\260\272y\005z9\311Ac\272\3035#\271\331\256\225\271H\273\3749\224\2550\271\270T\277\272\266!n:Q\334\3509\177\225N\272y|\215:\206\311?:h\007j:\337d\235\271\030\n\020\272{bg:\207T\255\272jO\263:\326\024\013:\030\240\313\272P\360\245\271h\267x:o\2649:\232\320\336\270\376\002y\270*5\2458k\303\275\272r\307\025;S\234\"9oVQ\271/x\031:\260\307\010:M\365\030:\373%\275\271\201rM\270\200qT\272\036\232\264:\274\221\3669\010~\2719:\002V9\361\312\r8O\254\2139_U\0169$\017\254:\211d\257\272w\307P\266;\321\225:\004\030Z:\001\354/:\345\274o:=#\025\272\236\206\r:p\255[\271\350\006[\271\334n\001\2724\260\024\272\021l\326\272\257\023]8q\2715\272\244\254\\\270hro:\033\371\3425p\r\013:\275\356\315\270@Q\3129\036\177\2736\251\265\2629\373\220\226:\013\247u9j\215\000\272\307\350\254\2711\265*\272\347n^\272\243\346\215:\244\021\214\271\272\014j9\243V\200\2700:>\271H\265\221:q\334\"\271\343\270v:\006H\2619j\341O:#\277*\272\234\032\2429\3545V\271\232\223%:\177\363+\272\013r\255\267\334\324@8\213i=9\270\243\2558\217;P\272\311;\226:y\370\2359\007\027\t\272\036\332\255:\220G\3519o\350B\272\3111\2068\234\343\236\270\205\241\267\271)\022:\272\321b\022\272\207x\2009\301\354\301:\232\034\277\272\366\243W\272~+\2539^\265?:\343\243,\272\345\241g\272\352\250\261\2705k\231\271E\231\310\272\302\347\304\271/\275]:[mo\270~\363::\030\221\310\271\036\372\031:\266eq8\233\2777:Q \263\271H\317\323\271\221\360G\271B\337\260\272_M\365\271\225g{\272\244\2318\272T\327v:}pk9\t\030U:\020\210\3758\2541\r:\024&\016\271\260\270\2679\006=\25197\201\227:\325!\264\272\003\325\014\272P,\342\271(#o\272\311\361L:\212A\2556_\'\3429\237\216(\272\354v@:y\340\224:\035\331\314\271H&\2368\310\007\220:K.\2239l\t\222:\025\266u:\027\344\2749d\355\264\271\362\315\237:\304\236G\272\262\341\271\267\024\327B:\036\255C\272\346\025+:\312\234E:@J\2619\243\362Y:\340\370\214:\312\317\314\272\247\306\224:\306\373?9\275$\206\266\"\233\2019M<P93\016G:\330\361\3029rm\373\272\023\374\262\271\201/\206\271\213\2075\272cF\313:*7=:\262\364\3239%dq:IBd:7\033\253:EA\n9F\r\037:\342\373k\272\352G\216:\355\343\242\271fI\2479;\260\245\272\014_\310\270\367\'\237\2729\252\246:\240i!\271]\213k\272D[\223\2671\236`9\321\213\305:#\014\2529\214x\032\272\365S\371\272\364o\335\271j\rG\272\361\206(9v\226n\272\310`Q\272\202\336Y9\265\271\313::\365\36680Q\364\267\200\334\30697\"\032:Xg\260:2\314\3609\241\366|8\0218\224\272 \201=9\353m\344\271\267-\2449\000\376^:\'!`\272\316\031\323:\244\255!9\212\035\3369\343\314Z9&#T:\215Q\001\271N\263c\272\265\201\3419\265\324\322\272\270\333v:\025_\273\271\210\247\230\271\346A\326:\267\030\0249n\024\226\271\216<\3139\036\001\221\272\264\275\270:\353\'p\272\001TO:\261\031~\271\356y\212\272\"N\244\272\236I\275\270\225\\2\272\'\236\0329\301Q\235\272\370\260):3p\231\272 <]:\213\336\2338\354\223\177:T\320\3638\263\327&9v\357\0079\224{\3429\t\377_\271rh\234\272Lj\226:\373\272\036:[^t\271$\321\2459\303\0140:\277\301\323\271\377\326\326\271\250`\234\266\334G1\271\352\364\033:\200\033U:\327\260J\272\331$\2249\016c\2728\355\254,:\326\316\n\272\310/Y\271Z\263\242\271\235\001\372\270\277\327\024\272Y!v\272\305\037k8@\260\313\270\313H\031:K\303\240:\215\016/\272\304x\035\271\307;\020:Rv\200:x\206\032\271p\314^\272\256\376\316:\023\333\306\271\311\203\2769\272Sy\271\240/\327\267_\224\3157O\033\251\272\231r\3749\336u\216\270\206\300@:4L,\272\016(\314\271\270\351\245\270\303\215\245\272\373\324L\272\342\260S:{\336E\271\366U\327\271\240\250\005\272#\027\220:;\334\353\271\344S*:tV7\271^\304\3659u#P:$\025\3749\021!\022\271\330\004O\270\372}\225\270,\227\366\270\367T\":AG\361\271\271\317E9[I\240\272/I\3649\371\346C\272\237\333H\272\024:z:a\332#:\350\310\200:]\337\026\271x\346\":\027K(:?\252\324\271\325H\243:\243v\024\272]\032\2069\006\346\0059#2J\272\241\023\3319\254&\370\271X\343H\271\313M*\272\360\307\272:\362yT9\366k\3649d\'k\272\334\260\3268\274\317&\271\272\267\312:\233\231\255\271\271\263F:\021}$9\357\211\353:\021e\0339\300g(:0\005\0049Q\322\022\272\220\212C:\302\3764\272\236\245\000;H\333m:}\0144\272*\020\355\270\373O\004\272!h\265\272cq\236\271\372\032\233:\212K\366\271.\024\265\271\355\3031:v8\2177\227\364\037\271\356\010\3179\311\253\222\267\003\314e:\243L\371\271k\324>\272*-n\272!\355.\272z\361\327\272n\346F\272(\265X:9\31748>\316\007\271\035\220R:\326\254\243\271nv\323:s7\003:\0206\26094kq\272<\274\353\270-\332|9\210\013\205\272\352\326\006\272\017\374\2579\356~\005\272N[K\266\253(\263\271f\322\200\271\213\276\303\271\334\242\235\272\177/X\272\370\227\2136\232\330\250\267#\372\2306\354\270\205\272\347\363A9\321\373\206\271+\232*\272\336\'\253:we\264:4\271\225\272\346\313&:\336\360\013\272\264\03669\206\375\013\272\277\272\t:\0141\323\271\307 ]9\2575k:\220\315\014\271H\332F8\205\373\\\272\216\263\177\271:\216\003\272\001\003\2709\330\t\2069\311\351t\271\014\300\'\272\265\202+\272\016\300\t\271\002\365\3069\267\222\2179{\363\237:\374w\234\2726!i8`MJ\272g\227@\272kzj:c\030\2479\211\013\275:-W\350\271\201\200\271\272\334\031|\271\275\212\311\271\035\357\3369\261\311\203\271\254Gt\272\340h\264\2703\027\3769\336j\2649b[\301\271\272\022\2379W\311Y9\255\354\000:n\262{\272\272EZ9Oi\231\271\320\312\364\271\344\036\3128D\202t\271\237SR9K\33499q\210\364\271\331\254\337\271\035\207\223\272\216\200l9r\234\037\2706d\3319q\344u:Q\345\001\272\325C\244:jOq:\363n\207:\014\n\222\272U\271\2579M96:\020+\230\2716\300\277:\3120\215\271O\264\3359\215C\2177/\206\000\272\321\356l\272w\266\237\270N\035%\271p\224\255\271x!\221\271\010\231\2029f\210\036:[\256n:\307\222c8{om9\237-\3639\373\322\333:\345\217\3719\001\341\306\2716(!\272D\337\320\271\311\236\314\270\374\342\252\271\372\220\226\271\333\373\2649>9=\272\256\321\202:\220Fj\272{\360::\225\200\234\271H\207\0069 \264\327\270B\360\2717\273\023\350\271q\243o\272\177\271\002\272\371e\3059\003\034\005\273\235\255\241\272#\272\2149\310m\3409\361\235\224\266[\275\001\272\331\215\235\271\206c!\271\035\307\320\271J\206c9\334j\226\270\357\351o:\027\351\357\271\201T\345\2703r\275\271O\212\036\272x\325\3528\366u^:#V\2179\277@\370\272r\177\3659\212\262\032\271J\"\220\267B#\2619\373\231\2349\342\t\363:\265\346\376\271\026\2033\270T\273c9+6\031:B\0257\272\343\036\244\2722\203\2339\372\273\':\241.\201\272\013\224\2218\307\310\200\271\263\273\0009\354\306\350:\215\207\205:^\256u:\355\207m:\177\217\r:\005\216\226\271\214\21489>\034\361\270\276\010\251\272\236:\033\2728\376l90\267\032:t\327\2459\033\212\036:\3565\221\270G\304\342\267\206w\325\271\226\031\022\271\321A\212\272\033C\231\271\263\377P7T\317\330\272\336\311\037\271)\0370\272\026\212\332\271\235\363\035:\322\307\207\2729IM9r\355c\272\215P\2509Y\035\266:\312\013\214\272\314\007\032:\014\364Y\271\001\333\2569\371\217\2569\221\253\026:{\372H:\206L\234\271r\373\342\271\257\344\243:(\266\2079\301W{:\361\352@\272/~r\272\021$\3669\220j\227:\263~\000\272a\030T9\005\213\206:\350uV\271\360\256\3039\t\000A\2726\225!\267\177\266>\272\356\275.\272\212\233\373\271T\025\010\272\2124V:Q\213\r\266\227^\342\271W\202Y8J2]\271\327\251\356\272.\227\2529\"\235\2509}\206\202\271N\261T\272\221\22719.\344\265\271}=p:SG\320\271\276\270\013\270\360Y\321:\311}\304:mh\3539Q\351\2439\355_\2069\334\200D:\273\021\2678\235\310H\271\272\234\2617^\302\310\272\355:T\271\223y[\272V\025\032:\346\001\017:\255\010Z:W\261\350\271\352\035\236:\304\362[\271\034\016k\272\333K\265\272J\303\2118NP\037:C\306v:\013\"\2447\247\t^\272\301\252\215:\307{n9\255\317\031\272\3635\2429*!\304\271\000\200\2759\344c.\272\006\220\205\271\214\001\000\272\302h\3768\214\264\035:\000\t\000\2722\374~:\034\314\225:\013J\031\272\227\266o\272\177\351{9y\307\0229\237\362Q9e\376\236\271\216\223\2359\225\020\2549\342(\222\2717\357~\270\232\005\321\272]\222y\272\033\365\204:\003^\226\271\277Z$:\001 \212\270v\235/:(]\2049\376H\250:\311a\230:\202\313\231\271\243?\0179\021\3376\271o/Y\271R\224\3709\010?\375\271\r\220\2069F\353Q:\006(\224\272\265\326t:\363\364\351\272D\345\0319a\'\375\272e\250\325\271G\016L9\001\355\214:\224\005\216:\225\0133:}V\020:F\256\'\272@[7\271\337g\223:]\255\227\272\265\236\3769\217\364j\272\206\331\026\271\367\217 \272\354M\034\271#sE\272\374\327L\272)\314>9<\313\215:(\333\0359\362\331\001\272\234\316?\272\330\343w\271\334Q\240\272\010*%\267\271\236\235\272\314\\\2739\371\311\035\272IQ\310\270\017\361\316:\207\201\033\272\306\237\223:\233Q\002\272\341t!\272\343g\2619|1J\272rs\223\267_\205V8\022\303,\272\"\336D84:79\227\032K\270%\342`8\026\365L\271\277\207\252\266)\243A:\261\013\0049\003\022\230:A\3429\272\237\267\215\271\005\363^:\203&\t\271*\355\257\270\007,\3028c6\266:\332+\341\271\003\231\357\271\36703:\214F\002\272l\024j:\256\375\3769\335V\204:\260O\320\272\206mS:\350\363\210:i\232\030:\306\367\3609\364H\213\272\356\234\23597\376\027:\031\372\262\272\352\255\0259\021&\265\271\206\326\333\267\317\307\0338\204\232\203\272\000\337u:\253\275\206\267j\201\232\271\375\233]\272;\250\30483@\244\270&\253\013\272\273\332\034\272c\240\372\271l\037S\271\313\021\223\271\tG\2609%]\3639\241i\350:1\20159\306}l\271\244\353\017\272\005\325\207:#\370(:\037\030\2009\\\330l\272\240<:\272\207\0166:n\245\3379\371w\t\272+h\221\272\260\375|\272C\320\n:7\006\017:\237t\220:{/\315\271YJ\\:\226_\213\271F\376\253\272\265\237#:a\273\000\272\"]D:\230N\373\2716\245\225\272\217i2\272\306\010\237\272\341\274\3609\376>\231\2712\250\37295\346>\272\275\244\2459\010\373\2039}l\250:N\314\001\272\353\377Z:q\177s:\207N\3259\177\030\2169~,\234\271\002\226L\272\253\356{\272\307o\235:\016\210z\272:Z\3479\017\2642:FNg:\317A\302\270mi\351\270\311\360\3737x\306\334\271\310\360?\272\004\350):|\235\213\272\311`\200:\272\262q:\350\033y\272~\355|9\317\361\361\271{\032%\267\276\261\2429%PK:,\200\210\267\327\255\3258?\250>:\013Y\3738\353&\202:3\371Q\270X.\231:\246\212\345:5]\213:Y\037\330\271\335F\323\271V\373?\272\'\177\205\272\004\245\221:\350\000t\271H\330\2409h\270\375\272M\366u\272.\313\347:X\324\274\271xjo9\304\253\034:F\347\216\2723\341\3058\221X):\023Rv8KZ\356\267y\33179i\245\033:k\335\007:.\335\345\272p\312\3609\036\242\215\272=\257\221\272;\210\2429\200\302i\272]};9\0213\026\271j\215\215:\024\312\006\273ow39qJ\014\272\002\260\2128\355\247M\272B\365\210\270h\'\317\271\327S\333\271\271\035\204\271m\260d9\247\233\2616\303\246\232\271\031\241\3119\367\335\36283q\277:\245\017\017:\242\375G\272\362.\262\271d\216\331\271\350g/\271\321\275\276:\336\225\357\271_\201>:\203\020*\272\245\re\272\017\335l:\311cu:\350\3778\272O\254J\272\356\025[:Nrs\272\307G\254\272\035\235\003:og)\272\025\037\2609\300]\027:\235gy\272 A\277\271\025\335\302\272\004\n\30193\341\3117ST\34591\266\212\266J\272\2519\205\375(:\240\215\233:\246\030*:\210\315-\272\220(Q\271n\320\271\272.l\207\272\360\013\226\271\323\256\214:\030)S\270\013\326\":\332\201\232\272\361\315\n\272\330z\037:\332\312F:\2371R\272\361\302\240\272\275{L:\267hK\271\'\344\006:\022\267K\272\022\271\321\271\013\371\0069+\2769:\2358\223\272\262\316\217\271z\362A\272\007\270C\272\324\217A:\020P\354:O}\2109\266\000\206\272\363h\2638d;\027:c\000\252\271q\264\252\271*!\024\271#\263*\271\360\330\3059\323\345\2309\0178W\272\014\274\245:!\304\'\272\014d\022\271\262\342\n\271\331\260\3278\321\335\2519\310\3647:\365w-\271\313d\221:\327\211\320\266\213\227\004:\302V\213\272\005\272\252:H\374f:\225L\0269F\222\006\272\213\346\253\272s\006\331\272\\\250\226\271v\262\2729\007\341F:\024s\214\272X\367\3319*\267\335\272\002r\2019\257[\010:Vv\r\272\034}\2708\212\223?\272WN;\272\374\311\306\2715t\030:\266\350\2679*q\346:6P\2459\202\035\002\272\360\302W:\272K!\272\020/\265\271\024^x9F\230\3129\3403$:^h\031:\005\331\24496:\2237\307\250\217:sT\227:\216-\2516\335(\375\271{\021E9\227X\3259\277\242\276\271\213\255H\272\254U\n9\236D%:\310C\3219s\357\0379\373yE\272\312t\2319t!\226:S\240\215\272\010\227\202:{\361\230\272\35605\271e\271\r:\037\251\211:\352i\2716*\337,\272\376VF\272\271m\222:rc\003\272G\333\314\270\241!\201\271^\016\003\272\"9\322\270\351\243\226\272\036\252\222\272Zf\0219M\252\037:\242!\024\272\217|m9\246:Z:B\352Y\272\375y\2239\255L\201:%o9\271\227\240\000\270R)\213\271\031^\2538\377s\0368\305KE:\230O\301\271\027Y\264\270\034\003\257\272\320BN:s\2516:\004KE9: \354\2717\353?9-\212\2266\362\212\233\270Of\2348\335\257\355\271\241\036\013\272um#\272?\360\3539K\t\345\270\222T\r\272\014?\245\272L\216-\272\220\211\215:\252J\002\272j\326\250:71):\342Zp\272\304i\327\272F\310\210\272\"B!\272!\305\3719\024\340_\272 p~9\024\345\013\272\002*\362\270\266\301?9\354\342\302\272\237T\340\267F\013*\271W?Z\271.\202\205\272\331\272\031:\322\262\243:\250!\250\272N\017T\272\313\246\306:}RU\271#\234\037:em\021:\"\024\2779\276\206=9\260\005\320\271\230Dv\272Qd\371\271$\374\332\272\351\316\2118\'q\2637\364\346!:\000\025E\270\3377\362:\356\302\0069|\207r:+\334\030:\014\323\363\271<L\275:\336_\3547\027\323a7\250@\013:\"\2764\271\364\300\020\272\321D\2209\321\206\3667\364l!\272\207\312B:\306[*:\256\210::\013\311\030:\231\'\372\2711xJ\272b\313\232\272r\036\202\271\313\257i\271\350\244\304\271\323wR:\033\320\3109\003p)\272\033\3224\272\014\223\201\272\270\010;\272\204\356-:\313\2233\271\343\0010\267\320\'\333811\2079\261\272\2468\243\274\267\270\307z\005\272W\337\003\271^\367\3729%\343\3018:\377\225:\213\022\240\272\0351\027:C\322R\272\003-\225\272\025\037\3419M\247\366\270\372\306$\267Ha\300\272\033[\224\270\315\316\024:\235{t:\373U\253\271\025{\243\272\373C\002:\023Y\001:j>\024\272\335\236K:/6?\271\251+,\271O\204!\272{\036\r9\352\025\n\272\3555\206\272Zf):-\372\246\272x\230\300\271\314[\2349\2217\0139\234Z\224:\302^T9\346wg:Q\277N\272U\331h7\341\211\2359,\021\3029\303\355\2149\353R_\271\360\030+\272\343b\033\271\252\245_\272\227\236\273\272s+\3439\364\373\"9\224\032\2348\033U\016:%\233\006\272\322\266\214:D\213\2178\366\024\255\272g\227\222\271H\232\3248X&-\272\2708\275:\231.\2278\206\033\311\271\224}v\272\200I\237\271\372Z\014\272[\276(\272\233\312\352\271a\316i9\371<\211\272\032\326?9=\247j\272\216\344\3359\217kK9\212\'\213\270)\363^:\003J\000;y\305\221\271\310%\2518\220\247\3236{\232\024\271\252\002\2779`X\2019\031\370\n\271m\216\320\271\034\324,\270Sp\241\271\203\253\236\271\231#\354\271\344\006\036:\010\376m\272=o&\272\251\306\221\271\374\377\253\272\225I\231\272\000\0013\272\025[\251\271n\200\2359\300\010\260\271K\305\3269\362\343@\272\265\303\233\272\"B$\270\216l\365\271\031\364`\270h\032\3519\203>\332\271\000Jj\271\205\006.\272Zs*\272Wu\013\272QYM9\347Me:#\377\032\272\350\'\017\272\337\363-\2727sh\272H\214\221\272\230\274\256\267W\270]\271\t\334o:\375\026s\272\017\217\2439*\355\013\272\r?\277:~\001D\272l7\270\271\3404\0019\243\331\370\271\364\246\0268h/Q9S\305\203\270#B\306\272\221l\201\272\307a\006:&>A::\033\203\272\243\212c\272\313\334\246\272\257D\231\272M\335\215\271\323\360\247\272\244\217\t\272\345h\2359\376\272\031:\232\243\004:Cr\311\272\247\'\215\272\247\273\244\271n\n!:\343\325\2759VT\220\271j\357\241\272\376?\":\025F\025:\235\347\205\272\014\016\212\272\220O\3469\211\026\030:\200s\037\272\200h\214:B\357\2027\037\317b9\326)d9\006P\322\271D0\274:\363\230\231\272\013\345&\272}\375\346\271\354EE\272\210\031\260:\327\253[9\273\234\3569p8$\271\231A]\271\014A\331\272-\366\t;eT2\271\377&\203\2727\n\010\271\226\323?\271\326@\255: \305\3608\364\370\206\272\270\244\334\272\001\000\0169Q\356\2079\225\274\200:\276H\001:\016*u\272\236[@\270f\022g\272\200\334\34599\254\245:\262\362*\272\366\260l\272\025`\2039%&\233:k\255\037:0^\006:\360\250j:hy\':\355r\215\271\035\223\3027\371\352r\272\273-\213:@\241%:k\324\031\272\204\326\353\271#`\3379k\215\360\271\217X\3179\300\332\033\271\374O\3319\3413.98\342\264:\264\001\2328\344&\3478{]\0309\000[\326\272\2674\346:v\240w9S\215\371\272\0134\211:\321\000\231\266\207.\240\2721O\243:xW\010:\317f\377\271\216\246)9\362\240\0139\301\005C:\363\372\0319\340;\254\2701\237\3768\377\344\201\272m\0021\270<-\243:\243\366\360\271\234\315\t\272\214R\2478\347\340\220\272\016\374\3009\027\2455\272M\007&\271\336^\3659p\343\223\272\3514%\272-\014\377\271X\330\324\270\222?$\272\233\377\202\2700h&\272^\3121:\255y\221\272\236(J\271b\032h\272dp\315:\305\327\256\270\036\260*\271,\357\253\270\227\2019\272\027\327V\272\344\274\240\267O}W7~|\237:S\177\013:r\315y\272A\272\3279\217}\3129\255\355!:\363q\260\271\266V\27798F/\272\331\206\007\272\260\005\246\271\337s\365:\215/\037\272{[\2349s\350\0079T\010c8\023\t}9\317=$\272\027\364\017\272\334cp:-V8:\264;w:\317\r\222:\320\371O\272\246H\200\271\034\026\374\270\374\235\356\272\257\232-:;\3426:\254\"\3049s\224\220\272s\352\030\272\344\032\226\272e\220I:|\350\2309\215)\001\270\344\332$:xz0\272b\\\324\272|iH\272\314\231J\272\330\324\210\272=\023~:\212\235\036\272\243BH:\n\'\2018\325\373o\272\330\203/\267\236D\3158\266\307\342\271T\367\020:\202vO\2725\035s\272\027\230_9\013\036\3069.\350j:V\\A\272\241\370G:\354\257\216\272?\233j\272\267\230\2359L\250\0367^\3439\271<\031\233:\354\370\037:j\357\3058Q\000\243:\331\332\0049)\220\260\271L_\034:\2670a\272]=\357\266\013{\004:\301^B\272TF\200\271\035\232i\272z\337\253\272\242\007\3478}\003\244\2716\226\342\271Q\315\261\270\240\360\3228\204\275\301\270\310=\341\271\360\305\373\270\274g\200\272~\306\2619\252\004\0239o\234\3538\177\033g\270\003E\2639[\240B:\267+\3339\335\245\272:\243\'V\271 q\270\271\036w\n\272m&\3319V\241t9vC\n\272\306C\3229\346B\2327\006\036\306\271z\003\3448\001\330\016\272\023D\243\272\344x\3009\002W%:\357\232\001\272y\257\214:.\322\t\271 \272\3327\310>\272:\032\211\007\272\026\214J:^\214,\271Y\332\312:\320\224\\\270\3039O:\321C\261\271El\201\272\3552\222:BV\0379G\006\271:P.\213:.\362#8\213\365F\272\277a\024:\306\261\216:+\327\207\271\370\321\000\271\333\265\255:\276\340~\272\223\375\022:;\260\022\272&\204\026:\346\266\222:*\204\226\271\357\263(\272~\n\3446y82:\206\375C\271jF\035:\230\351\2718\272\266\330\270\177Y\033\270-\027\363\272\246\220\003\272h\323^\272\345\177P:\226 9\272[\200E:j^p\272|\001\000\265iA\3029\022B=9\256\273\231:g\000;\272\354\314\272\271\231\265\352\271\300b\276\271\001\225):c>\231\271\220\241\234\272&\355\3539\231\226A\272\230\310\2179l\0365\271\367\252\232\272\320\334\031:\005\200P:\254\371\n\272;\354]:\010N\020\272n\324\2259\312\210o\272Pk]9@\007J:#\326\2077\275\034\2069\302[\206\271\0169\2029\303\2349\270\2113S9\243\367\236:-\355!\272\037\375\3437\337\010\2409{\303\3159\nT\231:\253A\010\272,Lv:\331\305\254\271\236\257\3309\rL\361\266\201b\377\267Z\270z\271\344\244\t;u\301X\272\273\212\323:\304\031\2139\206\2009\272\237\024\3139\230M\2179\215*\375\270 H\204\272\364\347h\272\277\003J:djV\270\255\371\211\272\374\354\243\272p\027\300\272H\'\000\272FC\036:\360\352\3578\256\272>\267\035\234\024:X\362\3779j\361\342\271\326\2117:\020\312\3009\013\304\362\271\024\001\021:aW \271\360\212\231:\217\352\026:\000\204!:\320\303J\272\353$\253:A\r\203:i\334#9\330\373\3209\030\340+:\020[\n\271\236\017}:\227(>\272e{\031:W`\270:\362~\3629\230\366\025:\237\324\313\271*\216p\272\304\300\0359\314\006#\271fA\017:\374\361N:\217M\351:\n\252\261\271\177\307,:\215\233\3539\325U\2559*\274\3319hN\033\272a7\353\270\313\027\3719!z\333\272\231\241Y\270)U\253\272[\017\307\272pJ\271\271\264\327,:\301N\211\271\010\272\3039\224`5:\037p\1779\002\343\016:Gv)9\002\326\353: \274\3359\256tS\272M\367\027:\225\346i\272\232\370\252\270\267V\2269MB\t\272bb\":\rR:9!\303\312\271\275\307\270\270\315\223\206\271\342@&8^\270\271\272\3660\265\266(\337\256\271o\374p:\335\245\031:$V\033:m\002\201\272\321\244\030\272A/7:=\001K:7{d\266\306\354B\272\237\235*95o\216\272\005jY9\313V\203:\355\272\231\270\320\361\322\271E\226,\272\307Y\226\270\265\251\367\271\234\352b8\301\233\0027\024\343(\272\2627\206:\207q%\272\306Z\263\271\'\315\226\271\006\360\003;\320\263\3519\376W\001\272\270&\211\272I i\2718\030\210:\t%\2179\327\037f\272\220=\014:\r)\032\271n\375\373\271\270\225L\272Qi\252\270\004\031\'\272\202\342\2329\352)e\272\027\322\2329Dd\2108\320?\310\270\3157\203\272J7c9\325\246[\271n<k\272p}P:\025\010M:[\356\006:\2779\362\270\333\271\2349Y\220\253:i\'\2628\253u\3747\245Z\376:\343\3323:\261\024\255\272\222\336\3018\377\313\251\271M\370\242\272^\243x8(0n\272\274\275\023\270\357\351\"\272\200c\0229\247\377m\272\321\262\221\271.\307\3479\310\313\2209\353j\232:SJ\212\271\332\364\275\272\033Ip\271\316\273\264:\240\363c:\2714\3079\354\335n:\236\346\242:\37418\272\301(\017\272\306\226\017:N\031w9\037\363A\271\237\361\2048 !\200\271\304$\23066-\263\272\213\300\3569yT\251\2725\022\2469\021K!:\201\262\030\272Q\241\000:E\272&:G\034_\272s\'\3359\031\227\256\270\332\177\271\270\310p\2379\3104\303\272l\374\2519\264\323U:m\001\215\272\352\343\2609\004[\216\272\220\017\214:Ae\363:\222sB\272\302\215#:\260\215F\271\333\313m:B\002\3378\305\201\022:-\225\201\271\3016\351\271\2616\346:\'\220\014\273M\033\3419\222\370\';\253\353\263\271\023\334\2419O\235\3129\347\256\233\264A\326v:\341s\273\267\256ks:t\032\035:\010\205\203\271\337\253\024\270\225\345Z\2725\374\302\270\354sL7z\214\0029\321\373::\242N\2038\262\264`:\226\350\252\267\273\264U:iI\014:\310\371\2539A\355^\272\242\262(\271\257\201\254\271\260\rG:]7\330\271\322_\370\271\277\270\232\272\234z\030\271!\tu\271\020\3576:\356\307(\271i\244\204\272\304\251/:\317`\3379\254\003\326\267\227\243\245\272\273\226\264\271\263\030\021\272\236}<:\374E\2609~\225w:?\025\3339p\371\230:\355l\236\2727\246k:~[\355\271!\220%\272_\270\034\272\010\274*\271\037\000\247\271\037\231\2178\343\301\3729jq;9k\024t:\357\\b:y\227_\271)\270\255\271]\237\3209\374\354\352\2714X/\270\\\264\230\2704\007\220\271\310(\244\271\272\322n\272\'\326@\272\314\227\003\272\206j\037\267Siw\272\373\206E8\'\202\3469\340B\236:Ia\304\270`\363\026\272L\254\367\270V\030\327\272\314z\360\271\241\271\227:\312pM9\354\372\216\271\026(\344\2716\324l\271su\021\272\227X\237\271[\020\3529D\246\022:e {\272\036\006R8\027\365\233:s\235\346\271\236\335^:\t\027\0029\321\260\2019yXI8\272\233\3649:\227\346\271\204{B:g\350#:\264\360I9.\242\270\271\223)A\272:\264\021\270\216\356\004:\362\310\220:+\240\2729\336\240\020\272\265+w9\035\211\0049^m\010:\222\350\246\272\354\'\327:\305Cv:J\344\267\271 \206\3668\364\332\344\271(|\242\272\026\310\000\272\242\365\246\270\355f\205:\337\310\235\271\026\013\2749\305\233\220:~\"\211\271X\307!92\225a\271\2677\3557\374h\252\271\034;n\271\003\301\034:\007\355\322:\034dY\272f\276\257\272\r\212\004\271\320\020i\272}M\2226\361\014[\272\333@\t9\271t\231\272\007\001\n:\034\362\005:\233\252}\271\'\242\305\271`%~:}c\325\272\'\315\230\272\245~\235\270\331\362U9\340t\3519\350\204\267\270\036\343\2018M\343\320\271\242\302\3058\303k3\272\342&>\272\r\320.9)\205\253\271\tM\2357f8\014\272D\2731\272\314\233\252\271\356\361\363\270 \375\021\272?\214\256\272\305:\027:6X\3628Y\337J\271&\205\3678\265k\203:r\016b:\312[D\272\237\360[:r\275L:1\300\307\271\031\235\3548!\333\245\272\017y\203\271}\030\0019|\017\202:U\177J\272\202\332\2539A\314J9\325\231\202:\033\276h\272\350\224+9\335`m:)\256\310\271\030\017\016:\346(\202\272v\372o9\361`s:\207\004\026\272\226^e\271\234\352)\271d0b\271\362v\3349\203\347\252:\024\n\000\272d\002\024:\006i\2179\273V\202:[4_:\365\032\3268\001\305\217\272{\377\022:\353n`9\274\027&\267\211e\021\270g!\334\271Vk5:\314gY\272\341\336?9\351w\340\271\327\321X9K\226\2279=\371\337\272\306}\230\272\214\310\214\270\351\321\360\270\376\016\2469\0047\2759\344\034M:\377@?\272\240\265\3259(\325\230\272\354\254\204:\005\222\314\271\270/9\272\304\300\325\272\023]\200\271:\306\t\271\017\213\231:\245\255\232\271M\352e:b\350>\271_\320=\267\217\205B:\234-\206:e\201l\271d\312|9HS\241\270\222\233\014\272\236Z\255\272%^49W\324O8U\262\245\267\363\264]:\372\275/\2719\346\322\270{\263\214\272j@\000\271\337\214\3139\275\234 8o\253H:\230)\372\271#\303t:\035\027\232\271\257\177h\272\321l\214\272D\2239\272\337;;:V\021\020\271\375|\2746\241\201\2229\340D\200\272\350\317\0169\257P\2047\207\316`:\036\323\310\271\037#c9L\315c:\342\215^\272U\330\3558\277F\2119sF\000:Kj<:x[F:U\026\316\272\215\005\024\271\256\375K:\014ir9\204v\\::g\3169G\271\3468\220\331w\272I\362>\270H\031\234\272\202\217\240\271\001\353\3519\202\332\277\271e\353\255:\017\373\200:\371S\340:\304\246D:\"\033\2539\244\276\3369\314\253\262:D\344o\272\206B\2178\017\255*:H\357\2407@\204\276:\305\207\236\270\026\313\377\271\253D\3019(M\2149\253\254\227\272\010\233`\2727S\25463\t\300\271\010\336|:\333\342\346:\031\t\0059JZ\2739\001\310#\272\000KE\272b_\200\271\277\271\263\271h\221\2138\346\325\017:\274\332\3679\260\305]9\3410\314\270f\270\2218@\250\246\272\036\260W:\246rE:\366\254\2508\026c\3339\231\203}\272\267\306\t:\313\2024\272RP\246\270a}s92gk8.\035\354\271\215\205\3119\352\241\227\271_\355\260:\177\300\327:\244k\323\272T\270\333\271\031\261\206\272\306R\221\272\327\263\353:\254\346\256\271\231\344\00698\2474:Oj6\272@\230\212:\005\007=9\302\266\2637V\307\2619\351\2026:\261p/:\310\221\264\271\000\302n\271\260\000L9;\356\332:O\310\356\271\n\034\227\272\307\225\212\271\006G\233\272\242\264\340\271Is\023\272\th\321\271|\256v\272>\332-:w{\213\271U\004\263\270C\252\00593\202\2658y\323!:k+\0239\215\345\\\271|_F\271\372X^:\007\354\324\271\231\220\2429\206\t/:i!\\:r8\037\272O\335\2438\236\023\0279\273\207\344\271\252\247c:\321\354\307\272cT\211\272\022\005\"\272\310\337U:\001U\327\271\021\354\2455\362@&\272\345\300\2249;\245\251:>\321Y9\302Ne:\3554g\272q\266\2739\247>\2339an\306\272@\250,9\027X\007:V|\3349kt#\272\311\025\2038y\024%\272\272t\213\272\"\232F\271\324\3211\272\262\326\0039L\301\2328\243K>:\243r\255\271\n\204\0259\330\\\004:\341\272;\272O\262y8K\020\364:\244Y\3668\366\036\2049\271 59ib\205\272\354aK9b\nd9\351\344\004:\323\375z:o]\351\271\t#\027\271Y\005\2558\345\025\253:\351\203\354:\374\324\276:\325\262d\272I\243_\271)\013\370\270F\244\357\2712r\277\272\264\277\314\271\276-\260\2728\360\232:\204\233\025:\255\231\226\272\004\316\3219\370\357*:@\\W:\027\244G:\263\016\3377\215)\307\272\230\002/:\220\371\013:\330\221_\272]\220\301\271\323]\027:\321\342\200:\365\t\3077(\220\325\272h\212.\270\374\031\2429\004ja\272\316\353\3209}\327\0349v\350\307\271:A7\272\204tL\272\263&\023\272p\255&:\224\275\364\271,9\220\272\254\000(\271>\335j\270\304-\005\272&|1:9U\014\272\220\035\246\271\3523\217:\027`N8y\276x:>\215\250\272\367xM\272\343QN\271\264e_9J\262\3719\016\n#9\211\023\221\271(\352\023:\200>_:\n\334\0229\321\244c:[\010B\272\354\253\3049\300{\253\267l\321\363\271\262(\252\272\273\2400\272\014\364\243:\362\014\336\270\r\"\211:W3\331\272\n.\252:G\240+\272+g;:\000\321\2538V\2737:\267=\2269\277\2500:\364%\321\271AF\013\272\213\273\2629\210\302\3439^\330\3369\027\307\2719\241\273\263\2722\371\337\272\376\016W\271\031\2628\272\263\301\2509I6B92x\202\270*\370H\266\264\365\2119D\007\3558\317\355\177:a\256=:b\020\213:\344\342(\272\376?B:\250\241(:\361\240\345\271\376R\244:\231\216\2148-\241h\271\036\342\0309\253\307\3568c\002\222\271\311\343\2249\207p(:\273\030\237:\353\202\363\271\342\2305\272\020xD\272\236\213\001\273\001\311\346\270\326\312y:\031\252+:\224\312\016:u\337!:\370\352\336\272\263\207P9\024\010\224\270\340\240G\272\375@8:\3335c99\336g\27153\247\272kH\023:\267\025\345\271\'\301\2509p\251\346\271\"\216\026:\337\207\220:\2375\2619\215\224~\272\315\312|:\177\324\367\271n\023\263\272b\366\r\271\370\033\202\271\024\261\241\270!\342\016:\367J\212:\031\241\342:\331\217x:\341\235|:$n\232\267\233\3072\272\016i\202\272WM/\272\366\255\031\271k*\233\270\013\017\2038\036W\3319~\267\3239x\216\324\272\rD/\272`H\222:D\315\3058m\010=:\331\323B9\325G\2639\022%$\272\"\210P\272Q\037\3419\234\324[9\221F\022\2721\006\214:\274\344.9u\252\3139\271\3543\272\013\364V:\031\256\210\272\346$&\271~\035\220\271;\322*8\204\347\225\267ZP\262:\014\035/:v\317\234:1\244\264\270\307\302\276\270\276\330\010:6&\3159k\262\376\270\350\305\3558L\227\243\271+\344[:Q\326\314\271:\212\023:$+Z:e \t:x\3746:n\247\0168n\267\024:\371F\0169\266\021=9\"\276s9p\343,:\007\336\027\272\300\263\2339\323\221K\272~Yl\271w\024\2159\350T\223\2728\373\226\272\000\333\372\270\245g\2749m/\235:\250U^\272\206\363Q:u\355X9\304jb9\370=\264\272\026\366\250\271>\2719:\200O\037:\257p\"\2724\t\2449\345^\3629\367\263\000\272z\347\203\272U\332\2419\034^\276\271J:\232\272\362\271\3728\322\357\260\272\312_:\271\265b\227:\222\010\0179EP\3539{\\I9\271\343\206\272\000Ke9_C\222\272\230()\272\031x\014\273\244\376O\271\003\006\275\270i\201(:\021\235\020:\233\r`\271\221\255\2209j\234\353\270\204\245\250:\347\031\254:3\305\243\272<&4\271\322[n9>\223K\272\263,\354\271\307U\32388\3726:5\013\022\272\262\336F:\317\266N:ky\001\2722\000d9\0133\0259H4\r:\263\376\240\271\3423\2069\321\031\n\272\352(y\271*\373Y\271\323N\373\270p\016\330\270\225\343\2107\022h=:\006\223\2149=\317]:Y\271\0068\200\001h\271\325\342\3669\257\314\271\271\260\341\016\273I*\354\271\0379\2158\3423n9\221\232\025:*w\340\270>\000\027:-\241\277\271\337n\"\272\005\370F\272\n\022\224\271\3615\013\272\022\034!9UaF:k\031[8>p\2379\232i\3069\322\027\313\271\202\326\311\271Ts 9\033V\2269\254\325\206:\0352\007\272\020h\013:\320\211\237\271\264\270L\272\013\366w:\331;\236\272\237\37007\002\n\177\272\222L+\272d\021\224:\243R2\272:A\006\272\271\353\230:oS\337\2715\357\000\272\010Z\265\271u3p\272o\371\266:\362\323?:\245\202\260:\363,<\271\301$y:\307\202\033\272\034`\224:\312:\26495r,\271W\363\3649\177\016\324\272@\022\337\271)\367c\272\005\267\021\270\205\365\365\271:\000\032\271\266\000\227:\225\205Y\272\216\270I\267\223\321\246:\350o\006\272\273/\031\271>\177S\271\022\236J8\336eo\272\223\214K:T\366\220\271\301\220b:n\344\014:w\265\247\270\3345\274:\215\354t\272D\002{9\230gA9\331\326\245\267\325u\236:%\237D8;\032\274\272\245\220\024:\311\242?:\t\241+\272kr\007:\346\213h\266T&\211:\nR\027\272\023\275\275\271\3169-\271\203=\216:B-\267\272)\271N:X\206\0029\030[9\272\344\004/\272 \340z\272\274D\245\271\220\366\025:\275\240E::fn\264\220\237\027\272\360\003\210\2703<I\272\3373\3009QF\254\271N71:7\274\200\272\\h\326\271I\016\023:\354\2477:\262\027\2539\013\323#:\273]\276\271\236\336\245\272\344\204\2349/?\327\272\217\322\031\272\037\353J\271\031\333F\270T\350\342\271\213\270u9\225J\020\272\007r\373\271\010\205G9,6\205:k\230i9\276E\214\266\017\347\372\271\231\260+8\332\020\017\272wMA\272\346\2107\272\333\326\206:\2738L\272\360\347\022\271\312\355\240:\004\231 \270\033\334e:\277\235]:\201/T\2723\027|\271\277\201\240\272\372\364\372\271>\016\030\272\277\257`\272d\300\305:9\207\3539F\330\3109\340\023\242\272k9e\271W\010,:K\001\200:2\305\023:\226\236\3719C\310\227\271\222\030\n\271\t\221\010:\314n\203:\353Ee:\2535\353\267\360\342\256\271NO\3259f\023\026:{qI\272\257*\202\272\276m\317:\236\366[\272s\244\021\271L\31368\\t\2439\243\377\210:\375U\013\270\036\353\246\272Q\305\3158\276\3059\272\022\253\215\272\326s\264\272\251rY9!\316\002\272H,\243\272;\3372\272\266\230\2718\247\013\217\272?(V9s=\037:\375\326N9t\016\260\272\345\034V\271;\200&:\030\312\236:\362y\2059\312\247\254\271\247\323\2658\026C\2749\030\315\2509D\217\211\272\261\010\2328\177\331\214:\3714\222:u\2327\271l\0242:\224Y\222\272>\220\211\271\255\035+\271\3271\203\272x\2044:y\301\215\271\265\245t9D2\362\271\357\222\242\272\032uk9\227[\3268^\r\266\270\301\372\033\272\351f\2569$\273\\85;K\272\266\230\0319\023\361E\271mc\3127\226Q\271\271\327\353\004\272G\0327:\276}\r:-h\3219\341\357P9Y\374b:+\215\305\272}\360\022:S\371\0139\353;X9a\177\002:\252\026v\272T4\227\272%\207*:\025\236)9\311\226\275:#\365s9\361P4:\212\352\006\271g\327\361\270\002\227Y:L\257\323\272?Wd:\257\210\205\272\027\274k\270\027Y\017:^\302\034\272\200bF\267\310\2101\272\365\\9:\251\240\347\271\003\372\020:\353\243O\272\\\345\246\272\317u\264\271\002\035\023:\264fQ\272\2248p\272g\2550:\310^\250\271\303\330\036\272\354\265\237\271\366\354\3637\213\226\224:(j\2438_\365j:\306\203\3539kQ\30293\205\221\272\317T!\271\232\234.\271\261nK9\304M\2059A5$\272\306\346\221\272\t\325\255\271\357\021\306\271T\351n8x\372\302\272\270\310\024:j\252\341\267\032\222a62\222\2069\267\332\3639\266\214\276\271|\342\030\271\204\267\003:O\303}\271\323W\302\271\215\366\255\272\353\363\301\271\311\270\031:\356C\005\270Gk!:\267oa\272\236\315\2119\265\234\207\271\257a\372:u\200{\271\337a\357\271\206V\207\270\226\363\213:\201p\007\272J%\2405\316\033\216\272\213\337\3239A~m\272\364\311\005\271I^w:\303AG\272\337\224\016\271\205\025\2739\277?Z:\330\n\013\271\302J59\2478\2569[BL:\207\323\254:O\210=7\247\n\3769b\201\0329z\357\206\272\326p\0338\236j\246\271\374\300^\270\0302\203:I\224\301\271h]x\270\300\322\0148of\23695\235\2059\237d\270\271*q\031:\314\242n:\333\262d:xa3:\034\262\232:C\262\2609\020\206.:\340\025\002\273\230\016[\2721\021\331\267\341]\262\272[|\033: \275\244\2728\312\":\307~^:\275\201\376\271\252\333o\272\t\253\356\270\233C\2249\264s\254\272A\313\275\267\266g%\272\204\245\272\272\377?:\272\242~i9V\241\222:^\333z\272OK\254\271\\\243\300\271\3150\021\271\033\203X\272\204\240&:\274o\r:\261\230\335:\326,d9j:\3239m\r\2266\234\215i\272*\345\251:\2658\267\270b]R:\313k\2319\032\017\326:\"&t\271\241=\202\272\233i\216\270 \301\027\271\341j\3029\314\t\313\271\202u\2239\360No:C\365\2709)\354\006\272\243\247C\272\317oR:\323U\262:\255\362\304:\357\213\250\272\'\327\3156\272\021-9\346i,:\233DG\272O\356\3668\037\216\216\271\311K\3759\3371\237:)h\025:+D\3778F\221F:OjJ:^Z\3149Y\366\2269\337\200!:\006z4\272\322\2471\272\213\243<\271b\305<\2724v\034:\225#\027\273N\251[\272j@\227\272\244\307\305\271\245=\002\272\364e\014:a\027i\272Z\327\206\272\254\270\3167R\302\2059\264\243\n:\035\266r\272\002e4:C\313-\272|8\306\271\305\240S\272 \270P\272\023A\244:8H\2319e\222\346\271&^\3637\305\260\003:\321V\333\270U=\177\272\376\373\323\271\0248\2119\014br\272fc\177:\245\204\201\272\300\3403\272\031\215\031:\027\337Z\272\321F\2658\030G\327:\252b\214\271\346:\3179H\336\004:ie\220\272\002\013\2469\253\271=\272\\}\2659\344\246\220\272\270Qo\272} :\270\211\372e:\321Xb\272?.B\272~^\304:\211\311\3319d:\2518\311 \3049A5\030\272}\226\3346\025o\204\271b\'\036:\005\235p\271y\237\2358Kj\257\267+\305\226\272:+\006;+,\232\270\020\305\3359\200\276_\270\255\244\2119\325\345\3329\217\327w9\027M2\272\327H\335\271\270,\3518DL%:3r\0147\3715\253\272+\240\3639\027\251\016\272\253~\r9c\2212\2727[\364\270I\210\016\273\245U\2379\303\022R:\2770~7\001xP:\371\221\036:\030\306\2129\350\001\215\270\233\303\236:k\211\214\272j\242X:\240\004\323\271U\204@\271\350\021\330\270\216Q\220:\030Wi\270\357\236\004:\307\214]\272#Yn:\022\260\254\272\t2\005\272\363\3669\272\257\225l6)\207\036\272J\025\3229\271\361\332\271?[\240\272Q\257\370\270\005Z\340\270\360+*:\376\356\017:{\237\2179\002PN\272[\226\365\271\250\311\2628?\242\3019\345&\010\272\201\2031:\374\376\2719Xe\2516\212\244\3249XU\\\271\240B\243:Z\332[:\303\233%\272\217\217\000:\265lZ\2720U\355\270\227\203\214\272\333\014\220:\272\212M:_\3602:\225\306\315\272e\375g:l\265\272\272p\246\211\2715\010\016:<\333\010\272\006\224\024:\2749\263:\316{\330\271!\"x:~\242%\270\304\240\32587\007\003:1\345\\\271\022wO:\376\340^\272\006\033\r7\260\014E\271-\222\206\272\034?\037:Nf 81\271\2579Ls\3619\235&\340:\014\302\\:\370\310C\272\023I\032\271U\374\210\271\212\347\205\272hs\311:\225\277\335\271\300L\'\272\260\276w\271\320!\033\272\322\203\037\271\317\212\2479oR\2059\264\020\003:A\002P\267\313&\232\272x\203k:\027\326\317\271yF\0028\227\311\251:\333\254\22694\230I9\217\316^:\026\036t\267l\260\003;\220Y\3749\325\277o\272\215\331w\271\016\377?\272\217\361\360:\246T\320\2724m\3566p\371\271\271\260Y\243\272\277I\331\271\225\241}\2723Q\'9\361\345F:{\202\247\271z\274\022\272\252+f:vK%\272x\\\3419J.\0367\250\322Z\272\370\302\316:\377\312C8w\341\0319\303@_:hO\3009\213\342S\272\272\001@:\366f\276\271\266!G\271u\363\017:n\367!9\307\235\"9t\246\014:\314(<:\350v\r:\017}\371\270\005Gu\272\"iJ\272q\001\020\272\360\204\325:\242\303\2228\353\2448:\346\017>\272\310\234\2379p\332\3759\303%\253:\357R\3539\316\251\3359\363l\0029\010\213\241\271@\010A:\r$\231\272\303+\0238\377(K\271\370\'\335\267V^v9U\314C9\"\27016\255\240\023\272\202\000*\272%F\321:\3011\3539r\032\341\271IKN92\242\2209\240\374\242\272\225\255\325\272\220\260h:0p\324\2712\037\275\2702\357\2178a \256:\231\215s9N\344@\272\362CS:\263\2656:\255\006.:Oq\007\272A/\2369\216,\2159T\376+\272/\2717:\352+\007\272\301||\271\201\305\247\271\364\r\222\271\205)\2178\274n@:eN\276\272\362\014C\272\374\3106:$.\023\272\006\370J:\362\240;:\322\335\200:!z\2709\302\252J:\376>\3629\324\331\335\267\300\246\260\270\227Pp\272m\222\237\270\213\260\3119T7\2069B?\223\271\276\200\350\271\341*\23359?(:\375l$\272|\034\t\273\255\261\261\271)K5\272[>\037:\260\223Q:\\K{\272.\235\266\267\350\334\022\273\301g\2619\252\267\3649\3444A:\267\024O9\270pu7 b\206\271\242\22679\203\302\210\272\n\247\306\271\233w\0019\020A\021\267:\031\3349\202t\007\272\263\rL\271P}\024:\343*\":\267[\201:v\212\2129b\2352\272\017|\302:\321\366\361\271K\363\223\271&\022\2429\366-.:\202\311\272\272l<%:H\333\2539\270n\031: \237\36597L\001\271[C\016\272\227Q<:\226\201\010:\355\273\0229y\037\237:\213\271O:\037*\'\272\013\240\355\271\372iL:\265\373\301:\020\n%9Uj\277\266-\252\257:\314A\244:\030\"\026\270#&\350\271\231\240\2745H@\375\267\225\303\272\272\264wA:1\357v\272\232x\301\271\265\363A\272^\021\366\266\307\275\241\2724\313z9v\204|\272\200\273A:\226\367y\271\320Z\216:\343\207\250:\205\031c9hN#9\237\315\3378\201\242\020\272\006\272\211:\343\002\247:p\351\202\271\342m\016\272V\357\3769\264\373\220\271\374%\3109AO\3539\024\245!\272\343\320\236\271G\332p\271V\203\3429\334|=\272\0315\2418\035{s\271\335$R\271\214\037\321\267K\364\2429\'\223!\272N\265\0309X\236T:{>Y7\003\313*\2712\300\2537a\034\353\265\366/\2719%\327\3669!u\2428C\3636\2724D\212\272\345\214\375\271\301&\2749\247\306\354\267\266\263\363\271\247\277x:\254W\3749\256\036!\272\326\267\036:\227\202\2559\202-#\270\001\2414\272-v\026:J\021\210:\353?\216:}\311\3749\265v\032\272\205t9\271\357\326f\270\353\206\n:{6\225\272\377\316D:\354\201P:\017\254\336\267\033\312Q\272\032\305\260:\3618\007:\267\275\026\272\226\2220:\013w\355\271\233Bh\271\376fh\270\252Y2:4\002\2519\235\304\3569B\003\371\270K7l9\266|\2229!i\373\271\316\347\211\271\222f\307\271cIe:\330\314\3209c\213\005:\325\354\200\272\366\025\027:\006\273\026:C\004F\271\310\365?8\323\025\305:\316\255C\272\005\370\346\271@\343\250\2717)\272\272\264\317e:\306}\212\272V\\6:\272\274\2529+!\230\272CvE7\014q3\272{c\013\272\327\352/:p\232\225:i\003;\272\346\254i\272\r\016c\272\253\017\3529T\035w\271\201\336\030\273\3205\343\271\333\326\230:\243-\2479\316\243]\271\341A\345\272I^\034\272\362\272\'9\\\355\027\272Mf.\272\304s\': 3H:\270\303{\272\227.\033\273R\351\0309s\336\252\271\335\326\262\272`Y\215:\355,\250\271\213\351M\272\344>\001:\247u\003:\265\201{\270f&\363\271\032\2405:\245\312\320\271\3611-:\310Q~\272\315]\t:\213\253\2379\230\351\254\272\267o\020\272v\310=:\313\375\303:\306\311A\272\224=\320:#.\235:4\214]\271\376\326\2049\224\270\217\272F\273\222\271\330#\340\272\317\272\217\272\034\010\34290\227C\270i\227D:\234\254\205:\207*\217\272\333\000*9\363\202]:>\2377\272@w\'9\010\247>:Y\n\366\271\337|\265\272\250\346\205:*b|\272\0038\0368~\263\205:q\357\035\271\312=\262\272\235\336y9\024\177\266\272\237W\030:\300\226\2659j\000\233\272V\202Q8h\215\034\272l\270\207:<r\224\272\017?x:z5X\271\312\277R9Mx\032\270R\313m:\216CR:L}\273\272.\232\0259\014\377\2169\034H\017\272\3166i9\214\261\020:\252L\206:6\004\334:M\320<\2716\217\317\271\242\273\353\271\000\017:\272}\333\375\271\315\026\202\272\370\302\357\271b\3220:\353\017\2158\325\37449\r\371\010:\035\314\205:\204\200\222\271\320WC\270\335\376\22391\266\3678\0359O8\332b\224\271_\212\3319\227\333\235\272\216l\2229\026\002\2559\270\025\220\271\314\251\'\272r\006b:B\265X:\207yi\272c\2668\271\343\220m\272\271%\237:\207\261\247\272\030\027\021\270\n\026\027:\367\300a\271\005\253\303\2719\177\341\272\335O\373\271\034\256\235\272\r.\2359\374\314:9\214\346\234\271Fn/\272A\253\024\272)\032\2149\356o\221\2726\251!:\242\321\311:\347\316G\271j\351\034:\267\203\276\270S\250\200:\t\275\270\272\3438\3648\323\216+\272\212\227\003:\347PZ8\312\211[\272\3455\0329\324L(9\024rP\270\224\222\235:/\nA\272\307\200\230:\3123\215945B\272\020\302m\270&\316N:M\006\247\272\221\333\246\270\231:\3067]\322\2418/\323\201:\331\277.\272:\361\3149F\235\203\271.kI\2724\326\204\272\242\377K9a\237\0219\2746l:p\352f\272\001\003\3579K)\3109\\o\2179\313\023[:M\335\333\2721x6:\273\255u8\276K\024:Q\273\344\272\031\307a9(\213\252\271\332\263\211\272\205t\210\270(\345\r9\224h\220\270\370\265f\271\371\252\021\272\034o#:\326\226\2527=\233\357\271\271\365\265\271K\217+:\'\250\2639\372\250\003:\302\307\2447\237)u:M0\260:\013\016\347:\016Xp:z\032+\272!o!\271\227\242\213\272\256\321\214\271\255\366[\272\264\240\2239\306k\230\271\340\220\264\272\331q\201\272\330\360r\272\360\364\371\271\357\216\3439\326\261\0059,|\035:J\323\2548\317\356\235:\373\261\327\271\235#\2149!\334B\272\354\257\201\2721\"\026\271\257\365\237\270\271\207\3069\3455#:q\221\3778\251}\304\2714]\301\271\252\203\2569\003r\2748\347\375\203\271\270\262\204:\351\"\n:i\034\3768\"\t`\271\022p\235\272R\224\334\271\362\340\3719\025\025p7\201\357\307\271\304i\324\271N\243\344\272,\033\0269\203\302k\271\246\260t\271&\371\247:\200%\000\272\246\004\276\271\306\215Z:\233\303\2139\303\354\3328w\210\336\271R\024\224:%\211\3219F\374G:\233Ns9D\360\277\271c\312&:\323<\306\271y\303\221\272)~\022\272>\213 :\355\363\0149\203\260\035\271\350~\3328\225\332\210\272\364#b8\207\nW:-\222\237\267.\344!9\240\310\2269hkC\271ca\3779\351I\375\272\031\261\2177\213\321\316\272\306B\025\272\037\313\001\272\323!\023\271v\243\365\270W\225_\272i^\231:\305T\225\271h\023\217:+Z\241\272\350\200%:}\036Z\272\204\357\240:1f#\271\363\216\2149\377\343)\271\\\030I\2717E\210\272\263\020\007:\1779\004\272\351w\257\271\013\201X\271!u\23095\345\2139\270\353=99\272*9\252\275\2009\260s\306:\"&\214\272!\246U\271\245\313P:``\2139\340\231\006:\305\001\2719\222\334\202\270Ca\016\271\344\345\215:\252\346\n\267\017\225\340\271T\270\022:\324\214S\272`Z\3449\244\004\327\271\356\253\2048v\335\201\271\254\236\026:\334kf:\261\205):\270\270l\271\226C\202:\206L\025:7\333\014\272\370\037\312\272\266\325\203:\367o\300\270\232\345z\271\351H\271\271\016\335-:}\335\2679Ti\241:\022\223\3548\300\004\244\270)\332\2359\037\007g\271u\225j\272\037\t::J\3156\271\344^q\271\213\303\213\270\3429\227\272Y\362\205\2726?V:\2241<\271\325}\2579\302\344\2139\375\202&\270\307*m:\262\321\3628\262\235T:n\311\233:\344\277\261:t\241p\272\317\271j\271\2525\212\272\305b\317\272\253q\3669\"\000\2617\366_ :\321\223\3109\034\2457\270\363\tH:\005\323h\272J\316@\272Vq\03098\275\211:\021\201\030\2723/\357\271btN\271\005-\266:\236tE9\026\362x9\242A\246\271{>\226\271\353\365^\272\373\237\0139JJ\001:v\177\3058a7&:\336\367$:S\n\230\272\n\225E\272\307\242\322\2712\256\2669\200G\220\272t\343a9\\\013\0279\306\261\226:r\343O\272\021B\2179C\352\317\271\244z\3519\013X\2449\021\355\224:\213\250\370\272\276\261\222:\2707X\272C\275(\271Y\251\217:\225\225\2679M\010\375\271\242\227`:\227f\032\272\365=\227:\025N \272F\n\3418(\264\"\271\276\251\335\270EB\014:N\205c:\212\232a\272T\014\035\272\035[s\272\326i\010\270,(\006:\336\246\004:\363X_:\220\317\247\271\273\321e9\206\014\010\272\025\342+8\205\210G\272A\364\222\271\353\245O\272\021f\204\272z8\327\271I-0:\273\023\302:\206J\325\271\222\033\276\271qNC9\202oq\272O\351\310\271.\357\2658\204\264\030\270h\316\243\272\341\237t:;\353\321\271(\344U\272\341\365\211:V9\006\272\'\373\001:m \030\272k\261\003:M\273\2779<\371G\271=\211\0039\\_\2669%\342\2459\023\224\274\271\022{)\272\344r\3279\326~\255:[4\270\270m\210\t\273.Vc\272\267\365z\272\304P]\270G\315}9<\355F\270y\342\2079\200%\010\270\032$k\271U\240\3128\215\254\233:\004\315R:\026=b\271=\361Z8|_d:+\230\260\271W\033\344\271c\215t:\276l\2139:\233\"9[\311*\271\\\366\376\2714\263\177\272\230\331\003\272\2423\2209\216\371G:<\311\254\272s]\3429\2208\2549\334\017\2009\246\250\020:m\245a80\342z:G\026`\272\350\357E:\322\375b\271\206\360\020:\314{\260\271)\2047\272\353\240\014\272\207\255\035\272\225\310\352\270(\033Y\272\277\373\2229\035Z\265\272\020\305\201:-\220\3469\270B\276\270\231\216\2449q<\2758\274\277.:\212\226\305\272\310\354):\033\252\240\272#w\200\272\203\010\265\272\245~\":=\350\222\272\250\003\036\272e&\3239\241~\3629\3727\213\272(,\267\267\355\346\301\270v=#:t=\002:\264<+:R\3157:S`\222\270\336\275\3579jY\2658\315\265\033:5\213\320\271~\370\025:\260\255\010\271\213\375\343\271\013\311f:k\003|\272\3733\3019\032\023o: l\246\271=({\272\376\233\031\271\210.5:|\316s\271?q\2069\266\330[9_\035{8c\371\0239\357\3441\272\375&\033:\364\217\204\272\316\031\006\272\342<_9\366\034\333\271,\r\3569\350\0312\272\316\202\030:\345\"\024\272 \327=\272\031\311\2009\265z\200\2722\220+\272KR\2219\325\003\225\271\317{W\272\206\n\262:\032\206\2449\307\360{\27283h:\022e\313\271\376\037;:Nk\2759B\351\303\270#S\202:\037\271\2449\332.\322\271A\025]9\255\277\230\267,\236#\272\274!?9e\337\3546Ow\001:\3738\226\272\2666\0179W\237\3349;\312\341:]\024\211\272\005[v9T8\346\271\326\013b:\3354T\272Dk\214:)\340I\272o^{:\024vx:T#%:\337%\371\267t\255@:\356)\357\271\225r\340\272\210T\0357\261V\030\267S\222\006\271\341A\241\272\t\275\014\272\346{\2229n/\024\272\\\265\177\272\223\344Q\271\257\024\010\272\025\212\346\267\350@\0139\252\345Q:\\\234\204\272\027\263\026\270\034\260\316\271CX\211\272\325\030\326\272\231\331B:a\347\025\271l\346\216\272\266\340/:\252\330\\\272\231\212\32294\005X9\021\351\221:\213g\005\2720\247\2169\177Eq:\345\316\240\272\036\375\246\271\262\262\323\271Q8\006:Wb1\272\270f\005\272\217\321\342\271Y-\24592\321?:7x\025\272\353d\254:O\206\3119\267\305x\271\245\023\237\272\036\2723:AS\036:\321@y\272\301S\200\272\231z\240\271\31503\272jG\036\272\034\330\3559\035\273\313\270\206\207\271\271O-\3008\241\034\007: ha\271\242T.:a\204Z:H\003\036\272#t\227\270;&\031\272,b\3157\247\272j9\331\255!;\307Q5:m\267\246:E\310\0209W=\020\272l!\215\272\035\005\023:]\320\2337\203\217\033:\027\376\364\271@\254\221\271\212;\204:\277H\361\272\336%\0179\273T\201\271\353\315\247\272Y\213\303\2711#<:Pu\202\2678\321\250\272\233\336\3159\027\225\227\2729@\034\271SK\264:\310\3202\271\007\036.\272\226\010\206\271\323w\0269Jks:\003\307H\2728+|9\352\255\34599\262\347\271\022\366{\272\025\275\2329E9\0339\223\260\334:\224\271\r\272g\265\231:$3\372\272\223O\025\271\020\303\3509$\314\3758^\307\202:\216\006l\2710\322\341\271<\033\n\272\340]\345\2725\346E:\000\371\261:\253\203\3039\350\002\3049\202\265\313\272}\276X\271/\277\005:\365\306%:\302\032\240\271\254(\257\272\264\334\215:\312\324\2629\224\206\227:G\352\220\270\010&\3349\247\034\2169\376\201\220\272\014%;\2729\263\371\271!\023\226\271\001\276\r9?\375\2279\027rB:6^\315:3\345\004\272\3340\205\271\335{\237:\272\177\314\2718\215:\272\265\200p\270\316\202\3759v\256-:\210 \207\272\360K\0219\2732\2378\244KZ\272\265\342\232:\361]?:<\213\3019\350f\207\271\223\212>\272\023\373\2117T\355\206:Z9\232:^\324 :\221\017\2429g\266\243\271\034\344\0007\023K\366\272X\026l\272y\215\276\270!\352_\271\003\371t9\037\\\221\272S?N\272\360\231\006\272\362\250\271\272D\264\2669lk\344\271D\335\324:\3503%9s\0007\272\265\372\023\272*\357\251\267r\345\363\270\276\\$:\032\307\266\271\345}N\272A\202\3368\030n&\272g\362\270\271P\365\336\272\215\226H:OK\031:\377r\3229J|\255\271\3578@:\355]4\272!\267w7\324\302\3278\224K\3129\376\rQ\272\361\006W\272\257g\332:\r\326\223:\035V\310:\036\352\306\272\\\002-\272\212\014\2438\227i\320\271\344W\317:j\371@\271\350\322\'9a^\324\271u,\223\272\370\240\265\271\353\010S:I\263\3358\300\232$:\300IB:\316\033\354\271\334\004\3679\225r\264\271\321\310\226\271\353\033\0068a\201\2219,\253\2049\353\033\207\272`\245\373\271\306\243Z6\207\334\3677)\371[:]\200\233\2726\316\'9t\332\227\271EMS9\252(\025:\257_\260:\265\033m\270\330\240\3219w\265\221:b\027=:\320*\3209F\226\264:\323\335\320\271\001\224\3048K\014\211:2\374=8\025G\215\272\007\2239:zc\024\272\336\256l7\360K\212:\005y\366\271\t\257\310:\365\311\351:S\333\270:}\345\002\272\022\'4\272Y@J\271B\216\005\272\363\371\347\271k2\2729A\274A:uA\2379\374/r\271P\276\211\272{\256_\272!\254\242:\373\323\022:\302\263\364\270\t\271~:\035B\r:\"_\1779\023\216\307\272\0222\3638\3347\252\272\303JW\271ox\277\271\031kt\272\274\305<\272#wf9`\314.\272\330\274\227\271\306\270\3628f\0311;\206+H9?\3402::-\364\271\217p\355\271h\351\00186,\3379\372\3070\272g\270\334\267\017A\3309\013\215\2638\\\000\013:3\277J\270\241B?:\303\227\324\2716\272!8\224*\317\272\010u?\272I\305\177:\002#Y:\004\274\0179\210q\300\271uX\3109\246\231\337\271\001\212\212\272\327\332\006\271\334\354\321\272\032\352=;\371\272\177:7\251\261:,\367\t9\213\206\204\272\266^t\271\322\200\241\272\3026w\272\375s\226:\257\2720:\326\340E\270\304\300\0318\376\007\207:\333\303\\\271r?#:Z\211\3179\002n\025\272s\305\251:\327\023\226:\241\272\234\271\350\336\214\271Y\331\0149e\205^\271\365FK:\213/\205\272\014\203{\272\212\312\371\270\302\\U\272sh\247:AI\223:\327^z9\220\345V\271\212\013\":\035\345\227\271\362\314\300\272\234\266/\272~uI\2729z\2619\2103\206\272\334m\34295\223m9}\00679\032-l\270\227h\021\270.v\314\271i+\037:#\253a\272\004\352\247\271b\325#\271\207\316\2679\311F2\271R\332\236:[ZZ\272>\270\265:2.=\271[A\205\272\307\252\251\270\361\345\217\271Ho\252:\020\232(\272\236x\3029,5\334\267\333\354$\272bW7\272,7J\271\212\266\252\272K\304G\2727V\2617\022\314\246\272w9\2368\261K\022:\211cD:U\0352\272W\003\242\272\303Gk:\212\221\3448x\335\223\271\343n\267\271\030\371\201\271:\277B\272\nu\006\271f\211\216\271\257r\0279\'\024\216\271\335o\254:\024\222\2549t\304\254\271\235\343\3507\320\027m\272\322\316\306\267\320\253\204\270*\343\002\271\345\200\207:\202,\026\272\211\330\3779\251\023]\272\213&i\272l\226\004;\027\005\0078 L\025\271\343\230\243\27231\016\272\270\355\325:\342\243\025:\307\304-:\271\360Q\272bI\020:\321\312\035\271\234Kq9\236\327~\270\350\226m:0[&\272\263\245\3518\326\177X\270R\371n8F$\017\272\232-m\272&\350S\271\244~\204\271\351\222\3179\312\317H\270\024\264[\272\262\"M:\3762\032\272\252\235\2619\315\343\307\270\010Y89\255\332\t:\035m\266:\254\325F\272o\317\026:\364\257\026\272\341\023v9\022Up\272\357\230\3018G\336\206\272\363\222\242\272\373\013\3619\027\330\351\271\221nh\271\373s\3109n\226\250:h[\2328\336\r*\272.\177\276\270\3339\2609t25\272\274\024\212\272\010\245\005\272\316v:\272\212|@:\000qj\2726$59\275|\002;\"\215S\270\251B\327\2672\331\3079vG\3028\201\211\2348\352\2303:\247\233\020:\320\244V\270\272(\3147\0354f9\320\352w:\223\"\3028\300\021M9x\226\3728\265\332\227::j\361\271\361\377\271\271e\262\0069\205\014\177\271\032?\2378\214\367\3415jd&:.\3718\270Ljg\271\353\362\247:\317\032o\270\346\375&\272\227\2031:B\300\204:6u\026\272\353\t#:v,\":\375.\225\271\3427X\272\003\262\236\272\261Q\315\2708WM:\010\204W\271s\304\3779=Y\3308\242 \205\272\206\320\234:\0044N\267\271\335r\272`\376\223\2724\010A\272d\214Y\271\213\027\\\272N\242\020:\000\270g\270\010\245\'9\217\374l:\037N8:\322A9\272\374\236\037\272+\253\004\272S\240\206\270\256\235\213:\3654\030\272a\351\3309\324\376\276\271\023s\2159<U\007\271\322\202D:A$`:\263@\226\272\206\360w\271\320\014\3679\232p\352\271\210\032\r:\215d4:\306\343\237:\000\260%\272\326\256\220:\242\261\r:\030yj:\251[j\271\331\321\317\270\336\210.8]\353\264:\244\006b:\345\307*9\365\000t\272\313\004\325\271g\332+\272\324\027\2428x\026(:\327\215M\272\2145l\271f\304\0217>\016\371:\357I\013\272\352\016T\271\376\346\036\271PQ\3569\010\364a\272\357\306\2039>\322\275\272b\244\030:SY\306\272\367\326x\271\276\236m\271\201m\2109\374E\225\271\217y\325\272\315\013\37294\202\3228\t/\2108\\\003\2029\004n\272\271\356\317\2357\252L\002\272\225NB:y\342\3319g+.;4\031\203\270~\233w\272\361\365\335\271\253u$\272\250\233\221\272\377XY:\321\320(\271\010\203\3019\354\304\3378)\233G9\256\211\03781\323\3378(\240\2159m\241\215\272~i\232\271d\317_\271\217th\270\266\026\260\271\326\031u:!(\2169+\321\036:\357\333)\272**\2728\212\373\237\272w6\024\272\273v\207\2726\333\252\271a\363\250\272\033\274\204\272\256\366\200: j\2258j\212\3619mC\221:\312\350\213\272n\377\3319\230\206\021\272\366\212\023:\254A\3578]\231\326\272G\017\0219Y\360<9\304O\027:a\327\246\271Lx\224\270^\264_\272\3151d:?4/:\266(\016:\246TZ\272\3148v:\275\021p\271`\205O\272\007\324\300\271\251Q\221\272\240\257\3079\220\357U:\211}\2779n$\272:C\010\261\271\214\013\220:\205a\202\272\2346\205\271v\236\025:\2215\202\272\330\'\276\272\217\364\177\272\316\217\262\272\225\207a\272n\315::\277\222\3309\236Q\251\271\024\001\220\272\205bF:h\331\2279\230:\246\271r\261-\272\213\244b\272h\371\3209\202\213\341:\353\026#\272\351G\010\272\247\027\217:\257a\2608\344\340x\267\343_\255\272\201\342\271:6\036\2017\r\316\317\270\265\272\3609XY{:\277\'\007\270\035k\0329\363\343\206\2727Zg\271\241ub:1\374\2648\322\021\214\272vOc9\341\356\3239\271y\3579\327\330\026\272\246\235\372\271\204\350\3239\307g\2079D\t\013\272\223\253\337\271\0177\245\271\314Q\002\272n\214I9\361-\366\271\350\002\3369\200\266\3449z\001\214\271Z\212\254\270\201\224\211\272gX}\272\320\272\3029c\022K98\304\035:/H\211\271\305\245=\2726\361\303:\372\336\356\272\366\304w\2718\322\022:q\275\034:\320\266\275:3\276\221:\002\3201\272\373\035\277\271\313]\321\271\']\027\2714\354f8O\356\026:\373S\016:\255\001\0249\363\263\303\271\261\204R:4Q\005:\264\203\312\271\227\362\2579\220\335\3579\215\264\200:7^9\2729<R\272j\255+\271\237\333\023:\246\240\006\272$\035\250\272k)\2068\350j\032\271\235\320k\272OC\2749[\372p\272-\357\005:\'\016+\271\231\301g\272S\357@\271/\261\346\271)\313\234\270s\314t:g\264\\:\216\326\007:~#k9Z\270\r:\036\322\r\272\301Cq\267\212N\242\272Z\254\230:\020\254\2479di\"\272M2W\272\311\207\3478o\003=\272\3328\2329w[E:\031-\243:\373#\2408\307L(\272\025\354\306\271&\317\206:/(\246:\217\027n\271\336\250\324\270[\360\n9\271\277\2469\342\177\2138\314jI9F\305\230\272\312\006\003\272\354\017p:\270\374\003\271Cx\240:\007\'D:\363\256\232\271\003M\2269\364\257\2559\242\026\025:\020$d\2715\2637\271\241\322\336\2718!\227\272H\255\0248[\267\2769\330\225\3159\337\342\2049`\272c9V\244\222\271\277\336?\272\210\n\202\271XU\2349\212\374\2058X\304\233:Hs\2529L\317\367\2716\221\2508\360\201\006\272+\330\\\271\360\346,:\375A\215\267\013>\3059\266et\272\305\351\304\271\310e\326\271\024B\271:n\214}\2716)\370\2713\037\234\272\236\001\300:\222\000\216\272\211\004n:\267x]\272\326`\225:\013F\232\272\200\021\325\271\021\244\000:\221\020\262:\345\255\224:\315t\n\272\260\370\334\271\017\257\2059\236\314\225\267\246\'V:\000\203\2079\225\006\t:\247\305\300\270&j\001:Q!\327\271\314\315\212\271\200\214q8\223G^\272\206\310t:i\345\252:|\337\315\272\306\362\3167\t\224b\272\313\304\256:k\356p\271n\330%:a\233L:\370\006\3539\377\255B:t1\210\271\212 N9\267s\214:S\200\257\272`\231\367:E1\023:\222D\211\272##R8\264\300J\2722+\2629\273B\214\271\205\300~9\215Xj:\323\211G6\207\364y\272\235\227.\270h\014\2379\270\013\003:\336c\222\271\262\314\264:\265\']:\021\0345\272h\346t\272\357x\236\272\223\246\2279LA>\272\315=\2029\355r\2279[\003:9\302\000a\272|5\036\270\207\214\013\272\355\002\032\271\220\353\207\272]\002\2769h\362\217\272V\354#:\221u\215\271\033y\274:\024@K9\253R\221\272\035\030f6\370\364\235\272\022\tM:a\001\0379\211 \022\270\026\260\205\271\272\310\002\271R\0024\271\257\211\350\271\r&_:\374\247d:\373&\232\272\364l\235\271\273V\301:\221\321E:\255&\2409\266\343\3369\235\300\0229\2255\334\271\2724\2559\310\220/:X\007\263\271\241\237\2009\216\276\3149\336e\t9\253]Q:(>\2559\217|3:\216\370\026\272\360s\217:yl \271e\203\330\2702e+\272\204*\276:\274\220-\272T\233\211\271\220\305\\8\031,\005\2728?\3268\3058\266:\371\036{:\243\221\3749\2031\212\267\2248l6\364\323\230\270\204\345\202\272\037H\235\272\025\263\344\271\324R\223:\273\024\2178\204\224\2359\327\203\2129\203\014\3329\367\305[:\225\027\'\271\313\267W:\243\227\004\272\371\036\0139#\355\350\272\2341\0038{\275\321\271\030)\224\270\352q\020\272\233F[\272\345M2\272\264\254\244\272\243\224\031:=n\236\271\352\265\2269\007\225\2179\026\263\030\272\330\243\206\271\276\177\3648WZ8:\031\204\3179Z\342\001\272\024\222]\272#\226\002\272\n\316\005\272\025X\n8\334\257w9\371\237\2739\032\\\233\272j\325(:\257\216\372\2713\020\304\270&\315\2359\213\206\333\271l\321\217\272P\001?\271\010\024[\272\320rw92~%\272\344\230\320926\3568%\251\0069m\243\002\272+\321\3308\r\223\3768RQG9\211V\3609:\027\212:\3345\326\271j\033\016\272\0168\204\27190-:\321\330-\272_\374\3638\224h\200\271%\013\010:f\344\2379\305\300\2216\036@\327:\277\335p\272<\212,93\204\221:pH\2149\002\207\326\271,Us\272f\215\345\271&\361\203:\025.\247\271\304u\010:\001H\0338>\024a\270\200\271\324\271U\210#:V\375\000\272\313\221\007\27382v\270\020\351\366\271A_O:+N\016\272z,\201:\366\010):X5\320:\360\317O:\226\235\002:_9i:\300\341k\272e>s:\354\302#:/\254\035\271\227\362\353\271\323\276C: \3227\271\304\2236\272\262\361\024:\200\2219\271\246\276\t9\373N\270:s@\2279\3630x\272?\245\246\272P\234\002:i\345\0369\223\005\260:\307\375\2079\355@\340\270\220\230-:0`)\272i\372\207\272Z3\023\272Q\234)\271\004=\325\271\254\323\305\270k\207\261\272\260\030\001\272f\202\216:k\334\206\272=in\271\214\304G:\264\352\255\271\327\240\325\271`)E\272eH\240\271+\"\205:p@\275:I\365-:\000\001\207:\334b\324\271\207z\3528<bT\272\337\306;\271\276\177\3058\206\223\032\271\272#\3539\360\315]\272\374!s9zy\203:\361\353\035\271\030m\2659\005\304I:\242\376\3149\014\363U:J\215\2508\007\0337\272\372\257\227\271\302\335O9i\321\222:\335\376/\272\245O(\272\207\0021\270\206\361\3709OQ\216:\306\363r:\345\030\0238si\312\270\341\204\361\2714\257\2549\264\233<\272\326F\026\271\035y*:\340\236\3549\332\023D:\370\372\306\272\273\376\265\272\030\277\3749\'\033\027\272\007P\3009m\331\2008i\006d\271\310\322\323\272\303/B9@j\274\267\275\276T\271\3451\212\270*\001\3579\353\002;\270\031\247Y7\231\216R:\327\333-:\312\022\3069V=\320\266\324p\221\271\335\321\035\271\252N\262\272\210)\360\270\256\0103:z2=:\016\333\212\272\257l\3359Y\340V9%U\266\272\227C\036\271\200\354\325\271\353:\2019\256\364\302:\233\014\013:6\203*9\341D\266\272\020d 9\000\315\3159\023:$:\025\003\261:MD}\272\213?l:\235\002]:\253\272%9\335\224H:\\\r\253\2709\217\304\272g\255o\271\321\321@:)=\200:<\311\321\271\006\346\204:\376\340\3618O\032\2679%d\233\272\304\226\272\271M\tR9\037@\254\272z\024N\267\016\177\250\271%\331\322\272\355\0019\272\263\361k\272<==:\226\333\0319\363\366\272:,\356\017:\305\313\030:c\313 \272b\335\036:HL\3279\365\226\003\272\036I\025\272\326PY:\037\007\3419\201g\002;\014\313\025\272\005\'C9fQ\311\270\263U :\340)\247\271\371N\305\272\356w0:v\307\030\271\346\377J\272$!\3049\006\024W\272\274\317\330\271\336D\202\272]K\211\2715\027\016\272\026\345I:\302\230\250\271?\2105:\005Q\326:\3416i\271\245-z\267\275\223\377\265\337\272\3279R\322\20194\241\214:\0177\177:\376\232\253\271\363\202B\271w\240\r7\323\361\001\272\024q\0239\036*\r:\371\305i9F\207\277:\020\0246\272\366Z\353\271\313\353\206\272\264\216\202\271\367d.\270\360\024\2019|\334\316\271`\\\300\271\2659\374\271t\276-\272a\335\340\271\276\357>\271)H\3517\311X>\272\3020\217\266o\260l\271\037\251V9\207\2328\271B2#:\364\350A:\022\303\2719\243F\2377\363\372\331:E\267\314\272\352>G:\326\310\214\271|\305B9\025\222\245:3,s\272\002r\3578\263\267\221\271V\321\212\272~<7\270\327~\010\273\252\020\322:k\303\177:B\341\264:\254/t\272\347\247\023:\277G \272/\276\':\003\270@\272.\366\3769\335\354\001\271exJ:\002>\2129\202G\362\267C\221U\271\310\203\323\272G\261\301\272\301\006h\272\273\300\227:s\247\3029\001h\205:\347(\302\271\337\256\007:\257\337\2508x\016\'\272oZ/:b\373Z\272\363\3517:Z\004\244\272\307\267\3229\036(\3709v\254F:\342\026\025:\000\243\2069S\321\236\271\260\300\371\271\227D\354\2709z\2228\333\310V\271\3501\3458\307\271\207\270\222\216*\271\343F\2358\320B<\272rI\023:\251\326\260\271\t\014\3239\207\307\010\271F\242\262\271\026\221\232\271\312\036]\272\231Ko:6\222\2419\362~\306\271QL\315\271n\376\207:\252\003\3109\001\255\005:\216ie9\014\3414:uZ\274\267\r=\035:\315p0\272\323\203\207\272t\252\260\272A\014\240\272\370\337\0139\270T\244\272\220 1:\"\224q:\2312~9@~U\271\364h\372\271R\251Z\271x\315\t;\215\342\233:wJ\336:\025{\362\270\312y\201:@\246\003\271\013\223\210\272\265\367v\272\300g\365\271\322\226d:\017\202\230\271|\236\352:Ds\3309\302|\2329O\265\3079\035\370\377:s\262\0079E\024$\272\342t79\273\264\004:\224\345\231:j\362;9O\221\3538\251\031\177:\026Y\2378\372W\'\271\\\245\003\272}\372\340\271\013[\216\271\377Tx9\245\341\214\272\200\231\2249,\322/\271\354\267\3767\366\362F:\314\022\0238_\263\024:\222\340@9J\375\336\272\204\264\207:\255D\232\271f\205\035:\010\34148\016\\\033\271\301%\314:\207\002\2436\340\224\037\271\371l\344\2704C\256\271\032\347\270\271\230~\350\2716\360\032:\237\212\204\272\200\213C\271\253\372\271\272h!\334:M\345?9\221\262&:sD3\271Z/\3769\373\246\035\271k\357}\271\371@\236:\334\020\034\271\376\231B:C\006\371\272\010!H7\376|\030\267N\223B:\236\032\2239\3538~\271\305\356\000\271N*\001\272\021\030c9PR\333\271\276\365z\272\262\001\2118\327\367\255\270\362G\016:\224r~9e\342\020:r\250\2159e\207H:\300\303?\272V\'A\272\327\253\277\270\301\241\260:l2.\270\367\3661\272oD\3667+\342\014\272~\3515\272-\21359\3750\371\271\267\235\216:\235A\247\271a@\204\271\343\244\3669\2450\2149\315\270I\271\275\206\3029\177\246\314:\3141\305\272O\235b\271\025\232%9\342\227*\271\021\237>8\364@\256:X\222[8A\361h\272n\333\265\271\\\"\345\271\035\241\3479\257m1\271E\034\257\272\312\355\217\271=\004\025\271\271\204\021\270\274\277\2649@\351\246:R!s\2711f 9\272M\316\271\'\300\031:e\363\225\272\013\241\017:\215M\3158\332\301\025:\377\334w\272\367\006\020\270t\365\251:Y\025\2709\276MM9\270\337\273\271m\236\032\271\372kl9\353\260>\271\265l\373:u\020\267\271\2533\006\272Q\354\301\271\363Q\273\271\215*\211\2726.\003:\341\240!\272_\363[:\253\317-:\031\272\266\272\271\016&:\027F\255\272\225\251\315\270\274\242\260:\201\262\224\270\375\33709iF\n:\324\300\223\272\232]\004\271\244\237\3719\307\211\224\2710r-9E5\341\272Cv*:\005\336\017\272\177\205\017\271\357M09\032\222\007\271\306\002\3139\201,\3459\'\353\327:\2278\212\267\253\321\3419\250H\244:\331\237T9X%\3549\257\371\277:\362cG:@\024\3349\246\034\246\271v_\n\272\327\254Z:\303w\2119sn\2048\371\370\035\272\340\024\2459\235\016d\272N\375\2659\025\371K\272{m\3578J#\034\270\317\264\026: \332\220:\001\347\276:\3347\007\272nh[\270\036h&:\304(D:\372\3300:G)\270\271\217\260;:\330P\250\272E\004\251\267-]\003:\242\004\250:\200\2031:#\026\003\272\010\014\225\272\002\036^\272\233k\016:}IA\271yL#:\212\212\3129\003\000\2709_[\025:4I@\272Z\304\242\272\327\027\2347\363\327/\267\376\314\267\267\037\3219\272\246\353\2738\010G\002;\203:-:\265\005\":\035\201\302\271>k19\220Qc:~d\356\271k-G:\331_\3548\032d\031:\000\215\333:7\'c9\362\316\265\272\267\022\222\272 \374}\271\231\022\025\272\317|f\271\236\202\231\272E\217\261\271\366\005\1779\352\\\3369\356\273}\271E\370K:Dk\263\272\t\257\000:\247H\036\272\362r\256\271\2622A\272r\'\356\271T\223\3379^\367\034\271\017Y\003\273O\310\241\271|\311\316\272\374\"^:{f\3778\203:\\\272F\330;:\225\213(\272\275\322,\272\311\367%\271K\354\3278ik\372\271\017)\346:\256\306]\272k\037N:%u\t:\220 \265\2724]\032\2729\001\255:\224\224\213:5\311\014\272\273\205\233\271\314\251+\272\236\305E\272^P\333\271\237\337l9@\033>:\300{\264\271\2151\200\272\254\235\220\271\000\345\250\272\330\007\3459\273;\3349\236\347\322\272(w\2439\000!\317\265^\375;:\257Fj8\235K*6\232\317\317\270W\035\301:\235\341\362\270\362\2020:\367t\221\272\006\207\3058,M;:\344\374C\272wM>9SHU:-K\371\271\357\350\271:\356V-:\217\222v:\310\rv9\365\245\230\272\003\001)\271\022\027>\272\2215\277:\250+\034\270Y\316\035\271H\242\0079\261\365E9\211\312=\272\013\362w\2729/\333\271\026y\2468\332\362&\2725D\247\271\017`\202\272\033\0255:b\307\275:\354\330\3229\303\337\240:\202\313I:\3122\226\272\306\320\376\271\264\301D\272\331m\2159\240__:\360\"\364\271\016\224I:/\234\320\272\307\334\365\270s\013\253\267\026\342\313:\001]\205:\232\322Z:\303\314\316\271\364\223\252:\362=9\271)\tu9h\345\2359\252\313\2359\030U}\271k \3409\215tw:\241S\005:\350_\206\272&\027S\272/\'\2649\350B\3727Y\036\030:>YG:\316d\211\271\240\274\034\267\027E\236:\220l&:\003e\005\272\023\303\021\2721\377K\2729\362q:\337\276\3449m\314=\272ou\0039\246 \"\272z#\325\271<9!:W)\200\2728\301\227:\263+\316\267\3542\223:\324x\0139\260\305/\271O#Q\272\340Aa\272:~\355\270\371\002J\271i\272\234\271{O\261:\363\260\257\270E\261\3419\364pE:\2734\314\270\366-l\272c\216\177:\351\344\263:\277A\2548\324\313\235\271;k8:\371\227.\272$:/7kc\346:\005Xo:\017\354\2507\214\017\223:\224P\t:\375Ji:2^I:\273oY\271\221\\\240\266\277/+\271_\211\013;\246\006\270\272Gq\004\272\010\252\024\272\026\005\2678F\261\214\271jv\244:\316pL9\367_{:\224Z\35694\344\3449\270\031t:\005\177\302\271\024\037\3749i\314\3408I\260\201\270\205V\3779\367\217\025;C7%\270\3262\r\272\365\264\002\273\274\276\016\2708h\2038>\365>\271_\323\246:\344<\2159\017\213\255\272q\206\":\325U7\272\333\222\\\271\301a\1779$\322\2728G\210\351\271\221\'\331:Q\216^\270\361\251\3768\241\272\25090\207J8\370\203u9\016e\327\271\034R!:\345\261\':HMl\272WL\2379\236\037&\271xt8\272\206\245$:I\020\374\270\321\375\227\271\342\370*\271\271D\231\272\253\254\312\271V\024\001\2720\226u:\244\263q\272\316/\000\271\257z.\271\260\017\315:D:\2479\017_+\272\223d.\2728\017k9X\234K:\013\375\2257\2627\271:\346\213\274\271Zi\271\267(\214\225\271\024\331&\272\365\\\2149l\001\3249\002N\243:\341g\275\272\004\232\2279*\'\025:$\025\214\272\340\342\255:~\310W\272\215\034\006:a\007Y\271F^\037\272E\234\227:_\"$\272\304\002~:\342\257&9\245.\275\270\336(\2319\037JC:\007\245\3568\026\353\203\272\377\274@\270\336\375k\272\006\354[\2721\226k\272a\375\227\2714t\2219r\177\3257\354\0327:TkY7\350\327\0309\225_\3509\303b5\270Rr\3337Jz\202\272A\031_\272\356\354H\270}\337\357\271\031\320\0049]\335F\272[\315\272\272s\215_:S\376\006:\271Ib\271\306h\017:I|x\272\261\257\031\272\267ho:G\302#9\031s>:\200)\177\272\010\277\355\271G!\3149w\277\241\2722Z\022\272\254\352\3319\336\213>:\006\017\004\272s\212&\272\303O\'\272\nd\233:\000&W88\021\360:~z\310\271\200\223\333\271\374\277\"\272\256\221 8\276\034\357\271\360\3176\272\236\300O\271m\002\203\272\216\371\320\271&,\255\271\250\313\023\272\241\262\2129,U\177\271\324\322w:m\006}:\266\355\230\271\177_\343\271wBA\272\243\244Q9\007_\350\270jl/\272\275Z?\271]\367\2648\333\370\203\272\231\035\212:,\030=\272zC\203\271\313\217\326\271\304\347\2619uA\250\272\\o@\271S\2269:\250\023\252\271\273\375\242:\251\025\3129\322\017\244:\026\217\235\272\230\000\017:\300\310!:\3368\247\271\316|f\272\277\266\2419e\243\2318\377\264:9\316}\307:\333\364G\272#\375\357\270.\233\202\271E@W\272o\213\3329\\6\200\272\304\360\214\272\216\207\2659}|K:\027\252&:\274\027A\271V\357d:\245\177\031:\006o\0059\236\243\226\272m,\022\266eT\377\271\321\213\010:0b\2309\0248G:i\n\022\272\202\351\344\271\320\0009\272^8\2469\235-(:\215`2\271N\023\263\271\260\356\0169V\347 \272w\224\206\272P\306\0139\3136\320\270k\001\227\271`\202\306\271\275z\3109bdT\272Q\244\2479v\036\3409\r\212&\272\260wW:\362\032$:r\326\240\272\003w\316\271\026\023\360\272\n_\204:\375\225\0049A8\026\272\257\002\3109$5.:\023V%\272\223\275\204\272\303\325-8\224\252\223\271\303\\\007\272\233\303\346\270\306\n\030\271sY\3428\027_=:\210\377\2539\007\35239\357U^\272\227\274 :_\366\2229\352\3369:@\023\274\270\2635\350\271\225m\034\272\365\030\"9/\006\324\271v\270\014;\023\027\2339\2507\203\272\325e\":\350\242\0319\335\223\3479\363\036\217\272\334)\001\272\271\316\3439\216\375\341\272\377B1\272\245\331]:\204X\270:J\350\225\271\014G\021:\000\214\003:\225\026V:\215\205\256:\020\007\322:^\241\004:\256&\253:\377\244,\272\201\032\365:\342\247\214\271\001\002H9jQ\245:T\003\227\272b\022x:\245\331\221:wO#\272\227\016{\270.,=\272vA<9\016\377\2459\356\337$\271\247\t*:\357{\2706\315\214\2049fDn\272\252S\222:t\235\014\271\272/\213:J\366\223:)\373\2547\346\227\203:\264\312\361\271\016\022\207\272\243\024\001\272\260\226E\272\331I!\271\005\027f9v\215\371\271}\336\272\270c\306\"\271HW\007\272k\255O:H\2173:\304\225 9\025\336\2279\227;\033\272\355\263N:\031\r\2529w\242\271\272\032\362\3069\245pV\270\206\316\002:\246\257V8\r\373j9\037((\266\360-\333\271\242?\215\270\006W\2779\234\304(:\253\225\0279\304\342\021\272\273\3251:(\200\307\272\340\337q9\233\275\3218a\242\2458\306\235\336\271\344\016;\272\242\360\202:tJ\n\272& \3119V\350\2729\032\370\200\270\245RC:\353\336r\271\301\376\234:\316G.\272\205\207\274:k\323#\272F\366\240\271\355\223P\272\204\031\301\272\327NQ\272\027\022\312\2708\361\027\272\371\376)\272\034\013\226\272\261\311R:A\355S\272f\372\246:\266\314\010:\312O\313\271T\331\243\272\026\3030\271i7X:-\315\226\272D[c:>\206@:\331G\271\267\256\333\261\271\344\373\202\272\221Hl\271\330\207\266\272\336_S\272\370\272\2229\232J9\271\021\210::_\256\3549\310\215\3129\032+\345\272x\033\2079\nb\2578OH\275\271\326\016\212\272$\206\2619\356\334\3039ys\024\271\242\211\002\272\224\001?:\236!\3079\373#\234:\007\370\245:\323>4:\247\200\372:\253\204E\272\005<^\272\276Y\3369\021\210\247\271GoV9\257\320\037:\315C\223:\017\202P:\263\272M\271\312#\r9\021r\021\272\203{\n:\245q\237:C\241{\271\264C\200:\035\\\347\271\0338\243:>\327A:\3344]\271\335\326\325:.\031\0169\027<{:0Q\304:9\014t\271}_\251\272\023\352\3179\211+\000\272k\336)\272W\352\3609w\037\345\271\212^z9yn\2579s%\3137\317n\320\267r\304\2549cF\020\2727b\3419\002\203H7\364X\2349\002W\215\271o}(:\347\tR\271\322G\215\271\251\315\266\271\367F\334:\313\250\035\272T\207\2179\211\353\207\271\"\353\"9\r\004v\272\221\243\t:\rj\226\272\201#\266\271\023\370\2469\311\031\260\272\227\n1:\363t\005:\002\237\207\272\253WX\271\001\021\0367\333\274n8\177l>\272b\356\2319\271t\257\272\252\005\2147\266\235\326:\004\343j83\323x8m0\255:DG\3659\016\3137\272\340\325:\267?P59\315\222\324\272;-\004\271\234\253\201\271\021-\215\271#\304\336\271/~\336\270\263:\264\271z\366\212:\226\214\024\272\267#\3309\303J\3159\351[\006\272\317n\246\272\017d\251\272h5\010\273\264\252\0308\370D\0239\276iC\272\t\336\2219!*@\272\024\332T\271\374h\3079JE\333:\035\231\323\271\375\253<\272\200\257\215\271\021\360\216:\365\255\031:\273\267\216\272\311T(:\323\304::W\300\003:2\373\024:\211.\237:\355\201\006\272\215\303D:\206\221\366\271\341\230\2379H\372!:\370R\277:5\017,:\265+\017:\300\364\223:\032\034#\270\236@>:\261I\201:\003\336\221\272\022\263\016\272\"(\010:rc\327\271\273rq:\252\275\253\272\355\321K:\036\254\270\271Q\333I:\253\274\213\272`\334\0309\270\334\3409\336\372^9X\347\246\271\204\221R\272\257n\225:\017z\024:\230Y\'9\322N\2569\314\343E\272\231\274\36096\221\223\272\345-\300\271Y\273\031\270\2152*\272\305\241\213\272e\367X9\355S\227:c\025}\271#G\"\271tY\3069\265\244z\272\'-\210\272\257\031\036\272"
      }
    }
  }
}
node {
  name: "global/rp_dense//w"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/rp_dense//w/Assign"
  op: "Assign"
  input: "global/rp_dense//w"
  input: "global/rp_dense//w/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/rp_dense//w/read"
  op: "Identity"
  input: "global/rp_dense//w"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "global/rp_dense//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/rp_dense//b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/rp_dense//b/Assign"
  op: "Assign"
  input: "global/rp_dense//b"
  input: "global/rp_dense//b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/rp_dense//b/read"
  op: "Identity"
  input: "global/rp_dense//b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_5"
  op: "MatMul"
  input: "global/Reshape_11"
  input: "global/rp_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_6"
  op: "Add"
  input: "global/MatMul_5"
  input: "global/rp_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "global/Elu_13"
  op: "Elu"
  input: "global/add_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "global/rp_classifier//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
        tensor_content: "u;\211\270e\344\255\271\347,\2148\021l\030\270\026\023\3629q%\222\272\243b\265:\276\022\205\272\352%\005\272\320\263\311:\370m\271\2713x\\:\206`\223:b$\037:\365\005\2159&\267\":n\206\274\271z\323q8\\\334\331:*i\3069\006\355\2309\275\321\377\272mx\365\267\036\253y:7\237M:\373&`:\312+~\270%\355\r:D \3109\251\022\325:B|\255\271\247\242\310\271Q\220\0208\036u\2609\305\007i\272\232)\214\271(\247\3149\365\316\3629\354y\204:\320\270n9\266\022o:\311[%:\300c\2339\017\356\267:\277\365\213\272)j\2159|\"\014:z\206\206:pj\216\271\230\366\356\272\021\t\2619X\367\003\273\007\323\265\272p\233\331:s\013}9C\333]:f\345\222\272z\362\275\270\206Q=9\247\3539\270\004\344\314:\221\317\016\272\262\222\272\266\276\212\3439\021YZ\271\367\351\360\271\272\214\213:Wp\2269\236\341]:+o7:k\220B:\\L\320\272\\0\254:V\334g\270\372\25266<\222R\272j?\311\272\300\261\235\270\305\021y\272:\3109:\200\204\021\272C\2400\271\321w\0339\307\217{\271\251$\022\273\223\334\353\271\221\223\030:\237(&:\235\013,\272\324\305\251:\005$Q:n\352c\272\262\005P\271\320\363\020:\336\305Z:\263G9:\036?,:\261\322\2469\246\252\331\272\333\202\023:\374\336\352\271\260pQ\272;\252a\272\336\3419:.\322\3249(\262M\271\347\024:\272}\345W\272x\250\033;\013\216\245\272\034\304\3709\311\033\245:|\263f9[\365\253\270\327\350\32687H\200\271Um\273\2707+c\272l1\253\271\206\301W9\344\203\2309\002\326\3748\260\271$\272h\370\240:s\"\234\272\200\002\35093\001\2149Rk>\272\222\217\3239\257\330M\272B\311Z:<\336\253\271\227\023_:\246\227\016\271\343\232r\271<n5\272\265s7:B\257N:\201\027e\272\325Ux9\224g\371\271e\035H\272\202\367S:@\246\021\272\356\200!\272\006\226j:@\321Y\272\307h9\271tP[:\330b\2279)\224\3649\246@\020\272\\/\260\271.\024g\271JO\202:\332c\316:\363\006\2356\360\0069:4\215k:B\014\000\273TJ!\272N\005\n\273\3711h\271\372\337\212\271\211\327\264\272\346[f\271,\35748\031\355\202\272\004\317m\272gl\241\267Asm\270\226\310\253:\207\345\223\271p\2051\272\365\001\2409w\027\3509\252 \333:\322^\3669J\372\227:{B\34490\376\262\272\237\332<\270\342M[:\207_a\271\377\342\3048\000\237\231:\333\230\360\271M+\023:F\306\267:\214\014S\272N\372\225:\203CK:\201`\217:\372.q:\007\306\246\272\326\037\241:\235\315\325\271\256K\233:\374\327\025\271MI\374\267\266\"\246\272n}Q\272\2662\"\273l\341<\272L\360\235:\272G\367\271\026\372r\270v\273\225\272E\304\022\272\263\202\025\272~\277b:\020\336\300\272*\"\033\271\221\333\3439\307Z\337:H\234\263\271\346\266\306\272\236TS\272\366&\226:\243Y\3536\307\260\241:Y\026\355\272w\017\3519\251\320]\270L{]:\200\304\035;r\237~:v\233\207\272\006\r\327\271\tFz\272\221\370\3518\376?F:\216\352\020:A\223\230\272%M\243\271s*\303:\262O\224\272@Ax\271Ph\203\271\023\013\n\273\177\353\'\272\r\020\367\271<\006\225\2727\241%\272\355BS:.\246\201:x3\205\272a\337\000\273\233\220#9\362\306b:\303i\226\272\250H\005\272\210rr:\244\003\306:\264\224\342\271/Cg9k\263\303\272^\003\353\271\250\021\216\272?\206{:\317\002M:\365\006g:\023\326%\2710~H\270\303\3624:\305\234\241\272v\244\204\271N\237(:\205&\276\272yo\010:p\326\363\270|Y\177:\304\215\027\270\302\250l\272!\016\246\272>\331\353\272#\345\220:p\030\021\270\303\343\217\272\242\026\254\272\177\210i\2721\253\223\271\'\234G:\267\352G\272\256\321\251\270\354\2127:\377E\3249TP\001\271\211\233\246:\355\000\020:\204\225\314:\020\212B\271\333/k\272\"\3244\271.\336\3609\323\036\'\270\223\256\"\272\216\376y\272\342E\330\272\216\214\240:\036\3410\272\210v\3769\025\340\302\272X[\342\271\372\210\n\273<<\230\271\000\342\272\271]\313\277\270\032\035\221\272fiW9\314\rx\272o\217\2219\262`\030\272\350\311\232:\263\272V\272\371\266\264:w\263\034\271\'t\021\272-J\225\2709\220\336\270r\301\232:#\361\2149?\027\211:\3125\002:\255jv\271\316nQ9\003/\314\271\2056\212:\347\232\345\270\310\025U9\355Z\336\270\310K\270:\372\201\034\272\207\275\033\272\243\"\2428\363\2076:\036L :i\214\2408\216\205\202\272V\352\304\271\331\245\355\270I@\261:\234\323\240:\210\303\305:\036\027\205\2724S\2277\264I9:\220\272b:\304\330M:e\322\2579\3460\245:{;39\377\275\n\2725\237\2249E\301{\271\3230\2049\361\205u:\210\317\3769\322\252\341:\237\034.\272\017\033\221\271L\234\n\273\204\207\310\272J\265\257:T\264\0308_\342\016:\217\030\354\270;\n\266\270\365N\014:\200\230\206\270e\000\264\271\017(\351:B\037\3249\375c-\271\013\352\2519\226\352\003:7e\306:\272\0369\272\010F\335\272\361[U:\356\r\006:L\032#\272S\337/:\315\350S\271"
      }
    }
  }
}
node {
  name: "global/rp_classifier//w"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/rp_classifier//w/Assign"
  op: "Assign"
  input: "global/rp_classifier//w"
  input: "global/rp_classifier//w/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/rp_classifier//w/read"
  op: "Identity"
  input: "global/rp_classifier//w"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/rp_classifier//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/rp_classifier//b"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/rp_classifier//b/Assign"
  op: "Assign"
  input: "global/rp_classifier//b"
  input: "global/rp_classifier//b/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/rp_classifier//b/read"
  op: "Identity"
  input: "global/rp_classifier//b"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/MatMul_6"
  op: "MatMul"
  input: "global/Elu_13"
  input: "global/rp_classifier//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "global/add_7"
  op: "Add"
  input: "global/MatMul_6"
  input: "global/rp_classifier//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "global/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "global/train_phase_flag_pl"
  op: "PlaceholderWithDefault"
  input: "global/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "global/global_step/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/global_step"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/global_step/Assign"
  op: "Assign"
  input: "global/global_step"
  input: "global/global_step/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/global_step/read"
  op: "Identity"
  input: "global/global_step"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/global_episode/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global/global_episode"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/global_episode/Assign"
  op: "Assign"
  input: "global/global_episode"
  input: "global/global_episode/Initializer/Const"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/global_episode/read"
  op: "Identity"
  input: "global/global_episode"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/AssignAdd/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "global/AssignAdd"
  op: "AssignAdd"
  input: "global/global_episode"
  input: "global/AssignAdd/value"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "local/on_policy_state_in_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "local/on_policy_state_in_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "local/on_policy_state_in_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/on_policy_state_in_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/on_policy_state_in_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/off_policy_state_in_pl_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "local/off_policy_state_in_pl_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "local/off_policy_state_in_pl_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/off_policy_state_in_pl_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/off_policy_state_in_pl_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/rp_state_in_external_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "local/rp_state_in_internal_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "local/rp_state_in_metadata_first_row_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/rp_state_in_metadata_sample_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/rp_state_in_metadata_trial_num_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "local/on_policy_action_reward_in_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "local/off_policy_action_reward_in_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 5
        }
      }
    }
  }
}
node {
  name: "local/on_policy_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "local/on_policy_sequence_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "local/off_policy_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "local/off_policy_sequence_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.23904572427272797
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.23904572427272797
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/conv2d_1/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 740
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/conv2d_1/W/Initializer/random_uniform/max"
  input: "local/conv2d_1/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/conv2d_1/W/Initializer/random_uniform/RandomUniform"
  input: "local/conv2d_1/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_1/W/Initializer/random_uniform"
  op: "Add"
  input: "local/conv2d_1/W/Initializer/random_uniform/mul"
  input: "local/conv2d_1/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_1/W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_1/W/Assign"
  op: "Assign"
  input: "local/conv2d_1/W"
  input: "local/conv2d_1/W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_1/W/read"
  op: "Identity"
  input: "local/conv2d_1/W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_1/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/conv2d_1/b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_1/b/Assign"
  op: "Assign"
  input: "local/conv2d_1/b"
  input: "local/conv2d_1/b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_1/b/read"
  op: "Identity"
  input: "local/conv2d_1/b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "local/on_policy_state_in_external_pl"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_1/add"
  op: "Add"
  input: "local/conv2d_1/Conv2D"
  input: "local/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu"
  op: "Elu"
  input: "local/conv2d_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/conv2d_2/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 757
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/conv2d_2/W/Initializer/random_uniform/max"
  input: "local/conv2d_2/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/conv2d_2/W/Initializer/random_uniform/RandomUniform"
  input: "local/conv2d_2/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/W/Initializer/random_uniform"
  op: "Add"
  input: "local/conv2d_2/W/Initializer/random_uniform/mul"
  input: "local/conv2d_2/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_2/W/Assign"
  op: "Assign"
  input: "local/conv2d_2/W"
  input: "local/conv2d_2/W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_2/W/read"
  op: "Identity"
  input: "local/conv2d_2/W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/conv2d_2/b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_2/b/Assign"
  op: "Assign"
  input: "local/conv2d_2/b"
  input: "local/conv2d_2/b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_2/b/read"
  op: "Identity"
  input: "local/conv2d_2/b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "local/Elu"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_2/add"
  op: "Add"
  input: "local/conv2d_2/Conv2D"
  input: "local/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_1"
  op: "Elu"
  input: "local/conv2d_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/conv2d_3/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 774
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/conv2d_3/W/Initializer/random_uniform/max"
  input: "local/conv2d_3/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/conv2d_3/W/Initializer/random_uniform/RandomUniform"
  input: "local/conv2d_3/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/W/Initializer/random_uniform"
  op: "Add"
  input: "local/conv2d_3/W/Initializer/random_uniform/mul"
  input: "local/conv2d_3/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_3/W/Assign"
  op: "Assign"
  input: "local/conv2d_3/W"
  input: "local/conv2d_3/W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_3/W/read"
  op: "Identity"
  input: "local/conv2d_3/W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/conv2d_3/b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_3/b/Assign"
  op: "Assign"
  input: "local/conv2d_3/b"
  input: "local/conv2d_3/b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_3/b/read"
  op: "Identity"
  input: "local/conv2d_3/b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "local/Elu_1"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_3/add"
  op: "Add"
  input: "local/conv2d_3/Conv2D"
  input: "local/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_2"
  op: "Elu"
  input: "local/conv2d_3/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/conv2d_4/W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 791
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/conv2d_4/W/Initializer/random_uniform/max"
  input: "local/conv2d_4/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/conv2d_4/W/Initializer/random_uniform/RandomUniform"
  input: "local/conv2d_4/W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/W/Initializer/random_uniform"
  op: "Add"
  input: "local/conv2d_4/W/Initializer/random_uniform/mul"
  input: "local/conv2d_4/W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_4/W/Assign"
  op: "Assign"
  input: "local/conv2d_4/W"
  input: "local/conv2d_4/W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_4/W/read"
  op: "Identity"
  input: "local/conv2d_4/W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/conv2d_4/b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/conv2d_4/b/Assign"
  op: "Assign"
  input: "local/conv2d_4/b"
  input: "local/conv2d_4/b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_4/b/read"
  op: "Identity"
  input: "local/conv2d_4/b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4/Conv2D"
  op: "Conv2D"
  input: "local/Elu_2"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_4/add"
  op: "Add"
  input: "local/conv2d_4/Conv2D"
  input: "local/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_3"
  op: "Elu"
  input: "local/conv2d_4/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Shape"
  op: "Shape"
  input: "local/Elu_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice"
  op: "StridedSlice"
  input: "local/Shape"
  input: "local/strided_slice/stack"
  input: "local/strided_slice/stack_1"
  input: "local/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/truediv/Cast"
  op: "Cast"
  input: "local/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/truediv/Cast_1"
  op: "Cast"
  input: "local/on_policy_batch_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/truediv"
  op: "RealDiv"
  input: "local/truediv/Cast"
  input: "local/truediv/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/Cast"
  op: "Cast"
  input: "local/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/Reshape/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "local/Reshape/shape"
  op: "Pack"
  input: "local/on_policy_batch_size"
  input: "local/Cast"
  input: "local/Reshape/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape"
  op: "Reshape"
  input: "local/on_policy_action_reward_in_pl"
  input: "local/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_1/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "local/Reshape_1/shape"
  op: "Pack"
  input: "local/on_policy_batch_size"
  input: "local/Cast"
  input: "local/Reshape_1/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_1"
  op: "Reshape"
  input: "local/Elu_3"
  input: "local/Reshape_1/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_2/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 150
      }
    }
  }
}
node {
  name: "local/Reshape_2/shape"
  op: "Pack"
  input: "local/on_policy_batch_size"
  input: "local/Cast"
  input: "local/Reshape_2/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_2"
  op: "Reshape"
  input: "local/on_policy_state_in_internal_pl"
  input: "local/Reshape_2/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "local/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/concat"
  op: "ConcatV2"
  input: "local/Reshape_1"
  input: "local/Reshape"
  input: "local/Reshape_2"
  input: "local/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/Shape"
  op: "Shape"
  input: "local/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/strided_slice"
  op: "StridedSlice"
  input: "local/lstm/Shape"
  input: "local/lstm/strided_slice/stack"
  input: "local/lstm/strided_slice/stack_1"
  input: "local/lstm/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/ExpandDims"
  op: "ExpandDims"
  input: "local/lstm/strided_slice"
  input: "local/lstm/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  input: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm/local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "local/lstm/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/range"
  op: "Range"
  input: "local/lstm/range/start"
  input: "local/lstm/Rank"
  input: "local/lstm/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/concat/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/lstm/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/concat"
  op: "ConcatV2"
  input: "local/lstm/concat/values_0"
  input: "local/lstm/range"
  input: "local/lstm/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/transpose"
  op: "Transpose"
  input: "local/concat"
  input: "local/lstm/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/sequence_length"
  op: "Identity"
  input: "local/on_policy_sequence_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Shape"
  op: "Shape"
  input: "local/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice"
  op: "StridedSlice"
  input: "local/lstm/rnn/Shape"
  input: "local/lstm/rnn/strided_slice/stack"
  input: "local/lstm/rnn/strided_slice/stack_1"
  input: "local/lstm/rnn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm/rnn/Shape_1"
  op: "Shape"
  input: "local/lstm/sequence_length"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/rnn/stack"
  op: "Pack"
  input: "local/lstm/rnn/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/lstm/rnn/Equal"
  op: "Equal"
  input: "local/lstm/rnn/Shape_1"
  input: "local/lstm/rnn/stack"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/All"
  op: "All"
  input: "local/lstm/rnn/Equal"
  input: "local/lstm/rnn/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm/rnn/Assert/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor local/lstm/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Assert/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Assert/Assert/data_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor local/lstm/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Assert/Assert/data_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Assert/Assert"
  op: "Assert"
  input: "local/lstm/rnn/All"
  input: "local/lstm/rnn/Assert/Assert/data_0"
  input: "local/lstm/rnn/stack"
  input: "local/lstm/rnn/Assert/Assert/data_2"
  input: "local/lstm/rnn/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "local/lstm/rnn/CheckSeqLen"
  op: "Identity"
  input: "local/lstm/sequence_length"
  input: "^local/lstm/rnn/Assert/Assert"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Shape_2"
  op: "Shape"
  input: "local/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "local/lstm/rnn/Shape_2"
  input: "local/lstm/rnn/strided_slice_1/stack"
  input: "local/lstm/rnn/strided_slice_1/stack_1"
  input: "local/lstm/rnn/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm/rnn/Shape_3"
  op: "Shape"
  input: "local/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "local/lstm/rnn/Shape_3"
  input: "local/lstm/rnn/strided_slice_2/stack"
  input: "local/lstm/rnn/strided_slice_2/stack_1"
  input: "local/lstm/rnn/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm/rnn/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/ExpandDims"
  op: "ExpandDims"
  input: "local/lstm/rnn/strided_slice_2"
  input: "local/lstm/rnn/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/rnn/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/concat"
  op: "ConcatV2"
  input: "local/lstm/rnn/ExpandDims"
  input: "local/lstm/rnn/Const_1"
  input: "local/lstm/rnn/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/zeros"
  op: "Fill"
  input: "local/lstm/rnn/concat"
  input: "local/lstm/rnn/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Rank"
  op: "Rank"
  input: "local/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range"
  op: "Range"
  input: "local/lstm/rnn/range/start"
  input: "local/lstm/rnn/Rank"
  input: "local/lstm/rnn/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Min"
  op: "Min"
  input: "local/lstm/rnn/CheckSeqLen"
  input: "local/lstm/rnn/range"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm/rnn/Rank_1"
  op: "Rank"
  input: "local/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_1/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_1/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_1"
  op: "Range"
  input: "local/lstm/rnn/range_1/start"
  input: "local/lstm/rnn/Rank_1"
  input: "local/lstm/rnn/range_1/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Max"
  op: "Max"
  input: "local/lstm/rnn/CheckSeqLen"
  input: "local/lstm/rnn/range_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm/rnn/time"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "local/lstm/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "local/lstm/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "local/lstm/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "local/lstm/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "local/lstm/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "local/lstm/rnn/TensorArrayUnstack/Shape"
  input: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "local/lstm/rnn/TensorArrayUnstack/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "local/lstm/rnn/TensorArrayUnstack/range/start"
  input: "local/lstm/rnn/TensorArrayUnstack/strided_slice"
  input: "local/lstm/rnn/TensorArrayUnstack/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "local/lstm/rnn/TensorArray_1"
  input: "local/lstm/rnn/TensorArrayUnstack/range"
  input: "local/lstm/transpose"
  input: "local/lstm/rnn/TensorArray_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Enter"
  op: "Enter"
  input: "local/lstm/rnn/time"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Enter_1"
  op: "Enter"
  input: "local/lstm/rnn/TensorArray:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Enter_2"
  op: "Enter"
  input: "local/lstm/local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Enter_3"
  op: "Enter"
  input: "local/lstm/local/lstm/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Merge"
  op: "Merge"
  input: "local/lstm/rnn/while/Enter"
  input: "local/lstm/rnn/while/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Merge_1"
  op: "Merge"
  input: "local/lstm/rnn/while/Enter_1"
  input: "local/lstm/rnn/while/NextIteration_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Merge_2"
  op: "Merge"
  input: "local/lstm/rnn/while/Enter_2"
  input: "local/lstm/rnn/while/NextIteration_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Merge_3"
  op: "Merge"
  input: "local/lstm/rnn/while/Enter_3"
  input: "local/lstm/rnn/while/NextIteration_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Less/Enter"
  op: "Enter"
  input: "local/lstm/rnn/strided_slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Less"
  op: "Less"
  input: "local/lstm/rnn/while/Merge"
  input: "local/lstm/rnn/while/Less/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/LoopCond"
  op: "LoopCond"
  input: "local/lstm/rnn/while/Less"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Switch"
  op: "Switch"
  input: "local/lstm/rnn/while/Merge"
  input: "local/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Switch_1"
  op: "Switch"
  input: "local/lstm/rnn/while/Merge_1"
  input: "local/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Switch_2"
  op: "Switch"
  input: "local/lstm/rnn/while/Merge_2"
  input: "local/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Switch_3"
  op: "Switch"
  input: "local/lstm/rnn/while/Merge_3"
  input: "local/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Identity"
  op: "Identity"
  input: "local/lstm/rnn/while/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Identity_1"
  op: "Identity"
  input: "local/lstm/rnn/while/Switch_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Identity_2"
  op: "Identity"
  input: "local/lstm/rnn/while/Switch_2:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Identity_3"
  op: "Identity"
  input: "local/lstm/rnn/while/Switch_3:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "local/lstm/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "local/lstm/rnn/while/TensorArrayReadV3/Enter"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/TensorArrayReadV3/Enter_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\333\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06326664239168167
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06326664239168167
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 955
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 475
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "local/lstm/rnn/while/TensorArrayReadV3"
  input: "local/lstm/rnn/while/Identity_3"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  op: "Add"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  op: "Mul"
  input: "local/lstm/rnn/while/Identity_2"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  op: "Add"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "local/lstm/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Select/Enter"
  op: "Enter"
  input: "local/lstm/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/Select"
  op: "Select"
  input: "local/lstm/rnn/while/GreaterEqual"
  input: "local/lstm/rnn/while/Select/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Select_1"
  op: "Select"
  input: "local/lstm/rnn/while/GreaterEqual_1"
  input: "local/lstm/rnn/while/Identity_2"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Select_2"
  op: "Select"
  input: "local/lstm/rnn/while/GreaterEqual_2"
  input: "local/lstm/rnn/while/Identity_3"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "local/lstm/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/Select"
  input: "local/lstm/rnn/while/Identity_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/add/y"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/add"
  op: "Add"
  input: "local/lstm/rnn/while/Identity"
  input: "local/lstm/rnn/while/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/NextIteration"
  op: "NextIteration"
  input: "local/lstm/rnn/while/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "local/lstm/rnn/while/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "local/lstm/rnn/while/Select_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Exit"
  op: "Exit"
  input: "local/lstm/rnn/while/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Exit_1"
  op: "Exit"
  input: "local/lstm/rnn/while/Switch_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Exit_2"
  op: "Exit"
  input: "local/lstm/rnn/while/Switch_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/while/Exit_3"
  op: "Exit"
  input: "local/lstm/rnn/while/Switch_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "local/lstm/rnn/TensorArray"
  input: "local/lstm/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayStack/range"
  op: "Range"
  input: "local/lstm/rnn/TensorArrayStack/range/start"
  input: "local/lstm/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "local/lstm/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "local/lstm/rnn/TensorArray"
  input: "local/lstm/rnn/TensorArrayStack/range"
  input: "local/lstm/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm/rnn/Rank_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_2/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_2/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm/rnn/range_2"
  op: "Range"
  input: "local/lstm/rnn/range_2/start"
  input: "local/lstm/rnn/Rank_2"
  input: "local/lstm/rnn/range_2/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/concat_1/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/lstm/rnn/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm/rnn/concat_1"
  op: "ConcatV2"
  input: "local/lstm/rnn/concat_1/values_0"
  input: "local/lstm/rnn/range_2"
  input: "local/lstm/rnn/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm/rnn/transpose"
  op: "Transpose"
  input: "local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "local/lstm/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_1"
  op: "StridedSlice"
  input: "local/Shape"
  input: "local/strided_slice_1/stack"
  input: "local/strided_slice_1/stack_1"
  input: "local/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/Reshape_3/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/Reshape_3/shape"
  op: "Pack"
  input: "local/strided_slice_1"
  input: "local/Reshape_3/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_3"
  op: "Reshape"
  input: "local/lstm/rnn/transpose"
  input: "local/Reshape_3/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/action//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        tensor_content: "\214~\2519j\005\0209\352i\2579\360&\206\272\020\343P:q\275\035\271\24094\272\214\352{\271a\301\323\270\300u\233\267\tg\013:\241\350^\272\331\002\036:\"P\217\271\212]a\271d\260\206\271\315O\':\236C\033\271\223\231\3519\270\214H\272F8\3469\345R\013\272\210I\336\271W\364\351\271\267\353T:pG#:\352\206\2239}\253s:uy\006\2717\313F:\227\240>:o5\201\271\000U\031:D+\256\267\263\254\2579\244S\267\271\322b\3009/\354\376\271u\305\300\271\216\344\017:\200Q\0238M\252<\271\031%]\272\316ZF\272\212\304\037:fO\2109S\276\370\272\260\037\211:L\177\013:\350\371~\272\307\206\023:\203\234\355\271\310U\024:\367\314\"\271P\245\257\270\343n7:\207\235\2439\300\017\033:^K\013\2716\000\262\2711Y\3679\r\210w:[\021\3628\254S\3629\305\357d\272\246}\022:!\314 \272\227\351F:%\207\016\2713\021\224\272vo\221\270*\177\0009L/Y\271\212\241\321\271\225\246\2409\333\0370\272\243s\2467\323#R9k\343\217\272\367\010=:\307\326u\272\264\031 \272\\e\2358\365O\230\271\272d%:H\324\331\271}l]:8o;\270\277\216\021\272\t\322\326\270\252<\017\272\3116\3409\261\240\317\272hbP\271\242\235@\272\334\314\034:\203/8\272\272,\r:)\3605\272V\347M:e\347\242:\033r\242\272Jo\3259\016\035a:\241\004\270\271M\312\3129\031\263\241\271#\274%:_\2024\272\"!\2068:N\244:\212#\001:\316\311\3329@\260|\271\350\250\2579}m\367\270ge\014\272-\346Q\272\272M\t\271re+\272t\327G9\300\312\027\271\207\336\034\271\025\331J9X\350\314\271\022\'/:3?\305\271f\201\307\271\252\245\302\271\324\226\223:\350\225y9\2478\3209C\2038\267K\342\3429W\315R:\031\303\0049\350\366\2279\227ms\272\264Ky:\n\273\004\272_I\342\266\375\021\353\271\307\211}9:{\3169\320J*\272\033%\022:;\313\026\272\0057\346\271\340\313\3609\031\357\3617\315\310\024:\247\320f8\352\342\2129\200\256\36380K\006\273\275\261l:}\245\n:0q\32763Y\014\271$\255h\272\335)1:%\370\217:?\262U:)x\213\270\207\204X\271\252\303\2079\240\272\217\272\324\001\300\271\031?\022\272\303@\001:\333\366\3679\376D\017:b\355\37499R\3748\213l\3029mU\344\267d{\001:\351\354\t\271\355!w:V\\\3339a\303Q:\227\201\t:BG\312\267b\306g\271\215\031R:|\037-\272\362\340\317:\005\222\2669\023\315\r:61I\271\017\263\2449\274\224H9\205\034\353\271\253o\345\271\034O\370\271\202\325C:\027;\2709\302\332\3629\036-\2618\r ?:\026fd\2710\312\220\270\002\25679Q\275\321\270\210\330l\271Bx\247:+P\2459\246xd\272\257\337\241\272;\034\224\271\3156\005:\255\251$9\\I\252\271\304\356\3069\000{6\272P\";8ar09\177\306\3619\335\r.9\310\031\3079\204$\035\272\346\214\256\271g\017\316\271F\244A\272=!^:\205\377\004\272\221\217g\272\217H\2439\213\207\027:^\263[9\003\321\356\271K|a9g\273\250\271\267TH\271[[S\272B\257\3219qTA\272\371\255-\272IY\3169\362\352\262:\270!\315:g\342\3308\300\315\021\272t1=\272.\025\0339\030\003\2778\\j\2508\254\246\2309\311\343\035:}x\2049\344\273\226\271\003D\276:s\377\030:+\315\3668qI,\272\312\203\024:\025\353\303:\366M\3059l\036r\270W\321\035:vA\264:`sk:\226`\027:0\25529)^\2379\021\353N\272\023\206h9v\254\202\266\220\255\t\272\024n\036\272\275\356\210\2720\005\261\271\213\010h9s\332\022\270Qfg\272\335\236\\\271p2\014\272MS\037\267\324(\020\272\202\200\3469r\317\207\271\007\271\321\271? \2778\362\014\210:\377D+\272\252\240J\270\226\241\n:Y^\010\272\326*\340:/\000\350:\021\302\000\272\177\234\3229`\220\330\267\036~a\267*\332\0309\223Y\243:\002`\0219\rK\372\271\350\023\225:\034\211\003:\373\240(\272,Pz:\210\236[9KP\002:D\224/\272\220\3602:5A\225\271%\365\250\271;\323\3509H\304\002\266\2343\250\272\350\320\256\271\252\333\217\271\365\212Y9_\304\224\272\204(\361\270O3Y:\021\036\034:\331\347\302\271/6\3669\230:\020;KRL:\245;\313\271\247\376\035\271\214m\23794C\311:\212\177\t\272/\335\32093\351<:\216\324\010:\020\343\004\272G\004\0019o?\2629\335\326\204:5F\2179\231a\235\271F\257\241\271x\004\210\270R\353\310\271\347\314\223\272\2258\3439\263\274\241\272\253\377\036:\302^\216\272\324\357\244\272\363y\2148q\373\206:r)b5d\377V:\203\t\005:>xC:,t\0359\013\310(\272\230\204\027\270\006 J:k\004\2018:\251O:c\262\223\270f\352\2769\003\303\0308\262\211\020:\266\350\033:\303!\2178\030/\205\272U\331\2369\217,!\271\271Zb:\355\232):\300\324r\272\247>\363\271\033\242\262\271\231X\377\270\201\005\301\271\337f\0319\211\032:\271\351\035\301\272\321\002\01392\246\261:\212tk9\227z(9\342\016L\271_\326\3479\004ps:l\370\013:\243\\&\270k\206\264\271\316\331b\272\242\217d:\203\177\233\271\361P\344:Q\215\3308\211O\210\272a\217,:\021\002\005\271\223+\225\272\332;49!\226C\272\303\355b\2723&):S\366{\272i\021\0048\300\2423:j\26527<\312\230\271T\222\356\271\004\017\2159\370\226\3617.|f\271\352u\314\267/\267\204\272\245\307\2469bn\263\272F\350\2277\366\262\215\272\266e\2168j\200\340\267\367\014\005\272R\006\244\270\036\275,9\272\320\267\272\332\242\n9p\235\030:\325\033\2419\353-\261:\272\201\211\270\022Z=\2720\233c9\362\317\3249\276%\223:RYt\272-\277j9\236\316W7WF\2649Y5\24384\026\353\271oY\262\270\225\222\024\272R\020\226\271zg\211\272kx}\267\031\357\226\271\177$}7 \203u:\367\323@\272~\3702\272ZW\303\271\305\361\2478\024k\020:\177\2216:\214\355V\270\264\314H:WgK:\355\214\301\271\270\006\2047D\003\270\272\234s\202\270\016\304~:\212ym9Q\201\260:\203\010/:\"\353\314\271Q\260\001\271\013\260@\272/B\2509\323\023s\272\306\256 \271\304\271<\272\372\036}:\3674\023\272hO\000:\242\361\2239\317\260>\272f\354\335\271\247cW\272\263.\036:\327\362\020\271\000\276|9\265\275x\267\225SH\270\002\220\234:8\302W9=P\033\272\366\245 \272\340\010\007\271J\356r9(E\2369\204\314\200\2729\363\022:l/\221\272oz?\272c\221\324\271LU\221:o\207\204\271\037\275\3639R\034\311\271\005\206\304\270\031+8:\247D\022\272\352\240\010:D\241X\2725\360\262\272\363\"\301\271\354\220m:\326\301\213\271\246\251\2049\2358\327\270O\220Z8I\207\276\272f\020\257\271\343\221\346\271ioa\270\237\341\306\271\216\341k\272c0+:\025L\226\270b\234j:\275r\2179<\307\036:70}:\017if\271X\225\005\272Z!\233:;\316.:\226O\2069:\267e9T\014\204\270\323}Y\272\363DR9\265\331\014;r\223\3008\351\203\231:\344\3761:MN\3618\006\362\0328\307y\204\272{]\201\271\372\213\221\271p\350\23590\263\001:m\020\263\271\342\332\357\270\262\262\237:H\252/:\023X\302\272Kb\211:\240\371\300:w\021\332\271\231\035m\271\200\272\3349\233\32499\t\365\303\270\345U^8P\235\r:X\227\215\272o\237\007\272\311\252\310\271+\332N8\326\034I:\367\366\3039\023\016<:\321\024\2319v6>:O\246\224\271U\n\2009\252?\n\270gV[:\222y,:\361Ba\271{\276\2439\216W\3148\0235::\323\201\2328\245E\3107\374\235\236\271\331\251\213\271\311fO\271\373\21219HCO:\350L\002\272\220q\013\272\324\0248\272n\"\024\272\337\242\034:\306p\2329\252\210\345\267\2175R\272Q\213n\2700A\336\271f\027|\272\007\365O:\212%\3379Z\222\213:\244n\367\2719e\2079aw7\272\003V\230\271\272\206\020\272f5\217\271D\243\251\271\374k\247:\036\025T\272Zt\"\271v\376}\267\027~\2119e\2400\272\251\350\326:\2275Q\270\254\354\271\272\327\030\206:\223E\207\272g\3708:D\342q9\331\315\016:m\235)\272\326\271\213\272\362UB\272C\260\3459\212:\021\272h\327\230:\223\255\20386\256r\272\267\035\372\271d!^:\201\342587S\013:\014\033S\272\217\3233\272\376\312\203:)\314\202\272\340\202\2769\250;59!4.:9\217\357\271N>\313\271\3467!:\233\r\334\272\236\334\n:\331x\'\272]\252\020\271\376\352\360\270R\010\2439\325n\2019\225\367@\272DU~9u\273\242\271;\000\0309\236lF9\014\207c9`\2736:d\030\240\272Y\333\3049\317\032\2559z\244\213\270\276\271\2517g7\200:n\n\013\272\253\274\224\271\252\210\020:K\271\017:\016.\212:P\016\3378\321\230\231:\327L\002\271\020\010\305\271\367\002\357\271\323\261\027:+\213W9Q9v\271{\244\363\271!\030$\272E\271\3159P_8\270T\347\3316\262,\314\271\222\2013:S\242\026\271\317\255y:-\252S\271k\370\033\271v-\337\272\255\00059\006\033\2729\372\023\34798\361G\270\r\350\212:B\311\0149\231C\037\272\216\371\205\272\"\302\0069\314\311M:\365\023\n9\313\365i\271t\214P\271wd`\272\237\037\025\271\300\241]9\323\367\275:\347:\256\271\357\330\315\271\326HE\271\323\017\037\270v\242\377\270E\36077\343\304\205:-\020\2348Kyw9\310\025\210:\334\023\216:\325\006\r\272\204\177\':S\306\030\270\271\275-\272\201d\323\271\335#u:\205\325A9s0\215:Mu\252\271\273[\2159L\224O\271\362R\3148\334\250R7{`R\271oBf\272\215\272\272:\356\267\004:\371[\231\272\305\3371:\222\312\2639\002G\347:\233\2663\272\263\226\206\270_Ya\271\204^\261\271\375\004\272\271\330\233^\272\356\330\"\271-\343\216:\312;\024\271\241\306Z\270\241z\017\272 \326W\272\351\007\2239\225m!\272\210Q\0177\255\324\177:\213\t\005\272XY\233\271/\223\211\271\243\257\3619\274\252r:\243\007\203:\000\363a:\246\322K\267\226\270\24597\343\235\271%4\244\266<t{9\231\370\332\271\340?\3409\232C\003:O\220\006\271\267Q&\2676\240k:\302\201\0339\031\n\3037\345\233\310\266\262tV\272\227\322\367\270\342\256\014\272\242\016L:\t!k:\266\264L\271\r\260T:[W@:\t\244x8L\016 9L\320K:7\211\3519y/P8\277\264\010:\252\306^\272\325#\227:n\246D:+-\024\272\332r69\213\246k\272\276\301\214:\035X\2026\327\350 :\244\252M\271\262K\3369\236;t\271\336\310#7J\277\2317\336\304\3769#gK\272y-79Z\026\n\272\336\030r9\211u\2546\3744\301\271\373\206H:w\213\241:\305V\200:\214\016|9-\366\2466\345\253s:\272>\001:\304-l\271\260iV9\351\207\324\271!H\357\271\'K\2008\005\002\301\271}@9\272c\274l9j\322\220\272/\374\2327N\177\273\271\326K\213\272\362\"@\270_\342\237\272{\027\0209D\263\010:;\373K9\223\02789\351\362g:(\030}9\212\250p9f\221\360\271\321 ,\272\025\307\2329#+W:\376\251\200:\221\361\2778E\257b\272^N\000\2710E\206\270\356+\210\271\2061x\271\321W\3159p\2052:\177\367\2208c\270\346\271\362b\2058\036\201\224:\034<\004:P\305m9(~\241\271\307\231\2659\211\205V9lj/:\374\373\2619\211\245\2168\204\007+:0\375P9\200;\3239\007\036\376\271\037\251\0068>-t9\216\001\3269\255\355\2419\000\267|:_5\3369\001\277\247:\2517\205\271\260\375\037:6\313\267\271h\352\2419f5\2319\271\"k:\231G :\":;:\200\014+\271\363^\3138\305\351\336\270\025\0051:\017rS\272\347\357\020\272\374!C:2Z\3537\327\316\3277\317B\t:g,\2469Mb\207\272\275j\236\272\315\020.:o\353\201:~fv:\302\353J\272\350f19\202B\261\267{\26439\314`\035\272\025)\022\272\277>c8I\306\t:\035\277v\272\005\341\r9\237\336,:<L\3649\356o_\272\357\237\354:\nG\213\267\3452\0339\322\246\353\271s;=\272|\244\2226l\355\"\272\333c\306\272\022\227\3448\036\375O\272c\221\305\270\356\315\264\271\261VH9\221(\332\271\010\005\3739E\007\2749\273\252t:\346>Y\271\2357\3109\253\254o\271\333\262\0179\250\236\252:\327\252\3216\357Y\243\271~\255C\2722\"s:\222\333\250:B>(:\353\266\3769tb\242:4\355\364\271\213m>\271_\334w\272\004\030\021:\360n\2509\n:p\272\026aB\2717\'h\267\"K\000:\315\003x\272\340_\325\270\375\271\0329L\"\2228[\237\20197^3\272\004,\001:\311\226\3708\017-\333\272\260\245(\271\361\036\213\271\256j\2059a\245\2409\026\007\3418y\233p9$$\265\271\247\205#\272\211w#\271\310\t[9+\274\014\272\333\310\007:C&\327\271\223\210M\272 \'\037:\265N\303\271\351\024N:\336>\2379iH\2339\250e\202\271\262\337+9\275\350G\272\007kv:T:\2628\205\257\0079\271\215\311\271\342\223\2319%\327x5\244\337\302\270\222\256\035\272\217\322D9?K\0318-u\3109\344\220\210:\354\330\3039\273\020;\272\0350\2538\366\010\0109\233,\207\271\307b\200:\024(\204:\332pr96\005\3616\211Xb:\203\361@\2714nX\271@U\250\271\2514\274\267T\017*\272u\001\031:\212]\3548\341+\025:o\2027:~\370\302\271\326\226\2578\205[a9\265F\3239\t\005\370\271\374.\033\272\037\220\2178^\r\270\271j\244\177\271o\3702:\340\304\255\271\257\240\2338\310\020\216:\254#\2119\265<\035:\221\357\246\270\024\316a9L\025\355\271_\375\212\271~4\0168:\323\2139"
      }
    }
  }
}
node {
  name: "local/action//w"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/action//w/Assign"
  op: "Assign"
  input: "local/action//w"
  input: "local/action//w/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/action//w/read"
  op: "Identity"
  input: "local/action//w"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/action//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/action//b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/action//b/Assign"
  op: "Assign"
  input: "local/action//b"
  input: "local/action//b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/action//b/read"
  op: "Identity"
  input: "local/action//b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul"
  op: "MatMul"
  input: "local/Reshape_3"
  input: "local/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add"
  op: "Add"
  input: "local/MatMul"
  input: "local/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/value//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\262L\006\275=\nC=\256\302\234\274\314\240\000=\340\276%\2743Ov\275\037G\271=\004\315m\275\212\000\271<\265j\200\275R\353\270:(T\314=\300\027\330=\271\272}=\366 $=~\334\223=\007\311&=\227\230t=\375\260\215=\312\t\251\273\217\025\263=@=\363<\007\250q=)\301\250<\001]\224\274\302\333\000\276\027-\264\274\233\335\201=\370\317*\275\235\274\364<U\305\303\275\r\370\244=j\251\005\275\232*5\275\024\024}<y\255\001=;\224\376= #\t\275\231J\206\275\032>\263\275&\202\036=\274\031+=\3322\257=Y\350\234\275KM\274\273\367\004\210=\207V\370<\244\362\020\274`\276\244\267\005\351t=k\032\233;\323\267\216<4\222\206\274U\001\233\275\260wF\274\n\005-\275\3245\261\275\377gL=\233\235^<\212\312\346=_B\214\272 \206\206=\373\315a\275a\253(=x\277)=\3043\247\275>G\003=\031\020\037=\235@/=\310Q\035\275y\037\201<\233\3766\274H\224\234\275k;-=\327\323\272\275\257\362\325\274(@\215=\241P\000=\304\245\357<\213o\030\274\332\002\234=\261\004\310<\3440\273;\010\303s\275\205\354\260\275\213\372\360=\177\315\250<\027Zw<\314\201\205\275\341\004\036<kUQ\275\210:\035\275X\240\336\274\031\214\025=\205\351\217\275\374,\233\273\007\030\017<\335Z,<0\033s=U\032\317\273\375\304\035\275\345s.\275*o\225\275\267x\304=i\316b\275\320M\304\274\351\227<\276l\212\035\275\207G\005\275CQ\355;\266\203\203\275\035v&\275~\262\200=\247\363\203\275%\361N=y\215\205\275\267G\006>\263\355\014\275#%\220=\036:\372<\337\357\'=8z\240=Z\232\264\275\265 4=\374V\312=?B$;\216N\204<\236\201(\271\327<\366;o\251\004\276`\2553\274\3211\366<\2263\r>\204?\200\275\037w\332\274qCB=a+\241<0\242\350=\264@)\275\020\235\237=\241<\204\275\354\316\316;\240\245]=\021\303\002\2751(W\275UG\330=\321\3001\275\326cC<\341ob=\266(s\274\332\310U\275F4\'\275\202k\325=\371\335@=T\270\n\275\252\034\t\274Qn\357<\300\256g=\305f\251\273\225\364!\275\252\212\220\275%\256\014<\360l\034\275\313[p\274\247\'\211\273\007}E\275,\261\214\274\212\242\225\275\264z\"\271\251V\013\275OMU\274)F=;\\\361\253\274\341\303\341\275\304%\236=\260\213\360<\\\206o\271\0230\361\275\244\205\213\275\325\206\306=\363\224w=\263~\260=\3340\005=\273\022\016>vE\227<\353\363\262=\234\000\267\275\2079\205<b\352z;\277\002x=\230\205\216\274\\\\t<\202\257\230\274\\<\312=\022\353g\273\216\n\022<>\t\244\273\372\365+\274\320a\0029\243\255B>\006cW=1;\271\275\2664\235<\277{\263\275\327\021\210\275J\220\211=\253\300\332\274=l\222\275b\020\316=J>*=\331\332\256\275\337\026\220\275\375p\010\275\212\352\304=2\0170>\343\261\200=\224\033-=\254\330%\275\315;;\275\254\314\362\275\023\314\234=\355\345\253\275.\261\003\276\353B\357\274\204\223\267\2755:!<\224\006\377\274vQ1=\236\255\206\275\316\217\307\2743Uo\274\003:\177\2732\333T\274\226A\005\276\314\244Y\275\275yx;\366a\204\275\346\335\242\275dC\252<\370\333^\274\310\227\272\275\256%W=\'\320\177\275\316\3634\272\032\377\206\275\374\321\317=\274\277\236<#\326\257\275\026.\003\276\324Y\355\275\307\221\033\274\205U\214\275\024\223\226\275\r\215\306=.\333x\274\247~\300\274"
      }
    }
  }
}
node {
  name: "local/value//w"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/value//w/Assign"
  op: "Assign"
  input: "local/value//w"
  input: "local/value//w/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/value//w/read"
  op: "Identity"
  input: "local/value//w"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/value//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/value//b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/value//b/Assign"
  op: "Assign"
  input: "local/value//b"
  input: "local/value//b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/value//b/read"
  op: "Identity"
  input: "local/value//b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_1"
  op: "MatMul"
  input: "local/Reshape_3"
  input: "local/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_1"
  op: "Add"
  input: "local/MatMul_1"
  input: "local/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_4/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/Reshape_4"
  op: "Reshape"
  input: "local/add_1"
  input: "local/Reshape_4/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/Max/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/Max"
  op: "Max"
  input: "local/add"
  input: "local/Max/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "local/sub"
  op: "Sub"
  input: "local/add"
  input: "local/Max"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/multinomial/Multinomial/num_samples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/multinomial/Multinomial"
  op: "Multinomial"
  input: "local/sub"
  input: "local/multinomial/Multinomial/num_samples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1052
    }
  }
}
node {
  name: "local/Squeeze"
  op: "Squeeze"
  input: "local/multinomial/Multinomial"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "local/one_hot/on_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "local/one_hot/off_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/one_hot/depth"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "local/one_hot"
  op: "OneHot"
  input: "local/Squeeze"
  input: "local/one_hot/depth"
  input: "local/one_hot/on_value"
  input: "local/one_hot/off_value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "local/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_2"
  op: "StridedSlice"
  input: "local/one_hot"
  input: "local/strided_slice_2/stack"
  input: "local/strided_slice_2/stack_1"
  input: "local/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/conv2d_1_1/Conv2D"
  op: "Conv2D"
  input: "local/off_policy_state_in_pl_external_pl"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_1_1/add"
  op: "Add"
  input: "local/conv2d_1_1/Conv2D"
  input: "local/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_4"
  op: "Elu"
  input: "local/conv2d_1_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2_1/Conv2D"
  op: "Conv2D"
  input: "local/Elu_4"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_2_1/add"
  op: "Add"
  input: "local/conv2d_2_1/Conv2D"
  input: "local/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_5"
  op: "Elu"
  input: "local/conv2d_2_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3_1/Conv2D"
  op: "Conv2D"
  input: "local/Elu_5"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_3_1/add"
  op: "Add"
  input: "local/conv2d_3_1/Conv2D"
  input: "local/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_6"
  op: "Elu"
  input: "local/conv2d_3_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4_1/Conv2D"
  op: "Conv2D"
  input: "local/Elu_6"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_4_1/add"
  op: "Add"
  input: "local/conv2d_4_1/Conv2D"
  input: "local/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_7"
  op: "Elu"
  input: "local/conv2d_4_1/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Shape_1"
  op: "Shape"
  input: "local/Elu_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/strided_slice_3/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/strided_slice_3/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_3/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_3"
  op: "StridedSlice"
  input: "local/Shape_1"
  input: "local/strided_slice_3/stack"
  input: "local/strided_slice_3/stack_1"
  input: "local/strided_slice_3/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/truediv_1/Cast"
  op: "Cast"
  input: "local/strided_slice_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/truediv_1/Cast_1"
  op: "Cast"
  input: "local/off_policy_batch_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/truediv_1"
  op: "RealDiv"
  input: "local/truediv_1/Cast"
  input: "local/truediv_1/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/Cast_1"
  op: "Cast"
  input: "local/truediv_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/Reshape_5/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "local/Reshape_5/shape"
  op: "Pack"
  input: "local/off_policy_batch_size"
  input: "local/Cast_1"
  input: "local/Reshape_5/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_5"
  op: "Reshape"
  input: "local/off_policy_action_reward_in_pl"
  input: "local/Reshape_5/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_6/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "local/Reshape_6/shape"
  op: "Pack"
  input: "local/off_policy_batch_size"
  input: "local/Cast_1"
  input: "local/Reshape_6/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_6"
  op: "Reshape"
  input: "local/Elu_7"
  input: "local/Reshape_6/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_7/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 150
      }
    }
  }
}
node {
  name: "local/Reshape_7/shape"
  op: "Pack"
  input: "local/off_policy_batch_size"
  input: "local/Cast_1"
  input: "local/Reshape_7/shape/2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_7"
  op: "Reshape"
  input: "local/off_policy_state_in_pl_internal_pl"
  input: "local/Reshape_7/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "local/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/concat_1"
  op: "ConcatV2"
  input: "local/Reshape_6"
  input: "local/Reshape_5"
  input: "local/Reshape_7"
  input: "local/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/Shape"
  op: "Shape"
  input: "local/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm_1/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/strided_slice"
  op: "StridedSlice"
  input: "local/lstm_1/Shape"
  input: "local/lstm_1/strided_slice/stack"
  input: "local/lstm_1/strided_slice/stack_1"
  input: "local/lstm_1/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm_1/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "local/lstm_1/strided_slice"
  input: "local/lstm_1/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_1"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_4"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_5"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/concat_1"
  input: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "local/lstm_1/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm_1/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/range"
  op: "Range"
  input: "local/lstm_1/range/start"
  input: "local/lstm_1/Rank"
  input: "local/lstm_1/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/concat/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/lstm_1/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/concat"
  op: "ConcatV2"
  input: "local/lstm_1/concat/values_0"
  input: "local/lstm_1/range"
  input: "local/lstm_1/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/transpose"
  op: "Transpose"
  input: "local/concat_1"
  input: "local/lstm_1/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/sequence_length"
  op: "Identity"
  input: "local/off_policy_sequence_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Shape"
  op: "Shape"
  input: "local/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice"
  op: "StridedSlice"
  input: "local/lstm_1/rnn/Shape"
  input: "local/lstm_1/rnn/strided_slice/stack"
  input: "local/lstm_1/rnn/strided_slice/stack_1"
  input: "local/lstm_1/rnn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm_1/rnn/Shape_1"
  op: "Shape"
  input: "local/lstm_1/sequence_length"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/rnn/stack"
  op: "Pack"
  input: "local/lstm_1/rnn/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/lstm_1/rnn/Equal"
  op: "Equal"
  input: "local/lstm_1/rnn/Shape_1"
  input: "local/lstm_1/rnn/stack"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/All"
  op: "All"
  input: "local/lstm_1/rnn/Equal"
  input: "local/lstm_1/rnn/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm_1/rnn/Assert/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor local/lstm_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Assert/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Assert/Assert/data_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor local/lstm_1/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Assert/Assert/data_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Assert/Assert"
  op: "Assert"
  input: "local/lstm_1/rnn/All"
  input: "local/lstm_1/rnn/Assert/Assert/data_0"
  input: "local/lstm_1/rnn/stack"
  input: "local/lstm_1/rnn/Assert/Assert/data_2"
  input: "local/lstm_1/rnn/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "local/lstm_1/rnn/CheckSeqLen"
  op: "Identity"
  input: "local/lstm_1/sequence_length"
  input: "^local/lstm_1/rnn/Assert/Assert"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Shape_2"
  op: "Shape"
  input: "local/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_1"
  op: "StridedSlice"
  input: "local/lstm_1/rnn/Shape_2"
  input: "local/lstm_1/rnn/strided_slice_1/stack"
  input: "local/lstm_1/rnn/strided_slice_1/stack_1"
  input: "local/lstm_1/rnn/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm_1/rnn/Shape_3"
  op: "Shape"
  input: "local/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/strided_slice_2"
  op: "StridedSlice"
  input: "local/lstm_1/rnn/Shape_3"
  input: "local/lstm_1/rnn/strided_slice_2/stack"
  input: "local/lstm_1/rnn/strided_slice_2/stack_1"
  input: "local/lstm_1/rnn/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm_1/rnn/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/ExpandDims"
  op: "ExpandDims"
  input: "local/lstm_1/rnn/strided_slice_2"
  input: "local/lstm_1/rnn/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/concat"
  op: "ConcatV2"
  input: "local/lstm_1/rnn/ExpandDims"
  input: "local/lstm_1/rnn/Const_1"
  input: "local/lstm_1/rnn/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/zeros"
  op: "Fill"
  input: "local/lstm_1/rnn/concat"
  input: "local/lstm_1/rnn/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Rank"
  op: "Rank"
  input: "local/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range"
  op: "Range"
  input: "local/lstm_1/rnn/range/start"
  input: "local/lstm_1/rnn/Rank"
  input: "local/lstm_1/rnn/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Min"
  op: "Min"
  input: "local/lstm_1/rnn/CheckSeqLen"
  input: "local/lstm_1/rnn/range"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm_1/rnn/Rank_1"
  op: "Rank"
  input: "local/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_1/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_1/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_1"
  op: "Range"
  input: "local/lstm_1/rnn/range_1/start"
  input: "local/lstm_1/rnn/Rank_1"
  input: "local/lstm_1/rnn/range_1/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Max"
  op: "Max"
  input: "local/lstm_1/rnn/CheckSeqLen"
  input: "local/lstm_1/rnn/range_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm_1/rnn/time"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "local/lstm_1/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "local/lstm_1/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "local/lstm_1/rnn/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "local/lstm_1/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "local/lstm_1/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "local/lstm_1/rnn/TensorArrayUnstack/Shape"
  input: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "local/lstm_1/rnn/TensorArrayUnstack/range/start"
  input: "local/lstm_1/rnn/TensorArrayUnstack/strided_slice"
  input: "local/lstm_1/rnn/TensorArrayUnstack/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "local/lstm_1/rnn/TensorArray_1"
  input: "local/lstm_1/rnn/TensorArrayUnstack/range"
  input: "local/lstm_1/transpose"
  input: "local/lstm_1/rnn/TensorArray_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/time"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Enter_1"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArray:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Enter_2"
  op: "Enter"
  input: "local/lstm_1/local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_c_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Enter_3"
  op: "Enter"
  input: "local/lstm_1/local/lstm_1/MultiRNNCellZeroState_1/BasicLSTMCellZeroState/zeros_1_h_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Merge"
  op: "Merge"
  input: "local/lstm_1/rnn/while/Enter"
  input: "local/lstm_1/rnn/while/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Merge_1"
  op: "Merge"
  input: "local/lstm_1/rnn/while/Enter_1"
  input: "local/lstm_1/rnn/while/NextIteration_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Merge_2"
  op: "Merge"
  input: "local/lstm_1/rnn/while/Enter_2"
  input: "local/lstm_1/rnn/while/NextIteration_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Merge_3"
  op: "Merge"
  input: "local/lstm_1/rnn/while/Enter_3"
  input: "local/lstm_1/rnn/while/NextIteration_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Less/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/strided_slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Less"
  op: "Less"
  input: "local/lstm_1/rnn/while/Merge"
  input: "local/lstm_1/rnn/while/Less/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/LoopCond"
  op: "LoopCond"
  input: "local/lstm_1/rnn/while/Less"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Switch"
  op: "Switch"
  input: "local/lstm_1/rnn/while/Merge"
  input: "local/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Switch_1"
  op: "Switch"
  input: "local/lstm_1/rnn/while/Merge_1"
  input: "local/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Switch_2"
  op: "Switch"
  input: "local/lstm_1/rnn/while/Merge_2"
  input: "local/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Switch_3"
  op: "Switch"
  input: "local/lstm_1/rnn/while/Merge_3"
  input: "local/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Identity"
  op: "Identity"
  input: "local/lstm_1/rnn/while/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Identity_1"
  op: "Identity"
  input: "local/lstm_1/rnn/while/Switch_1:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Identity_2"
  op: "Identity"
  input: "local/lstm_1/rnn/while/Switch_2:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Identity_3"
  op: "Identity"
  input: "local/lstm_1/rnn/while/Switch_3:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "local/lstm_1/rnn/while/TensorArrayReadV3"
  input: "local/lstm_1/rnn/while/Identity_3"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  op: "Add"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  op: "Mul"
  input: "local/lstm_1/rnn/while/Identity_2"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  op: "Add"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/GreaterEqual/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/CheckSeqLen"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/GreaterEqual"
  op: "GreaterEqual"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Select/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Select"
  op: "Select"
  input: "local/lstm_1/rnn/while/GreaterEqual"
  input: "local/lstm_1/rnn/while/Select/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Select_1"
  op: "Select"
  input: "local/lstm_1/rnn/while/GreaterEqual_1"
  input: "local/lstm_1/rnn/while/Identity_2"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Select_2"
  op: "Select"
  input: "local/lstm_1/rnn/while/GreaterEqual_2"
  input: "local/lstm_1/rnn/while/Identity_3"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/Select"
  input: "local/lstm_1/rnn/while/Identity_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/add/y"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/add"
  op: "Add"
  input: "local/lstm_1/rnn/while/Identity"
  input: "local/lstm_1/rnn/while/add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/NextIteration"
  op: "NextIteration"
  input: "local/lstm_1/rnn/while/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "local/lstm_1/rnn/while/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "local/lstm_1/rnn/while/Select_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Exit"
  op: "Exit"
  input: "local/lstm_1/rnn/while/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Exit_1"
  op: "Exit"
  input: "local/lstm_1/rnn/while/Switch_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Exit_2"
  op: "Exit"
  input: "local/lstm_1/rnn/while/Switch_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/while/Exit_3"
  op: "Exit"
  input: "local/lstm_1/rnn/while/Switch_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "local/lstm_1/rnn/TensorArray"
  input: "local/lstm_1/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayStack/range"
  op: "Range"
  input: "local/lstm_1/rnn/TensorArrayStack/range/start"
  input: "local/lstm_1/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "local/lstm_1/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "local/lstm_1/rnn/TensorArray"
  input: "local/lstm_1/rnn/TensorArrayStack/range"
  input: "local/lstm_1/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Const_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/Rank_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_2/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_2/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/range_2"
  op: "Range"
  input: "local/lstm_1/rnn/range_2/start"
  input: "local/lstm_1/rnn/Rank_2"
  input: "local/lstm_1/rnn/range_2/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/concat_1/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/concat_1"
  op: "ConcatV2"
  input: "local/lstm_1/rnn/concat_1/values_0"
  input: "local/lstm_1/rnn/range_2"
  input: "local/lstm_1/rnn/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/lstm_1/rnn/transpose"
  op: "Transpose"
  input: "local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "local/lstm_1/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/strided_slice_4/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/strided_slice_4/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_4/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/strided_slice_4"
  op: "StridedSlice"
  input: "local/Shape_1"
  input: "local/strided_slice_4/stack"
  input: "local/strided_slice_4/stack_1"
  input: "local/strided_slice_4/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/Reshape_8/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "local/Reshape_8/shape"
  op: "Pack"
  input: "local/strided_slice_4"
  input: "local/Reshape_8/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_8"
  op: "Reshape"
  input: "local/lstm_1/rnn/transpose"
  input: "local/Reshape_8/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_2"
  op: "MatMul"
  input: "local/Reshape_8"
  input: "local/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_2"
  op: "Add"
  input: "local/MatMul_2"
  input: "local/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_3"
  op: "MatMul"
  input: "local/Reshape_8"
  input: "local/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_3"
  op: "Add"
  input: "local/MatMul_3"
  input: "local/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_9/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/Reshape_9"
  op: "Reshape"
  input: "local/add_3"
  input: "local/Reshape_9/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "local/Max_1/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/Max_1"
  op: "Max"
  input: "local/add_2"
  input: "local/Max_1/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "local/sub_1"
  op: "Sub"
  input: "local/add_2"
  input: "local/Max_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/multinomial_1/Multinomial/num_samples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/multinomial_1/Multinomial"
  op: "Multinomial"
  input: "local/sub_1"
  input: "local/multinomial_1/Multinomial/num_samples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1292
    }
  }
}
node {
  name: "local/Squeeze_1"
  op: "Squeeze"
  input: "local/multinomial_1/Multinomial"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "local/one_hot_1/on_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "local/one_hot_1/off_value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/one_hot_1/depth"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "local/one_hot_1"
  op: "OneHot"
  input: "local/Squeeze_1"
  input: "local/one_hot_1/depth"
  input: "local/one_hot_1/on_value"
  input: "local/one_hot_1/off_value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "local/strided_slice_5/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_5/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_5/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_5"
  op: "StridedSlice"
  input: "local/one_hot_1"
  input: "local/strided_slice_5/stack"
  input: "local/strided_slice_5/stack_1"
  input: "local/strided_slice_5/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/pc_change_est_state_in"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "local/pc_change_est_last_state_in"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "local/Sub"
  op: "Sub"
  input: "local/pc_change_est_state_in"
  input: "local/pc_change_est_last_state_in"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/Abs"
  op: "Abs"
  input: "local/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/ExpandDims"
  op: "ExpandDims"
  input: "local/Abs"
  input: "local/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/strided_slice_6/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_6/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_6/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "local/strided_slice_6"
  op: "StridedSlice"
  input: "local/ExpandDims"
  input: "local/strided_slice_6/stack"
  input: "local/strided_slice_6/stack_1"
  input: "local/strided_slice_6/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Mean/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/Mean"
  op: "Mean"
  input: "local/strided_slice_6"
  input: "local/Mean/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "local/MaxPool"
  op: "MaxPool"
  input: "local/Mean"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "local/pc_dense//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
        tensor_content: "\361\321 :\036PZ:8\024\2648\177\234\004:|d\277\271\035r\210\272\027b\205\272\351\017\004:\245\221\356\270Z\210\213\270O\257\006;Q\242S\272\313Y\2038\365,\347\271\257J5:=\211\221:\2343!\271V&\'\272\\\334\\\270\243\037\334\271\231S\337\271\273\226\3049N\203E\271\350B\013\272\216\317o\272\321\217S\272\025\347\243\272(\010\021:r\034Q\272\250\36728\257\177b\272\207\031M\271\263\2159\271\023\255\240\272\266^ :\211/\301:gmf:<\327\3759sV\262\271v\301F9\312\332H9\332\224.:\330\246\336\271\352\016U:\305\207\253\271\342\222Y:\016\020\357\271\220\312\024\272\260\334\023:\031M$:\234\006(\271X\335\201\272\250\006\024\272\032\273\277\272\016\315]\271\023\370\t\271\225\307\2449y\231\2667\016\211\2479;\312\031:0c6\271K\211\0169b\320\2559\215W\3679\331<7:BVc\272\t(\3418\"\334\257\2679\"\266:k\365\3729\257oS\272\376\037%9\243\034\324\271\367\257l\271\334\310\244\270WY\371\272 \365S:B^S:V\320\260\272.\000\3169\345\274\265:\347ZS\272\210K\201\271\264\370\2119\217\267.\271\246\265/\270j\363\377\267i\353\351\271\341\211\2479y\317?8\317\337\022:a5G\272\342\032/\271\306(S9\341\363\2148\\m\003\271a\\\274\271\306\237\007:\205x\'\272\025;t9\200J\3169Sy\031:\272\326k:\351\021\335\271\016\352Q\272\303\300\2409s\272j:\216\366\005\272ey\236\270\353\305\331\271\222L\r\270\232#\2009H\231\r:\206{\207:\246i\271\271\337\r\200\272\206j\3519=\353\207:\251\372J\272\023\212\302\270\250\334M9\005U\204\266\261Rz\272R\332\n9\236Dq\272\032Z7\270[\3123\272\353\024\005:\36708\272\010\010\270:F\\x:\352\214\\\270+\010\3518 \276\203\272\004\214\3379gX\2629\"\224\2219\251\304\000\271w\375\000\272y\267\244\271\302\031\245:\233\220\023:84Z8|7\302\271\250\331\0069\027\021\260\271\010\027\316\271\031)!\272+\244\304\271=\353t\271R\031\221\266\233\375\'\272\321\365\2569C\320}\270\351\304\322\270\226[\2658\\Q\3369B*A:\274\325\313\271\207_\305\271\351{\3219L\002\254\271s\033\254\271L\232\267\272\031\315\035:\243_w\272\251\350\226\270\326\364M:\270\315\3108\344Z#:\203\035\205:\315\347\207\272Wz\0109\001\356\243\272Oe\3569\340\336\004\272\300$\2579h\231 :\010\320\2549\313=\023\272!\350\220\272\034\t\367\271.\020K:\345\363\3759\354@4\271\261y\256\271F\344\236\266\337p:9y\023\207\270\360\213\2419(\224@8Zy\3379Ji\2019\376gT\272\024y%\272\351\300\3659\357E97++\201\271\204\017\355\271\001\226\202\272\273\330\2709\373\340\3129\307?z:&aC:.+\2219\372\312*:`\370H9\325y\363\271\346\232\3369\334P\354\270\225\254\2719?\357O:\267b\3069\317\236\206\270\310\010J\272Tx\227\271}\351\236\272\026!\3629t\267\2559*_Y\270%8\2259t\203\235\270n7\217\271PH.\271F\237\30093\'\253\272\301\236R:\332\275::\217}C9\360\310\000\272\22078\272T\373\026\271(\022\240\270\260\241\205\272\246)\242\270\222T[\272Sp\3277\031\374\204\272\001U\313\271\363\003\246:}\302\037:\203e\002\2720\277\234\272d\227D\272W\232:\271\234%>\272\265/|:\320299&\2477\271\222\246\236\271\226\212\212\272l/\232:\354I\201\272\350\337\206:\372X\2449\327\320\322\272\252T\204:\024\266\237\272\022\264\264\271(\325V9X\317\003:K\245\031:\273\374\250\271\321\262{9d&\200\271\340N\026\272Dn\215:\357[\005\271n\367\225:\373,a9\033\014\263\270\240J\2208\261\306\3038\252\3662\272|q\001\267\311\212.:\262~\010:r\217\255\272\014\346\006:\232\326E\271\377\311\3648\232\330\352\271\334\013\2458\272_\3077\216\215\003\272\313\370::q^\023:\010C\241\272U.2:\206\215\265:\033g\371\271\227\330Q:X\324\3366\315\3530\271\327\214\3459\331\342+:\315k\206\272ta\005\272l\207\377\271#\237\035:\322\2476:\'\337G9\002l\2409\272K\\98\266\032:\320\270\006\272+/\365\271\200\203\3679\334z\\\272n\263\306\266L\272\273:\260\340\n\273?\214T\272\344\024\001\272)\320@:\376\323\213\272\201\341n9\305\250\2509\353e\017:8PR:\213\274\270:\025H\3609uL\"\272Vi|\271\203\313\3439\177\301\3139\241#\002\271\302x\246\271pd\2779\306\247{\271%\367\244\272\223Y\235:\231/\271\271\353\350\232:a,\241\272\254\364s9JG\220\271\013\r=:\310\"o\271^0 ::\315\256:\013\210N:\210J0\272\2009\n\272C24:\231+A\272\223\336\261\272\205w\254\266\272\026\t:\020\317\r:\333\362\037\272p\235\240\271\000\022.9C\210\3449\244z\2419\314\226\251\271\246m\033\272\"\353\3449R\276\235:\317\260\213\271\347\272\2336{m\243\271>~M:\346\001\322\2700\nO\272\336\023T:\227\032\3369%\235\260\270\307\032C\271g\2132\271S\036\235:5\376w\267\221|\2209\320&.\272\006\226\313\271\266\320\2549_,\261\271\36526:\356\316\22280G\034\272\302\032\\\272\355_l:`\nd\271\200L\3379\271\311\030\272\347Q\0109O\325\016\272 X,\272\265\31309\216`\3369\302x\034:\225\263\3038\271\372-\272\355F\016: \352\3649r=D\272C\306\316\271\253~\204\270\034\3615\272f*\226\271\277\036\240\271D\310\030:\2375\':`r\344\271!\374+\272\300I\203:\274P\002:{\033y9\327\024:\272$\"\021:\371?\0069wVY\271\3076\2109\354\255\3048\362Ed\271\177t7\271\217\020\233\272LQ\016\271\321\337\2029\252\350\220\271h`\001\272\364\364\243\270IH4:\316db\272j\316\247\2711\033\2209\003\030\212\272\345aK9\373h\027\271:\375\344\271oQ\3479X|\3709\302\206\024:\275\313\2239\203Y<9(\tN:\356\021\320\271x\264\312\271@\333M9{\016\357\270\007\343\3439\217\302\353\271J\220\245\271\024\301\23461]m:\204\307\220:\003\214\2369\026\25297\271fC\272>t\005\272f\374\325\271\376\275\002\272!\217X\271\324\245\3256\340\224\204:>\013W\272-\247\0039Q\210\032\272zFY9+\2530\272\007Y\302\270\247+v9X\302d\272\202*\016:\374\02639\005\224\336\271*\251S:\355,\336\272\256\023!:\010\312\022\270\264\203\2779\344\337:\272p\031;\272\212\253K9\302K8\272OE\236\271\234\020\2179\214\270\n:\377E4:jl\030:\020>\"\271\317\270\274\271,\365\267\271\000\211\0308\035Y\'\271\261a\260:\200\311\223:\316\364\2108\272\002x97\262\2409\316\213|\272\241?)\270\370H\306\271.M\332\267\211\010\345\271$!\226\272\233}\302\272\240\3515:\365]T9}\027\3359\240z\265\272\313t\3109D\360g\270\233\305\351\271\214\002\n9\246#\275:\341\244\026\273\034z\203:Q\225A\272\025K`:!)D:\234\220\277\271\363\014\032\272\340\317\201\271\212j\3349H\te\272\366\233\235\271\216y\031\271\245\236\2539w\223p\272{\000\213\272/\266\240\271\304\307\01396xz:\226>\r\270\310\360\2549\325\367\032\272K\200<\27175\266\272\230\261\365\270vIl\272zf\3719\2527\2459\202\270\201\271U\363\271\271y\020\234\272\300\016\2458\030\377=:\364]S9\276[\3257\000Rh\270\007\r\257\271\331P\2669\245\327\203\271\341g\006\272\364\273\320\271\313\276\222\270\017\372*\271j$3:\367\205\004\272\261\037\2649\260\316\2169\355\222\247\271\263\247\3639\234+Q8\353\002\243\271\257\017|\270\337\332\367\271\343q\025\272Z\352\217\271\354\226x\270\020Hh:\364\0175:\321\000%:&|)\272\275\320\'\271-\260\005:\247\362\334\271\372\n\226\271l\313\2128\216 A\271\314\307\232:E\006\035\271f\021\0109\227\355\330\271^@\242\272\253\310\357\271)U):\343\303=:\237Qq8\370$\020:\r3N9\000\003\014:\230+\2139\220\255\022:A$(\271\266q*\271\357\356~\272\364g\3259\225\240t:0\336\022:\372\262%\272V\301\201:\023\023\315\271\323\214M8\t\005A:w\377\004\272\363\323\010\272?\031\251\270\231\005\026\272ug\007\272\307\240\364\270?\037\230:\221x\3109W\375\204:\202\271\240\271\245H\035\272D\351\0209\253\224\322\271\345\322\2139\277*\3059\247\245\354\270\351\267\2469f\255\005\271\216>?:\264\r\2418\313\346t:\360\310~\271\"[\272\271\274\264\330\270\020#-8P\370\3129\217\255{\272\362o\3259\267\224A\2723\010w7\014\202\204\272&\003\3169\013\261\207\271\370\205/\272\327q\002:\263\216\3279l3\':[\343\032:\271\310=\271\340\241U9\264\215\254\271.\355T:\333\314+7\266<\304\271\251q\2168`\017\370\267\324\275\226\272I\321\252\271l\217\202\272\016\304\2418B}\255\271\305\004/\272+\261\r9\023R\261\272sy\2119S\307u\272\237\353H:/sP9\304Bp:\226\277\3759b\000c:\247%\300\271\007\237\221:+\327H9\316K\202\272r\001z:\000\210\007\272\205q\223\272^\377K\271\346\335\0048)\177{:-\"\254\272\333\334\223\271\355\351Q\271b\234u\272\232\240\3569\\p\235\271\266\316u\272\331\023J:FN\020:\323\257\3038\360/\004:\255\234\'\270\353~\305\272\036\n\267\271t\315\2129pT4:Y]\2118\010\331\2039\230\322\034\271\240\300\0368\030!\341\271C~\0069\006\211/\272-\317d\271\320\362\2119(\375\266\272\267l\2527c\"H7\267~7\271\261\010\213\272\241\363\t\272!. 9:\332\375\271prC\272\'\300\351\271\344\213\024:\007\317\n9\376\024\2128\237P\272\271\325\233\311\271\347A\021\272\222\334K:\251\212\325\271\312\247\315\267CS\207\271\217\037\264\270\231\177p\272\277\350\0359\276\200\233\272w\337.\271\242\273E:!#.\272\036\214h:/\346l:\363Q\305:\246Y\3549\222\335\240\272*\303Z\272\244#i\272\247\316\205\272;Y\2509Cs\037\272\361\"a:\346938\226\266K:x\240\0148U\346{\272F5\2457q\251\2008\006:\237:x\236\301\272\014;\304\271\307\227I\2713Jz9\336?\255\271\305\002F\272\232&\244\271\307\341\034\272\373\327\375\270G\035\213\272hv\227\270\256,\":\211g\310\271\364jX:V\311\351\270\205\223\032:\206E\342\270\333V%\271\314C\352\271\324\001~\271\307\211\271\271\272\243\232\271slg\272\364P\203\2728\374K:\203t\356\271\362\325\331\272\225\321O\270\225\3019:\302\207y9\340\030\033:\2753\2649\237\274\3249^-L8\250N\214:L*\016:\026hV:\301\250/\272\345\024\301\271\264}\207\272\t=\234\271k\n\2619\326G\372\271\273\215\3319\005\217\017:\211\270\303\271\r\345F:`\037\2008F\177\010:=N\021:\303\n\026:\277#\337\271H\002+:})\205\271t\377j:h@\2739]\370a8\221\307\246\271.\361\004\272#C\201:\214\235\360\267\226o\304\272\024\260+9Bkb\272\371E\2477%.\002\272\321\022T\272e\375\2428\376a\025\270\234\020$:\271\261\242\272\3214-:\2016F\271-\241\274\27252\2179JK\0219\001\311\023:J\214\253\271\3236w:\024 \221\271\354\215\004:gy\033:\014\267i\271\236\277y:Y\010\233\272\202\0254\272\016dA:\035{3\272\252VF\2728\2639\272_\311\326\271\037b\2729\215\017V\272\230\247I\272\260\351\033\2722\255\005:\342K\246\272\024X\212\271N\222\210:\t\357\223\271/#\020:)\226\232\271?h\2107\200\016/9v5\3169\030\305\217\272y\242\022\272\336\245\r\271\253\007\2219\265\347\320\271\315\343\3769\010\005j\272\245;\025:\034\216\244\272\265x\203\272B/\2209R\256\331\2714t\274\270x\005\240\272\217\236\r\272S\247e:\327\202v\267\206\265i\272\0200\2329\022\307x\271\220S*\271\257\344?\272!\3253\271\272\252V:\320\250\2508\234\"\202\272\211`b\272y2\006\271}lB\272\026F\3149\351\305\230\271\203\346\0319\257\022\035\272\336\264O9\221\335\210\272\331&\2719\224\313G:\007\371\207\271\031`\240\271\242b\200\272\251M;:\207\264,:?6\222\270,1\25486x\2119\003R\262\271\324\247\2648;\246|9\210l\005:\314\300\253\270\\M\002\271\266\252\234\272eW\266\270\t\232\036\271\204\224\2679\022\014\0009}\220\0337\314\262D:\321\266z9\256\001\2449\026#$8V@\2039\031\354\2148c\177<\271\340\333U\271ohP\272\302-\2429\222w\3579S\212,9\021\254\"9\251\277*\272\235D\002\270\\f\236\267\254e\240:\220\213Z\272\265\302G\272iH7\272h\032\221:D{\"\271\362\267\000:\317vC\272\311M\3429\333?\325:\344\"i\272\323\223\3769\215B\257:u\030\n\272\271\360{:9-\004\271vT|\267H\312\272\270&\016u\271\336z\010\272\003\001\204\272\240\\B:1[n\271\312\266\3718$\274\377\265\344\237\360\270+}`\272\237\352\020:\236C\3119.\347\2639\367Y\204:\023\306l\272\340\337\263\271\267}\005\272E\303@\272X\344\201:L\264\2777\225\332\316\267b\347=\272\277\032\3336U\037\265\271\023\020(:\202\270F:\004\025x\272\313\310\004:x\201\237\270\312a\"\272\345\020d9\023C\216\271!I\3629\277\250\213:\337H\":%\022\010\272}D\3369\213\260U\271y\377\025\271%\244\010\271\tI\232\271\016\250\3469\341C^\272\350\t\004\270l\353\240\271\204\017 \271\375\00509\371-\337\271K\230\033\271W\313I\272\373A48\346\311\2039\315\257\016:c\022h\271N\306b:P\330|\271]\235Y\270\203:\025\270=\020[\272:\240?\271z\010M\272\004\224-:\022t\215:\342I\':\"\344K\271\275\266\"9\030\307\377\271\245\214a\272)\352\222:\265\005T\271\216\373\236\270\316\276\2779\244X}9\"\"\342\270\355\363-\271\351w]:\227=\245\271\003e_\271(\373\r\272\263H[8\207\315\217:V\331\342\271\374A=\272y:i\272p\370>\272\273\3311:n\225\037:\242<\333\271\2503\3729\331\035\010:\266\232x:\327q\363\271\177iU:\343W8\272\006<A\271\277\372\242\271\2026\206\271\3124\362\271\203\3677\272\323oP\272\030\254\3729\273\310\027:zTK\272\301\346[:\374@;\271Jo\2069\3425\321\271n\201D9\270\003\2149\031Fg9\'\204M\272\353S8\272k\217i\272&\276\000\272%\325m\271=\3301\271\213\336)\272\325\230^\272\271n\035:\212\247\035:\324\273\3768\022\364+:\267!\277\271\245\373\247\272\r\366]\271\232c\301\271-PO\2713Z\r:\363\301\3078\311\206\3359\314\026\206\271DC\2529\3616\212\272\212B\2159\343\255\245\272Kik\271\272\355$8\244\317\000:\242\347\215\270\370\251\177\272\005\021\213\270w\357\216:\325\246\":\t$X8\031/\0248\032\365u\272@\0077\272\355\037\357\271ju\024:et\304\270\200\001\035:\313\002\001:\000\226\215\272\245\345\247\267\274\001\2359\357\350\025\272Jq\0339\023\366.\271\355\002\013\271\217\340\244:\365\237\233\272?)F\272\037\217\2238\261S\":b\"\234\271X\254P\270\001\322\020\2727\255\322\272E\300\":\354H(\271Y\204d\267\001\256\004:\224\320\023\272\253\027\2319\323\331\201\272\207\363\337\271\300\336\227:\374\235t:fTH:0\264\346\271\370R\370:\001\233J:\253\230g\271\'\343\2449*\025H9\022{K:G\254\2639\323D\303\270\344\314\0209\356r@:\323\331\364\271\211\025t9\001\313\022\271\373\364R:\360\2369:\007!\3279#k\2779\260Uc\272\312\273\014:&\316\2219/\235H\272\221g\2419\'\257\276\270\220\364d\272U\017S\272\363\270\254\270\226>K:NA\2677_Cl:\251\023;9\235\036_\271w\t\324:\243,\3709B,h\272v\022&: S\2609\357j{\271\206>\237:\021*R\272C\320\3178\016\357\240:M\340\2739yb\014\272\262(\031:I\3035\270\335\231\3209\207H\2009\210\264\3769C\037\320\271\217\364C\272u\225w:6\222\251\272-\216\325\271\216\323\363\267\276\026A\271\003f\331\271Y\200R9\202\312\371\271K\250\220:Tj\001\271}\177\351\271\377\370\314\271Q\262\3216\374\215l\271\010X\252\272\353\001\002\272\375\330\020\271\305\321\3348\277/\004\272-\260\025\272V\023o\272[\343\342\271?\242D\272\025.w\271@\330\003:\007\371\3229\221\331\244\267\204\tA9j\004\235:ffY:\226\237\0368\342\021\261\271\217\341K\270L\004\3249\205\330=\272\216\320\304\272a\360y9tM\2069\320+\216\271\244\303\020\272\215\301^\272\014\375\236\271\021\262\2639\233\316*\271*\334Z\272h\3436:\265\257\362\271\024U\2029:\033\017:\345\316\225\270\200\325\027:\251Aa\271\034p=:\277I-8\227g|\272M\361\374\272\2673\3019\273\242\274\271\014\265\360\271\375\'\276\271\323\262$:1\355\206:\360Ts:S\326\0027\030M\0209+ri:\\\200\"\270\316\331\201\270ud/\272j\252\r:\314\350\256:\365\320\t:R\347\t:\331\356\2419\215\001\000:\242\262B\272\241R\305\270t|\271\272\362\2130:\3312\3079\340\316}:\342\020\030\271=\337\23395\302\"7/T\347\2718\033\023:l\020\311:\326\204\1779\347\037z\271\330\321.:K\234I\272\222.\004:\031\214\322\271\027\250M:\304\213\356\271+\276\330\271v{b:\361\216\022:\001\312\331\271\266\321b:4Q5\272\336\303\237\271\006\352\2719\202H\017:\377\370\373\265\343\177\236:\315;):\346\255@\272${h\272\301TS\272\207)}:\033\024\3658\267s\3179\307\010\016\272)\265+\272\261\265\3029\341\252\3359\221_\253:\207H\'87\277!\272Z\3443:\017e\303\270[a\2609\343^8\272\271\035\3229Hi\207\271LS+8\241R\235\272\361\314\360\271yL\2449\247\002\361\270\257\265\3249\252Y^:\2064H\271k\220\2337\210\001@9\355\002\0249\200\307\2068>\303%9\304\335\3748\3711\347\271r\326\2769}\236\017:\341rP8\321\347\3449c\3444\272\314\243S8\223\004\032:,T\3549\025L\3339)o-:\276\367\037\271E\267@:\266\350\251\271\266\367\207\272v\326n9\302o\272\270\246\034\2138\201\236\264\271\246\220\347\271=\3139:\331\275\335:\263\n\233\271\304\007\t:K\264a\272P\240\013\272\312\033v:\317\331\0219?\303\'\2663\264#\272\316\250\274\271UD\017:Nc?\267\001U\270\2719\226\232\270\013\340\2449\036F\3419\201\311\317\270\344p\020\272\257\314\3549\317\273\2119\243W\275\270\3335C:\341\310\037\2720\257\236\271_\326\022:\241A\3369x\220\3709 \305\3348\246C\361\272e\026\217\272@\210\2657lS\030:>\263\244\272y\327\2079\004h\3409t\010>\2723\317\264\270\351\024\325\272_\270\010:z=\0318\007<\243:\277\256>:f\243\0239N90\271$\266\n\271L]\3769\201\266\215\272\374\360v\271A\317\026\272\261\335\020:\376\256 :\tKk8s{\021\272\002\321Q:\206\034G\271\310\303g9\271\373\357\271gO\242\270\"\226\022\271\030P\025:\307\210\010:|\204I\2728\355\206\272\355\236\270\271ZE\2309\203\023E\272XR!\272k\321\302\272\014\004;9\005\301c\272VL9\272\232R\010:L\312\216\272\222\331(\272\264\340\217:\303\341f8\343\263\2558\326\235\2749\204\010\r\272<\350g\272\320\244\255:,\014\2258\222,\256:^\310c\272\003\221\244:K{\037:tF\006\272\251\257\311\271\246b\225\271\257\014f\2712\325#\271\245\236\210\270\037\254\2379\302\252,\272U\014\2759\36725:g\0134:\255\363\031\271o\322=\272\205\220\3509w\274\005\272\274\201\016\271\267\374\027\272\036\340\210:\234z\024:m\212\2059\304\370a\271%\250\3779P\330\2059\203%\3339g\t\016:\263\005\t:\250\255>:k\020n:\370\276f\272k\331R:1\265h:\006q\355\271G\230\252\272\260\276\277\270\3243\2609\267\317J:n\t\0136L\247\3249L\223\031:\301z\203\272U^\t\272\234\215\005\272{\312>\272\366\024\363\271\3625\034\2727\375\2149\204/W\272:\214\036:\200\326\273:r\332\321:\304\033\n8\026Y\3049\355\214\005:\020\3238\271x\300\037:\262\207\2519\301\215\2329\263\223\2059\247xq\272%20:\262\251\016\272,\351\362\267\247\027y8\366<;\267\262\261o9\204\364\212:l\347\200:B\345\006\272\376/\211\272\216\304\0359\376D\226\271\274\364l:\363\000\2669\271\230\3429\246\237s\2725\267\266\271j{\203:\276p\033:\022\254}\2722\\\2119\223\271+:Y\340\242\270$\314\001\272\334\277\230:\334dD:z\0160\271\353B\3718\245\367(:6<\3537\210\360x:?0\377\271\340\233\200:\317\224=\271|\230d\272\220\221\200\272\323\270\202:\276\177\2007\323\00629*\336;:_\347\0139\033\027\267\271Q\361-\272{\371\3118\334\327\267:\230b \272\254\020D:\267\361\2408+#\000\272\306Gs:\210\3526\272\255\037\203:\2123\357:\200\233\016\271p\000\2629\327\355\230\271_\357\2029\341$\001\272#\'D\272\212t\014\271\351k\351:\027#%\272\323~\':8\336\2039]G\2739\322\300\0008\235\270~\272u\374\234\271\262]\0319q\301\006\271\353\364H:\322GY9\034j\3319\220_S:\013\253d:]\205M9!Sd:\277\230\370\271\264\226\003:[\001\022\271\340\030\330\272\253Jc\271:t%:\025\356\014\272\214.\024\272\301\206\201\272\301h\362\270KX`:\243m\212\272:\314\024:\356\353`\272\367\204\365\272Xa\036\2725Yu\271Du\34396(\2479\350#\006\271\031r\020\2725v\343\271\200\3424\272\005\'\362\271\230P\232:}.\025\272Z\373\267:\375#\375\271\212^\224\272\\\336E:Q\357V:\000\331\233:=$i:\322\310J:j\365\245:FU\2609\234N\001\272Y\3446\267\202\223\303\271\374\251-:\237\352T\271\262\006\002\271\223\215\255\272`\241\2109\330\365\341\271\2524\245\271\271=t\271\005\265\0039\033\376\000\272\350n\016\2718\313{\271\2570\3349lRA\272\307?%\271\273B-:%^\342\270P\202\n9\2375\233\271\256\207\201:m-\2538H\247\023\270\200\027\2259<Y\3779\251b\':6\263\225\270\254\207\t\270\334\313\212\270g\n/\272\312,G\270\274p\255\2708_\014:rk8:\021\216\267\271\377\326\3178\000\260J\272\300*\2509\353\365\273\270\0266\34390C\344\271\344\001^:o9\200:f\360\0109o\361&:h\367@:\351\314\2209\377\3542\272mB/\271*v\2626^g\2759\371\220U\271\2447?9(~\276:\237\355}9\336\215:\272\214%\0319\374n\225\272+\'b:E\311\333\271\272\215\004\272\216\220q\272\320Xo9\203\246\237\271;\n@:\374$F9\304\022\244\272\'pF:XZ\031:\021L\002\272gh\t\272\252j\252\271\201\204\2179\343\253\375\271\201\'\036\272G\003G:\250\014\205\271\344\351D:\361~\n\272\360\305#\272\232\374\3339\006\t7:\201\263\2358\257\234\251\271v\004\2229\326\212\"\272\252\362\025\271\333]\313\272;\200!:\203\351\333\271\"\332\235\271W\375\026\272\257w\027\271i\026\0358~\346\271\271_vz9\336s\007\272m\004\2729\360@a8\316\030\3518W\3672\271\033\316\217:uD\231\272%\300\323\270\203\233\3338\002\252\035:j\243\004\272\305\336\223\271\"P8:\326ld8)\204`9\227\300\212:\353\304L9\317@\231\272\336\250\024:^JB:Bt\263\272\247w\246:\266\337\276\270\313\251\2069\261\245\241\271d\305\357\270\316e39\316\035h\271\310\036\0369\222\230\024\2737\tq:>w/:\365\340/9\020\331w\272!\346\322\270\0104Y8+\034^\272\332\267i:\255\24479\037>\212\272\261b\252\2714 \223:\273\243\033\272z50:\324\374\001\272f\20089\275\355#\270\027\253\312\271\242Y\206\270\210EP\272\335\242\3338\231l\201\270\324\234\206\271sV\0009$p\305\270\367\024\332\271\240\332\006\272\314\315+9\250\020\2375\266\360l8m\320\3119h\347\333\272%)\2149\305\"\2649H\222\3559\032\234\216:\265#\204\272\354\272>\270\016\203\217\272\240\247\2568\200,\202\271xR7\272\303\237\2347)\364A:\320\321\2329\256\322\005\272\311\013\2019\'Y\224\272}1\3349&\350\255\271\257#q\271\350\3506\272<5\230\271\361c0:\231\325\n9\030\214\240\272\355\020Y:J\215\31599i\230\272!a9\272Y\250\257\271\231\006\2059\214\227\332\271u\235\031:y\267\3549\215(\246:\271\020\3539\233\243\354\271\272\026\003\272\231\\\3619t\332\350\271\351\342\032\271\\\340H99\2648\272\301xx\270@IO\271\n\274\357\271\\\013\3339\316a\376\2718\266j\272\347\004N9\345-\212:,\260\031:\321\360\201\271\002\364\22494\213\212\272<=\2436\354\221\205\272\2515\3049d\\h: \275 \272x\323p\271A\363\005\272:\3656:\246\203^\272F\322\213:\315\022\2628\244\312\211\270m\247?:\201V;\272s\213\251\272+%\307\271\326\270D:\243\370%:\360\241\203\272NA\0138X\"\212:\221\330\000\272\361\266e:\234\345\022\272\231\3007\272^\231\r:\210<\240\271\240\000I:\244\321v:&\246\305\271n\272@9\207\262\342\272dC2\272\232\177&:hm49w\3439\271Z19\271\224#q:\226\034\370\270O9\024:\010\017\3129\355\261\243:\217\277\253\270\202\023\356\271\231\031\213:\361I\266\272\347\316\010\272\227\374:\271\203\377\0309\3327\236\272T\251l8P\376R9,\370\270\271{\233\024\272\241\3411\271\202\354f\272\221\271\202:K\016\307\271\311l\035\272#\252\327\271\254=\010\271\330Rc90DA\271\023P\231\2726a\2719QE\0208\250Bh9v\311a\271\017\017\336\271\224\265s9L\367=\271H:\326\271- \221\271t.\341\271\202-/:\2636\027\271\264<A:I\024\3439\225\013:\272A\014\233:\346\232\3469Hy\225:\304\271S\272\276\'i9 \031\007\272\313\307\337\270MJH:F\233\232:\275\372\0079@\316\271\271\316\264\207\271\004v\322\272\006\207\212\271\006E\275\272C\274\221:\366\3319\267\'\374\361\270\306\351\035\271\250EN9\354\211\264\271\216\233]\267\273\300\367\271I\370\200:\036A\021:\254\247o:b\"&\270\032\223\t:\375J\247\270\014\255\32090\032\231\265\3148\205\272\206\351<:\213\334C9\221\020\204\270\244B\014:\001\273\3359`\355\017\266\215\301\2659.\377j\267\20353\272\334\027\n\272\261\370b\272\301%\t\272\2279\216:\311\341\205\272\250p\3179\262}\34292sO8\177\025\322\271\235\322\2519\325L\0336\035mh:\233\3165\271j?W\272\035\352\3049\'\264G9\210z\2369\377\010\342\270\232p\363\270\362\272\347\270\001\322\024:\211R\260:nN\237:\030\232\210:\361\024\3077I\257%:K\003\027\272\250\345w:\016\243+:\311D\205\271\311z\350\271i\034\021\272\233\223\2608\3260\t9+\246\2639\016\023\0259\215\355\3028\336\270\243\271\221\260\330\271\265\022>:k{\010:\275@)\272\177$j\272\357\'\222\271\003Vt\271\350\303\253:N\375\003:\320\201\250\272\372h\276\272\025p)9z\265\3279\3679\24298\307-9?\210\3069\340\031\313\271\330Dd:\307v\3709e\332T9\252\302\354\271\017\217\3459Y\2125::\313\3239dG:96Vt\271\304\333]:\007g99\217\264\3009a\200\3029IR\2349\304\332N\271E}4\271}%H\272\005\344\207\266\271\341H9\242?\273\271\036\244q:\344~\253\272\0277\0379\361\003!:\250\235\3149\035\013u\271\\\343W\272\360\312h:\023\'\261:\214{\210:\n\266\326\271ex\2509\373~\267\271\222\314\3079\333\351\037\272\251\321\331\271\344o\031\272\230^\253\272c7\r:\263\354\3679+`S:a\256\014\272\21461\272Em\333\271\374r\244\272\210O\":\221\200L9\014a\005:\232j\3649\375\235 8\255\n\0329\032l\2566\265\227j:\003\031\005\271e\017\022\2729f\2759]\2206:\001~1\271\031\215\3119\004\321\351\272\251\344\320\271fO\227\272\n:\310\271\234{F\272t\342\201\271\367\266$9T\016y\270\310\024?:L\022z9\277:\212\271:v[\272b\354U\271\352\354\2609\326\277\3379s3\304\267\364\355\177:-\253\31394\274\204\272\254P\2468\2303\200\271s6\2366\304\026s:\373\001\3779^\251j:\026\220\266\271\003\325N:\372S3:\240_\2778)\247\001\272\333\221\224\267J0\2059\2623/\272Ir\215:.>-\272\267\'\0228\r\247\002\272\337i\205:\372\032\365\272,\363\030\272\242{h9W\300\312\271\"\232\005\272\211\230|8O\004F:$gW8\027\350U\272)_\245:n\350\340\271\366\n\2119\n\253\255\272&z\340\270<\037\206\272\263\253\231:)\021p9\261\343\3077\263\257\3039\024\277\3748\370,M:\336\303\305\270p\006(:\355R{:y\237\261\271=@:\272\217\366\3539\356\271a\271}Je\271\371,\2109,\300\3169nv\3319\203\245D\271\342\372v:b\373\n:\317\204\266\271\307\356=9Q\276\2569\232\005\277\271;\3124:iq\235\271\360\035\2529\355\t.:\300\236c8\247\335\204:\030|\304\271\310\301j\272\361\271(:\023\240\3519\365\330\'\271K\251\202\270d\230\224\271\270x\3137\330*W\272\364\365\2058\267\253F\272U)\204\271.\\A\272W\027Y\270\310\231?\2728\232j9sn\0037\363bW\272\\\030]\272\254\000/8\216\212\256\271\345\275<\272\326\024x:5\016K9p\24028\240\364\231\272\311\261\2458e\341\365\270.=(9\264\341\001\272\026\021\2069\355\304e:\255\037`\271\234t\030\270\260c-:\334\306\251\271u-l8^i\3009+\211\231::\346\326\271\271q\021:U\265\023\272w\231\251:\235\354\245:5L\255\272\274;\2158\266+\036:G\035@:^\237H:\230\270\3029?\262\240\272`/\3677\3759\027:z\262$:\250\356\002\272\264\373\03596\235\036\270\277:\214:\024\364\2379J3\021\272\370\267\3139\355\223\2579\207\022z\2726\302\222\272\371\2276\272\205\2215\272\005<\2179\340k(\272\217Y\332:\315\217\260\270\n\276\2738\3776(\272S\254T\272x\261\2459R\227,:#z\230\272\351|%:<\330\2048\375\253\2649\361q\242:]\'\3109\226\361\201:YT\\:i\334\274\272\321\037\022\271\027\357j\271}w\225\271\341\027\010\271V\347\006\272\354\210\2338f7\206\267&\265\2379\322\2652:\337X;8\025\241\3459Z{J\272\342\277\202\272\\&\314:\"\270a9k8\2629\3415v9U\031\001\272T\3474\272\375\2139\272\3679\030\271T\346K:u\013\364\271\037\362\2579\203*\353\271\237\253\3509/\240\0059\263c\234:f\222\3759H\350\244\271\017\2160:\375\226\014\272 \020]\272\004\237\0259\301\334q7C%\213\271>\363\2679$\234\027:5D\3178LH$\272\336\317\030:\274\245\027\270[\337\250\270E\276\2119\356\206\244\272\3576\230\271\354r\200:\244\2544\271\250\270\n\271I&A:%i\206:HU1\272\341\373\2169lv\316:\235\345;\272\373\013\3149w\261\214\271\035\\7:/\367B9\233 \247\272\216d):\247\272/\271\254\305&:!w\2359[M\324\271\377\327\2009A:\357\271]-~\270:r#:\203\306`\272\272\241\264\271\021\251\233\272\311gt:h\356#\271\333>7:_\223\2658\252\'\027\272\212\235n:\341\362S\271\312\360<\271\2636q\272b\301\224\271S\231\006:^\177B:\351\022H\272\220\307P9\021$\261\272\354\306\202\272f\352k9\215q\023\272>\334\222\272E\350\00381r\0249\t\235\2537\241\003\316\271\343Q\2309\301>\2019\224|\030\272:\200\2158\306d\037:\230\262\221\271\033t\211:v\367\360\271A\300\355\270;\227\364\271\351\262\2658\017\271\223\270\257\367\264\271\277C\265\270\t\367\274\270o\031\321\271f\222\270\271\\\253\027\272)r\004:~\301\2339\312\234Y\271y\344\3119\177b\230\271\'\362\213\271\201/\2169\236XA:L\375$\272\203<\204:\262G :\260\372,\271\3758S\272\321\265@\27016\266\271\316(\2509\344Z\r:F\317::sW\204\270+\223\251:L4\260\270\227L\3439\tNG\271M\301\010:+\307>:D\203d\267\3704\377\271\322\366\240:\270\275\3658\320n\374\271/\210f:E\261\263\272U\313\024:y\020\2249jS\2249\371\233\0369\207\'j\272\372\310L\272\366\003w\271\260\3103:[}\341\271gPn\272\346\255>\272\246\001\2778\213U\342\271.\260\311\271\017\2340:0\260\333\270\006z\210\272k\230\320\271@\241\235:\304\341s\272\214\226\211:\212\010$\272\334}\033:\342,Q:\322\366\353\271\254\023O:\374\363#\272\363\262C9\025\246\2168\253\2302:\330\273\257\271\304\377\321\271\360\320\2179\252:6:d\327A:\3155\2278\225\020k8\211\240\335\271\022\206\302\267d7\257\266\264\224\2129\016D\241\272\025Dn:\237\001\212\272\324\261\361\271\t@N:J\304N\270\3469\030\272,r!:\324\202\3069\2411\034\271\341o59\223\320\035\272\226\302*\271F1@8I_\323\271\214 \262\271Q\363L\272Wd=9\\b\202:\006\377\3509qa\007:\\6\353\271\tu\t8i-\0019\371bR\272G\217\231:Xx\037\272w\262\030:\344\332\2559\020\241e\272\336\370\014\272q\357^:\373`\213\272J,D\272.a\2007\006\313Q9Q*!\266(8 \271\177\347\275\271\347\211!\272_TH\267`\027\2709\017}\3438\330\332\2319l\"\272\271\206m\026\271\036A\036\272\372\032\246\267\350F\005\272)\264\2129\024\205\225\271c\014\210\272\220\221\227\270\327\272\213:\363\244\367\270\263D\'\271W\203\256\271f\323z\2674\2307\272\033\375p\272w \0349\217X\"\271t\263_:\233 \0339i(\014\272:\217\3579\371\300\345\271a\217\346\271B\003*\272\302\345\225\271\331\331R9\303\313D:\\\266\202\272\266\373!:dX\213:\276\252\000:\212U\3679\350.\271:5\256\353\271\222\n\356\271I\311\n9n\026\3579\373\3479:\306\037C\272\253oB\271\371b\250\270\2634$9\340\321\222\271\366Q#\272\023.\322\271\344\010\0219\234\222$:\225\033I:\214\373\320\272oF\214:\341.\014\272\252\325\2718\247\232\3679]\337\022\272Xl0:\256\220\2448:\305\006\2715\304\205:\352Ej:\023\360\2209_\275\204:\277\217\2249A\237\217\270\354>\232\270\313\030-\272\300\005\002\271\241>L\271G\030\010\272\243\364\3449\037EN\271\344\336\352\270KH&\272|o\315\270\245\241^\272=\225I\272\202\020\354\270\334K\326\271\023k\005\272\177\301\0059\221\207\2118\034\000\257\271}\324U:h=0\271-\307\3019at\3619\377\303P\271ET\2059\233\337[:\202\0030:9?\344\271\r\344\0069\005K\264\270\311\210\'\271\241\000\030\271\305\207<9K\362\3627q\303m:kx\326:\372-|:;Z \272\205\357I:\202F)\272\340n\2059{\327@9\321\356v9\2702\340\271|)A5\016\305F:z\214\262\271\231\237\343\271\301\326\236\270%\266\2619\241S\2349\341\000E:\3558\315\267a\266&9\022\035\3377@\330\2279i\312/:\355\361!\272\372*\226\271\263\374\r\271q\304\204\272\3333\001\272\251O\233\272)^\373\271\207=\2009\254j^9\201\'r:\251\260\227\272\024`\303\271\255M\3627\364a\256\272\366\362\3639\210\246\2548\272\347\3679\366\034R9\356\361\213\272\216(\360\271\350\201\2246\205B\005\272\031\3722\272\265\356_9n`\266\271\275\0328:\033\334x:\007o\021:\356\206\2509\340\356\207\272\247z\201\271\034I4:\204^\334\271\363\036\306\271\376\302\207:\215\275\3759\277j2:\355&z:\206S\2768\347\261h8j\374 \272\342H\242\271y \004\270\013\233,\272\021\234):\035\256\2619[\326W9\352qZ\272\370E\036\272`(\026:/\262x857\260\271\353\024m8\221\243\217\272\275u\3009\035\030\2409Qy\330\271^\006\322\271\365n\350\271\0060\314\270\305=\2368Y\'\221\271\264\3233\272\246O\010:\336\032O:\274\034\226\271&\232\2139\374\032\3478\307j\2168\355:\3108\021\250,:\016;\3379:U\2559\262\3036:\312\'\260\271\351\267\3029\t\255\263:\013:i\272\356k\0339!YX\272\212\264\2049o:\n:\266\010\210\271/\302\2069B\352k:\372\300\3149\026\245:\2716x\274\272\032\037J:\232\307\363\270\037\2732\272eM\r:\205\001\227\272r\026\355:\210\215\200\271\322\274\026:\204\207#\272<\301\3559n\232f:q_O\272\257\310\212:$\357m\272\372V}9\347\365\3759^:f\272\0273\200:\006I{\272\031z,:\200n\2759\2753\034:\213@\002\271\007\242\001:\\\312[:\362P\370\271#\375\3719\267\340\3419\332k\204\272\301\267c:\005d\032:\314*\201\272Om\000:\232$S:\260\000\203\272\344~\3719\217\237a9%\01679U\023\2678\317_W\271{E\24594Q\243\271\227P\315\270\204\\\260\272a8\2449Fas9\210Mx\271\337\326p9i =\270\257\020\3079)S\006:\374\240\220:\242\310\343\271%\250\355\271h|\304\270\377E\3777`\357\031\272\320]\320\271\253)29\0215\224:\312\006\362\271~\203\227:m\032\213\271\260\345\266\270\026\313m8\270\223\365\270%X\371\270\263o\321:\211\247\0139\236j\202:\347\025B:+\223\310\271\376\026\177\272\"\322e8s\234\3219\272\233\0249o\n4\272\265;\233\271\204@\206\271(\200\215:\346n\260\272\000\301\230:\225M\0048\022\002\2608k\212\0038\206+\0109d\252%:\316\034\3029\307\273*9\224Yp\272\023\254\r\272\2625l\271\302&\036\271i\270[\272\006\370\017\272\014r.:\t\037\321:\274\217\2729n\032\025:\301\366J\272\347\206\3108\032tR:]0\345\270\274\244/\272=\312\236\272\326BE\271\3337\362:\256\354\2109 \207}\272\rY\r:\271\263\2269F\323\2219R\n\247:\204\32289\306\370\3438\n\377\3049\026\217\240:\270\343+\271\300i\227:\017\242[\272\025\005\226\271\\\274\335\271T\346\3368\377F=8#\341\034:9\330x:\235\317]9\256\3417\272H0\r:\236\321\2779s~w:\006\340\"9\0327\247\272\225\002v\272\n58\272J\315!9%\212\2429-\232D\27274\0379\317\3314\272\237\245\013\272\215\237\233:\322\254\2548\316\303\033\271\010\2624:3|/\272\262G\203\272\244\202P:\224f\202\270NF\207\272\262\370\r\272\224od9\021\236Z:\316\206\377\270\252\332t\272\340\nl:\300E\3479b\235K9\364\027@5\032\235A\272>\323\'\272\354\376\211:+6/\272z\203\3418\027\354\035\271\376\r\220\267|\257\000\272e\234\027\272J\254\244:Y\277\034:%bz:p7T\272]\212\r;r\261\r:\301W\306\271V\201x\272tt\3669\364\320z\270in*\272LoQ\272\274Y\n\270\200\277\204\271\024 \262\271\230\017W\272\246\2275\272\377\376Q:\214\3171:l\356\030:P\002Y:\313\234\036\271\334H\252\271\232\375\033\272a\023\2059\022is\272z\222\327\271\300\204\262\267\026\366.9Di\031:\342h\"\272\363o\206\272\234\301\013\271\244\010I9o\034\3059\215\377E9\253D\244\270\233\220\203:+Q7:\366X\313\271\255x\365\271\003\335\0109$\330\026\272\204\267+:\024\304\030\271v\267\225\272t\356\253\271[\343\3249\030N\245\270\251C\032\272\006\372\222\272a\243\355\271\337\035\325\271\315l\320\265\000I\244\272\370\300\347\271\245\306\3238\021\177\373\271{<9\272\251\277\222\271\267#\214:Q\247\205\271\341\325\365:\3564a:z\353\010\272\206\314\r:\317~O\272\236_\366\270]Ud\272I\225\2008\212\014\257\272t\256\306\270\364\\\361\267\225\377\3168\345\005\006\272N%\000:\326\353\025\271\327s\3178\261\233t\272\036j\2717\326$M\272F\023\3649h:\034\272\220\221J\272\307`\262\271o\261\2619w\013\2519\376\206\200\272\2427^9\273\021\2229\236\364\2608\224\304\252:\333\006\310\270\034\376\330\271\304\262\035:\340\267\2149\2053\241\272\030\0301\271\311\376i:\345\215Z9\247y\2419\324\256\223\2711|q\271\200N\177\271=\000\207\272\263\211%9\017\264\200\272O\006\3648K n\272D0#:AJ\2108:\320e\272\322\230\243:\352f<\272j\270 :\314\363]8\022\363\022:\325\267K9\nK\3507\030\177\2129\024\032\266\271\220\177\026:\256,9\270P\257C\272#\325\2459\3526\226\270\231\205\005:\305\363#:y\242\2409\345\025\347\271#\350\206\267i\262\007\272\255\016\2408\236(S9\030T\316\271\nR\0139\013_\235\272\0056I\272\340\335N:\273X\200\270\325\207}8\"\300\023\272Tq\2739L\014\340\271\347\311\n:\014\024\2259?\314h:\210\264\3029\323r\003\272\342B\3338\"u\000\272jz\2019\335]\034:\311^\2009\376G\2328\315s4\272\227~.8\322Y\266\271\360\315\2759\351^\2549\371\031?\272\247r\016:\201[u9\3706\247\270\356\256\207\271D\204\213\272\264\231\304\272qD\n\272\220\200\3039\232\301\3429\310.(:=2\010:\312\316M9\313\205\217\272\304\2718:o\243\250\271\376[::\376\027\r9\325\003\021\272\240\214\2048\226\303\3709\020\r\3259\177\375\3139\375\335L\272[Ds\271\247^j\272=\001\026\271\247O\334\271{\n\017\272\007\334\241:\245R\317:\000\217s:\347\037=:NY\253:\000\336B\270\025\325\0028\246\2116:BV\2018\351{\3079\342\240\2218\237U\001\272\246QQ\271\213x\320\270\033\302\3149\204g)\272\013\026\020\271\301\2550:f&\0369\037\355\241\272\200\373\355:\242AK\2720,\0359n\006\256\270L\274\366\271\201\352\200:\256\022\260\271\026G\344\271J\207\2479\321By9\241\34449\204\034\004\272\361\202\207:\220\322\2539\353\203):X\237\3218\260%\031\272\212w/\271\216y\0059,\301\0029\017r%:\312\t\273\271\374\'\3558\301\202\2729O\226E\271\2251l\272\340\271\2149\006\211\3469\346\201=\272`\033\1779#\372\373\267as\2519Q\231\237\271\004\001\010\272C\"M\272\371\3769:0\306\004:mBE:\037\026\223:\003\351\351\271]\204\270\270\002\264\014;\\\2468\272v\310c\272\336o\'\272m\276\'\272\315\267D\271\250k?\272\027\002-:\223\25739\326\254k\272\370E\2159\273\205\2609]x\2158t\350\3409\001\332\3259\362\351\335\266\357z\013:\331\222\014\272T\200\263\271\216Pa8_\236\3529\026c\247\270\277g\241\271c%\263\271|\306\3459\024\216\3679\234q\2739\271\261\2758\243\347\2539\362\363M\272&\221d\272\303L)\266\n\36098\002\24659HSr\272%\316\262\270\335\210%92\333\325\271D\3150\272W\345\204\271\340\252\023:\006\233\23693x\214\271<\254\010\271i\303)\272L8\2318L\350\0369#\214\325\271\302Lc9\231\t\242\272g\010\203:\240\250\024\271X\216\202\271z\3326:\304\034\013:\261K\3149\371&>\272|\036]\270a\274\373\270\320\020\3519\200t0\271\237 \246:\232\n\2359\177O%9\256\36699V}\2709\330\334X9\004\013a\272*\202.\271\367\207\3469\346:8:\377`\0318\177\024\020\272\326\016\277:C\003\003\272\232\214?:\316A\027\271p9\2659\245,\316\271\304\345d9O4\363\271\262[\02395\2045\270%GK\272|\312\253:\221V\301\270\024V\3379^\315\2659\332R\3748\275\344\007\272I\304i:\330O\3119\017V\210\271\257\222\2228r\227u\271\300\022\253:\276D\322\272\35025:2\360\241\271\002\263D\272\207&\023\272r\267C\272e\243\3149\017{\254\271\t \271\271\010\265:\270Be>\272\200N^\272\017,\3579\221\273\033\271\361\261\367\271B\305\0359p\316\002:[\242\272\272\016\333\352\270\230\020=:\302\237X:4\310<\271\332\362\271\271%\033\221\271w\'\3719/c\330\271\214\000\217\271\205$2\271\203\004\2609r\263\3609\n^\371\263<(k\271\225w\271\271m#\3579\n-\3249\361g8:V0\016\272\306<\010:\"\334\210\272\233\010\3608X}C\271M\361\2127l\322$9;\322\n\271\257\"\004:\363~\215\267R\367 \272\302\270\00392\277\3649\221!\210\272\350^\367\271\350\3653:S\256\2308\334\345\3658\260\261\257:\357F\271\271Y\377N9\262\351\252\271?1\016\272\354\017C:\313\2609\271$\342\377\271\265\223\3459T\206\3356\256]d9s\201\007:\335;\3678\367\324M\267\267*!9\000\307\3168\230:\003;\305}\3658\243\237z\271\316\017\350\271)YM9]\350T8\031c\301\270\362\261\250\271p5:\272\3432S\271\202r\030:q\244\243\271\256\265\243\265S\037\016\272]\203\233:\353Z\020:\216\030S\270\343-\3049\354\375\325\271\376u+\272\344\271=:-U\324\271\212\255\017:xQ\332\270\203\215-:\3225C:\270\336\"\271Nm\226\272\366\323L\272M\307=9\343\242z\271\005\2554\272\242\335\352\271\353!S:\324\001\222\272`\311\325\270\364\316\352\271\224\217I:\327h\000\272\"e^9\243\302\351\271\221\351\2119\263dU9\240\247`7So\202\271\241]\020:2\237\3769J3\224\271\355\\\202\272]\271\272\270\022\324|:;m?\272\034i\3239\021\216^:2\356\317\271\036\310\222\272\273\010\201\271qE\277\271\346\356\334\272\245\024\026\272%\273d9\267\252\2338J\267o\272\345.N\272\3700\224\271v\231 :\230\340\021\272\326S.\272\3153\204:\231\204\235\2716\345\311\271Ey\022\271%\225\0169\372y\377\2713Gx8-\016F8\r\016\234\271g\034\211:\275V\204:2\320\":&\372\220\272\005\212\2168=\240h:\235\347&\2723v5\271h\257V9\341:\3059a\241\3379a\013>:\270\311r9#<\2459\350\002\210\271\205\221\246:\014\251\255:\343\242\177\271\204\003p98\210\t\272\363\034$9\214\"\326\271\035y69\3410\306\271\207\030\3469l\3725\272\277v\341\270\266\2642\270\002\225\0249\004|\3279\264\313\026\272\020\261\213\271[\250\025\272\236c\247\271\202\320\3539\023\265 \272\034lg\266I\210\255:\265\213\233\270.\005\2269O\365&:3\224\245\272\367 -:b5]9N\024\274\271\246\276\3219\307\220\202\271+j\3559\346\242\275\271\301S\307\271\374GE:\337\217\210\271\231jW\270\016\004\006\272\262\377\237\270\207\275\311\272{B\214\270\035\\`\272W\313 \272D\344\2449fW\244\271I\036p9L\224\3559\365\321\000\272\362\230\3419s\004\3437wm\244\271\227M\353\271\350i\250\271\014\2219\272\270\26607\247J\205\271\002\307_:\320\327}\272\231\275\344\271\007\214\353\271\227\207P\271q\023\267\271\"t\376\271\330\307\3649\251\221e\272z\205\232\270\317U\2469\365 Y\271\322:\246:\236\177\323\270\240Z\2759OL\016::\014\235\272h\237*\271\303\203\337\271\233{\2679\n\006\214:\257Vw\271\334\320S9\323\221\337\271m.A:\375+\2439dj2:y\271\210\271\360\007\254\272r\024\2239\234\224\234\271\032:\263\271\326o\0009#C\200\271\336\271\247\271Gk\2569\240Db\270\373F\310\271\312H\213\271\362X\234\272\334\273\3539\373\"\0369\333\032\2759\276\034\3138\274Y\2649\213\261\3107\2100!:\031\266<:\376\323\3219EH\273:{\2421:\334=\227:\356\3164\2727+\322\270M~&:\223@\3619\325\345%\272a\003\354\267rS\35199k\3778\335\313\326\272H\265K\270\210\315\3329\021\014\020:y\253\2419\"\177\3559HT\221\272\373gw:S\004\004\270w\375\210:p\255\3468vHK\272\357e\2129\320w\027\272\334Q\3428?-T:\"\017\002\272\372\376\3019\033\217\r\271\016\354\006\2729D\251\270W\331\2149\302\225\212:o(J8\215lE:v7\023:\241\355\225\271q\003g\272\264\323\225\272t\374\2318-3;:\216\350\364\271\324\177.:z\320h9~}\224:\301\033\026\270,mM:\373(C\267\311\305\220:\034\022s9\0250\000\271\224\215\2676\353\221\225\270{\247t\272\344YZ8P\022\340:X\206{\271\005\275\211\272\032\305\2607\026\240\2119\332\360\3769^\311\t\271s\311\360\2721\223\2009\277\004\312:Ru?:\003\3739\272\341\367\001\272\363\273U:\264\213\235\271\256\033\205:\034\207\2359\3222*\271`D\334\271\201\226\027\272\302\371)8o\355\225:S+\217\271\373\253^\271\203\367\246:\325\225\242:\226\352U\2670\035\r\270F\313\2029\344>\203:\337\2427:\254Y09\2128\277:G4\3218\225\207\315\271B\352\2659\257c\3419\231/\010:\257\235::\014\277i\271\232\n 7_O?\271\375u\24198\271?:\026\277T\272\255O\3269\256\227)9\037\344M9l]\246\271\227\0316\272\344\306S:\005^\344\270z\340\r\272\252\3372:\263\313=\272\277\307\0349\357\034\3339K?\3019\016S\0039\321\035\253:\266\243k:B:\273\272\2324\333\271S\003I9_\027N9\002b\316\271d\002\t\2724\203l9\024\313N\271^:\223\271w\340\034:5X\2739W\214\027\272>\372\'\267\rL&9\3429\006:\tT\332\272\023X\337:\331\227O\272th\330\271]6C:|uw7\036RS9]\305\3359@)\2119h\36769\317M\0369d#\353\266/Z5\272\2254\0169\205\362\275\272\356\355-\270\250\3201\272q\257\023:\2504\2219\223\223\304\272\n\215x9\270-\320\272Z\326\243:\352}\304\271\223\244\260\272I\242\034\272\'6\344\271\\\3556\270\250\344\2779P\252J9x\336\316\271\316i\374\271b\260\032:v\276$\272n\031!:\tu\000:\227-\r\272\306^T\272\200B\266:\325f\223\272n\363\2129\r\244\222\272m\313p\271i0\035\272\240\245\024\272sv\010\271\'\201K9\356\005):\214\303\017\272\272x\304\270\203\322\020\271<\370\\9(\305^\272\362\350&\272Mm\3269\343\"\2338\230\022(\271JM\241:(\001\264\267\305P\237\272\035>]\271\306\333\'99\25297\023\364\231\271/\375V\272@\314\370\271\200\345\3738\244\"\336\271\035\020\t\2710\017\2748\335\346p\270c\316\0339\365\362o:\036<,\270\222\357\220\271?\376J\271\204\372\340:Z!\001:\250\262\231\267\3636\036\272\031\\&:+\"\2108\270\003\316\271\372o\337\270i\324\030\272\337SZ9\306\244T\2725\227\3558\024\355\2019\314\373\314\271\203\024\0148f\217\3119\212\036n9\262E\253\271\241\310\2058\002\317\2039\217\22409\361\310X\272\272\323i8\021*\261:}A?\272\275\326}9D7\257\271\203\014\2437n\265W\272t\234\2729\360\007\206\271*\272\3509|\335,\272^\317\2309\214\273\220:\'\366!9\237X29\206\007\345\270\3753\274\270#\347\300\271\223-\2049\353E\334\270\240J\215:\305\313\263:\336V,8\'\207=8\327L\005\271\001\310\2259\337\236\242:\033\373\027\2708\314\303\271\256\350\2429\302X\356\271Y\206\t\270\243\221\302\266T\371\2628\301\250H\271\321_\2728m^\033\271\216\314\2179\332/\334\267\035m\224\272\332\310z\272\262\357\347\271\313\342K\272\274\232B\270\t\266\272\271\006\311\247\270\234T\r:\236;F96h\3079\264\t\022:\264\357\2679q\305\361\271W-\301\270\276\354\300:4\260\327\271\037\245\025:\035\270\007\272w\245\3009\330}S\272\213\237\303\271\346\271L\272\312\021(:\252H\017:)]e:\256\346\0359\257\025f:\333\263\036:Xn\3409?\27599\033\342\362\271\226\311=\271%oW\272\232>\007:\357{\224\272\3018\014\272,\0019:\024\261\2178\345~\202\270\r\226*:5\365R:y\350k9\034\333!:\353\225\3579\010\355\024:\374_2\272c,\2459\232qE\272\323/X8%1G:\215\366\241\272\240g\3138kJm:\034\t\246\271\033\355d:\366zC\271\372$g9\010\214y8r^\016\272X\214\255:\352\352\232\272\234T2\272\340\30449\024%-\270|\345\\:D\"\3029E9\204:2\302\005\271QY\2618\255\232r7.\337X\272\276\250\201\271aZ\"9\210^\300:ux\034\272`n\204\270\014B\013:\310\304\0105\301Q%:\335H\303\2655}v\271\235\207\2239\241\365\205\271N\017n:\226\031!\271v\346\223:\273\327\211:<\255>9\223\203\027\271\236\306]\272\t\300\2069\310\'!\271z\276\323\271\220}m9\314l\203\272e}\231\271\207;\2209\001[Q:\311\222\005\272\3518\2509\006r\2409$:m9+\r\3438VjA\272\347_\263\271\262\240\240\270a\272\3129h\247Q:\250\327\275\271\346\300\361\2709\361):\033n\r:\345*\204\272\346\254\204:g|\3539\270\352\220\272\317w\212\270\307/\225\270\177+\313\272eC 9\343\352-\272-\336#\272&\027\344\271#\276A8\242\031\332\271N\354\3227\271x\230\271\206\363V\271\237\304\3379\334\371\2518W\274\036:=\241\333\271s\302H:f\236D:oa{9\001g\005\271g\336T:\226o\2079\246\233b\271*\277\271\272#\306I:\312\377\027\272\222\2404\271\236\006B\272\327\310Q9;h\017\272?\034\221:\264\235\233\271\230\222#\272U\333|:\220=\267\272f\026\350\270\032\303\031:4\255\037\272\027:Y9pP\2049\222\025\301\271\266Cx9-%\014\272*uK\271\201\276\n\271\020\364l\271La99\2601\2478\217\374\272\272\322O\2168y\346\327\270\346\360\002:\232\\]\272\314\370\3139\331M(\272\310\3440\272\003\224\221\267\365\\\023:}W\3157Y\223\364\271\233-7:\254vI:h\267\244\270G\027 \272\234s\205\271F\247\250:\262\373\272:\231\274\360\271\006t\271\267\201\242W9\001\221\020\272N>\n\272\323\210\304\270\232\03358\335^A:1\306\2269d\035\3358\3353\007:\003\3753\272Uy\003\272pB\3468\236g29|\347\t\272\333K3\271x\006\230\272\275\031\356:\274\344\374\271D\3566:p\01759\223E\215\272\2730\301\271\312Ql\2726\351\266\271\245\023\3379\355\271\0209\272\324\356\270@\342\36698\236\21793\300g\272\364\'C\272\230\266\2407n\235\3768V:\034\272\361\253h9\307t\2569\357N\3309oBm\272\0055\3578\016%\024:7}\336\272E\353\377\271\3030\3519\362\'}:m1\2238\221\315O9\340\314 \272_\361Z9\020\256~\272c\305N\272\022\227\2439\227\370?\272\021\2312\272\204\230\346\2713^2\271\252%\207:\202\0252\271\303\332\025\272\377\261\"\266\r_J:\241H\223\271_\312*\271\202\362\370\271(%\3367\312\216\340\2719\232B9*\201z\272\272\343\22290\224\251\271\003Y\"9\\J:\270\255Z\3118\2379\024\272b\303\342\271\025\\~\271\037\342q9\354]\224\265\377\244E\270m\250\003:|\261\3109}\211\2118K+#:e\010\000:$\275\203\272$w:\272\006\027\242\271\315\254\025:\021R-\271]6\322\271U\212\3659\237S\2558#XF\270\377\304\023\272 \272\t\271\214\266\\\270\322o\0208\210\357\227\271t\355\202\272\227\327\251\272(JX9T!\263\271\327IW:\006-\3529j\201j\271\014%$\272\301\360\224\272I7\022\271D\245\315:g\323C\271q\377\321\270\373\247\237:\203/X9\227\307Z8\316\345<\272\311\362>8:c\3328U\031\3039\303\000\025\272\356\313\252\271\253\336\3479\333\301\2019r*\243\272^\234\026\272>\001\r:\001\374L:\014\257_:\253\352\025\271\264 \2178\353)\333\271\r\207a\271i\0170\2724\203\273\271O\353v:@\375Q\272\210\271q\272\231 \\\272\312<J9\221f\3479\230G\036\272*\t\3679\240h\3509\226sL\271\306l\2079u\'\'\272%\261;\272Q\t\177:c\030\006;\025\002\304\271\347\306s9y\227l:iN\020\272\323H\3279\322O\357\272\0355\2309\202\375\2018\257\317\202\272\263RG:\216\326\231:\2652\341\271\230r\240\266\210\361,9\005[#9VT\366\271\034yL\272\007\240\2249\314\365(:\373&]9\313\013\231\272\3439_9\347Ip9\300\31798x+\301:\307H)6!\313\275\272\250\231\232\271\n\3527\2726\030\205\272\321\271$\272\224\312\3139]f\024\271\003e\272\271X\037m\272\2277\3029nGB\272v2\262\272\232\037\n:\035Z\2469d\'2\272\235\327\2258%\371\2149\240V\215\271\242\223\3129\355\202\223\272\212\324Q:`1\002:\305\3151: U\256:\201,T7\0169\0139 G\222\271\3133\2269\366\033`\271\034\246\225\272\023a%9\365\337\"92\335\3269\260s\200:K\33509\334\234\3268i\001\023:\263H\305\271\356j\363\270\031\230}\271\335\360\320\271%\340\2147G\334C\271\336\251\247\271\017!K\272dg8:\nT\204:\216J):\375\344<\270,\353\2637\342I\036\272\341t\2749J0#\272\223g\373:\205\035R:\\\217\305\271\204\302\3569\200I[\271\\\201<\272\333u\034\271\223c49\371iU:\3466\235\271\273\323>\272\303\007~\271\223\234\200:@\247@9\322\001\3329\021p\370\271m\232^\272g\345z:\307\234\225:\200a\3739\312\024\22798\021?\272\005A\353\270\307H\3019\223\314Z\272\220\233\2528\3475\312\271|\230\3079\237\014\277:S+\207:|\227`:9I\3339\226oO\2728\275\236\272\315\323\205\272A\2039:\311\007\3549\262AF\272\376\215^\2703%\303\272k\275k7\264\300\206\271\024\005\264\271\271\244\177:\236Qe\271i\355\3669\262\350\222\271S&\033:\032\n\033\272O\237\205\270\301\212\312\267:\rX:\346\360\000\272\305\353\2468\253\3476\271\023\245\2219\302\261s:\371\334\213\271\276\245\224:\355E\035:O:8:\245\273\252\271[\273\3428Y\007\337\2715Q\n\272\034\355\035:\277Mh9\364d\\:\262`\2349=\233>:\366e\2708\303\214\2309\225OZ:\026\332\336\272~\226\367\271\3339-\272\036\0134:(\324)\272\377c;\2724\337\210\272Wka\272\251\335\357\270\3215\2029t\177\035:p\037\2449bo\240:\346c\3679\336\275\2709\216e\027\272J\026Q\270\032xL\272/F\212:\256F\210\270e\300\206\265\016\322\230:C\033\341\267\253\353\224:\316\216\0139];\3419\315\354\0319D\313\034:y\310\3108\340\347\032\272\024!\201:{\222j:\005p\022\271\034\333!\272\331vl9D\352\376\267\317%\350\271y3<:\362\355a:\037\314y\270\222\032+\271v\262\256\271[`W\272\247\220<:\314n/:\000\333W98\200\247:\301\1771\272\207R,9\032\017\n\272\027\376\2749\365\231]\272\327\316_\271\373\266$\271)U?9\325F\3439x8\266\272@\370\0059\326\321\0338v:\177\270{\005#:\016,\3169m\334\r\272\245\0271\271\250\265\3406j\324\2769\014j\232\271)\355\2049\022\217=\271\t6s:\314\367\2709\246`A\271\030\255!:\312\005\344:\031\326D:1\021:\272~\177\034:BQ :T\204c9D\005\272\271]\340\300\271UB\2748\242\273R\272\351\252\360\270V\255j\270\r\021T\272\276Y\240\271\262\202\005:\031\n\2359\352\276\354\270\254]\352:\375e\3068\205\365\0178U\266\2479OZI\272\315\371\245\272\n\032\207\270dR\210\271\302T\312\271,o\235\270#|\2429\007(\0179\316\3627:D\262G9\006\361?\272z\243\031\272\246\327\336\271\365\203\027\271\357\232#\272\262\02139\344H\231\272\\g\2579\022#\3719\255\207b\270`\367\000\272\035tF\271;\t\021:6\233\212\270\223\351\211\271\236n\360\271Mt\2219\374\211\264\2715\263\354\271@\312\205\271\340\257\3439.\256\201\271\007\353\006:\324b\010\271\271\361^\271Q\252\216\271o\331\210\272r<\3149]\2213\271\003\205\3339\326\241\010\272b\201\n\272{O\327\271\300\033\2459m\377|\2711\242\217:uK\'9dB\2418\032\020\246:\374\246Y\272\374\210\23078\370D:u\344\2077\\,\2729\302\030\300\271\275\013g\271Gd<\272\017T\210\2720\311E\272O\177\3738\254\021\3259Mx\234:\232\253v\271,\330\2638\016\'u9\321\350\374\270\"m\3509\334\266?:\303Z\026\271%\027\0138\244i\007\272\020\334\010:\363:\000:\340M@9\257\234>:#nz\270D\026\304\271\3673\2669\332\374s\272\313\026c9\016\321\200\272\021\272\303\27191\215\2711\014\236:\033\020\032:rkt:&(A:\237at:uG\310\271\020I\266\270\260Z\2478\346(\2549\331\255\006\272\316\031\355\271\315\314\206:\345$e:\242\361\2769\017?Z\271(\25129\214I$\271\004g\265\272Q\245\3639\"\343\3379\374o\221\271n\304\3248\337 6\272\365Bi:\217=2:\216\305\3338K\322u\272P\212\307\272i\322\2639\250\276\0079\346*\203\272{\310!7\036?\316\2713\03009Th{\272\326\245\2679\034\241\177\271I\024\034\272\371B\010\271\311\323\'9\264\251\330\271\335\352\2369$\241(\272O\372\3709\254\335\005:\210\340@9&\003\3069l\177x\272\214\320\247\270\341\036.9\234\313;\271#\242\220\272!\224\235\2723\234F\271\3071@:`\024\3318\3643Q\271J\002\246\270U\024/\271\243q\2349\367\207\334\271\337J\206\272F\303\033:|\244\2679ci\2469\312\225\3339\247P\347\270\257\253l:B\255|9@~0\272\234\036W:\277qa\2720`2\272.\205L\272&\272\177\271\300O\3169k\177R\271\366+i\271\354T\303:\305\216\305\267\245\010,\272\177\322a9\3500\241\271!}\365\271\330\016\213\270\237\024\274\270hDB8\273\322\2369\3775\r\271\023\"\025\271\332$\232\271y8l\272q\344\022\273\020\004J:B\001\310\271,\203\237\271\004\325\3739_\244\177\272\212P;\272\032k\251\270\334\007Y:2IO:\363\315\3438\271\211\356\272\32756\272\025\211\3479@\024&\272@\2449\272<\273,:\257_v:\323\337\246\271\253\337r:5\317\3759&}\200:\350\236I:6\313\r:\215(\3658\325\360<:\361\230\354\270\273\023\215\271\324\366*:2\3637\272\315\352\354\270\014NS\272\266\300\2029D\027\317:\014[\026\272\327\365\237\271\325\010F\271I\361\033\272\266\311(\272\234&\2419\235\005@\271\'\201^:9\037\207:G)<\2715X\3349n\215\2067\350|\3359\\\335z9\00115\271#\036\252\271v\006\3279\267\020\3616\304\301\3449\210\310\3259\300\201\003\272p\222F:~\037\0279b\0268:\017\263\016\272\251:\2649\340\314\253\272)\365\310\27068\016\271\004\032\n\272\r\302(9s\021\200\27294$\272 `7\272\032\2770\272\317S\313\271U\354\257\272vP\013:~u\246\271\004S\013\272\206\354r\270\251\216\224:\007\275\264\272\220\304\301\272?\00419<\2269\272\t8\2479\274\314\271\270\220\337\1779\362s\0168M\227\3408O\317m\272!\330\316\271K\201\026\271C\354\026\270\2763\3239\352f\201\272+\237\016\272\2344Z\272\264\250\3248M\024\214\271\313\2367\270\344P\177\271yB\2209\355\3122:A\344\223\272\373`\000\271\033\230\2009 \206\273\271QTB\270\246_J\272\006\335\215\271\347\376b\272a\260<\272\230\t^9\327\300\3229\204\3705:HW\2009\010^=\272Kh\3039\312#3:8HW:\237Q\001\272\266\223<:[;\246\267\3249\375\271\020\014\201\272\204\362\2129\235\253\2238G\000\n\272\372nQ\272\2345\364\271\370\205\371\271qf\271:\330oE:#\213\301\270L\005\232\267\306m\361\271(\'\225:\"Ya\272\350\014a8<\000\3659\316E^8\027\257\204\271U\321\314:X\305\320\271gjC8D\340\234:\360\007\34473\021\3508\237.\007:\265y\223:\242\345\220\272\222\256\016:\025D\3257\341\352\'\272WW-9\034\'\2049_\3420\267\"\002k:`\236\3628p\223\204\2719\210\033\272Be\227\271:6W\272d\013>9\200\27189rg\237:he\013\272\223\005=\27228\2259\242\031\2268E!\223:E\010\241\267\243\261\236\267\353\201\006:\3445\3638u&\025\272+\031\3349?9\3139\321\032\037\272\026\377\3619k\026R:\331\264\363\270(\237H:GV\211:\016\350\016\270\002\037\322\270\355\300\2229HC\341\271\312{\300\2719\001j9\325\220\025:\232J\2249\341\226\003\272\330\324\274\270}]\223\272S5\314\271H<*:\217n\001:h\265\3119\270F\274\272{\235\2148Mp\3107OJ\255\271\246\375\256\272\230_j:\235S\202\272\263\207\275\267\222\307t:\355\352m:\375\243\242\271c\310{\272\024\230\225\271j\305#\272\317*\2019\002\324i\270\330\362.:7D\202\270u\24429J\206\200:(bt9\265!\203\272\356\346\010:&\327z\267\2716\2627\333\352\267\271\221\020\3639\272M\3079B\335\3077\374\370\034\270\321\200\244\271\335!\3708\355\325\3169\275G\242\271|\263\03294Q\366\271m\275D\272\200\332\342\271E\343\0109\233c\016:q\375\2139\351&\231\271\201P#\272\273\260)\271\226o\224\271fA\272\271\240\177\352\271H)\010:}M-\272v\235\3369\001\t\325\272lz\31593\366*\272\010\r\037:x<\341\2715\220\2629@\216+\272\177\313\3419\374\263g\272I\3001\272\373\032\202\271U\322\316\271\016\214q\267\340\214B9\334\367\t\272E\220/9~jt\271\300\225\3568\244\025\327\270\274\322\232\272\364\262(\272%\273\3777\236\0305\272\003\265\2559\255Q\3279\001\250E\271L\001\223:\316\252`\272\202\370\241\271C\226\000\272\037<):\0233?:3t9\272\036W>:B\253\256:V8\t\271\202\273k9\022\367\272\271H\rU\271\334\211\347\271z\\\350\270D\r\007\271R&\244\271\226MT\272)S\3039\000m9:\337\350\000\272\257J%\272\267\215z\272\326\245\001:b\007\363\270t@\005:\252\210|9M\220\014\272\014\247\3409\275(o9SR)\272\245\020\334:O\030F8\323\230\0108U\371\200\272M\352\263\271*n\2109 \275B9\323E%8QM8\272\334!\3359\371\350[\271\031$\n:\355\312\3358A\317J\272^\351\217\271\300\"\212\2727\036\327:\351\333G\271~\276a\271#|\241\272p\t\2569B\227\000\272\300\016\263\271Z\'7\272\224Ff\272\364\253\017\271\364\370\232\272\301\332\3749c\335N\271\213\303\0059\007\217Q\271\377\275\036\270\340\206Y\272\237\t;\271\264}\3479\347\007\220\271\215\310r9\345\375\2278\004\322\000\271\222\021\000:\314\257\037:\353\240\257\272\014w1\272\256\312\2279.\274)7/g\036\271\242\231\241\271\332%\267\271\310\312\326\270\353\377\202\2720\253\2749\227+\3378A[\022\271\335\307+:\205\327\242\272s?n\271\253\374\35496\277\207\272fH*7 Q\342\271\365\317%9\236f\016:\013n\257\270\323\317\'9/Y!\272\3413^\272^\2776\271\345m\251\271_=\014\272Xi\344\270\215{\036\272\231\313\2619\360\004(\271\211.\014\271\221:!:\204s\037:\301\035\000\271D\225\222\272\033\245Z:\213xt\272U\363k\271\307Q*:hh\3579\014Dp9\016\353:\270\376On:q\005\202:k\267\265\271A\331\302\270\t\340\350\267\354\336Z:6\276\211:~6Y\272B\370\242\271\252\235\2079\355)\2769\004u}\272\325a\2729\242\236\335\264\222$\273\271\023\271\2759\2569\202:\370\023\3557wq\014:\034\243\304\272\030\340\027\272\353:!:w\024!8U?i:g\001:\272\232\021\332\271\034s\2149\247.\3539Q\346\006\272\025\211\260:\274wI\272\033\334\274\272\010\324(:\313\274[\267\3165\230\272\246\337\324:\350\333Q:\333\264198\t\202\271\311\277\3236\364z\330:5\006W:-\006\262\271\306\\Q\272\274%\3039~\017\2429\305S\017\272)`4:Ie\273\270\316W\335::\346\274\271\252jt:j\314\201\2726\345\2269\222\212\217:.0\352\270\004=S\270y\305|:\236\225\2729\261\260\3709\251\020\273\270\323\264\2209\245\331\3368\023od\272\316\206\016\272\006\3277:\313\216\0209\362\033\024\272\322\002\034\272\250\235b9y_\034\2727c|8\033I\r:\247l\264:U\243\211\271\3050\021\272R\205\365:\377\2245\272\373\03289R;39m\331 \272\226\332I9\225g 8Tp_9\013sA\267\347@~8\357\362\224\270\346\374\216\271m\021-\2724,_\271\003]A\272\272\315\2318\350l\031\272\364\345\010\272\241\203[\272\222Wr\271\333.j\271\245\347V9\254L\0378\026\220\003:<\232\23097\032v\272g\333x\272U\277\2719\023\343\3228\367\276\366\271;\335&\272\266\325t:G\346\0139\312s\034\271dI>:\313\375\271\271\320j\262\272\017\340\2169\261\014\230\272\373\003\3649K!%\272v*>\271Q\"\251\271R\361p\272\241-V\270\224\022\3219j\352@:>\037\3428\254\315\026:\247\304\005\272\024\316\335\271_r\014\272\310$\240\271O\250\225:\336\227\261\272\352\261\025\272\315[\2269a\332\320\271\005t>:\007\353\3255\221\020\010:\n\347F\271\356\330\2549\366\336\2649\004\030 \272C\020\334\271\003\225\3519\205\207?\272\344\307\2229\270e\3139[N\237\270\225\025\275\270C\333\2259p{\036\272\222\262\213:o\003\250\272\253%\0349\314x\2659\255\232\260:\226~\0069\363%\016\271\t8C7*%\3259,\026\242\270\272\205n\267\263J\214\271\270n\235\271\335|\006\272\026\337L:)\206\004:\321\3771\272\030r\n\271\366\300C9\301\320#:H}[9P\325\342\271\'n&\272C\263g\272?\216U:Bp\265\271\326+\004\272\367\305\2439g\234\2449\3600\2669\034\271\2535\005^\322\271\020\203z:7\003\0249\334\314\251\271^\230{9\343\317\2639\305\250t9P\"\337\271\345\334\2759\316\345\2309\250Qd:\341fK\270 \351\3567\332\312\375\271yiF:\223Qk:\271\240\2579\235\307\213:\275\266\2439\255w\311\271\242\374\030:\ri\022:\275\224\0018\344\016\217\272\340`X\271o/\000\272%5\2208\262\346H\272\216\234\322\267!\235\r\272\017\341\005:\254\323\0079\337u$\271\221\340\2719\374]\3149\277\354\r:(X\327:mV]\271n\3714\271\311*c\270/}\2558I@\235\272x$\214\271\n\245\2249s\205S\271\342\262\367\271\306\316\343\271h\327\2769\034\245\333\266+\332\245:6!\005; \301\035:xr\004:\037x::\256$\2559\207\235\267\271j\245%\272$zu:U\r\024\272N1V\272\361\026\232\271\010\276F\272iO\370\270L^Y\271\027\206\246\2710\226\t\272e0\201\272\274\030`\272\024\360\231\2727k\0279q\036\2129\347\316\212\267\342\243\321\271\200b\0109\230\273\3049\327h@:\262\343M\272\240N):eY>\272\313,\234:a\026X\272\275\232\327\271\211{\\:?\031\037\272\350\317\274\271\342\267\2558\262Qc\272\005\332\216:$\t,:\245\254\247\272c\025M\272l\033\004\271\233=\3108\256\005\361\267x\307\271\271\031\347\2538\312\027\226\271\257\270\274\271\220\355\007:_\301h:z>\0209!\201\3669\254\22738\206\252\"\272}\225\307\271\006\262\264\270\255\335\022\271\222\312\3769\230M\3138)k-9D\351\":n<s9\245E5:\236\202\261\270=e\311\271R\216J\271\343K\340\270\373\026-:\'Ae:\325\264\331\271\260\204\315\272~\233\216\2714k\2219r\267\220\271\375\3502\272\265\273\237\271\347\02449\341\213\225\272qC\242\271%\256\272\270\225\255\006:@%\2649\342XU:\260\'T\271\334|\27184\024i\271\253\001\010:\371\216\3617\376\21709\016\212\010:Za\037:M\232\034\272:[B\271\030\344\320\271:B\257:\240C@\271[\275\2349\031;=:-\006y:U\253P\271\375T?:\227\016\020\271\246\332H\272\230\374\3609#\215\2669\020h]\272A\307Y\271y\225\334\271bx\3639\005\301P\270\216\013\221:\331k\242:v\276\177\271>-\230\271\023\273\004:\230L\2209\301\001\3469;~\3578\211m\254:\035u\023\272\377TV:\375n4:\220a\326:F\262;9\210\017\007\271\213\022\203\271\373\306\3479h)\001\267\252\351\2209\321\004\20793M\307\271\262\331\26593_\364\271=7\033:\371^\267\2713C\205\272\364e{\271vXb\272\005\313\3127nr\220:\036\224\235\271\312\330\214\272a\211\250\271|\036\217:~\006\255\270h\355j\272u\215\2229hu\2329\250;18E\273.\271\356(\3228\000\006\307\270 \016\3119\373\022\246\272G\207*\270\302\033}\271\310\335\266:\316r:\271\236F\3118\031m\3159(.\231\272]\255\306\270\262\376\370\2719l\273\271@\245\216:\350\017\320\271\247i\3248\343\214\366:\212\326D\272\300\007Y9\177&\215\271R\304\003\271U\311d\271^\266;\266Gp\020:\341\236\2449\367\203\234\271c\252\024:\215l\3769\021s\2039?\2538\271-\366\316\271\021pY:~L3:\233-\236\272kJ\215:\367\327\276\272\n\354\327\271J\224\2438P\344\0068\310O}\267\031\242g:^g@:tX\241:A\325\3519\2575\277\271\037\263\2137\354\343\2728\314\t\232\272\364I\2648\035\376\3139\210>\207\271{\2701:\304\251\255\267?j?9Zd\200\271\000\347\206:\332n\351\271\226\235\037\272F\335u9\027\212\353\271\346\254z\271Pf\251:\356\3249\272\360yH7\242Z\3749/\2737\272h}\272\270\350|\032:\361y\325:\227\"\2479W\024s9\223N\005:\'(\3128\177\007d:N\022\031\271\332e\340\267\375+\0108\010\241\303\272\276\020.:\324\353\306\271\325\374*9\274\325\2029yzR8_\024\340\272:\221\2779]Gc:vh\2028\223as7A\n7:\354\207>\272\230d>:\026\347\2778\\\334\r:fJT9\216\024Y:#\024W\272\270x\2369\350#\0068\245\223J\2713_=\272\222\333O\272!\344\004\272\007(\247\271K\234\301\271\027\337\n\271\"O\270\272\363\352\027:!\253\024:<\313\2518dc\2419a\227=\271\375J\322\271A\216/:Z\270\227\272\363C\001:sZ\025\272\034\342\3179\256\331[:\313\347x\271\013\270\373\271\265\241\020\272Q\267\034\272\356\350c\272\371\246\343:^\254\267:\203\254d\272\024\005t:9?\3109X\363h\272\224\020\337\272\374\212\2739\266k\223\271jI\363\271\010\3745:C\260\230\270%\256+:LyI\270\223\317c\271\313k\013\2712\016\2049\013ZZ\271\246\310\2629\370\367\2629\265\311\227:\256\246\343\271B\240f\271B\363!9\3246U:\254X\0139\001\335\323\272W\001_:e\031\211:\236[-:\313\177\263\271\221\2323\2723\271\3769A\216B:\244\354\247:\227\333F:\274\301\004:\'1L:\036\330\026:\366\2477\272\326\217\204\272\340\1777\271\"`\2349\001Z\200\271\255\332\333\271\022\246\023:\262g\310\270\330;\200\272\227n\2169{\326\3565EK\264\271\245\335\030\2721`\233\271\022\213\232\272\034G\375\271\204\355\0078\371\177\032\272\240\326\302\267\017\360k\272u\000B9\361r\0179UB\301\271l\244\221:\334\311k\271\262}\254\271\010\255\2669\362+\216:u}\010\271)|\240\270\354\271\35293L\313:\014\230\007\272\320\346\201:g}\3639,r\2169\205Lx\267\237\035%\272[\301V\271ikZ\272D\203\2139\215\240(\272\026\362W:\373\276\316\266\270\025#:\rfe\270\270`\2639\036`\243\270\355\246\3657\306\027\3339\355\347/\271\ri\254\271\246eu\2725E\216:U\0211\272]&\2329Q\373\316:\331\341\3538\"\001&9:p\3169\203F\263\271\203H$:\364\210\3429z\022f:q\252o:^o\2759k:\2779lp\326\271\004\016\2348\212\366\227:\320I\320\271\3310:\272\257\370\372\271\033\304\317\271/X\221\2705\324F9{2\2528\334\221`9u\307\377\270\275p9\272\276\004l:\3424\3129\246\363\220\271\230q\3639\\\026\035:\333\3621:\233\212\375\271\305\303\365\271\267B\204\271Gq\3227\205]\334\270\242\025\274\270\027\237\010\272\000\003|\271\253\327t:\321m\354\271\253b\3053\215\370\330\271?M^:\025W\t\271\243\267\0019\221\312\277\271\271O\0038\214\250\2729\227\"\227\270\376\326A\271\275\371\2069\301\27618+[\3619\346\2530:-\347\\\272%\233\3339\030\250\363\271F\005\243\272\341\2534\271\025\334L:\366\014\013\272\314\201\237\270\035\203\3519z\313\262\270<+\3229N2*\272\322@\3639\261\006>9Mh<:z\346\20498\201|9u\343\034\272\252):\271;\025m:p\031\3459d\031\243\272N\305\312\271\345\023\021:\347M\3509\274\227\036\272\325=&\272\303p}:\300\370\275\271CRK:m\233\2509\033gm\272e\'9\272ev\206:\306\366\"9>\002\222\270\341\203\204\272\236n\3068M\017\r\272\017\033\255\272\251uU9/\274\017\271\027\274\223:p\210\3549c\217-\272\232\035\':[4\3669\177\274m:\361\372?\271)\351\035:\344V>9\376\205\306\270\302\\\004:\250S\350\271\371\241\007:\317i0\266\202\254\2479;\211\n:\263\242\252:\213\')\272\206(\202\272a\264+:w\373\305\271%y\270\271\'\224\022\272Z_\\:\020\027/9\261\033_9\026[(4\'{v9\235\205\034\271\2743\0328\'\334\2079\216Q\37589\336\257:!\"$:\204,\225\271\203Sf9\010E\207\272x\003z\272?i-9\000\r\265\272\213a\':\200\371\351:\373\224\3318Z\201h\272\373\204a\271\254w\267\271\371;U\2723+\315\271f\275d8\351C\002:\376\216\3528\341t):y\307^\272\017\265\262\271\350j\3676<\221(:[\351\236\271\202\224\2368\031\030&:\317\254#9\022\300Y\272@\367\017:\231t\306\267\235\277$7\200\343O9\034\210$:uK[:\236bd\272\342\204\305\271\356\240\331\271\261\310\313\271\035[\343\271?\276\271\271\350f*\271\270\365\310\272g\201\227:\207\317n\271 *1\272\314f\002\271OF\n:\177\356\2359\314\037B:O\3718:\203\\\023\272\244\253\334\270\036~\2329w<\0029\371x}\272\306?\221:\363\204\2059\277\212\205:UX\031\267\320\261-:\037\375f:\365\237\223\272\373L\0019\330\330q:\035#\030:y\203q\271uF{86\275K\272*^\277\272\234j,:\331\336`:R\375q\271@\372\213\267\322\260\220\272)!\2519h\251\203\272\230\204~90|=:a\014\031:\243\231\1778\225a\262\271U\200\2468\325\341Q:\217\252\264\271~NC\271\374[\026:hY\206\272\354!19\340\0357\272\260Gh:\301\0205:\321\335,:.\371C\272\202\357+:l\377\2429R\216\2578\310\375\271\272\3024\217\271)i\305\267+r\3617\244\007\3739}C\2418Z?\300\271\202\351\225\272\021\250\277:N\336\261\270\005\313\022\272\2139\210\272\004\300\372\271M\210D\272\226\001t\271\253\264\322\271\337P.\272E\332K:\017\311\3129\216\235#\272\\nj\271Fc\0329M\302\324\2709\206\1779\354Z\23691\337y8\354\366\200\272\2607c9\204OO\272dY\3329\002\361\2735\367LT9\243\202\322\271w\017\3269\265\374\3229f\0228\272{SR9\300\302!\271\t\261\301\271z\302\237:\264\016\013:\2502\235:)>&:\034\311\352\270\034\032E\270\232\3252:\2702\342\271\363T\244:\032\255\3329\367cY\271g\032\034\272uJ\"\272f\203v\272$\342R\272\334*%\272\301\312_\272Q\271U\272\343\001*:\363\323j\272zv\236\270LB\2059\010\265 \272\315\214\2428K\177\0269\232^@:\003&p9e\\\0249m\226K\272T\217\2059y\225\212\270J\324\224\272L<e9\206/\200\272\3614U\271v\337\222:L\330\354\271\031\265[:\351\021\312:#\207\243:I{\362\2701\024\362\271\211\323\030\270X\255\2009\345vN:i\003\243\270b\267$:\355l\334\271\211\230\r\271\322 \2229\270.\207:\346\317h\272F\313D\267\357\212a:vu\2329e\325\240\2674s\337:h\306\216\271\330~>:\"-\306\270\376\350\2029\331e\016:\004S\3109^s\003\272+^\341\271\232W\212\272[[\210\272\347T\2356\357\324\316\271\232l\277\266\2071Q:37V\272\301\346w\272S6\3508s\374\321\271\245\343\0329\017\026[7B\350\210\272n\270\270\270H(@\272\224\243w:@z\3069R\361\3179X\213\007\270\347\2124:\323\324\2709\206\303\317\2718\313\3468\376%\3108\330\352\2319\032<b\271aS\210:\226\336\350:\256\233\2769\317l\354\270\244&\301\271\263kn\271\223\000F\272=\210P\271\'\n\2268\027q)\272\324/1\272~\277\3009|%\247\271\200\331U\270+\01689\177S\340\270%\231a\271\276\321\3377xv\213\272\360\271\221\272\024S\247:\213,\301:1C\3019 \257\023:\213\201\030\267Kz\3409\205\202\2759\306\272\030\272k\340\243\263\204\346\\\272\250sg\272f\236\3729\235\377c\270p\264\205:\026\031\250\271\372\025E\272\302=G8t\3251:\222\337\2229U\352\214\270\221\376h:\014V\022\272\006\354l9K\245b:\354\372\3207CK\3039\206\376k8\202\014\213:P\023\276\272\257<\007\272\204\024\t\2722\266\313\271\342\315\014:G\233\2579s}=\271/-\2359\3441q9\354\302\3769i\353\274\271\277\330(\272\3120\232\272\351\270\3549\356x_\272\033\324\3408\222] \271p4\253\272sv/9c\307\361\271#\330E\272T\227x9\311\030k9\204g\265\271\016\271\340\271Q\331\264\271\350\316\225\271L\254\022:\234\253l\272\270\365\024\272^!\367\271n\261\0049\242\244Y\272\333\217\3359\2312\2609\030XC\271f\204\376\271\2404\375\267\217\270&:6V\2519\000\335\372\270\216\3226\272xr\257\2727\205^\272\243\036\004\271\3276+\272Z\001\354\270\324\037l\272\365\230\016:\367\35769\206I\31392G\016\272\205\002\255\270H\216!\2721\365\277\270\177p\201:$0\0019v6\331\2678\014\026:\023\034t:-*u\271\324r\276\271J\327i\272\253p\241\272\363\236\243:P\021\":\216w\3439t\313v:\214.\205:mQ\377\270\330\tJ9\226)\3479\0334\017;\010\023\3669\301C\220\271\306\221\370\270,g\315\271i\306\352\270\006\236?\272\257\206\365\271)\003\035\272\202i-\271T1j:$?\216\271=~\354:\240\222B\272\000\313m:\n\266\320\271\332\3445:\031N\021\272n\236\316\270\325\246y8d\276|:\316O\3227\256,<9j\rF8\252\321\362\271\355\311\025\272\031\3558:\260\271C7\264\275\220\271\365Rf\272\312W\020\272\256\300\035\272\2655\177\271g\321\2568_zI:\t.\0139(\0145:\021\203\265:X\225|:\004\275J\271\242\310\271\271\"cx:\202\024\300:m\341 :\271\313\265:\277\337\371\270\306\371\236\272~u\2179\'`\035\272\263\360\032\272]\001v:\271>69\326G\245\271\277\340\':}\214\3709\217Z\253\271\273\345\227:9\347#:\357\033\177\272\026\330\2069u\376t9\305\367\332\271\322~\0329\351Y\3048zV\025:\350kZ:\036[\013\272\341K\026:\'\225\276\270\367$z\272\032XI:\352L\216:\216\'\371\270\266\277\334\270\212\204?9\366\221\252\272\351\205F8\177\036\003:\252N\014:\250\262H7Y\353\035:!\253\r\271\315\2767\271\255\344\0039\266\354\3139\n\310\3269\327Y\3138t\2527\263\032\337\3078\304\307\251\272UTg:\260\020\212\271.\253\004:ewh\271y\216\230\272\321?\030\272\225\r\226\271\333\036\313\271\234B\n\272\266\016n\272\373I\214\271\343\316S:\203!\032\272\357\266\3439\034\230\2619HU\206\270\302[\002:b\'+\272\002h\375\271\016k\3249\003\224?9i\373\246:\207\223\036\271\377\2668\272\227\'>9i\'\3739 \375\214\271tA\274\271\344J\3068H\226\2679\177*\2219\204f8\272,\223\3519v\2709\272U\252C\271\221\254(:(\255\3129\341E\020:\307\263S8\236%\326\271\n\334\2719\032.`:\367\325G:\252\207\030:\370\367\207\272\310:\2049\227\212?\272.A2:\256\271\317\271\205\033Y\272\243y\3747\032\230Q\272\205}g8DZ\203\271P7\211\271\353\353\333\271v\331W9\'\246\025\272\226.\203:\325\220\3309\002\354b:l\317\236\271!\201*:\225\032\210\272\231\232\021\272H\306^\272\276xt\270\221\251\200:x\010i\272n\0318:)\034\0379\326\'l\271f\2375\272 \362f9L|\002\272\365\337\275\272\027\207@9G\023\226\271\274E\335\271hhj\271\246\345n:\315Z\327\271\035\t\217\271\204\355\030\270\317/\006:\256[\001\272?A#\272\364n\311\270-\200\203\271\253~!\2722n\3339\2750\021\270\036\"\222\2713\250\024:V\200\3227 \020t:\363u\233\271\3008.:\255?\014\271\300x\2759\177w!\272\361Z\2019<\'\005\271\344\016\2348S9\254\271\276\'-\272-\357\365\271_v7:t\317\243\271N\212\3168o\244\001:=\207j\270/\025\2169wC\217\271\250t\3538\205\273\\:Pu \272\204\363%\272\330\'\311\2716gu\271\001\330\222:\347\225\240\271f\034\020\272\224ef\271f0\3059\3039\205\272%\252\2178\025\306\347\271\216\252x\271P\273T\272[\326\212\271^\0168:\253\263\022\271\361o{8\330\360P\272\007\300\223:\266\362Q\271XW[\272\022Np8\206J\373\2713q\3519rz\2338\020\244 \272\313Ox:\260\025\3449}\177\372\271\216\330\2109\327\361\2579\241\230\205\272\361\343H\272\316\376\024\272b\345\330\270\221\331/\271\nd\2368\354\210(:\243h\037\272R\263\":W\375\023\272\021\375M\272k3\0149-\321$\271\307\272\010\271%\037>:\022v\2759C\321\0349\302\270\3769qCJ:\210\364\2249v\375\343\271bz\267\271\273\3554:\243\006W9\276\207X\272))_\272TY\3119d\271:\272\211\274\2459cEH7\307\224d\272\233\0342:\r\216\302:B\215K90\255d:N\rn\272\266\313*\272\'\365\3559\205^N\271Z\022M\272\362{7:\320\330\251:\351\334\035\272Z\224\010:6\215\252\270\n\250\016\272\222\337p9;\371)\272\300\2517\272\365\177\2019\007i\230:U{}\2702\304\023\272\251\306!\272:\213$\271\322G\351\271\311I\217:\317\024#8\331\'|\272\243p\001:J\376\236:\263\355K\272\200\t\027:\225N\306\271\375\315g\271T\207\2059S  :\213t\017:\275h\304\272\201\242\226:\205\214\232:\351\276\3009\254\255\255\271\263\232\201:P\027\014\272\270\263)\271\251\277F:-\322Z9N\324r:\ng\350\271\333\301m:\004#\202:\005Q\3169>p3\272\270B\3258\350\r\017\272\266A\241:\003\033\243\265>d5::\000\344\271\004\360\t:\235\031\221::\017K:\022t\0269\325}h\272\325\206I:\346JO:\237\324\2648X,\\\272\031\324\2347!\231\2318K-\2129tO.9\341)\000\272\"\326\\\271\326\267U:\276\371 9c\347\2459\211l\016\272\021%\3009L\211>\271@.\2409\273\004\2229ay\0039\210\350\305\2718\276\031:\374V\3339\346U\224\272\246\373\2769\232\000\330\271*\216\2159\234\363\017\272\367h\3639W\331M\272\016\001\2668a#8\272\206\365}:\024\212W\272\333\210\314\271\343\345o\272f\253\2458;\262\262:\3132&:\222~\261:K@\240\271\221\2770:\354m\307\266\027\317\340\271\343\376\307\270\227\007\2659lW\3769\220\247\2209\267b\025:9\314\025\272n\205\2358\364\372R\272\306\324n:4\221\237\270\275\213):[\275{:D7\2419\370\031\n:\265\372<\272\271\3475:\323n\242\271\246\005\2768\01783:\232\352\177\271}\217\000\272D\332\r\272z\373\002\270\027l\001\272\271\313\2518\016\256\264\270\331\367v\271\267ny\271\260&\317\271\252\242\1778\364\033.\271L\007l:\342\036(\273Q\325x:\273\177\256\272\213\334z\270\361\336\2179b/7\272B\032\2079!\333\2619\256*\2139&0i:\212\017\'\272O\277\206\271D\371\212:\267\324\212\271\205\007\200\2727\334\215\272\322\010\221\272\235\203R9\362\354Q\271\032G\2339\344\246\230\272\360\013\314\272\r\255\233\267/|\035:\014\257\216:j\256\254\271\003\006\035:1\"\246\270%\310::\005\241k\272\311\234K\272\263\026\201\272\353\243\264\271|\035P\271\271\370\3529\225\020\0149\315\234\':\311\031\2418\321U7\272\331\236\234:\370\246{\272\026\237\367\271F\2263:/\343\350\271FS\217:\237\200\010\271\211\032\247\272\365M\233\271\217\330e8\333%\306\271\0102\000\272\306\255\266:\013`B:\301\030\2609\344VJ\272\302\025\2118\027\201\2339\305\022\246\272\256>G\271\'z\025\272\007\256\3609(m\261\272SCd\272\257\222\200:\023<\246\266\253\262\34198\212f\272/\275\2419\377\006 9x\001\236\272\326\025\220:\353\014\324\271p\325\2349\030\267\225\272\327\363\2659\347lC\272\217\337&\272p\21489\300\306\3528;\371\0249\227\354\022\272\277\264\243\272s\001\025:\245\025z9\360\225%9l\355\0347\355\202\221\272\210\034b\272F\n\3019\326S\232\271\236\322\317\271\352\354#\272\3635\206:\006\010\227\267\033\272\244\272\330Sd:y\035\016\271y\354%9\231\313\013:r\004y9P\206\2579%0\3079\213\270p\271\201[\222\272rB\000\272\r\344\3519W\374\016:\255\331\3249\354u\212:\360;\2349\r\201\2059Q\326\267\271\305\001\001:-\035\0219\007\246\004\272E\274\3308Q\226\341\271\251st\272$%x9\202\037\2459\346\242I\272/\254r\2721\342\2379z\310\353\271\033\257\267\271\271&\371\271\007\320\2118\203b\3779/G\2349\366pN:}\235B\272c\240a\271\371c\342\27024\302\271S\177\2029\242Y\304\270c\357\256\271\362\211\336\271\035\366\215\272\341\234{\270\354\224\202:%R\225\271\373\365\002:\251j\250\272\251\305A95\3053\271E\036q\272{\'\021\271r\211F\272\245~\3118\350\261\3748\034\032\263\267bp\025\272ckk\271\376\362|:\250\315\3628\t\257\031\272Q\267P:\266bN9\350!\223:\353W}8y\261\2069\210< :\247\345!\271NpB\272\032\273\\\271\326O+:_\270\006:\324\023\027\272\226\376\2769\347\031\201\272\303z\253:\326\352\0379\317\310\203\272R\343\010\2711\255\0048\030\354$8$\373n\272\2231):9S6:T\222V:nQ\2029O)R\266\334\006T8\365\262R\272\271q\312\271\355\305\037:K\0343:\310\303\220\270D:8\272\3673S\272\022\266T9Q\274\212\271\t\257\274\271:\243|\271\343@\3579\n2M\271`\343y\267\353\252$:\037c\3018\035\325\177:v\2722\271vo\024:\027\372k9l^\301\271\033\223\t:\r\206\032\272\266F\226\271\310\355\362\272\361t\234\271\2040.\271K^}\272\251,V\271\354\214\t\271\356I\366\271\017\365p\272\222\374\3217\263\335\3419j\001\224\272\241p#:\243\214\2019*\204\2349\370\332\246\271_I\036\272\030\034\3449\2308f8\230]I:\367\221\2018wcD\272>/~\272#\031\214\272\2575\023\272\303\354\026\272\310UM8\365\027i:\234|\2709\256?\331\271\223\210k:V\224\0049!\223E\272\262\\\235:(\217\201:\230\222\013:O0p:\320\353\236:\355\316\031:\346\035w\272H\265W\271\'W\370\270\364j\':}fG:\266\342\22792F:\272\337\200\004\272)s\213\272]\250\277\271\325\223@\270\035\370g:A\206\233\271\'|%\272\214\"\212\272\207W68q\350\355\271Q\206\321\271n.\331:\305\014c\272\030\241\t:\324ut\271P7\222\271\340\371\307\271\3339\214:\301\2513\272\355\270\200:\345\245B\272`]89\311\203\2548gZ\306\272\224T\2438\344mL\272\354\225w\271\321\004\3229\330C\356\271\'\035\366\271\267\357\204\2715%\2439\200*\3608\351\361\212:\033\231$\271oK\0379Y{\004;!\220P8)\003_\2721\002\364\270t\336\002\271\217P$:\304\237.:\322\271\357:T\255\217\272\240\222>:\314\212\3029\334\\\347\272w\007\2449\263\212\3757f\r\22590\360L:J\376\3159\253R\2239\270\365\303\271\031\306^\271]-\214\2727\027t:\341E\2079\375>E\271E\211\3419J\220\316\270b\364I:\326\344\3769\265o\2558\020\350\306\272\353\214\236\271\372\323t\272?\351_9N^O:M\'\\\271\376\265(\272C\357o\272\220W\305\271\203S\031\272\024\363\030\2728t8\272^\253\2269\226\334*:\030\263\237\272)S\2109\270\345\\9\310\237=\271\031\374\265:R\246\3729\001L\004\270N\036\361\271\217\357X\270\237\366\017:\307(\0059D\270\2569]\033\3469\034PW9\321\226\002\272\263O\2709\010\200(\270\303\223\2648\'\035\034\270\345*\230\271gu6\272\251I\345\271\344\227\2378\200$\3749+\350\232\272\337\315\311\271M+\027\272Wp\267:\276\013v\271\030\026\'9\331e\267\271q\351\034\272s\337\036\272\334\023\226\271\246\331t:.\230\014\272\202\374\255\271\3322A9YW :h\353\0339\261\361.:u:\3654\340\253\372\271\n\026b\271?\251\\\272\330n\3439\332P\2658\267\302\250:V\364\034:\273.v9\017\3459\271\225\357\0029D\210\n\271\371\253\3709\325\305\205:T&Y\272J\236\326\271\304]\2639\223\271?\272\020\232\r\272\307z\0049K\324\000:\336\2679\271K}\243:\302\000\244\272r\314(\272jm\022\272\377\2676\272\337\231\265\270:\266x\272\337%1\272\324\327\267\271\353\336\310\271adb:+-49E\266\3169\356Fl\270\342\323^:\267\242\375:\323,\227\272\322\266\201\271\\\t\006\272\203\312\262\271\270\362\034\272\324j\007\272\221\266\276\271\030B\203:[\251\3619\004\345\342\271\004fB\272k\353\020\272\344b\34497\367d:Q7\023\272n\221\005\272\373\322\200:\230\243\245\271\343\200\262\271\246\036\177:\307wF\271\027\356\3516%\371\032:\321\302\270\271\375\255\002\271\371;\n9\375\200\206\272S\235`7\371\330\321\271a\335)\272\354\031\3649\254\312\261:k\243\325\270\226WY\266b\343\210:kJi\271\023\n9\272<039\300\271\336\270\205\026\0046\260\256\2619\271\277\3576G*9:\254\2457:\023=J\271\334p>:\207>\253\271\"\347\335\2700@B:^p\2069\205\216\2718n\265M\272\225\263\307:\307\'\205\272\340K\255\271\262)S\272\003-*\270\316\250h:\310\025\222\272+\331\017\271AK\3019?\276\013\272SS\2739\303\322\266\271\023:\203\272Pj\3479\326h3:\022\3769\272\037^\357\271{\004\312\271\255G\225:\352t[:\231\254\234:\376\317\026\272\344\231]\272\313\241&9\200\363\2748\201aQ:\252\306\0149\315\365k\270\244\310\0349\035(q\272\024\345\2029\366n\036\271z\004O:\035_\330\270\360\254\223:\'\324\030\272\266\323U9M <:\003\262\t:u\201):\020\237I\2724\004a\271\343\232$\272\210\024C:^:<\272\200\363\3439\315(\2069\242\031=:\347-\332\271\320\326\226:\021\330h\272CQ\346\2719p\3458W?L:4\363\275:F\245\'\272b\024#:\207\335\246\272\315;|\271d\266\32690\314\225\271\242\246d\271n{\250:Z8\205\272\3258S:M@\373\271<\25598~{Z:\343\323\340\271i\343W9\235o\262:\236\320\3129*&}\272\201]\t\272\000\001\t\271W\305I:\365\276\250\272\365s\212\270\3522\010\271\242,`\272\373\233h\271.\023L:\271z\352\270\312\306\231\272:\265\240\271b\263\3468\313\"K9\270\207X9\203\374\214:\275\273G\272l\023\320\270\245\017\027\272\250\346f\272\032\032/\272\023U\033\272y\010Q:dr\003\271\253\327\240\271\2240\333\271\217Xe9%\014\2619\024Tn9q\233\234\271\016\333\206:\330\206\30195\243U:{\014\251\272\251\003\0149\034~\214\272%\246>\271\327\367\020\272\021)\363\271\221\317\\:\360\313\n:\225;$\272\0202y\270\273%\3619\314\324\252:n\327\030\270z\034\3549T\223D\270ET\3658KP\0379\372\310;\271*B\342\267\361,\3079\221\234\276\270\031\035\222\271\222\340\205:#dK\272\333>\203\267\371\350d\271\212g_\266j\314\214\272P\000\237\271\210=G:T\252\231:\3237\356\270\300\356\030:\241\334\202\272\215\335,95Q\004;\227n\007\272\017\253!\272\r\205\'\270\257Vr:i\261\0149f%\2728:\3625:\217m\007\272J4O\272\367:\030\272\332t\301\2719W\355\270\331l8\270Ww^\272\245\230i:\344\371\016:\010\326\0238\250L\000:\371\344\334\271\312\370\021\272G\236\371\271+\001\3559k\234\0178\236\374\3409\375%\247:WX\020:d\262=9\244UG\2716\216\212:\271UL\272 6\307\271\016\265\3618k\244\3249\312\261\236\272\242\037\0169\335\005\032:_;\214\272\226\374\\:@\023=:]=\300\271~\314\201\271L\215\327\271\263\301\270\272\352[\257:D\276\241\272w[\2079\325\032\324\270\013?[8%\363I:5\341r9$mq:c\230\017:\016LM\272hn\211\271\237\220\t:3c\277\271\341\361n:H\344/:SyY\272~\256\357\270\262n%9\\\207\375\270`aq9\316<\321\2710\243\010\272#\242\206\2719\206\2269FN\211\270\014p\230\2674\201\2677\374\021\3439\377h\3007})#\272fj\001\272\210\311\t\272T\36088\267\324/\272\324\373\313:x\262\030\272!\267\204\271\006??\272\257\356\236:\264\245\'\272\334k\315\271\027\331\3269|p\016\271F<\0078\340c76cj\000:\222\006\3019\r\237\0329$g\243\272\267\317I\272\"\271\224:F\352c\271\212\272<9\350Jy\272N\264\237:s\361\232\271\304\331\3149\273\366\215\270\226\2469:\346\341\014\272y`\216:L/\3558\340\260\345\271\227\261>\272\3725O\272\036I\31093\376z8\211\264R\272\235\016=7g\035V:#&\240\271\274\003.9\020b28\377e_:\306C\346\270V\257h\272\2779x\272\235\303\3628\223\321\224\272Z#\2478j\337\315\272\345\020\214\272j\277\3179\316B\007:\332\353_:#\346\214\271{\032\014:\203\342\253:\371\006 8\237C\214:\360\245\3209c\340\206\271\222\001\016:\272\360\2449\034\213\342\271\020\363C8Mo\372\271\367eL\272\017K\2609\344\033\256\271\356`\213\271\376\260\3319\224g\246\271Pb!:\021\307\233\271\t\034~\270\347rU:\333\240\031\272^\332e\271\236.0:C\201\231\272zI\000\272\030\264>8\367\242C:\325\326\"9\321\001O:G\311\"\272\032\025\204\270ex]\271@\002\3679\200`C\272@[%\271\365\2729:7.c\271=4\001\271\331!\2029\205\376\204:\315\027x:\313\026\224\270\275\'\2079\341\205\337\2718e\2659\" :\272\2416\227\271oM\244\272w\\\000\272\323a\3258\274\037\r\271\263\253\3339\372\277\003\272\333\275e\271)\356\034\272da+9X`3\272\371\304\2316}H8:S\375\006\272x25\272\362\350?\272o\324\201\272\352\305\3479\307\n\001:\340j\035\270B\210\247:DSD9\273W@\271,\230\3409v\006.:\221\000\301:\200\207@\2723\205~:|\2254\272\246$\003\267\215\226\2479\360p<\272m\223\324\272\200\0264\272<n\2439\353.F:\301\360\242\271\350\200i\271\031\323\006:jf\234\272~x\2547?\\\031:\327\324\252:g\177H:\0320\207:j\r\0109\007j\032\272\300IS\272s\346\032\272\231\356I:$&\313\267\3455J9\357v\0239\350\234\013:r\245\014\2702\315\231\272\311\221\370\271k\020\237\272*S\201\272GD\3609a\241\200\2671\322\260\271l\264\2509\300\022\001:\240Lo\270\334\030\211\271\327kq:OI\342\270=\3229\272\344T\303\271<\307\3139\273\300g9#d&\272\253\021\022\271vD\"\271\347\254\000\272q\270\211:\342\215\0329Z!\0269\263\247\2409fRL\272\256\3755:\307\033\223\272\202\214\2469\242\261\261\271\263=&\272\273|\3378\302\311\200\272z\335 \272\r\247$\271FP\3169\321P\223\2720o%8\244:\353\271\2040\2039\250\371\2259\373\374\352\270\256\340\2269\271\267\3209K\355\375\271\t\365\252\271\200d\2479\225\330\242\272N\330\257\270\240\315~\272\232p\007\270\320\233V:\307\024H\272.\317@:T\305j:\347\361s:P\327\252\272O\330!\272\250-\335\270\030\363\316\272\334\213\3009\245*\2668\371\322+\267y\206\3379\320\266h9\235O\037:\302\247\216\271\261A\2617\017!\236\271\020\340g\272\247\317\207\271\010\300\353\271\273X?9\024\2539\266\031\312\350:M\204\371\270_=d\272\250}\3039\200f\307\271\203-\006\272\373\211W:Fj\032:*\314\361\271JG\3347?AC\272\022\352B\272\346\252\2577\033Y\n:u\330\032\272o @9Uj\312:\234\205\216\272\307s\222\271J\316\227\271\300\241-\272\361\267\214\272\031\360#:\002E\255\271\001\354`\271\343\03738\221\345\2049j\264\250:\302\217\277\271\345]\211:.\031\007\272\274\272\010\272\024 \35593\222\025\272\351(\031:U?\241\272\206g\2519\241~\254\270\227\273\031\271\335\305s9\037\224\2378\255\203b\271s\351\017:\010$\226\271V\240o\271\223e\270\267\227\ne9\\\353e9M\035\027\272~W7:wC\030\272A\262e\271o\375\2419\315\354\233\271\031\330O:\204V7:\304$0:L\0175\272\2649\002:m\336\342\271\356D\324\271\320n\2179\277\377\002\272_\352_9/\201/:\375\213Q\272&h\227:\031-T\272u\357\320\271\016\366\3659\272H^\271\212g>\271?\177:9\211\236A:\\\227\217\272|\tx\271\323ps9~\361\030\272:\326\03698\t\306\272\016]?\272\333\346\237\270rn\\\271~\036K9\010\244(\272\2038\2329O~+:$SE:\007\"\206:9\303\3707\2029\373\271}\ni\272|q\327:<\367\204\272\314\001\2308\"\3377:\342q7\272R\250\232: a\027:\367$\0059$\337\337\267.\361%9\376\220\027\271U\342\20289\214\3029\373*\3779\216\345X\272\277\262\036\271C\21177t\325\216\272\364\370|\272\233\226\260\271\312\262\235\272f\331\207\271yS\3759\200)A\271\377\352\211\271\273<\215\271\337t\346\271\020Y\276:\257\006\0029\245x\341\271\324\301\212\272\265\212\256:\214\245\2527%\334\2539\2651\363\271 \266\3549J]\216:\177\021B\272\327\205\032\272\030k57G\357-9e\356\032:T\025\254\271\214\204\2057\007_\013\272Z\3167:\237as8w\241\205\270\025\\[\271\320vR9\034\234k\272\274\355\000:n\007\0039F4\014\271\360*\001:\032\005s9F\201x9\023\223\267\271\272\211\t\272\034\241h8d\360\020\271]a;:M\333\004\272d\373\3078\235\341{\272%\036\336\271e\343 9\021\207\016:\017N\2069\325]\3519\375\210\007:\321\361\035\270\017Z`:\336\374@\271~\246q\272#\201\030:P\300\355\271\230\007-9v\365\263\271\3246\323\271\363\340\2159\304o\031:\271\t\2459\227\347i\272\030\301\0149\377\025\033\272\244\025\213\272:J\3239?\342\242\271\303\300\203\272\324\2321\271Q\342\n\272\202\\ :\360\362\027:\221\263\242\271|\316\253\271`\304l\272\260\216\350\271\333Z\3738\214\321r\266K\022\3409\314!\r\271<0\272\271\231\365\2659\341\010\301\271p\025\3119\303_\271\271\265\352}\272\304\022C\272\374\022\2169\337a\022\272\351\241\201\2727\304\3249Up\3258\032 p8o\266m9\324\\)\267\250\321\2579\202\302\2249\001\271d:\220\366(:\304`\257\272\270\202+\271\231D\000:2\n\2378\253H9:\246\350\032:B\355\033\272\210>\354\270s\006\2149\365R\271\271\241\001\020\271\3173\277:\310\312f:\217Kk:\344\001\3719\373\257\357\270\250\201\r\2728\212g\271\004gE:\026\234\342\271\376\263(:\0175\3769+\272\017:\000\312\034:\211\211\2228m2\006\2720\354\3078@\014\351\2718\344z:\223mk:\205\333&:u\n\3019\246\207$\272\303q~\272\357\262^\272,\235\035\271\224\223\360\271l)\004:mh\3018\013n\2459\"\323\307:\316\006\333\270\226no\271P\006\3419\264\234\241\271\016\323\"\271\224\000\225:\264\237\366\271\332\0058\272\023\342\025\270zO\032\272\327%\3509\335\305s:\216|B:\310bP\271j\255\246\271:j\207\270\303\217\234\271K\353\2129\022\024O8(\366\372\271\350v\2339|\322@:oDp\272\177\302\032\272\222\244\0238\374\r.\272D\242\353\271\246E\"\271\361S\2039J`\2719)J\000:\265\303\201:\210M&:\364\376U:\017\376\037\272w\360\313\271\275w\347\271\304\332\236\27014C\271\346\334,\272\373L\345\2711\315\3709\333My9t\366g:\231N\204\271\332\017\027:\350\275\260\272<y\345\270\\\372\206:\373\310u9\260a\21176s\266\271\360\306\333\270\254\207\001\271,\36649\2161\235\270\326\366\274\270\322\224\0049Z(\t\273\304\351\204\272\246;-\272\352\242\212\272\200a\2559\311?j:$!k\272\210\014\312\272\004\323\3229\244\242v\272B\335\265\271\324\342\254:\277\270\2259^\31159y=\t9\201\254\036:Z\2200\271\242S\263\271\325\203\301\271\324\377\3429s\260j9\352\330\014:Y\375\3329\225\017\265:\240D\274\272ml\321\270\371]\000\267,lM:G\335D9\303\226a7\357\255\3079!-\033\272\020M\240:\377\225\3049q\r\210\271\215JB:d\006\3759E\262D9\036\225\0139\022\020\3359\3353\270\271JLX:>,(\272\273\017\204\272\367\27527\2412\303\271;\260<\272\016\342\353\271\nW\3509f\031x9\330\t\3647\2233K9\023\265\214\272\300\210j\272\242\234\211\272bz)\27146\255:\0241g\272\033\200W8\240\037Z\271\303\353c9,\235\2169}^w\272\225YW9m\326\025:\024\373\347\270\320~%:\330\"\213\272\0170\302\271\371\370N\272\306\t\207\272$\022\251\271\210\237U\272P4\3119>\\\262\271Tv\234\271\271\027\000:\014\252\2379q\217u9\263\253\217\271\241mN\272\016\nY\2700CD\271\312q\025\272\215\227\3248T\272D8e\312\273\271\024\374M\2716\362\221\27170\226\272\375\322\213:\312\323\2139%d\2079\030\2317:\017\372\223\271\301\222\3629\000\247V:\210b\0227\316\351\223:=<\033:E\345\0219-\0217:\230\230:\272S\2472\271\256O\n9\334+\244\272\213\350&\2720\177;:\262\233\2528r\003!\272:\260&\272\003\273\230\271\324\210\245\272{\311\304\270\217\327\003:H\200\356\271x\021h:\021\331\3359\033\200\342\2707\030\340\271\006\345\3268\327\211\033:v\354\2239\371O\225\272\217C(\272R\232\3519hg\3576\'uh9\275N\3409\220\261\0216\201\036\213\272\203J%\271n&O7\330x\3069mK\3238\373\323\371\267|\204\2419\325\301\020:\215\303_6\0174):\233a\024\270\220C\2419\310\305\221\270\014\354*9aU|\270=$\177:\000\325e:\213\256\266\271\3749\346\270b\t\213:\331oo:\263\371\244:\374\306\033:\274\352\2349`s@\271\351\317\265:t\310\267\270\302\217s\271\004\276\032:k\313\3249\352+29\026\277\332\271R\264C\270\311\"\361\271@W\242\270\276K\227\270T\372#:j\030+:\t\360l9\352nD\272\336\245\221\271\023\301\332\271\201\320\206:\276\200U9&\312\201:\235\357\224\272^U\3049\236\033E\270\211\301\0329D\356q:eY|:\304[\3039\034\246\031\271\205xA\272\303\226\2059\200\210@\272%\037\235\272\225g\030:\206\237t\2727g\235\272V\016\013\272Wk\207\272\330H\2539H55\272\346\251u\272\260.\243\272\215\013)\270q\004\2419\217:\02794\003\226\272\240V\261\271Sh#:n{\234:ad^:\177\266\2568\203\\\2148\004\355\3259~&\0349\373\237\3469\236\217\3769\212|$\271\270Z\254\267\372\355N\271\007\025\313:9\013\3159\304C6:}\253\231:U\233\"\271\317\355\2569\211\024\323\271\274\"\300\2709G\002:\006\005!8,\026\025\272^\307>:Pg\305\2675\205\2449\215\353q:H}\213\271\277\001\034\271Y\260.\272?\316=\271)\362D\271\355\210\3528\202\232\322\271\\\332\027\271\324\365\2229Y\006!:_\252\306\271\310\361\016\272h\216\0029\000\204\t8U\"v\270\267\230\270\271Ty\256\271\262\361\227\270@\301h:$;\225\271\311\322V9t\346\237\2728\315\264\271\347\217_\271\270\324\324\271Sj(:61\200\271\r\220\t\271\026T\211\272X\3758:\333\344\2628@I|\272\022\035\224:eb\004\272\255\006z9|\367\026\272<\020\2049DV8\271N\333\014\271G\257\235\270!\351\3129C\333\3039\007\322V:lT%\272\252\003\022\272\0354\264\2717\236\2539\231Zs9\207\215]7)\225\302\271\3766\315\271\n\372\243\270)\201#:\324\271\022\272e:=\272B[\27490\030\260\270\371\216V\271\177\230f8\251\017\340\270\322\275S:\203k7\270Me]\272\277f.:n\256f\271\245K\032\271l\2762:\273\027\352\271\370t^\272\006\331\2527\354l\3749a\001\016\272\256\310\0269q.\276\271\346\307\030:\367\212K:\245\0103\271\023\r\000\271k\253n:\010\326#\272T\367\2779\342X\024:v\330\016:\225\233\0278v!\3739\342&\026\271@\342<\272\313b>:\362\275\256\271:\022\332\271\336\330\'\271\004]\007:/\331\000:\377\273\201\272{\'X\271\206%\3177*\260\2549b\326,\271n\333\026\272=+\016\271\312\312i:!5G\272\211\334\306\271(\217\3529\020\301\032:z\305\0229\013\274\032\271\0000,\272\222\00189`\364%:9\245\227:\347u\256\271G\017\323:;/\2537\306\007\3009\244\025\03051\306\024\271\307\367\3539\324\3662\271\275:\3427\350\010\0179(\313e:uX\223\272\237e&\271\270t\317\272GN<:f\342\032:\265\246\":\302\352T9\"\275\017\270\3411M\271\254\204\344\271I\330\372\271\033\305]\272Z\203c\272\'62\271\244\030\3209_\366\305\271\256\202\244:\225\222Q9^\237]:U\220\236\2711\272_\271\370\275\023:\326\004b\271\212\312\204\271\334\275\t:\376*B\270xq\226\271\005\002$9\323\260\3379j\332\377\271\267\255\242\270\362\335\344\271[\\7\271\366\233\364\271H\311\002:\262\325(\270O#\257\272\315\t|:\n\264K\271;\321\207\271\250\201\3129\235\252\3748\244\334\024\272\310\336\262\271E\343\3059\351\367\030:o6\004:$aD9r\204:\271\203\340\363\2710\235S:\311\333\323\271\3646\341\267\234\030Z9\236\177\255\271_\322\324\270\325\376\2509\353 \303\271\247F\266\270\266\367?:j\251J:\333o\2739\204\007\377\271?\244!\272\234B\237\271\366%\2429m\262\3019!\2075\272\314&\341\270li\3069K\030_\270\210\374G:,\030\3029t\356\244:\004\006\3718\230c\241:\261\24378\205Q\2579\276k\3179\205\355\025:\033R=\272\276\335\2519\266\t\242\271E\330\000:w\227|\271\3401\211:\306\022f9oe\3377\324\273\t\272\217\311\0209\206\303\003:&\212\340\271\r#\307\270M \002\272\244\301}:\230w\006\272!\367\214\270qU\204\272\2412\2769\213.O\272\267\301\230:\025\235d9ko\201\272\252\225\2069\317\2622:\230\274>:X\024\342\270\027:w\271\320y.\272\317\010\3509f\3029\272\322\207\3338\351U\220\267A\307\2759\023\001\340\271\373\027\300:\350\033\2219z\310.9b\347\363\272\260\362\225:\353\253\2439d\013\235\272\007:\3509/\373\3669WaY\271\254\342J8\231o\216\271\306S\0329L\245}9\201\272\372\270(.\335\2720sg:\326k\275\272\206l\251\272Q5\020\272\333\265\3308\017Q\027:\206\250~:\366\266\361\271\330\212\016\272\177t\t\272\276\301\t\271\"\270g\272h\272\241\271b\013{:\365\031\322\271\347\364d\272\235\276p\272m6\255\270H\260\245\272\032K\224:\351\363):8\204\224\271\272\302\037:\006g\360\271d\245\2179\246\325\r9\033$\2129\320\221\035:\013\00749\025\006b\2710U\330\271Hl\360\2718\004\207:\020$\3049\225B2\272\r|J\272\231\254\276\271\333V/9\350\030\\\272\365\340\220\270\333X\003:\033d+9\036\355A\272\364v>\272\335\275\2029\231\273\212:\266\005\266\272\024~\0169\271\305\2459\252n(\271iF\2309\332\035\254:\2755\n\272\301\330\253\272\210F\251\271\\0\025\272Ecz\272\367\354\222\272L\222\023\270\002]\032\272<\020=:M\306\234\272YJk:\345U\251\271=i\2458vXs\272\031\366P\271[\304\201:7qC\272v\214f\272\250\225i:\361!\037\272K\205\3179\223::\272\32583\271\024\0246\271\224\314\226\2720{\017:\370\364\010\270D\221\326\270a5\0239\236\215\3119w\276\203\272\031\200\344\270\367\301\3718\227\0034:\214\020\272\271\027\346\t\271E\265U:Q\301\003\272\317\204\3318\033\026\275:\355G\261\271bL\216:\260\004\3508G\353\3379\240\3350\272%\325\014\272\003\323%\272\343\257!:\204k\020\272\363\3617:\025%\000:\205Hz\272I\377(\271\242%\0019\324\260\367\270\336\030$:\262\366\3569\"\367R:HE\2469A\253\2409\371\366Q\272\007\000J:/~R\271\212l\226\270\266\247\1779^\366;9k\213D:2\205\033\272yw\337\270i\257n:\372W\266\271\346T\2029\256\006\244:\025\370\026:u\306\315\272bG\3468\005Rv:!\027\205:,6\231\271\235\254\2629\202\346\202:\273Q\037:w\330Q\272\016\312\265:\343\217\247\271L\'B\271zfN\272\001N\034\272\325\027%\272i\032\026:\306Z\352\272\324\214U\271K\245#\272\373\2063\272q\266\253\271\234\332\3619\276{\231:\327\242\272\270\312\304Z\270\005#/:r@\026\272\211\367\2479\222\032\003\270\252\236\333\271\2274\256:6Y\2478U\021\206\272B1\211:\002\224\201:\214\302\251\270\201U\211\272c\256\327\271\007\'}8\207\304\201\272\230+\360\271\305p\2069\366%$:\261V\270\272z\226\034\272\336R\304\270\313\320\212:R\031p\272\257\333I\272\215+\0059\231\rU\272@\341\3229\001\030\2419\0167\2419 \343\2129l\3660\272\234\205\310\267{t,:\312\356O\272\256\345Q:\264\306\014\272\304t\32684\376\232\272\377\215\2048\254\322p:\225\271\\\272b\231\3307\027k\352\271;\027\326\270\243qN\271gX\2159\241cS\272\311lU:\017\000\2429\372)m:\213\211\017\271!(\221\272J\247\342\272\324\345\t\272\252Y\244:\323\021$\272\342<\3029^=c\272\"\230\022\271\360\310\024\272\014|m:\r\262t:\025\325\3409\035\222}\272\013Dd:y\013\026:8\345\237\271\226\006\2369S\2051: wp\272\2073\267\271\177=\261\271n\332\3339/v\2039=\270\0308\256iU\271x\320\215\271\313\024\004:\362$u\272\212eE\272\373\304\356\271\242\031\026\272?\021@\272\235\346\205\267\234\364\014\272\233\037\020\272\241a\217\272Cp`\272\321{\010:d\317]:\020\346\244\272\024\016:9q:0:\325\237\":\022\004\031:\n\354\3249\243\233$9\220\215\2739\224\220\2668\304J(:\202\0143:\277\232.\272\225Uo\272\270\032\0109\003 \242\271d\351\216\271\003\337,\272\317\223\035:9\240\2007\350\336\377\270A\215\3509\214:\327\271&Ju:\261\'\206:7`\3638\014O`\272V\013F:f\235!:\307q\244:\250\025s:c\325\026\271\236\330\010:\312B\245\272\"\352\2478\n`\25196\320\307\271\353\224\255\271U\360\234\272\301\027\314\271I\244@\271#;\2469&\202\210\271f\000O\271\274\200\021:\274t\210:\320X\3238\207\350?\271<\004\036\272!\274\026:\362\305\023\271\317\030\2319K\233\003\272K\206\3459jG\031\272\017RF:w4/:\247;\363\271J\221\205:\211(\007\272\214K]\272W\010J:\"\346_\272\236\375\3419s\025h\271\227\304\3308\276\357)\272\206X\204:\021\2511\272<\214\010\272\320\014d\272q\361\243\2710\376\3308\323\334i:\213\340\346\270\235\256\261\271>];\272q-\314:\301\236\237\271\371}U:i\335\2319l\240\3279\247\312@:y\244\304\271\257{_\271\262\251\347\271+0\347\271\304\267\2769T\231\203:z>\2748\2616\31283\215\254\271\251\271\006\272I\321\242\272\266\022\006\271%\333C\271\202]\3349?\2649\272\002\221\252\271B\265#\272\276\225\224\271wzD:\362\030\004:D\201 \272\204|\245\270\271\016\244:;\253y:\320\\\316\270\332F\254:\324b\260\272x~\222:\357\347+9;5\323\271\367\t\210\271\373\027P9,B^9\272\243a\267\277\352\025\272\032\220\333\271\201:\242:;\340\2707_i\27569\367\2755\242\306\032\272\372LE9\342i\3669\260\227\3249\224\032,\2729\275\251:5a\0009\341A\n:\251P\205\272g\214\3719 -\331\270\264@\027\272\372]*9\315h>9\362\223E\272\325\"\363\2718\253):\274\035\007\272H\316\254\270A\026(\272i\274\241\271\365\340\004\271%\366\321\265(\255\001\272\215FK\271\021z\2579\222\206\376\2673FN9FN\2079\320\200\370\270\201=\010:\264\362\2329q\324\3378N\014\204:\270\332\233\2713\313\004\272\333Z\227:2\216\024\272\230\321\025\272\253\211\302\271\231\312\020\272\034Z\3659\310\312\3449J\255)\272\314`\257\272\026\034V\272_\326\205:k\t\277\271H~\3167\202\021\023\272\271\236\3628$`O\272DRA:\254\212\023\272,\373F:\331\304G:\225\377\210:\254\365\037\272\"#Y:\354\207\34594\204\366\271\363\237c:;\033O:\276\303\300\271.\237\3169\370\372\034:H\033~:0\351(9n1\2359\031\374\3009WR\230\271uf+9\303\226_93\211\020:q\226\325\271{\3321\272,,a:\007\315\3039\334\004\2208\202\260q8X\225C9\036\207\264\271\366\363\2558*I\205:\027\262u\272\245\004\350\270\303\232\2129\307}\254:\031JQ\272\220`\246\271\260\253S\270\372\004\251\270\321C\350\272\270\177\376\271\324y\000:\273\204#\272\376\200\0147\0364\023\272\227\354A:\276\034$:\212\234b:1j\0219\275\353\357\271c$\347\271x\237\3679:\222\225\2717\251\207\271\355\032p\271\353K\330:5\361O\270\243\332\264\272\355\001\2459\272\340\325\271\006\277\315\271\320\205i\272\304\032=\272\252V\357\271\234\306T\271\253T5\271Ke\2559\255XV\271\014\035\2439D\253\0059\207\222i8\nH7\272Cv\212\271\211\014\270\271\025J\007\272\257\274A:\361\350\035\270\336\\-:\245\250):\030\255\027:\205^E\272\361z)\270K\356\351\270\317\320~:\365YB:LE]:|\301w\271\271\227\3528PsJ9\337 79\0266\3349\243\006\2019u}\215\271A\257\3538\325jQ:\375*\365\270A\036\234\270\275\n\2706K\371\326\270\320\224P9|Ze:X\327\2057\177\377\2709vt\212:\3205\2529\363\316]\2707I#:\020\255\235\271\272U\3759\265\233\260\271\003D\245\272\374\001?\267\275\224l8\207?\3048j\002\2159\372\024\377\271\203\035\353\270\264\341\3109\221=\022:\364I\250\270\307\313}\264xu\016\271p\364\036\270<\nA8#\226\224:\034\276,:+\204\0029\244/x\271\2641%9\227\217G\271\0043\027\272\245`d\272\363\037\233\272\"kx\271\343O\3409\334)L\272\270\227!\267t\365\223\271\213G\353\270\340\00079\177\217\307\271\245\214\274\271\255Q\360\271\335\364\014\272\263\373\21181\345\\\272Q/\276\272\206W\225\272\273\r=\272\017t8:E\373\2749\233\255\311\271\237\202\244:\036y\203:c\320\203\271\326\255\251:\321!s9\324\361\3478\032\241\005\272w\375y\271Ea\3679\024\304\2237\336\020l:s/\2559\026r\037\272\374\223\2279R\273\333\271P\327\212:8\036\2119\"\367\206\272\364\337\2239\230\300!\271\337\331\0059\244N\3368\235\314\271\271\254@@9A\304\200\272\324 \334\271\341p~\271\006\302\026\272\024\014\270\272o\303\202:\320l#:@\274m\272\323\267\2129\357\353\026\271\001\371\313\271@g\245\267\345|\020\272i@\005\272\244\256\213\271\017\357\2449>\346A\272\306\023\220:<\247\276\270a\nC9\336\007\3569\221\372$\271>\250%9a?\256\271\3020N8\216f\202\272m`\250\270\363\320p\272\376\242\360\267\346\n\3619q\267\023\272$G\214\271\237[>:\223\257\2619u\341\360\270\311\361\025:s/\225:a\223\027\272u\013\265\267R\332z\272\3549\346\271\007\255[\272\010\346\2729{!\2619\005?\2508\302b\r\272\036\235X\272`?78v\231\206\271\310\022m::\246\n9\200\r&:\215\360\025\270\250\363\3279I\332\2649-\334@\270\251|\2769\301k\2309\360\310\250\271\234\203\2219[|\3418\272\323\027:O\024\342\271\220\3021:\261\305\300:\374\337\000\272\275U\t\271\247\306\241\270\\\nu\272}\252\360\270\257\313\'7\3244-9{*\213\272\3037\2769\321\261I\271(\032\237\271_\3566\271\255$\031:\351h$:g\247\343\267\257\312\033:\233\234\201:\017\233\314:\016Pn\272\337\007\t:\217\2146:*\206m:\332\352\2439w\030\317\271\245\233\206:\311.\007\264\257%M:2:\214\271\372pF:0\254\3349\373V#\271\220(>\272^[\3439\223\217\2239X\334\236\270\277\346I9$\3226\272\203/t\270O;\274\272\'}\237:\323T\n9\275\336<:=\032~:\326\252\026:\347\"\217:5\tY:>\025c\271\246=\3678H1\3669\010\237\3028\266bw9\230?c\271\250p\235\271\337A\2209\326\207K9\216\224\355\271\206V\301\272\024\244\255:\346Hg\272\216N\031\272G_\2369o\364\2429\372#\017\272\221\241\035:w\030\324\271\320\302\033\272\301\337\2219\313\332\007\272\251\316\2229\235\312c9\"\357l\272\325\36198\211m\217\272\264\225)\271\272\251\2059W\327&9\244\021\0328\220\033\233:\316\014\0149s\245\\\272\372\255C\272\034\366D:9<\201\270\302fO\272\350l\326\271\277Z\200:\267\2472\271j\31289%e,9t\321V\2706\021\2319G5\2368F\243\313\271dAR9\007@\215:K\240\211\271\317\020\0348\371\255F\272\035\020\271:Q\333\241\271\034\325u\2713\364\375\270$\023:81\312+:>_\025:\236\244\005:\010\320\3079\014\252/:\245\371\3439v\330|9\273o\217:\n\207\312\271\231MY:\000@0:+V\3149\245\356|9\0312\214\271(O\3759\r\313\206:\324Pu\271c\303\210\272\\\310\332\271\313C\3757\275A\201:ENt\270\310:\2629L9\2069\202dU:w\237\0339V\014\231\271\342\341\241:y\254K\272\244rq\271Q\277\3509\255\263\265:\024 \263\271e\246J9\307b?\272\014\355\244\271\035\370\3539\301\016\3578\031\024\2108\334\277*:\357,\240\272{\323C:q\250\001:i\345x:\335\335\310\271\222\206\256\272!\333\005:\355\303\246\271\201\250f\272\213G\036\272N\246\215\272\014\3454:%\222&\271\270\366\024\272\210\373\240\271\242(Y\272\356\001\210\272\216\213\3429\210\374k\272\326h@8D\201\0229\373~\0339\344\353\237\271\r\355\223\271\023{\377\270T\013\371\271\346\363\252\271{Ax\272,q\022\271Br$\272\036\313\03792Z}\272\014v\000\272\333\244\3749\004\037\3338\363ln\270\331Us\272\304\224G\271\207\r\2769c(\355:\243jC:\242\264\033:~Z\034\272\023\\\250\272\277\200\225\271\024\017y\272\013\20259u\031\325\272\024\220\207\271\322\357I\272\342\024\271\270x7\034:\020#<\271BY\020:}\206\300\271s\240n\272\317F\276\270\305\033\221:u\r\3038\357\321\2618\327Rw:\300\027A\272{\2713:\213\274\252\271\037\007D\272\265X\007\272<\370s\272\313\211X9\220\362\313\271\240m\205\272HQ\240\271\204\327\364\270\356\014\0379\343s+\272I\366\353\271\362\344\177:J\211\24580\334\001\272I\357\233\272\273\353\210:O\307\330\2728\321\2348\231\033^\271\336\030U:(\016\0267@\271\222\271\0349M:vf\210\270\373\275K9z\367Z9\004,9\2726\007r\271X=\244:\031\317~9KlS\267J\310\2468a\334\001:\346\321\314\270\327\"\3708H\335V8\017\265\021:\361\331\355\272*\245_9D\235\313\271\202\\\017:d\374W\272b\021\317\272No\014:\031\221\330\271F\357\340\270o\034\2129j\023\344\271/\263d\272-\222\2638\353\355\"9!\343\213\271\331V\351\271\227p\035:\224\244\2259\025zT8x\361\002:\"\017 \271\243j\2739\006\345\2639\346\231\"9\337D\022\271\277H4:)5\2018\0221\036:\261\270\233:\363\303\002:d\221\267:\200\307\342\271\344KX:r\2348:4f\32388\221f\270k\303G\272\304\2474\272l\317\027\271k\326\362\271\262\203\24199NS:\t>E\272n\362\2239\023y\3349dw\024;^\177^9\213\305g\272\t\303d:\315\251&\2713\001\2069N\"\2539\215 3\271\263]\3239mH\234\272J5\2529\006\367\0048\201\310\016\272\035X9\2719c\270:A\214y\271\244\n\3329&\224\203\271\311\0134\272\243\247\2678\014\217\243\272\3768\013:\3665\223\271[\266R9\322\356/:8\227\251\271\234\235!:>p0\271\004\346\205\272\350\255\204\271\350N\3149\n\373\013\272\004\304\036\272\261\233\035:\010\210p\271z\350\\:\001\255,\272\321<\1779\251\"\2058\267\343\321\271\215D\n:\225Nb:\352b\3738\304\024\3339\3023\217\271\273g%:@*\r\272\013\250\3409\346H\263\271\357:E:\3535_:<e}\272(\250y9\263\035\255\270\270f\213\272$F\211\272\336\340\200:\364\013P9\'\177C\272p\200N:\277\2323\2678\343;\272e&\0029\027\332!:?\320\2659@\312\245:\252\272b:\267d\2619\303\306\3008\276G\014:\033\301!\272\274\026\3619h\242V\271Y\325\2419D\037q:S\000\206\271\375\226\2217f\316\3429\257\004\352\271\207\212\223:$\313\3149\344\273\31595*z\272\0148\232\270\307\310\2749\224r\0239S0\3248+8}:-\306\3425\346\327\006\272\375\225\\:\217\241\360\270\254z\036\272D\343*:\2572K\272\351\027\027:\205\371\3369\364qa\272\320\331\002\272\227\241\260\271\351\325-\271\2524\255\271\303#\0048u\237\237\271l\207\0269\002\373\3179(\333#:\255\231\203\271n\tC\272U\305\206\272\261\367\2038{;\1779\212:\002:\233\177g\272E\203\247:\212\276\025:w\256\304\272\224=\233\272\354;\243\271\312\216B9\304\332\007:\302x\3609\204Sq:\024\221\3429\0279):[\271\217\271U\007\023:\210\215O6\030\306\2758_8z:Q\227^9\257\003\2368\221!\2169P\313\2019}*\250:\2748\332\271\253X\245\271\331\022m\272\355\201\3249\034\210\007\272\032\016B\270\023\332\267\272&R\274\266z\024\326\267\262\333\3308\324\374H:\253\n\252\271;6\25393u\0049y\034<\272\021;\3149o\322W\272\036&\366\270]\300\3139F\320\232:Y\346\016\272\262\300\353\271\270b\223\271\301mL\272\022\373\222:\206\356\265\272\363\232\235:B\010\2039\306N\271:\034\270\242\271\376K\014\267\225\302=\272\336\334\3229\223p%\272\345*,:\255B,:1\'\000\272mwo:\200\362\3019\224\357L9\037\312\2468n\343\201\272\356a;9H\210\3628\203\272\2469?\26418\206#\033\272\354tw\271z_\002:\r\265{:\t\334\363\271\354\006u:\235\347t\272!o%\273\250\245::\211W\2337\007K\376\271iI\212\271\234\322\207\272*\311\030\272\265\014\026:p\323\023:w<\3349\002\354\375\271\003h\2029\363\352G\272:\324\2578\3609\\\271\257.\021:\242\246^:\342\310\231\272\346%E:-\341\3157\315\006):\240\242\226\271w`\2429\032\30199\231?\3138\250oC\272\330@/9\222FP\271\207\320\3059\355\354\305\271\370O+\272\272L\0359%\306\316\271\313\021\017:\262\265\3659\302\227\022\270\365\315\236\2712\255\270:\235v\002;3\371\t\272\203\220\217:RF\001;\321\035X:z\315e\272| e:\355-\267:\314\235\2579\240\226\251\271\303;\2649\r\017\3059\312}\22393\276\\\272\305\306\216\272\322\t>\270\203\201\367\271d\003\004\272%\020#\272\375\022r\271\200\363;\272\374\253\267\271\374\3663\271\347\355\304\271f\302Y:\313[\022\2721\026z\271\215d\233\271\210\354g\272^\016%9\341\323\016\272b\234\345\271\014\250\306\271\332|\205\270Gp\3359/\021\020:\262/\260:\350\021\352\2712rB:\307<.\272\306\336\023:bC3\270[\236y9tl`:\331>\234:Y\221\030\272\315T\217\271\211=\330\270\225`t:-\244\3579\374\025,9\010\216\220\270\370L4\272\215\224}\272\243\203*\272\000\253)\271\270\266\303\271\310l\3459\367\377\3037\363\311\211\272Y\334\3059\363V\\9q\002\017\271dgV\272\344\334\361\271\234\237q9\314\371\r:=4\3179\201\246\235\272e\253\005:Z^\177\271\240[W\271UD\31796\203\3059\336\231\275\272\342t\256\270\307\022\345\271\\5\333\270\337-@\272\247\307\336\271\210\277\311\271\200\367\237\272O\376\2449\304w\031\272c}6\271\r\236&:\261\036\206:\034\316\270\271`,9\272\267C\005\272\264\344\027\272+\225\3447Mk\2608\270\325%:\211\"U\272\352\364\022:\244\336\327\272z\245\327\271=\201\035:}\2353\272J\377\0038\265]\025\272{\271\242\271%-\014\266\000\323(:\227\316\210:\350j\371\271]\250E\272\314#\0229\370\305\003\271}\234\234\272\245\010T87\034y:p\253\244\271:\371\021\272\360\356\2239[\206D:V\263\374\271\370{R:\210\307\202:}\027G:\223\374\3227\246k\":)\376v\272%!:\271y\356%:v\"\3559;\016^\271=\204\2678\210\365\0078\356&\2529h_&:<Y\202\272c\t\214:\023^\3339\247(\221\271V\366\215:\322v\344\272\266\177\2618\240\232^7\241\\\242:\225D\230\272\305\003\334\270\305\337P:\255.\3529\354\301\350\271=;\3408;)1\272\240\311\206:e\377\223\270\206\025\027\272\304\307\027\271ZD\016\272\207)\231\272mNo\272M\3769:\304\212\2459\373\02698J\353\2349\233\350s9\016\001\3409\304\217\274\271E\273\202\270\2158\003\272fE\232\272~\010R\272\214\360I:\237\023\201\272\323\343\254\271f\246\022:\377\214P\272<\003\2549\235^\362\2707t]\271\314\345]:\3007<\272MwY\272aU\232:b\365\210\271\215\216\3009\357D?\272m\025\016\272\007\315\024\272\204;q\271\304\177\245:(.>9\277Vg:\375\365#\272\005\354\217\267Q\333\2519?\177a\270bDO:\370\345\275\271,:\260\270\301\204&\271\360\007\027:\235\344f\272p:,\271\031\347\232\271\021\375\2608\240\346\335\271vz\217\272@Ct9G\346-:\243S\240:\013\321\020:\307\276B\272\266b\2209\301\027\362\267\372\330\320\271\235 \271:\245d\000:-6\007;h\254\\\267p\257A\270v\274\022\271\364\243\201\272\251<s\270\014\2378\271\2520O\271\360\353\035:\375\267\3659\331\210a7s\342\352\271\212\324\030\272@\266\3759\243\314\2229o\210\302\271\341u\021\270\255h\2029\276\341\2629\nGl\271\010\274\3019v1\2719\024\351Q8\341\346\237\272:\262\245:\210z\330\271\005\255P\270^\211\2028\317*?\270\276\251&: fy\272\376\306[\271\275\372\0339\306\260\342\270\272j\026\272\014D\007\272\323F)\272/\236\201\271\213N4:J\323\2538\243\262D\272\347\304T:Q\266\361\271xY\245\266m|w:\016\2441\272\004\202q:\327K\367\271\010d\255:\"1\272\271\200d\":\231{\001:\202y\3239[\353\022\271t\222\2109\r\010\261\271\345\217e:\271\306\0139s\261\3509h`\0379Q=G\272\2625\244\271\244\001\202\272\336g\207\272\225\000O\272m\271\244\271]\223\031\272\341\024\2739\306\203\000\272\332\232\322\271I\224\2649\204S\030\272\270\212\351\267^\312\001:\337\276\"\272\0167r:B)\315\267\372\227\3779s\342\224\270<T\3329s\357<:\313`\204\271i\027\2539\022MT:i\014\334\270Z\2541\271\255B\210\272\010\2551\271\360\212\206:\n\3232:o\t\3359`\320\2608\220gf9\222\211\n9TL-:\026z\210\271\210\225\034\266\003\000\227\272Y\337\0339&\257\2579\354\373\301\271\233\334w:\002\337\n\272F`\033\272\215B\031:\344\014\206:\0142\325\271\240\374\367\271.\215\35192\205I\272\026\3479:.\353\3677WDe:_FD\272\340Z\276\271Y\364\361\271`\251\303\270\362\324u\271#\315\324\2712\201y9z\260\3449\035AS\270i\341\027\272\227p\2449h\311\241:}\2049:6\031~9r\234\260\271\232;\300:x\371\335\271O\205\200:0\264U\272D\266\310\2716>\007\270E>\3679\351\354$:C\002-:\023\344x:\033\237\010\272[\204\254:y[\321\271\010\375\3726\301\226\224:\330\271{\271K\n\336\270\213\336\2049\247F\353\271j)\3048\210d\216\272s\330l:\027\370\3518#[\"89\004\2439\200\225\037:0z\202:\202\372\':f\220W\272X\n\225\267\365\033&\272\315\2245\272;5%\271\377\266\0039~{B\271\313\267\227:\344F\246:\226K@:\313\202>:\351\235y\271\350\254[\272\231\341\237\271v\306R9XG\3358\030\330\013\272-D\3249\007}\225\272\2679\0309\262g<:2e\345\271|\304\0049\245O\217\271\342\370\3009\273uc\272g\302\256\271\026zK\271\225}\3448\001\262\220\272\347\233\3228\307p\204:\261\211&\272B\253\3208e\304n:\340$\242\271\315\217\024\272\306th\271\261c\307\271{P\240\272W\254\214\270\247\201\204\272\235\363\035\272K\316\362\271\335\377?:\373\315V\272z*\304\270\374\035\354\270\232\343d\272VM\341\2706\334|\272\261\275\366\271\027\366\3449\001\027N\272\231\373\326\270\353T\3419Xi\315\271*8\336\2718R\n\271\253`\2628\201\376\255\272=N\3759ka$\272\342\257\2509\270\200\336\271\032r\303\270\323a\300\267\0247\021\272\356\016\317\271N,w\272*.\247\272\361\370A\267<L\204\270\004\2164:\022\201\262\267\343G\2179\363&\013\272K\202\\:K\250?\271\204\306G\270\222\347\3168\215|S9\225\260\24159\200\2119PB\327\272\343\001|\272.\235\260\2724\364\330\2700\310\2639L\277a9\227$\200\270Q\333-9\373RM:=\322\201\271\321\241\000\272\024\345\3009\357@\026\271\303\t\017:\316\327[8\207&\262\272))\016\270\326\246\221:I,T:\317\222\366\271\276\360G\272\034\026T8\353\n\213\270\227\316\2669,\024\2349\327e\0319N/K\272\262\373-:\372h_9^\"\377\271K\021\206:I|[\272\337\307\3629\314\035\2719\033?:9\332\270\004:\343\007*\2722\377!\271\302\327\225\272\206\325\2428\232\0048\270\263\340\214:\324\374\303\267t\270m\272 \212G\271\213a\214\270k;\\:\220;\2159\245\001\3359\222n\202\271\341\377!9\315FT9U\'b\271y\240\210\272+E\307\271r\357\004\272O\347\300\271\215\'\026\272:pl\271\177\346^:\027,\013:\2412\024:\302\311F:`\005Y\272\202\373\"\272\331E(9[\245\3169\336\342\001:\024\3254\272 OE:\211\330d\271\371\357\007:\263s\013\272\351\321.\271\254 \320\272\026`|\272\376\206<:DND\272\302\25539\213\230\313\272clx\271?8\331\271\370vk:\214\220\364\271\206L7:\250\260e:\026\263\006\270\302\241\035:+\362\223\271\023\327\002\272T\036\255\271J\247 \272m\n\245\272k\317\021\270ED\230:g@\335\271\327\351R:V\270\036:\022\374\252\271\004\035\324:]\2135\271n\271E\272\207\237\251\272\274\306\226:\316\021\004\270\210\016\003:0\035\213:\312\330V\272\n\327\2348\303\217@9\203\227n\271\230\333{\271\231\254\003\272\330\203\3668\017\032\030:$\3717\271\017\376\2049\016K\0009\224g\034\272i\247\025:b9R\272\262\034.\272\350\216\232\271\tj`:ft\2429\245?\2719y^`9 \364\3209\004\233\203\271\322\3117\272\242y\234:\352\r\201\272ZU\037:\035\240/:\003\304\23494\212\225:\026z\251\271\342\202\\:N\234\272\271\261\345\263\270\376\306\3608|`\263\271\216\301\2519G\246S9Q\006\204:Y\314\3358\360\367F\272\211\333\314:\345\257\202\272\205s\032\271\202u\205\272\r\307\002\272\000\2553\272gF\242:\342\351\200\272\205\034e\270\324\337K\270a\265\237\271\365\244`:\352\243\0179\003\315\3629\237\324@\272\257I\2659c\232\3439\314\347\2329 <\376\271\373W%:6\333z:\327F\300:\356`R\272\277!%\271\035\261\365\271\315\0216:\336\341\217\271(\246\240:W\324\377\270\246\260\3659\244\230O\272\352rR9\315\223\225:Q\211\204\272\335\234>\271\341\177\255\271l\177\'\272W\233\351\266\305L\220\271\373\247\031:%\233\025\271\033\r\214\270\331\203\355\271\037\247\200:\240\250\014;W\341\3579\345xz\272\333\376\2139n\267Q\272c.\200\272\034,P:\224\272\2729Gd,:\000\272\310\271P\2118\272\300\330\2369\257\2744\272\367|A\272\352S\2209QD0:\300!\327\271[\247\2569\213\026]9Al\007:\223\353\005\272\304\256o\272\365\210\3029@\237\321\271d\372\353:n\372\327:Ys\007:\220\263\237:\002q\2678\010\244\262\271Y\"\2125\264\223\2729\240\n\024:\233]=:\324\235\202\272\201P\004\271\367\246\2709\333\274\360\271:.F\272\352,\017\272]l87v\233\370\271OB\212:\231\337\250\271\357\361\300\272L\\\177:Qrn:\363+t8@Z|\271R\357x\271m\341\022\271\361\023\2549\275\223\374\2712\310/:y\300v\272}s\0328\366\010u:\306eg6\251\360\3708LT\031\272\242\002\211\271\217o\207:5j%\272*m\230\270)\324m9\031\355L\271\013\2765:O\206\2659N\276W\271`\377\3479\211h\240\270\364z-\272\343^i:TJ):C\235\2179\303m\233\271\000\002\330\271\327\317P:\221\213m:\263\022\217:\302\346\2529L\264\210\271a\244\0029\275\271Q:\316K\377\270)$B:\314 Z:\233\262_\272P\307[8\014\321\0059g\'h\271>\351}\272\244\365\3169\343\\&\270\370eZ:Gw\303\270(\276%:\247\245\3739HAB:\016\202\0238\263;y\271t\334\3739\033Jl\271\265a\004\272_\026-9d,@9\260\273U:h\035*:o\203d\272\253k\035\272*\353<\272OL9\271\274\376\215\271yU{8\353\236\204\2729\333U9\267\234\022\272\315P\2129\022`F\271\224\017\2759\201\014;\270\024\322x\271\013\3350\272\rZo:|\017[:\343\323\016:j\375\3129\3723W:\325\232):!xV9\362k\2419;\314I\272\341W\247\266#f&:)\302\3709\217\363\344\270\307\353\311:\302s\005: \275\035\2721\210p\271\034\306\246\270\367\330\262:\330\010\265\271\231\266>\270H9O:5<E:[\352A\271\210I\201:\022\177\2548\276\242n\272\264\030\020\271wa\225\271\036\177Z9h\245\021:\343&\230\271 \302[\271\024\210\317\271\016z\3279\370<\222\271j\212\320\270i\242a:\321\273\300\270\034\200p9D\235\377\271\327X\216\272\331I\027:\025\224\242\267B0\n\267\324,\2069\25108\272\310\336\3358\325A\306\270(\321\3319|h\033\271\260 c\267\246,\02694K\016:\322\214s\271\251BB\272\026X\010:\235_\2769\361\177\033:\276\267j\271r\341\2538\245\037\2769tr\006\271V\321+\271l\251\243:3n\204\271\372\272\034\272ri\025\272\376z\340\271(\237G:k\223D\271\305\302\3659\207]S:\203V{9\262f\3249\270\353\r\271\321i\003\271\366R\2459\263\030*9R0\037:7\217\2468\333P(\271\326\356/8\007eD9\330\342\3309M\237\3658\260\211u\272~\212\027:\265R\016:\355\221\026:_\376C9\315\213\234:\375\r\002\272b\354\0347\0013\0059\244\024\216\271V\373\324\270h\325\0359#\244O9X\255=\272\032X\234\271\037\032\2129\233#<9\321\016\237\272\270\204\037:\024L\031\270\033Bs\271\300\\K:\312\032\1778W_\2159Xj~\266F\340\32796\024\363\271\253`\177\271\306\262!\271Z\203\3209\010R\013\272\034\253\3559f\3212\272\031\260\206\271\325\250A:hS\2129b\224\235:K\027\3039\265\336\274\266\223\373\3338\276#\243:\026\033\213\2721S\263\271\026\256\232\271\0173b\272\205\3723:\300O\326\271\241\356\254\267\004\016z:\355\366\0249\335\273Q\272\360\223A8\354\250X:\275\366s:g\203\004\2710X*\272\226\344\3069\345\240\374\264]\267\031\272\331`\3028\335\262\014\271\t2v9\221\371\2349y\177K\2710%\177:@>\261\270\310?W:\360\n\300\271T|1\271uc\032\272\323\237v\271\277\336C9\267\201\2349[t(:\010\342O\271\251\342*\272\232\352!:\266=\2348Df\2309\337\365*\270\370\203\3019f\302I:\262{\3409\3552\220\271\202\367\373\271g\r\2139\360\237\254:\327e$\271$\346R\272\350Gz:}\0365:\006N\257\272)G$\272\263H\020\271\340\347A9\323\343H9\216\324-\270\315\352\271\270\254\307\037\272\337\315N\272\3751\023:5\240\t:\267\020\270\271\216d\215\271\242o\251:f\214\3769\006\255\3269\343\022\3359%\3149\271\306\243\327\271\256\315\3169\265\022\'\272IX\266:\326\305L\272\021\2619:\2333\361\271\224\026\32086V\035\270J\305M\272gQ\352\271[\230\3669\025\r\2079\330_\2128\007\017\031\272\202\033\225\271\340\2122\272\324M\3379\374\310M8\377\2038:\262y\2149\360\270\345\270\223\346y\271\226\3526\271\324\371\217\272\267\037\343:s\327w:\177\263\3316|\376\233\271\204\34029\333\356\3279\214\r\23695\246\032:\036\226\265\271\206N3:\274\301\312\267\356\027W:\253\010\3278F\240\3779&\"\316\270\376\027_9\334\037\200\270\021m\261:\323\254g9=E\2658\275\325\2679e\\b\272\204mK\272\356|\007\272;}u\270yo\2279\027\370\203\272s\356\360\271W\005\203:\304\225\246\271\344\276{\272\253\007\313\271\373\307\026\271\006\252Q9q\323\r\272\341\035\267\271\332\206\277\271\314\207X9=\366\200\272\305\354O\272\240\363\223:\014\267i9Sc\356\271\353\367\207\272*\247\277\271f\252\326\271\216\331)8\236H\004\272\320R\215936<:\240\202P\272<\372E:;ge:\260\361\007\272\032\303,\272B\005\3169\201\354\210:]\2014\272rd\002:\021R\260\270\332\007\2309\372\203\003\272\233\027\005\271\251\030\023:Z\331&:\306\017\010\272<\303\2569\203.6\271\306*\20280\217\025\270\337\333\3159\"\307\026\272{.\2779\357\005]\2702\0209\272\367S\n94L\315\270\002\363\2138\322\004V\271\273\377e:\212y\315\270vY\210:\'\342@:N2^:\244\252\3519p\201\027:\215\201\t:\203\216K:8F^\272q\00599\210\227\200\271yW(\272=\265\2109O\237X9GlK:aM99\304\272^:\3573`:\352\221\35294b\274\2674C!7\020\215\303\271\336U\3567\034\273\005:\273\323\0249\037\261+7\317\353Y8\014\336n\272\265\317\241\271\025\245\207\270yK\206:\230\225\346\271z\255\0239\303\342\246:&m\35296!o:\354v\017\271/@\0019sA\2619\373x\005:\210\210T:\223|\3308P\211\"\272\220\tR9\272\273\3059 \037\231\2711\017\27799\331\3159\321\300J9e\232\"9\362\226V:x\323\037:\306%\2229\235\002\302\2728e\370\271Y\320.\272\030\372j\272W\317\342\271\2448)\272\254\030\253\271B\3162:?.;\271\354\303\2439\335?q:lj\242:\230\210o\271\200\201]\271\356\272\304\271\361K\t9\260Q\3429\200\254\2208\222\203b\271\276\360\001\272$\341\2559\006\345\301\270H\001\2029\r\347N77q`\272\031\206\255\2717[%:\245\'\273\271\032\036\241:^\245\255\272>\365\277\272\337\342e\271\235\226.8\nN\300\272\376O\367\272\321\273C\272\331:\2009\201\315\203\270\223\223\027\272\2009j69?\014:o\270\2509\366+\264\271\207\2126\270\262k\2739\356\363\2119:\t\031\272\217\334\2318\360/\r9\325\021\3329\315\377\025\272S^\002\272G*\0108\206\236\230\270xd\036\272\350\263\2029u\260\230\270E]\362\270lg\227\267\353\332\001:\237m~\267\265\3543:;\024\'9\033\036\3149\272*\2219\230\016\266\272 \211\201\2729Z\3209\300f\005:Mw2\272\306\337\200\272K\207#\270\351\335\021:\305f\367:\223\324R\2723\000-\272O\270\243\271]/\2309\251\250\346\270\200\316\007\272 \337T\272]lK\271\263r.:\350P\2628\0011|9\2319G:\366?\0359\026\305 :(\362\3379\344\314^9\203\3318:\370T\215\270;\242\227\271\007\031-\272\2370\\:\254u\314\2715\227R\272K\367\2039\030F\0277\216w\317\271#\'\207\270(\355\0049\220\220\2259}\275\214:\235Y\016:\211\353\2709\347R\2168\340\220\263\271)\332\3119\004\270P\272\014v\035\271l\335\":\350`\243:\3021\3629pq\254\271\316\006j\271\276\341-9\205\371\265\270\214\245\036\2711\253\301\271*\223\373\271\033\036\325\271\035\331\024\272\225E\263:\372\256\030\272\372\276\2779\006A\225\271\034\000[9&\016\275\272\300\302\3669{\"%\270\341\'\213\271%@\3169\241\230\023:\230 O\271\006t\377\271\241\010/9v\337\2717\031_\023\270\345\344\2179\223\350\2339\007_\023\272]\345\2249\214\371C\272\250%G\272lvd9)\020?\272_+\\8Y\362&\271d\301\360:\315\022a:\203\370\201\272</\377\2713J\2648\273W\315\271\025\327\274\271\356\322\274\271\353\236k:\207nl\267+r\030\270\317w\3169\213\271Q:\255\365\3419a\207[9fv\332\271Q\2763:\3610\372\270\002\245<:J\3053:\243\253]\271$\307\0319\344\177\013:\244/\002\271\306$\030\271)\177\206\271\0333\000:]\'\031\272%\370k\272~,!:+\261\217\271\3137\321\271\303Z\30298S@96^\2069\237sW:\021H\207:\310C\2029HO\2208\\\006\3539\233l\354\27124\361\270)\235\367\271\027\237\006\272O\266r:\372t\217:9x\215:.\330\327\271oe#9\310\0337:tZm\272\346-\340\271\260\005\2108\302\362G:\213\241\220\2720\2011:\301c\313\271\263\311V\272\263kK\272/\360\264\272\0016\300\271,\362M\272[\003\257:\271\334C:\220=\2069\007\337|\272V\356\27494\3760\271\371\014\027\272\275P\0329\332b/:\027_\r\272\027\'\r\271\350\336\2069{\t\365\270\005xk9\322y\2009\240\3278\2713\032x:\247v\037\272\200\301\335\271\352v\3309m\205\177\272\006\236\010\272\377z\031\272\304&\0239\246]C\270\202\276\242\267\3577\2419?\025f\272z\034\271\270\203\225S\272A\315`:8\016\014\272\010\203\026:\207\236\331\2713m!\272\323\"u:\277\016\266:\224\013\2676\034\311A:Rmv\2711\036\233:\352B`\272\321\016\023\272\177\313\356\271\337\232\264\270\027p\n:\327\225{\272\236&-\272\001\260@\272?ML\271\322\0205:\314T\215:\357\314\005:|-\274\270(\2365:~\035\2069PYH7\325Q\2159~\333y\270z\370\237\271\354^\2569a\270[:\271\375\3279\374\213\001:~\302\3379\004\206\234\272\275\220N\272\005\002\211:\275\253\200\272\302>\3258FL\221\271\306B\004:5z\2739m\352[\272\317t\016\270-\251\037\271\007\n{\272\201\333\3128924\2706\'\007:\206\016G:\257v\246\271) >9\313\262\2549q\206\3039\206O%\272\364\307\3039\311\272$:\204\225\t\270\254i\363\270\274\223\307\271\373\2627\272M_\014:\317\34069\314%Y\272(\027$:6@\3739\275\211[:i\035\323\271Q\350\255\272\255\244):K\250`\272!\372.\271b\330\017\272^\347M:!\351s\271\275\030o:j\324\3009\226\251\2069\026\236\346\267\007k\013:\232\rx9(m\2558E\313\'\271W#\230\2729\314,\272\260@\020\272\202\265\202\272y6\260\271\300R\033:9\200\3339\n\014\003\272\206\353\3249\0072s:z\347\2509\\\005\2459e\230n\271\321F\206\272\304\333\304:)1\214\2701Q\3659\206\215\r\272\275m&\272\233\032\352\271\353\301\2059\010\3708\272\224sD:u\340\246\271\371\215@:\201\310\212\271\361^1:\374\345\334\272t\234\3217z\213y:<7\005:\230\010!:\240P\217:t)N9\2761\014\272\317\331\2448\271wd\271\266\315f:\356\030<:^\021\213\272~n1\271\367Oq\271\320\372\0379\006\332D\272o\212)\271\326t\3079w\025\365\271\321\310\3018\301E\\\272\267\260F9\245|\2619C\030\331:\375\031\3259\001I+\272\310C\2149\366*I\272:e\343\271\354r\001\271|\365Q\272\315Q[\271\306\310\220\271\374\353\\\271\341\220\272:\007\334\316:0.Z9T>\241\272\235\225\346\271/T2:\323Q\2159\220\300j:?\210\3476\336=\003\272\013\314\037\272\206\024\3069\316A\0208\347SU\270\207I\2019)(\352\270Y\033?:\301\247\266:\261c\005\272\354\324\320\271\3061\301\272\216\005\366\271@@\005:d\265\225\2711\223]:\350\004;\272\314D\3659M\r\003:\350\242\224:\3126\3009l\332\034:\345s\006\272\377\262\236\270\332(\255\271\013x\0029\253\352\210\272s\320_\271\022:.\272\347Z8:O\361\367\271\007\266\312\271\002\313\0329~\177\242\271\247\334\213\272\257\330g:\256x\2039R\331\3529\336\341_\272\336\"\217\272FLp\272\302\325\002\271SC\001:%NR:\351Z\227\271`~\344\270s\320\223:T\302\371\272B\332I\270@R\320\271\321\263\000:\314CE\272\303\nE9\036\344\017:r\302\000\272\243[\020:\372\265\212\272\340;\362\266\033\376p\271\373\035H:\177+H\272P\034\355\271\304Q2\272\360\002h:\330H\2168\014\323\036\272=\024O\271\252v\375\271o4\t\271D\276G\272P\215\241\271\226\030=:\314\264\363\271#\340Y\272\362;\031\272\201\210\2449fC\231\271\205\267\312\271\352&\0269\333\266x9\267b\3769;\246\023\272`\226\2739\253\337\r\271\344b\021\272hea\271te\264\271xa\3009\275By:\n\312\32496\264\302\271\252\241\021\272\224\374\212\272\177\267\000\271\177ry9\203\223\032:\270g\200\272Y\230\246:\300a\3148\334\331\003\272*^r:\301\204\315:\023aL\272,G?:o\202!\271\354\215\022\272\016x\2658\234\272\264\272\303\212\2706\363\302\230\270\"i%\272 nj\272\231\364\024\2712_\037:\336{8:1\335\2239cWq:v\020\003:\000\353_:{y\277\271Z\027\360\272\262\2079\272\267fL\271\266\016=\271\215\220r\271\021\373q:a\235\2709\305\007&\266\277F\002\272\243\024\234\271N\3104\272\201\316}\272\260<\024:\207\277\212:qe%\271\265+\304\271.\372@9\254\032\003\272<\245\204\271x\224\331\271\227\357\2459\"\227\311\271p\322\217\272n\322\346\270\035\254J:\250\253\231\272Mj\0259\365l\344\271\20717:!Hu:8\"\006\272\244\266\2529\350\374t:\344C\214:\326(|:\251cW:\3041\236\271\265\334\204\272\266\351\'\272\3539\3279T\225\355\270OIx:\307M\237:Vu\006\272\022\330L:c.]:a;\270\271\025\273\321\266[\320\244\272M\320\020\2712\334\256\2712Qw\272\305\375\310:5\231\034:G\307\210:\033`\202\270\257\363\030:RTW:\343k\205:\317 \305\272\302\361 9W\216E8\344\351P\271\350\037=:u\034\0309F\"\262\271C>\2309\222\213S\271\373\246\202\272%|\220\271\323\245j\272q\222\241\272\230\276`\271C\344\3779Y\010\"\272\357\345\016:\306/e:\223}\2429R~3:\314\366\203:h\200\247\271\027\330\363\271\351\274\336\271\306\220\234\270\325AO\272\025%\223:\035@\201\272s\316\25173~S\271\361\005\0269)\235\351\2718\365N9\362\026\3369\315%\005\272\355tm\272`\222\030\272d\"\2669\326\215~\271IZ\020:\300\260G\272(\265\3319\277,\":\233\204e\272%\261\306\271Wl^\272\365\202\316\271\317\003\3007x\307\020\271\250\371\3259\301\300\3519\n\342\216: =\233:\207\351\2739\232\000\341\267\316*\017\272\373U\231:\324:\'\272\220\202\031:*\037w:\210ng\270\n\334\010:(\036\2058+l\207\270\305\315\2118#\030\0239\225\362\003\270m\020\217\270Z+\34792Z\236\272\300\342\302:\371?\2418K\212\3739F\034[\272\366\340M\271\261]\210\271\nO\\:}_\2279\315{\254\271\347\325A:\223\263\257\271\016\245\306\271\021\205\251\272\207\200\r\272\246\353\3629\374\177\013:\305r\3479\310\300\2528c\237\241\271\3279\212\2712\004K\272N\234G:\203\241::I\252\354\270\301\330\2708\177<\212:{bP\271\006i\00296F\244\271\203@\2509\314\013^9\3222\n:\235-Z\271\216\33029\237=\2249\033\332~:W\022j8j?\2537G\304\333\270\373\177\230\271\031\022h\272\255\352[\2711o\017:\246+\0219\311\360\0359\020W49\nGC:\210\016\316:\272A\206:KdS\2720\002\337\271\345\375f9\317!\267\270\332{e\272\002\r\035:;\342F:\007\3621\271)q\215\272\221G.\272[\235~9\332\336\343\270v20\272z\323\323\271\337\271H9\225S}9\260\204\226\272y.u\272\226\234\274\272\024\021\247\271\\\306\r\272\003\207\2579|E\231:\325\350\0279\355a\t\267\\\301\252\271$\235\210\272E\031%\272W\212\002\272;\026\231\271\362\266\0276\375\272\2049\310\266\346\271\376\"\223\271\034\334o\271\214:\264\271\003\036\2029OP\016:\332\2769:|o\226\272d\355~:\334:\2369\253]9:\276\030\t\271X\236\253\267\265\206N\272\264S\000\271\2331\262\271\000\264c\272\252\3537:\'\247\031:Q\376=:\365\204\3178\234\'\020\271h\037>:\317M\2529\277;\231\272\305\360\"9\327\203\276\271X,\203:.iC8P-k\272\030\013/\272]\257`\270y\3434\272Zr\036:\0073$\272\342\331\006\272\221\005\330\267:\235v\272)5\031\272z\026m9y\253\023\272\315\345<\271\345\372\3619\305X\246\272[X\016:)\r\357\271f-\031:\340f@9\262\312\302\271\327M\222:\214A\274\271@\324E\270\235\234\322\271\310\326M\272\021k1:%\347\207\271\360\253^9\'w]9\364.\210\271\366\341\2148\251\005\2509\302\243I9\320\022{9R\266\3259\tS\353\270@\363m9\360\325\n\272\275q\233:C\026\032\272\016R\375\271\320\233N:e\305\n:\346Z\036\272DK\3729\230\267\001\272\345\315\2379E\337\310\270\023\203\3729\276p\374\2713s\22798\315\226\272\270\314\264\272\254\344\023\271\3050Y:#\310\2319\254\265}\271lkH9\203\304)\271m\235\\\272\256\025&\272H;\261:\036\004\2179xS\3039\355$\221\272\001{\031:lp\3769aR\2179\250\216\347\271G<\225\272(\362\2459\013m\006\271\315\363\261\272GN\244\271\030LQ91T\2578\351\237\212:\332\337N\272\014\035\2339\242W\257\271@\257\362\272\327\255L\270\275\266#\271\233A\0349\020\253\031:\242\346Y\271Y+\3308V\005]\272-NM98G\251\270\337\376\3709\005\331[:l4C:\220\210\230\272l\275\224\266\3321\360\271|,?\271\264\231\2509\201nR\2714\370\203:\222\356\306\271\245\0102:xCc\271\257W\036:\n\326z\272\240\251\301\270\217\257q\271?3*9;\322\024:l\033!8\225!g:j\327-\271\312F\023\272?\226_\272\035\272\023:\205\254E\271h.\2649\361\007\0108\035\026\007\271w\216-\272^\304\2018\264B4:\003\363S\271n\307\227\270[\376\367\265\355\303\302\270@\236\213\271I\361\2349*\\\242\271\010-\2119/\301\360\270\262\013M9\272\260#:\2450\202:Ms0:\323\255\2048xim8c\257v7\375\345J\271k;\200\272\032\354\"\272\353\030\215:{t\007:@\271\222\271\252\330\201\271G\n\242\272\306\3511\272\275+\0109\020@\313:L-\335\271?\312\320\271\204\257,\271@!\006\272\256\323\301\271@\312\'\272\270\373\316\271~v\225\271\016\211\372\270/\351\'\272\217\3364\272$|]\272|\017\2378}\205\'\272\200\30489\035\313\007:_\r\036:\235\347\2629\256\004\3238o\342\247\270\357\244\316\271m\014\310\270\342\242\026\272\353\242x9h\034e::\314\031:\233,\222\271\304\327s:*D\\9\354\002\027\272rRr\272\343\355\022\271\301p\005\272.\372t\271\004.\226\270\347\320\034:\245$\241\270NY\3529\374\367\020\2723+\2529\327\257i:\353\211#\272%\340^\270\347?x8\353\325\201:3Yj\272\334J\2129c&S:\370\272\246\270\027?R\2720\313\210\271H\303/\271\004Rq:\206\031\006\272\205\330\027\272\261\305<:\275\035=:\245\007\"8\316#\013\272\344m\n\271\275\r\226\271|i\340\271\306\323\201\271\3008;\272y\221&9\310=\021\272\017\025\035\272Wb\373\270\370\252\n\267\224B\3759\373\321):nv\263\272\202\361\005:\2531\0169\007\222G8@\324F\2721d\001\272\317\034 \271\306z]\267\323\007X:\337\342 9\201\036\274\272\177)W\272\241\007J\272\'\344\314\271\272\362\3417b\345\220867M\272\265d\257\271\204Zc:\356\257\320\271]\325):\003\265\3669\n\227\2627\263\277\2449\207w\3779\375v%\271/\323\210:\024\336c\272\232:\311\271\035\372\210:\334\315s:j\212i\272\254\237i\267(P\007\271\251\177\271\271\313\307\3079\363\377\3108^c(\271{\327\"\272\331\242\221:69R9&<\3179\320\016%:\003\236\355\271\305E\0209\311\354\321\270\223\247R\272\223!\216\271\232r\2669\037v\031:^\307\017\272\257i\205\271\t\025\2329\0079\302\271\246\022D:\377\261\3377\316\310\3039e\366\2349\340\277\3718\240?\263\270\371\024\3749\313\353I:\226\021\250\271\304\314\022:\375w\3539Wc\323\2719\354\3568]c9\270\326e;\272\370\347\2179beU\2712z\2049\\\230\353\271\2521%\267Y\350\003;\327P86\037H[\272\240mX\270\325\021#:\211\013q:\314\373j9\362\366\217\271)\027\202:)0\2239\233\256\304\271\204\225\3079\323\031\306\271\334z\362\271\216\226\177\272\025<\273\271\221c}\272\362\030\2519\247!\215:\000%\265\271\362jX\272\303 \211:r\\\034\271l\332\2239\302r\2048C\326\232\271\312n\225:\350\026H\272\326\372\036\272:\302E\271&\357\3369\026L\3237S\344\014::\360\213\271\006\344\027\272\344\006\336:\365\313Q\271\376\363\232\270Y\330\026\272\226\343\2559\313\361\326\271\037\316;:\232pY\272\224\027\233:$\317?9\372I\3239\216h\244\271a\366c\272\035\347\240\271\306\242\000\271\341[\270\271\035\277\0228\316\207\2208\363aL\272|\225g8\335ZL:\317\355f\272\343da\271]\362\266\270\273\366\202:\026\r\314\270\314\255\230\271:\352\215\271\314B\363\271\265\224L\272\245\3573:A\322D\272\n]\3578\342\032\2779\274\205\0309N\351\224:\237\362\3719G!\220\270\374\216E9:5\202\270\354x(\271>9]\272\361\300\000\272\014\250O\271f\\\2239\202\021\252\271D\245\203:.\371\2109MP\037\2729qF\271\t\030\2418&=\333\271\226\361\351\271\260\036\021:B\031\025:\240_\244\272uj\347\272m\3742\272\345\260/\272\334 \352\271\014\347%\2721\305\223\272/~^:\263\203B\272\002c\':\255\276\202\272nBC:\264\014[:1]\2277\003\375\021:/.\3338\357\361\0258Jt\3305jx<:\257^\2009\031i\204\272\234\010\0139\260\221\005\272_\324\215\272\0349\3119-,+:-\360\301\271\314\222=:\027\021\272\266\302\214\210:[\316+\272\017\255\224:\304\345\230\272R\252S:\003+t\272\360\026\017:\016P\235\272\272\200,8\217\301\3669\374\031\331\271o\374<9\303\254M\272\341D\006\272\224.\3069\2250\332\272\302\255 \272\227\200\3349/\332\2519\004\332i\271ep\3569!\t\0059<#|:\2253X9W.\352\271\362kj\271\265T\025\271sg\3009\325\216\216\27296U\271\271\236\034\272\342\204\2029I\214M\272\336C\3119\340a\021\272\352\333\027\272\361\005\3169l\236.\272\372{\260:\257\270)\272\031\211\030\272X\224\004\271\247\207\2279%^\0139\236\366\377\270\344R\001\272\263\362\206\272\325\230\2539\354\016T9\006\'\3669\312\264\3408\341\310\3239\276\213]\271\006\035\2719\222\363$\272\256\252\2609\036J9:Ts\':\331\243\240:b\232\351\271\331+e\271vL\205\271z\231\013\271`\260\004\273\377~\255\267p<A9\333\220\013\272\327\\\304\272\230\r29\264\346N:*d\315\270]\206t9\243\357\2329,\264\'\272\347\217W9\212\246V:W6\373\270\037\007r9\326{\3209\00360:\216\277@:\013\257\016:l\235\323:\0036\2658\021\357\3659\264\234=\272\321\350W\272\302\327c\272ioZ\272\204\372\3259=\270o\272oO\322:\017\205\375\270_\234>\271\223\013r\270\t\032\237\272\347^\036\271Z\027\2279t\300\031:2\271\201:\325|\032:\004w\2269\023T\201\272\032\336\3558\266\025q:!\214\3057l\201\020:\302t\336\267\212m\3728\351,l\272vK\003:wNv\271P\002c\271\027A\3137\t(\260\271\206\325\3278\316\254\264\271r\340\202\272\301Sh8\352\203\226\271\363{h\272\256\304\3459\2770\2639S\317\3438\245\201\377\270\343\377x9\214\377\017\270\367\002\2309\3539f\272\254\223c:\355\240\2068\020\261h9\351\363\2639\023\337\261\271\t\325\001:\337\320\316\271\025\233N:\177\241\327:|\024\r:\227_\344\266\016\367\341\271\031u\3058T\256\2077\236\213\003:_\252\226\271\036s\224\271z\334\"\2721cJ\2720]=:#\234\236\270\032\027\3218YF\322\271\227\357\352\271(\27509\317:\250:\271\312\2078@\263\3169\370?\3319\321\350\2259\244)a9\217@@9\275\375\221\267\332\371\0349u\266\2749O\025Y\2720\\\2519\371\344\211\272\246d\205\272\343\323\364\266RL\014\272\201L\000\272\325L\3728l\367\3525f\310Q\272~\001k9R\374o9\365\007\233\272L8\002\271\014\003\3259L\220\334\2714\315\346\271\374\215?:`6\235\270\335\232c\272\332\353!:\364AO\272\205\305w:3?G\272\241|\023\272=\256\004:UA\241:\316x\013\272\325\267!:\226\027\324\271*\265\360\2705\00209~\252\2228\307t\377\271\327\266\3309\344\327u937\0149\343\"\206\272#\326\000\272\035\364\2069\314\\\273:f_\364\270o\263\252\271I\267\2119!N\002:>T\211\271\206\244p\272\177\227\3478#*L\272\021\350\223:X\246f\272\310%1:\036$\215\271P\36179\307\2149\271\203I\2568yR\305\271~\224\3409\271\314.9y\257\3039\211O\3639(\022\3658\352\204 :\334\234\236\271R?\0109\224,\026\272C^\227\270\372U\n\272\222\217m:i\334\3469\312.\3439\036)\3459\006\235\024:\236{\3129\356\024\264\270\016\344%:\320^T:k\303\333\270y\340\2509\230\313\204\271t0p\271\014\360J\271\202\217\014\272A\254.\272\'\260\0009>\275\3159?\250\025\272\300b\225\271\264\277C8x\th8``\3329\341J\253\272\344\371\215\271\016\305\30490i\2179\374#\035:\333?\006\270\365\256\177\271\240\310\3257x\260\201\271x/\253:\367\334\275\272t\325\020\272L\244\2579\206\014\3579\335\331\257:\325\234\2109)\317\215\271\177H\3039\236\326E:\347\362`\271\274\027\027\271\230\337\001\266\027:+:\037d\2319y\001P\271&\r\332\267\000\030s\271\231Y\220\2722c\r9\240~\3239\275\351\224\272[;\241\272~\253\257\271\025!\3679=\334\200\271\361&^9\315\367\363\272\342\376\354\270\301\266\234:<\231\213\271R\003M\272\234\311\330\271\327\243\31680^\210\272\025P\0069\346\233\2749Q\324\26797\312i8G\017m\271\363\027\2539\352%5:\034\354\025\272#\361\267\271\326\206{\272\266/\2308\262\275\230\271\331\030q:\241w\":\2118\2779\272\252\3347s|\317\266\2613\231\271\020P0\272\026\177\3659\316\254C\272\002\371\223:s\327\2078\206\231\266\270^\361L\272\255\320\3729\016\302\003\270\007\356\3348\264\330L\271p\352%9Fj\006\272\200,\214\271g~\204\271\371\350;\271\002\033\230\272\211s\243\271\353\352\204:\236\207\310\271\301\363,9J\003\037\2723\364E\272\337\357I\271x.\373\271Rt[:\020O\200\270\2278\'\271\210\201\351\271\302eH9\316\n\312\271\201\230L\272-\324\372\271\203\257h\270\342[b:\273v`\272\243K\027\272sw`\272V`\233:\337\t\3069\272\241\352\270d\267\354\270z\310\3509\367zq9\356\341\2419\010qm\271q\014\3258*\254m\270\361\004\005\270\253\333\202:\260$M:\035.!\272nl\240\267!\202\267\271P\251\007:\337\034\0249m\343\0138x\275\\\271\343\373Z9KA\213\271\354\323\2209Q\006\0179\332t\215:aq\017\272T\243\217\271\230\n\324\272.zg8\361\313\247\266!\355\323\270P\032\272\271\020\336\037:\340\000\016\2707A\376\271*\357\242\271\"\3603\272l}\3449\325A\363\270\'\263\030:\277\250\r\272[\240<:MZd\272u\200!9\252\252\2059\334\321\352:\231]Z9\247\242\207\271\227\203\3509\246a\013\272|\321k\272E\233d6/\007\004:\032U\030\271\313t\032:hBF\272\355\010\3118\332\177\235:F\344c\272RwB\272\341i\302\271\\q\2309]\014u\272\t]\027\2720\330\234\271@\"\2507\260\214\\\271T\206\225\272\204\0353:\270\263\026\272\276mE8\241\023\r:\010%\212\271\202p\241:\2230\365\2718dB\270 \352d\271\014\362\3768\357\223?\271$\2640:\236\031*8\222*h\272\0137\201:y\203Z\271\337r\037\272\316\333\207\272^O\2619\017\340g\271\000D\t:\272\255\341:\252<\314\272\347\r1\272h\226\377\271\302\204X9\201b0:\372\346\207\271V\372\003\272G\320\2479E[\030:`\242\222\271h\023\2509\002\036I9y=\3319l\200\327\271\034\310\276:\352\251>\271g\337\2108\257Q\032\271\357\350\027\272\327\303j:\360{\260\271Z\017f\272y\363\323\272\007\302Z90~k\272\207P\2179\376\202\240\271\237\366$:J\216\n:\242T\2159A\326\226:#t\0329\360\334\3119\020s5\271w+\2728W\0326\271-\374\251\270\022\366\3069{b\366\271\013\275\2479\340\273\3008)b\034\271bj\207\271C\033\024\272\307Jz\272\373\037D\272\273\210\2109\373h-\272\331:\3149\317~\0329rBR:\016\350\274\271#\nS\270\'!\274\271\234\331\226\272\304\334r:\336c\221\272\231\224\243:\027\t.:\2319K\2729la:\026g\022\271}mJ:\031aE9~I\2239Q\013c9\350\303\276\271\261\002\003:\316\344;\271\033\320\266\271\274\333\177\272\221\336\2418v\357)\272\335>\243\272CJ\201\271\300\233\022\272\247S\0229\370u$8\355\244l9n\256\006\272\355\217\000\272\263\353e\271\346r\327\272\20469:\204\266\325\271\004\273y\267Gi\207:\322h\237\272\004:\2269\201\342\2729z\372,8\240\316g9~u\255\272\260\246\033\272\037}o94\374E:\265\020\346\271=\363\252:\003\223\276\272{\360\362\271y[c:\316|\3549\326\034\364\267\007d\3219\345\275J:W\003v\272 \245\023:\001\367\247\271s&\233:\376G\3579\273\307\020\272\352o(8\340\\\206:Fy\252\271\242\253\202\272\251\327\':\244h\213\270\263\311\270\270\367~\301\271\234\317\211\272\315\001t\271p\010\204:?(\005\271JA\2509\036\031`9\201fq7\221f\227\272\334\212\031\272\207#\006:\347\332G\272V1\2378p\035x9\303\035\3448\332\313\033:\270\030E:^j\267\272\342\217\033\272\026\037\2509\r\3513:\244f\221\272\314kE\270R\374\240:,\303\35191\261;\272\036\356\343\271H\206\376\271\351\230\367\271\272\277\003:\366\025\210:)\30149\220\374\032\271\243\372\317\267\374\333\2439\"\262\2509H\201~\271A\310\234\272\340\354,:\377\325\3029\342#\243\272\023dr9n\317S:\346\001\r:\201\205\2339[\354\214\272\017\\\3668\206\220{\272\3215?\272\343\334K\267\2759>:AX\3729\271c\313\271T5\346\271\031\366\212\271\205\232\254\272\261m\335\271r$\2509\201\202\020\270a\274\'\272\034\301M\272\322\346h\272\264d\002\272\253q\034\267A?R91\211\221\271\260\242o\272^UE\272\234#\010:)yM:\035s\014:\352Z\212:\244\267!\272\242\344\035\272;\243\004:\230\245\2039E/\2058H2\':\003\202\271\270G\245q\272\347A\2549\3415c\272NC}\272)G\3159\303\313\366\2706G\212:\005\333\2029\257\324\273\271\0277\035\272\232\321\2779|\004r:\377\026q9\005\245=:\002\231\0068\030\230\3419\\R\001\272B5\3279\007{>\272\004\305\312\272|1\000\272\356\251-\272\200(\335\271k$*\271e_6\270Fy\213:C]~9\273\363{6\"g\003:\221W\2119\302\364s92\355\304\266\000\311V:\235z\365\271\004\203:9?G\264\271\327\177q\270\330\200;9\311`9:n\316<5\332o\037\272l\023C\272\317\343\252:.\344(:\225\013t\272:\"<\272\377~T\272\004\253\314\270\233\251\210\272O\321S\271H#%:\022\243\016\272\250l%:\250\302\264\270\013\270\235\271!E3:\264\264\036\271\335[\3429\010h\212\272x${:b\200\2749\302f_\272\236\357\224\272F3\0008\210\037}:\020\036_\272]LE:o\301?:\025\330a\272&\350\340\267\n\203&\271\266\275\3779V\276e\272R\273\2779\211*\2709\305E\023:\272\252\n:\371\002\2039\003\212\254\271\0103\001\272{\207\2639\373\354\017\270\313\177\321\271\303\300\253\270\300\n0:S\256\2049G\335\252\271\023i\3629\357\246\3519\337@\010\271\261<\200\271\365\374d9\310\0322:!\204\0059\240\357(\270\226\327,\271\362\360\202:j\000\260\271\314:x:lg\356\271\027!\3129D\236J\272i,\016:c\200\254\270\034\322t9m,\316\272^\003\3659\317kE9\2226\3708`\307<:\221\254T:12G\272\253\001\0329\207\353\017\272#\212F\271:Y\201\272+\265a:\326\305\370\272\223\233\2279\375\373\2659l\310\2418\021 \214\271\246\rV\272\334n!\272\210\231\3139Ts\030:\370\340\177:\361\216\3678\262\265\213\271\227f\222:b\360\3609\300s\016:{\354\206\272$Y\3779\225\225j\272\022@w:\261\272%9\375\334\226\272L\274\3719$o\2677\347\344\30290\023V:\013\024\3469\212i$:\376\260\307\271\307\266\2079[\035\2067\233\274;:\n\331\362\271\264\203\3329[\035\270\270\034\216\024\272j\023\013\270\200\021\2369\372}\231\271\232t9\272\200\370(9\264\205\005:\306\303\031\272\200M@:\200N\2609L\326$\270/\213q\272\215A 8\333\351\234\271\014\255v:G\216\007\267\016Y\210\271\347\003\356\271\0334\310\271\370\355\010\271\360\350\241\271\336\316\325\270\255w\255:\177\270k9\204\214c\271\310\017\177\272\351\207\0078\'\235j\2717\23569E\3401\2721\206\2509\301\363\224\271\315m\2749uw\013:+7[:\222P\036:\307\214\276\271\322\221+:ru\010:R)Q\272\202\215\3748\366m\320\271\265\330\000:|\362\2068\206\322\036\272\321O\224\2711\300\3219\0336\250:#\251\2118\265\020u\271H\023\2029\253\027\3048\231\366\2739\313\'\357\271\021$\002\271_\364\3739z\233\30792\016\370\271#>\204:\302|\2409\246\252\020:\022\364\226:\262\200E\272\242\275E\271\227h\255\271\023A!\272\"|\024\272\276L]97\227\3058\337\260\221\2725\035\260\271\357>f:\327\272\030:\306I\2719\327yG:\006\000\231\272\n2\024\272\232\300D:U\326k\270%\213\201\270\306\003E:\016\266\022;5\215K\271\\\000\02493P \272,\307\2679\024\340@\271i\247\3618W\352\3769\263\302\235\271\347008\271\350\324\267\276\242M\266\302\351\0048\216\207\3539)\367\352\271X\252\2059\r\222\223\270*\305\000:S\035\2379\342,\344\270\362\032\311\272M+(:\016\226]\272\317\207\3177\371Bd:P\203\304:\322\2344:\275\177{\272v\313&:\364 \2258\220K\207:k}\0239\037n\0019\314\014\2739\353w\2449\227\030\237\271Ku\212\271Qu\330\2717s\245\271\333I\345\271oT\3459?A\010\272(s69\271\235Y9\271\r\36593c\021\267\213\310\027:z\016\345\271:\230\3639\353mE9\341\231B\271\274\247):\231\213\007:6\261\277:\022y\313\2711\201\351\271E\275\230\271\306q \272V\301i\272+Zh\271\343\314\203\272\017\264\3249\212\026\016:\221l@:\243S\225:\321&\365\271\210j{\271\214\017D\272<\t\3679\320Co:U\304\326\270\323\2746\271C=\n\272\025H\232:\241\3173\272\330\034\207:\014#\306\270\324\013C:\377\000/:b\002C\271\220\213\271\271\361zN:\352\300K:\370%\2078\220;\304\271F\201O\271\3252\233\272\235\252v9L-=\272\014\301\3539/\301\020\272\207\367\374\271E\362\2249\016m%\270\304\321*\270B\0070\271)\367I\272\r\250\337\271U\323\0259e\30149\215\327\017\271j~\2339\302\325\353\270\256\265_\272~\313\200\270h\252l\267]3\031\2727\363\3549\214~\224:\314/\273\270y\373`9_~]\272\300l\3149\014e\351\271*\276\372\271\034^`:\211\307\2739\353\276U9\022\362\0319r\351\031:\032\254i\271\211\333\3268\3051\3509u?&\272\313\3005\272\322f\3519r\314\250\271z\203\277\271\367\316\203\272\216\220\3509?\'\315\271\005_O:yA3:\342\215\353\271D\316K9;5(\272V\217\300\271\013\243\215:i\261\225\272\000\006)\272\274Q\207:\024\\S:\255\245z9y\205c9\360\345\3648\273&\225:n\274N\272=\272\270\271;O\2579\313\255h93\362\276\271D\352\212:\326\320\232:\225\307\034\272TZ\003\272M\363\3139\336e\227:\324j\3428Re\253\272\2246\201\270\035\364\340\271)\361\0017a\334\210\272\230\314\3449\350\222]\272a\330\202\271\261\201\2379\336\006\270\2714\326\220\272 \2414\271\t\332\345\271\275e\3149P\216\255:h\224L\271\013kt\2705\300\2179Z\361Z:\270\341 \272\316\325W:\342%\"8\363}\2629\371\312\3039\252\234\0049F\326\3059\322R\251\271Q\370f9\301O\215:\373Rf\271\261\335\2629\237SZ::\334\252:?\036h9\013\007\347\271 \232\364\271\250I\2749\222\345\3769W\313\0219x\203\2249\357\000\005:\233@\202:\020\205\204:cw\3368\236\341T\272\361\365G:b\006N\272\016\006\235\272=\330\274\272\355\275\2549WD\2079\0023w\272\010\"\366\271\025\010\005\272\341\273_:=\303<:}U\2709iZ\364\271c\013E\265K\3107\2728\337#\270rD\331\270U\321\3039\216c!9\265\201Q\272F\033l:\236_\364\271&F\365\271.k\036\272-ig9v#\203:kr\3339_nh\271\335Bb9\250\nQ\270r\352\021:\255\256\030:\300\273]:g\322\3069\373[\223\272\361>J\271:(\215\272?;\253:\351\237\2069\366\275\220\271\022\330z:\353\r\207\27218\013:x\363O9\322\367\376\270\005\213\3519Y8\"\272\020\202\323\271\356l\350\271U\225i9Z\266+9\344SW:\354R\222\271\327\3613\271[\307\207:\250\356\201\272%\31148DO\024:t\201\334\272\305sv\271\351\321\253\271\367\"F8\024\320\246\271X\342\251:\312\372%\272\020\r\2107\353\346M:\265C\262\272\342x\375:m\304\240\270\254\307\260\271P\036\212:jj\3567V+\3049}P%\272\243\207\235\272\023\206\0019U\335\3619\331\211\331\270<\270\357\271\323E\340\272f\317\225\271\033\262v\270\321\027\001;\202s2:d\335E:9\305\3139\2356 :k\010,\271\343h\0069\317w\223\267\225\013t:\356#\n:\260\347\177\271\004?e\272\266n\321:+\022\3509o\247\0272I.k86J\245\271\260\332s\270\ry/9J\032\3249^\244f\270e\347\001:\001\314\2458\316\327\344\271\370\246\365\271<\224\235\271\262\345M\272Y\321\250\270\305\314\253\271i\261D\272\236_>9\021\177\300:\316\372\2278|\0038\272U\0070\272\030:\310\270]%\225\272pJ8\272\236O\000\272\255\270\020:\211\277\3608\013\360\2629\231\262\214\272!\233\244\270\262[\272\267Z\274)9\224\373\245:\372\340\n9\270\201\264:\223[\246\270\353.S\272\274\246o90\235\2038\364\232,\272\211kH\271\242J0\272\254\021G:\251K\2249\027E\220\271\372\310\215\272\222\'\0139\201T\2719\265\302\27795\274\010\272J\333m:\3118%:v\233\2159jT\3239)\014i:\243\352Q:\375\n{:\267\204R\271m\345\3247t\0132:\340z\3509\200_\202\272\213\305P\272N\335\305:\306y\253\272T\305::`\024\3717cR\2079\255\205\\:\245\300T9\307\177\2009v\216\216\272\365\255\325\270\021\252~\272\202#\027\271\tc\350\266\216x<8\374\255\316\271u\372\325\271\376\"\3707\266C\205\270\253\373\255\272\033&\014\272\363\313\255\272\372H@6.D\310\272dl\316\271\203\275\"\272(s~\271\340\021j\272\324\037\3038\272>\033:\344l\t\272Nw(:*\004\332\271to\206\272\247\336\2359E\263\255\270\311\213\212\271`\016\322\272\002\314\302:\211\361/\267E\005\210\272w\245\2268\215?\327\271R\022\2209d[\2667\226\302\215\270\217\332d\272<\270-:3Gk\272\273%p\272\256\227%\272\307\244\213:\363\323\003:v\340\0228C\354\021\271U/\320\267\224\213\3078r\240\010\272\025\223\2049\351\244\221\270R\244\212:\013\345\314\271\222\20129\361\342R8\347]\210:4\346\265\271G\216,8\010\210k9n\204\022:[\200?:\372\227\3168\225/\036:\337\273\324\271\264!\332\272ar\2359\233t\256\272\324\366\254\271\365\224I9}\030f:\206\300+8\260\360\'7\251j@9\232\276=\272\034y\301\271}X\203:\371SW:\215T\0209\350\213?:w\251\344\271h$6\272\357T\310\270\230\224\247\272\301\346^:d\025\220\272\303\371\227\270\226 \3569\204&e\272\322C\031:y\2605:\202\356g\270W\367\232\270A\013\0369\\e\3759\265\273\364\271\224n\26692}L:\325\036\3048\254N\2078\017\014l\272\364!\2159\224\325\2728\3455\271\272bx\266\270\372\251(\271;n\3509\203\220\273:\227\240\'\2724\316\356\271\"\247\0139g(\223\271\247\324\021\272\037\032\251\271\322\243\35396\310M\271\225\240\2457R\227E\270*@\3159\266\276\3049\205\224\253\271PA\3629\366<\232\270\330\307\213\271\306bo\271\324\304\3568\010 \2568\317\346\361\271\354\232\016\272\324\235\2309[p!\272\335\256\006\272\220Db8\330o\026\272\223\313\260\271:\246_\272)\245-\272\003\r\225\271Y\025\2209\221]\312\271n\217\216\271Iv\216\271\213\223\201\272\320\275\211\270o\323\2048\025x\024:\364\333M\272\000\316h\271\007 \217:\351\016)\272\200\032\344\272)z\0048N\315\037\271\250\361\003:\003q\030:\210\344\031:sa49\232\247\375\270.V\242\271n\311\3679\304\016\010\272\327\351\343\271\010*\230\271\320\017\3219\277\250B\270\352\360t\272\203\312\3559G\307\205:9L\3469\352/\0229\301\220\000\272\371\344D\271\316\335<9\025\311\3419\312\000\2247\243y\205\270\363C\0249\003\213\202\271\316\262):\337G\215:\037\250\333\271\025\206\033\2719y&\271XY\234:\215 18\233\010\033\272\236\262 \271\305W\024\272\203\357\3259r\027\3549\361i}\272!\223\346\270\177\243\t\272\210r6\272%\30259o\001%:\037\322\204\272)\322\037\272\n\200H9\310\306\2049c\345\3349\201\256\317\271\232k\216\271\326\345/\271\022\216\3269\374N59eA\036\272\364<\366\270a\017\207\272Yc1\271\277@\365:\035\356g9EUy\272\271\263\207\272\222\322E8\022\033\0259\264P\032\272\267\270\355\271W\225s\271@!\214:1\345[:\233\246\0319<Y\240\2721\354.9</\3579\033N\242\272\301\352\3049\020\006\030:\253\n\2027\241B3\270\215)\337\272\177\016\004:z\300l9\322\371\355\2722\310\234\271\373\211r\272K\354\026\271Xw\035\272\247R\0379V\254\2059\r\343I:>;\2439\340\357\225\272\017\315\"\272|\'\027\271\365\301d\271\261\003]:\n\372\3318\362\213t:\200\264L\271>\\\245\271\302\302\311\271\233\245W9\274\356\2749|\251w\270\317\361\325\272\267\234X8\026\2036:1\223\341\272\006\205\033\271g\215\177\272D\r\2478\222hw\272\024]\3659\332\307*\272\224\'\312:\200\200\263\271{T :|\363\255\271;&\375\271]\237\3078\207\246\003\2729\325\277\271R\356h:\252\302\022\272\010\251\020\272\376h/\272\350`\r\272\352\215w\271\261\211B\271\325i\371\271\364S\336\271s\370\2409\310\030\027\272\373\201\004\272\200tl\272\344\177\257\271\306\250 :~\362\2328\303$\371\271\267\355<:\006gG:[C\004:VY\273\270\r\370\276:\261\007\343\270\365\340\2649)\3351\271\377\224\2039\220\372\206:\221$y:\024X\360\271\314>\256:,\234\205\2721\312\001\271\374\242o9\203\034m\271\340\014o:\n\354\243\271\310N6\267\241\250\203\271\360\374\253:\3164\323\271\017sM8\321 \230:\312\000o\270\342\207\013\272\\\226\3579\034F\235\271\357\214_\271\252A\016:\262\272k\270\306F\026\270e\021\205\2719\0178\271\027\366X:\037V#\272^B\370\267\355\034\3409o\023S\272\354_\3368r\334\211:\017\022q\271)!8:z\202\254\271y\020\303\271\333r\255\271\202\260\267\271\346Uf:<`\2469\312\257\247\267E\350,\272\225Q89\277(\\\270\366m^:\260j\316:\245Sa\272\355\322\204\271.\274\026\272\0039\321\267z\332\001\271\257t{\271\231\360\2248\364x\247\271\313\306\372\267\307\341\230:\257a\267\271\221\036\307\271j\321\301\270\354h,\271\322\243\270\271\232\255y\272M\023\352\2703t1\266h\024\3078\203\270\2649\211\234F9jh\206\272\036\375\004\272I\333\r\272|\317\260\271J\nw\272\304\243\001\272\006\323\214\271\303Q\300:\367\034\3079\307*\203\272\300\346\277\271Z\177\2418\371\260{\271\271\251V\271\260\370\020:\327\3721\271\010\216\027\2711\035\3128\'\341t\271m\366\'9\355\202j\270p\274\371\2701\214\230\270fl`6\2643\2119\232\314\03097\353(\272\005D\2359`ZE\2721\327\334:r\033R:\016\351c\272N\032\210\272\241\323]:\213\247Q\271\0325\251:TbN\271\360W+:\210\301\200\272?\2337\272)\025\271\271\327J~:u5\200\272\366\030\005\272\371\322\266:\373}\004\271\214\360\2649I\362\236\272P\373[9\214S\032\272\337M\0068\350A\2108\322\206 7\316\313\3009\227\275#\272\"\323\2559\222\023R9\223\227N:\201\0322\272Om\244:-\001\360\271\332s\2129\205\300\2019NTm:6%\323\271\313\371K9\377\377h:\253\330G9\260\037\2446\375PN\271\324\022\2758?\340\321\271 \006\3657:cI:\310\316\013\271kT\\\271\323/\276\271\375\247\005\270\332\276\2539,Qn\271\266LE\272v,\340\272\264\273\016:\226\341\"\272\346W\2028\2578l\271\270\224\002\272=\000\301\271\216\320W95\tZ\271\344\217\2355\0332B9\233%g\272#\215\"\272)(D9F\201/\271\226x\001\272\035\027g:\036<\311\2709\246\230\272\021\233\2207\357\244\2279\035,\035\272\235\366t9\002\212098\262\212:8\325\220\272v\020\200\270\000\242\247:\037h\222\272\330\342%8\007\307 8h\016\215:\3265\200\271%\t\031:!$h\2728\342\222\271\251\254\3218\311\036\005\272\007\364\274:\030\033\261\267\305\nN9\366\000\226\271\177\252\216\271\334-p\272\331\371\2038\362\317\0358TV\2529\357=;:\307\311\214\270\317T1\272\241Kx\271\322\327 :?\255\000\271\217\235\\:\216\300\253\271\201\361\352\271\246@q\270`\232/9\032\275}\271\203\300[\272\365\351\344\272\035\321\254\271U\004t\272;\363\233\271?/\202\270,a&\271\376\255\215\272\207-L:\032\246\24265rY\272\276\231~:\237i\033:\026\005!\272\225!#\271v\003\3229\037\345\2139\366]\013\270+\232\1779\2336\2459<\326\030\271\304\262\213\272\222\230\r:Mg`9\3248(\272E\352\004\271\034\305\247\272\345=\347\271!\210\3379i$W9\374\247.\272\355=\013\271\322(0:d\376\251\267\n\206\2349\357\362i7\364\316\252\271\274&?\272\371\301u9\020L\224\271pT\32591\341\n\272\307\344\2009>\230\3617.\"F\271Bk\202:\230^\2229\246n\2769\321\311n\266\006`\225:\234\227=:\306\311^\271\271K{\272s\324\3579\230A\006:|\346\0369\025\370\251:q\231\3529\320iL\272\001~\210\272\020:\234\272\356\264^91?\24199\217A9<\313\200\271BI\0308C\277\340\2717\017\246\272\221\006\014\272T\336\2059\360\316\2739c\321.:\221\341w9\247\222\2749\271\213\010:\357\262O\272\313\271\3426\\\347\263\271= \034\272T\322\2119.!\2649\266\353\274\271\324\302\313\271\370G\244\272a^\300\271\355\370S\271x\351\003:\2152\257\270`Ha\271W\327\t8\r\200c50.\344\271JD\217\272\td\3069\324L\346\271\313\232;:\303\330\341\271\317m\3649\275vh:\371\275\230\272/\265\202:\343\2540\272\277\264\003\272d\255\212:\216_\240:\311\317\2519E|w:H\217z\271Y\010)9\204\305M:\272\232\307\270O\n\2279\344k\241:r\200\374\271\206\207\033\272\244z\017\272\345\306s\270\234d\020:\352\226\020\273\002\275/\272l\211\0259\350|\202\272r\325\023\272.(b\272__\0329\271\272\025\271\275\364\205\272\314\267F\272\212\221J\272WvZ\272[\216\020\272RN\000:H\ru:\336\0144\271\022^\275\271o\314j:WHJ\271r\204\223\271\226\027\354\270r\361\226\2716\332?:\027\224\221:}\037f\272]\005\336\271\271\307\2637\372\327\033:a\377\037:\311\235\227:-S\304\272\'\267\2669\335\221\232:r\306\2776A\376\2439\250A\3659>\370\013\272\021\01089Y\324::Gj\253\272<Kh\271\325\221\337\271\265\235\337\267\030\020\334\270\3124m\272\361\273\030\272 )\2469\375b\275\271\274\333\373\271\257\322\2359\304m\3139Wn\200\271\027#\2149\223\034\2179+\315g\272\323\377\207\272\224G\n\272\373\356\"\271*\261\2049\256\372\3679\372i;9\316j\037:\036\250\3729g]\3059\\\372\2649\335\341\3629Vo$\272\n.\2379\355\n\3549\264\365\2767\031\250\271\270i%P8\241W\3329\3568\217\271\343s\3719\265\264\014\272\242pP\271kn\216\271\0136\0239\014\250O\271\352\365\317\271m\003\004\272#\232\016:\2314\303\271\334\267\3419+\313L\270\243\331\000\272L\357\3668\370Fx\272\360!!\271K\243=\270U\257\032\272\370\346\024\271\021h9:d\254\272\272\003\002\3768\227\t>\2728[/\272\2269J\272HSs\271\331\243|8s\326\2228\243\020\207:\177\201 :\303)\":\245\007\\\272[\027\026:\2133\3369\225\026[7\365\210\0369T\220\007:\331&\205\267\r\267\177\271\262\030\2348\017i\2347&(\203\271\336\217F\270\335\360W\271\303\335p\272\013\216\355\271\307{\3609x\374K9\247\315\200\272\220\314\373\271\363\322\"\271s\263\230\272\206\201o\272\244\266(9H\007\212\271|\351\2149QlI9\3341Q\271\232\365]\272\304{\007\270\223\342\002\271\300\nV:\214\377!\272a\262\341\271\2755\360\272\355\230\352\271\340\005<:\344O\017:\235\203N\271\311\256\314\271\335\303,\272rS\224\270\022\177\3219\243\323\2279\243\240\215:\017\346\2539\256\021\2259qZ2\272\246\356z:\364\255;9Uo\016:$\357\014\272\367\211\035\272\004O\3109\005\017\3649\345{\3149\223\266E\272\t\223\2167j\334U\272Kp\234\271\016\361\245\271\344\013\272\27029\373\271M\335\"\271f\263\013\271\256NE\2718\262|\270\200&\002\272\322\377\330\272\302\273\3219k\253\035\271\253\370v\271\223dP\2705\022\3059\372\206U\270\025\347\3579\021\230\":=\027\\\271o;[9;\014y9\237\255<:\353\003-9[\020\2049@\372\200\271M{\2319\251nT9n)\3659\304\210\212\2721Q\0239\315\342\376\2715\221;\271\016\204\315\270\035a`:\377\226\2178\306\276\3079\320\356\325\271\365\371H\271\345\303t\272\3676K:\347\020\252:6\345:\272A\322\2019\254@\2669\2405@\270\312\262\200\271\000\265\3509\005\262\265\272\177\t\3239\265\230~:\032v;\272\366\241\013:08p\271oA=:\321!+\271\337\223x:\3125\034:q\236\0058\006\342\2648\215L$\272\377\207\362\2701\\~9\225 29z\216\3559\273\264\314\271\3223}\270\002S\r9\360L\2359\213\263\275\2719\223\3758J\341\2369\236\311u\272sC\"\271\000sp\271\363\300t\271\371\317\2009\300^S9_\177\364\270\213\360@\272\022\236\0339\325\2001\272\017\211::\371b\2769F9\3669a\250!:\333\035%99\343\n:\341\274X\271!bY:_b\2239\316\201M\272\003\273\245\271\\\333\3638\270f\3649\031\304\031\271\365\300\263:\034\217\3149\360\232v9 )\0039\327[\2039\331\361>\271\224\206\3567\320\207\3529$\241\3569;\257j8\230\214\0219\270l\343\271@\307\3718(\322\2139\372+,:P\241\2348\026\320\0149@\313\2759\362\262\023:6\332;\272v\24469\353@\003:\201\253\2279\373Sz:\362ec\272\016\315\037:l\245\2649\307\027\360\270\247\302\3419\255\007\203\272\374`\2449\2063!\272>\27199x\004*9\324\236\3628\325\216\234:\343\342\317\271v\374W\271\372\020\2049d\330B\272\3560\2219G\021\021:\031\312\0329\243R\2507y\320\001\272\307\243\200\271\202/\256\272J?A:\201$\3129\265\227\005:b\034>:\'\345\211:^\036\213\272m\352R:fC\006\272\257\376\211:\020\037?:9\346B8\367\r:\272*\231\242\270\200\004\006\272\265\030\265\271k\262e9\310ij:\331*L:\234\2155\272fj\206\272\334\002\006\270l\353\2779[X\245\272\326\271\036\272\306\353$:+\177\207:%\247\324\271\322\020\3569Cu\0209\035O\243\272r\222\2159\232aR:5\354\233\272\3061\030:&\273\215:Z\247p9\317\233.\266\317\200\022:]\266T9\001\013\342\271i\315\007\271\336\'\266\271\377\370\226\270/\312\2249\253o\2079\235O\202\272\243)\200\272_\3427\272a\357\n\272\274\317\001\271\267\3177\2701\034\3269\337\267\031:\253\322@:\3069~\271U ;\271\335\262:\272&y\263\272\222X\001\272?\372h9\024\335\370\271\366\247c9\300_\0219\330\341m\272\356\326\231\270g0W\272gm09$fM9b\204\2669\017z\014:T\006\000\271\357e\013\272\302\000\241:\252\222P\272\200\311\2439\202\016\211\270\307\217e\272\230Z,\272\270\213\2449\234\251\220\271\027\r\206\272\347\255Y\272\355\212\237\271\335\211F\271\014\306\244\271\243.\2669\374+5:\243\250\003\271\013\\\n:\232Z09\307H\315\270Gc\336\271\013\200D\272\330\375\0149L\003\0039\226\247\224\2724\3423:J\377>\271\nT>:\371\367k9\233B\t\272*\325\200:,\'\027\272\354\235i\271\275$8\2713\356\322\271h.%\272\351^$\271k\204\3569\270\365|\272Y\256\310\271\274V\2369Pq\201\271B\010\005\272~Q\2539\366\204\255\271\302\232r8\315\3759:\016\262\360\270\377\014y\272F&\000\271\'F\3108\357\201l\272\360?;:n\211\2159,\355\035\272\031?\326\272b\231\364\271\177=z:p\276\0339\231\272,:\n\317\0279]\031T:ji\3739\257\277\":\216\312\234\272\317k \272\244\"\202\271\001m\3168\371\277r\272\311\2530\272\2408a\270\022(\2029\037*\232:\375\243\347\270\270&\220:\237[+\271H\022\212:\221\352\226:\251\361\n8x\361\2079\016\257(:|\330\"\272dd\227\271\222\207r:\232;w\271\210\321\002\272\"\367&\271\234f\261\271\374\210\221:\246\036v\272\000Za:\337K\3379h\032B\272\305\263\016\271\244\035\2279P\345\206\271\230\001a\271\366\327\265\271\014\231\2639E@G:\215<@9a\230&9\314\26259\037\205\207\271\322\272\357\271\316\250p\272\205\267\003:\307\203\215\271\247f\3769\000E\273\272\323\322\257\271\210\275+:\337r\202\272\032\275\252\271Y\364\3509\375\352C:\305\223\252\272}\243\235:\3746\237\271\263/<\271\343\036M\271[\265y8\342@\036\2726\220\234\272\345\361\267\272\355\231\031:8\312\036:\212u\3638&^\3727\360\211n\271\230\302\0269\331\225\354\271\010\320\002\271 \016G\270\0346\354\271\204H\332\271M8S:Ft\331\271d\'\216:\334t\217:G\326\3078\r\330\0219Hb\033:\004g\373\271\370\244\376\271T\334\033\270MI\005\272a0\233\270P\010J9f\312\005\267\031\0350:K^\210\272\347\224\017:&\315\000\272@\267\327\271\rs\031:v\277h:R\004\035\272\325\004;\272\274z_9\340H\203:\376\271\007\2719o/7\245;\020\272\220nL\271n4}8\272\362-: \335\254\272F\031\2709\340\241\005\272\014x\255\272-\024\24097\230\027\272h\3042:\340JD\272\247,b\272[\242*:\r$\202\271\347h\371\271\031\364\207\272x\316m\272M\214\215\271\216\032M8\266\\\346\270K\nq9SoQ\272\303xx\272v\023\316:\\\362s\272[\241::\252\t\024\271\013\302\325\271\275\002\27189\241\3739\005\363\314\271\241\010\217:\333\007\305\266{\351\3369Y\235e:E\337\254\271\201\244\307\2716\276\t:a\032)\272BY\217:$889\275\354\r:j>\006\272\262\345\376\270\030\035o\271\022\r\254\271\264\311t:mR\306\271\326\003\2009Q\202\3456\263\300\\\272\032k\3028\337\315\3339r\3444:\254\002k:\236\202J:\316\223]:\211\001\013:\274\257`:\247\277[\270\177\220\227:\302\231R:\013\241a9\2339\306\272\312\003\215\271\035h\276:<}!:\007a\353\271\023\300\2649-\240;:\350#\214\272\350\315\370\2714\203R8\025\212\2235}\334\2348\242\251\321\271\231r29P\007\345\271f\270\201\272HD\317:\r\000\244\267U[\243\272k\311\2709\352\025\3509\305\'4\271\013@\276:\374)\r:\267\356\277\270\234\\\330\267\313\243\007\271f$\000\272\2022\016\272\361\240Y:^[\3719\252\301\235\271\361_\311:]\304 9\300\276\243\270xq\3219\276j\3249\222\232 \272Z\013A9:\214.\271.\276\212\272S*\0069\355\310\033\2723\336L\272x|5:\3001V\272`pr:WQx9\326\303\":\240\035\3329\372\363\216\2711\300\3317\325\360\377\271\367\3453\271\250\360\200\271\361x\263\270\317h\3269i\210\':\231\365\3009\257\356\240\272j\214\r\272>\231\247:\363\n\201:~m\243\271\200\233\030\272\263\300\036\272\030\272\r:\254\004\3519\275\337\2025\3708\001:\370\217<\272\364F?:\307W\2019\346\366\2559\334%]\272\266%\273\271\365\366~\272\206\341M:+W\315\270)\300\3448C/\005\272\266~\233:\370k\03685K\3549\206\240\256\272.\313]:**\242\272\350\344\002\272=\274g:\361\207A\272D\272]:\\\352\0329\027\037\220\271]\357\035\271\261f\210\271m\004_\272u!_9.\330\225\2674\353F\272\037\204\3369\362C9\272\231[\3238\2250\022:i\001;\271\256EZ9\256\255\002:\027\020\277\271T\250\'\272h\224Q:\330\315\3429\016\335\t\272\305\242\026\272\030\312\000\272\243\371a\272\274\210O7J\213\242\271\303j\307\272\200\327\2248\001\364\264:\257=\010:v\320U\272\261\342::w\355\346\271\030wa9\227v\035:\267\273\177\2700,\0059L\336}:\221\274\3478!\264\253\271v\000Q\270u\357\037\272\342er\272Ss%:\007\",:\207\302\363\271\260\304\251\267\226\230\004:\204\367\2458\277Z\023\2725U18\016\302\3576f\306\0279^5v\272|\247z\272\364$\0169\357\223\030:\344OW\272\335N\020\272\352\322\2379\260\230\214\272\370|\3779\244\356\000:A\262`\272z!\213\272F\317/:\200\"69\300\330\3669\317\241\324:\247\3015\272.\220\024;\261lf\272\366\365\224:\245\020\27699\312\0209\274\215\307\270\027<W\270\244\006\n\272\272f<\272\021\026<:\204g\3617L\337r\270\334\247\225:3l\317\271\037\304\r\271\223\027F\2720\242\2179\240D\371\272\357\253\3549\227\236\372\271p\267\2738$\203c\272\227\347\002:S\212J:\201e*\272N\031)9\210\233\214:\302\366\2049N\252\3256\314w\3479r=u9\213\007\212\272\215\021n::\322\3139\303A\223\271:+\331\271l\223\215\272A\340\031::\367\2779i$*8z\317\213\272\247b\263\2675\367\246\271\222/\0319\355\3538\271\277[\3258\227\360\201:\007T\021:wm79MVI\272*\311-\271?\244\031:|\006\211:\233\001\21793\211\3328p\351\323:\220c\234\271\026\025R8+ \343\271zf\2129\257g\275:\025\354\334\270\227\336\034\272\377\240\200\272\321\034\214\272\022\032\305\271\216\207\0278\306\024\0279n;\271\271\257a\3738\027\1770:\311\277\2249w\233\217:R\3173\272=\317\202\271y\232\265\271\370\267\2049\231\275\270\271\324\244\0319\272\320\3468\254v\217\270\020\353\0148\251\033\204:\031z\244:\246-\326\271k\026\240\2720\2726:\303\325\224\272o\300\261\2679\376-\271h\030\\\272K\245\237\271\330\265\212\271G\267\030\272\254J\264\271\302\235\252\270Y1\0249 \014\320\270\217\314):\177\n\2659\005^\254\272o_\216:\237g\203\270\356\276\2109\243\230\203\271\346\375N:v\377 \272\377\347\001\272\205\003\222\271\337\221\3118<\004\033:\202tl:\346\364\3659\245\275\2166}\333\315\270\\\323O9\266\030<:\257\216x\272\344\316\0228`\350\252\270Z\337\3179\265\033b:\n&38.}\325\267n\262\202\2715\266\2719\357r4\272\265\273\200:\302\243\330\270N\374\3359\204\320a\272\263279\333\263\361\270u\21397W\213\3669\226\356\004\271K\350::j7\373\270r\324c:7\256\341\271\306\037\2728\"\0310\272\3141\372\271%E\2529\242jv\272S\3714:x&\207:\365\247:\272\034\321L:!n\203\272\314rM9\312\342\3049cpU\271\252\350\002:\361\235\005\271\016~\0149\240\376Z\271\376\03509I\305\325\271\320{\226\272\364\311D\271\007\302\344\270\210\374-\271b\036\3029\256\r=\272\262\277\027:\224\004\225\270\272\345\317\271\302\203\032:;\337W\272+\001\3659?l\2509d\336\360\267PGF\272\214\330%\271Q\030\024:W\336\2648\214\340\3519\3722\365\271\354\337\013\271m\227\266\267\316$*\271P\211\2278\362\313\3369\217\307\232\271\3052\n\272\363\335\004:W.\210\272\372`\2259[z@:1\346\3009\220d\3179\010\030\337\270\335(\3277\367\"\3729\n\240\220\272\230\277\206\271S\350\003\271\027\311\305\272\231}\335:=\326\025\272\271\327^\272<\325\3209h\027\234:\2533\265:\316\363\202\271\003\356=:\323\254\313\270n\251I\271\335\315\026\272J\364\213\272\363A0\270\346\200\005:\031\355C:\352\252\30593X\'9\310]\026\272SE\357\267=H\237\271\216L\3609\352\313)9\267\025n9f,s\272\376\271#\272\350\3355\272@\004\321\271\320ZR9:\024\205:Z\304\200\272|\325%8M\217]\272JR\3168\263\363\n:\217Q\370\271,\364\252\271\365\323\2105&\322\3445\211[\202\271/\301\0149\"\202N\271F\031p9\021j\3649s$\2076*\211\3059z\224\262:\300n#\272;\177\351\271@\030\2229\325\301\364\271\263\376\2779n\236x:H\236:\272*\261\244:\360\023I8N\241\335\270W\313\276\272\231\233\201:8\247!:HXU\272\346Z\250\271\362:g9\257E\257\267@\361\3618r\207A\271\021\004\016\270~O\3209\177\034\235\271\350OD:\357/\231\271\235\317\2629\300\353u\272\261]h\272\2421\370\271\264\271\314\271\030\243\244\272\347\035\2338\031_\264:LO\3409?\315D\272\316\256\364\2711c\3009/\"\335\272\270\252\3757i&\355\270h\320q\272\235U\2269\207h\314\272\217\355\0139\206.\331\271\033\253R\271\335\303\360\272\322\324\230\271\373\223\346\271D\330\r:m3\3549d\220%:\211\204\2749~Ev6\357[\3319 \0262\272f\221\206\271Ng\037\272\036\247\3049?\243\250\271\301\326\255\271j\230\277\271\335\350\335\271}\350\3469\227\275\365\272\362\037\3479V\332\367\271\004\337%:=\211\353\270\312\336.\2724\333\325:\310>S9\333\267W\271p!\220\272\034\271\366\271\225\210y\271}\354\371\272\251\323\370\271\014\241N\272i\243\0249\226\"I\272\037HC:\252\260\201\266\222\026Q:8\013\203:\241\230\3528i\0326\271D\357\220:o\313V:\222\263\026\272\343\230\2727iwU:{<N\272\373\226\2339\005!\002\272\306\220\3158\227(1:G\331\204\272E\265;:\306\364\037\271\357\341\031:\301\315&\272\371\226C:D*\0069#\371\241\271\375Y\001\272e+\220\271\247NS:\014>+\270\340\331\030\267\226i\275\271\355JE\272\223[!\272\253_H\271\220\305\037:zr\207:\210o\033\272\365,\232\271\"g\340\271\262)\3479\377\367::@\037\2167\370L\020\271e\230\216\271n)\26493nQ:\333d\206\272\300$\270\271\3759%:\207\231\264:\245\033\25488\353\3569)\302y:\034\255#\272\357\034\266\272\336z\3129\246\250\215:E\253\221\272\000\337J\272w\327D\271\031\233\245\271\r\034\253\266\333\003C9s\333\30596\213\037\272\340\331\037:\364\264\3549\225r\215\272\270\312\32492\326\2459\203S/9\326\363\2069\355\226\026:\217\371\2119b\245p:\265H/9\016Uv9\210b\3428\212\264Z\271^\346\3659\346\311\000\2729~\362\270\221N+9C\235l:$G\335\271HH\2339\232Uj9W\272i\271\033A\3069.\321)\272HJz9\262\376\022:.\213\027\272\305d\0059\204[\014\271\214\254\225\271T8u:\355?4\272\037\00548~\276\245\272\016CW:\031\032C\272\255\266\0026\215\275W9\335\030\035:I7%\271=\260\324:\374\177\226\270\356~\252\271-\377\022\271\322\372B8\215\252\013:\3053O\272\306\347\027:\334\037I9\325#\\9\264\002\3368\272\237\025\272\247\225{:7x\227:6\257\345\271\347i8\271\007j\206\272\270u[:w\227;\271 \036\3219\235F\301:\336\260\204:\233\343P\271y\226\0049\273z\2519\001\263h:r\261\274:~]6\272\340\214a:\230\334\202\271\215S\014\271|\376[\272*\314<9\3429\247:\246\013\032\271\221\345\215\271<L\350\271\234\262A\272s\231\253\270\271\257s:Bh79R^\325\271\265\007\037\271\202%\215:6T\3759\365\220P\272\265\301Q\272H/\0349c\300b\271\276\212\0218\233l\3739_\3100:0\237\025:\273?O:\243\364M:\006m\277:\276\r\317\271\330\004\224\272cT\223\270\366\307\3038\225#\277\271\037|3:\265\267;:`xW7\366\343L:!?\276\271\237/\360\271\360\310\314\2713\303\222:\321F>\270~\256\005\272E\233\003\271(>%:\360xp\271\276\235\020:\352 \301\270\305.\3028\342;\235\271\245\24758\255\275\224\271\270\025b\272\212S_\272x\246\260\271\234@\322\271\205\3045\272\333J\'\272\251I\333\271uZ\r:\215\206M:\005V\020\272\217\2215\271u\263\225\267\227;<\272\316\246\020\271\372\245\3019i\326o:\223\253\373\271#-\2349\020V\306\271\002\275*:v\244B\271\216\320J9\365\237\3109Z\255\356\271\345\'\307\272\nN\251\271\013\357\2179~\353\221\266\347\243\006\271\016\343\223:\2461R\271\017\344\3309\021V\0329\221\206\300\271\363Sw\271\000Y\3729\331\346\372\271\236\336F:Ma \272!\201F7O\351Z:vz(:e\254j:\230\326\021\272V>[:\374\211)\272\224# :\206Id:\3328\200:8\r\0249\005\364\204\271\363\'\2019\221\003o\272V!O\271<\237}9Uv\037\272.Yr\272\357Xl9\264\010~\272y\264B:\303\347\'\272\253\264\230\272\312?A:\266\253\017\272\307\235\2348\311\255\277\270\313\376\3539\361\351\366\271%\216\2079\365K\3259\2768\2029L\333\312\270+\2600:\026\216\252\271#H\305\271\026Cy\271\230L\255:\250\035\346\271\366c7:\357\336\030\272;x\020\271\345\376\206:\240\017\304\267\217\244\200\271\357\310V:\346\270B\272\306p)9_T\2509\247i\203\271\274H\212\272\203\346\3309/\362)\2714wM9\343\004\007:\306\004\2309\315\360K\270\336\354\210:\241m\210\270;\324V:\334\357\366:dI\317\271\233\214\231:\352\246r\266\335\241\312\271\214\355\3649\305\016\2439\277q\"\272p\223S\272\216\206\361:\321\264~9O\277\223\271\201\364A8\002\2134\272\210857\265\371\035\272\377\240(:\017h4:\264\277M\271\275,\342\270\267\254\377\271\007\177\234\271vW\3538B\375\020\270\220\343\360\271\031)\2349\237\010\202\270\347\204\222\2712\342W:o\221\21397\307\0179^-\2779\242\361k:_\305\202\2724V?:Y\367\3139(?.:\363\240\211\271d!\243\272\341\370\021:\215Er:qp\200:@\020\t\271\021\001\214:@\325\201\271\023\356*\272\326\2651\272\177\t\370\271\226_\014:\031;\2539d\352\274\271\314\264D:\317\304\021:\355\237\352:\322\314\031:}qs9N\321\3269\241\252b\272\315\322\0328\325\304E\270\221k\3169\356\254\204\272\222\202\200:{\321{:\335\2552\270k\313\002:\301\335|\267Q\2456:\230\260~\272\376\225\016:\261\245T\267\034r\325\270(\271Q\272\345k\022\271\362\212\0329A\304K\272\2779\234:^4\2559\301\264\217:SE$:]\270\302\271\026\341S9r\"\316:\330\203\025\2712\232$\271\356J\230:\327\212]9\361\303\214\271\004F\0316\001\222t8^\350Y:\030\227h\272\364\001\301\2723P\3439_\215\347\271\005\022\007\273\270\371M\272\335\361\0309\223Q\231\270\204\351\240\270\211\357\200:&6\212\272\340\335\341\2713\202\331\266\364\366\271\272\376\017N\271Q|\325:\016=\342\271\343D\221\271A\036\3029\235:X:/{\217\272\315v\277\272bd\3439\025H\2248\377\231\277\271\332P\245\272\301\212\\\271\347\235I:\250\2174:\212\201K:\304%\2329\245NV\271\226L\212:\3339B:4V\22090\204S8\274\"e\272\356V\203:U8\025\272J!\016\271\0275\026\270\361\365d:\0357d\270+\363V\271\366\274\"\271\005\n\234:\307\331E9\2011E\272D\247\026:\257\240\226:\373\255\3439\207+\013\272\253\013g8\244.\254\271\262\227\241:m\317\311\272.\302]7\337\007\3139\357\342;\272\357YJ:\346\332\240\272\241x\370\271\236R\n\272\371\264\312\272\345+^8\337j59g\3501\272\302\030\256\272\007\263\0329\200\02758\342\336\311\271\252\347g:\374k\3569x\007\2118\241\313P\272\255LU\272`\313s\271\277%\236: \250\2158l85\272\255)\341\270\251yD\272h\332\341\271\r}T\267\021\257<\271~\t\221\272\205\314\336\271z\r\033\2703k\201\271J\035\010\271\201f\027\271\306ZN\272p8\3218m{x9\264E\2739\366\\\2479\256\304\240\272h\032\374\271\016xP\272\352\244U:\240F\3559\327~\023\271\213\006|7c\235\336\271\025l\256\271N\327r:r@x\271\273\273^\271\252\201}:\217\263%\272\353\275Q:Ql\244\272\006%\034\272\331Y(\272RH`\272\013\2148\272;\256<\272\243\02789Q\356\n\270\206\026\226\272\232A\23094\014,9\211\231\341\271\243\026\2119\302\021\n:\205\352\216: \235Y\272os\343\271\223\240E\271U\265\223\272\017\"\244\271\013i\t\272\233\241,:\313i\265\2701P\263\267\376N\203\271\354Jd\271\201g+\272A\007Q9^\243\342\267S\352\324\271X1\264\267\331\230\2539\376\231\256:a\277\362\271E\027\240:\222\007\005\272\306+\316\271t\241\202\271\224\377F:\242\324\024\270\236?C:\177\347\225\271Y\353P:\212\213,9\030\247V:\307\306}\271\312\307\3429IW\205\271\213r&:\246\315\016\272Q\304\2049<kO9\224.6\272\322\270\0347\246\254\332\271\214\215\025:/\026B9\030\232\367\271\n#p:V;/:\007w\3148v\266E8\356\347\246:d\261\026\272\221l\3369=\243X\270\276\321u:\211\202\':vFm8\305r\335\272\021\233@7_!\324\271\373+\022:\371\312\266\271S,\276\266\033\273\0048\360\023,9\206\002+:r\256%:\355CL9\263\2057:\030\327<9\303\261s:j\216\2579\205@E9\310@\320\271_E\027\271\335=\244\272\230,\267:Q\354u:j\000X9\251\270\257\271a=\2128:\307h:\335\022\346:\21059:\272\237\356\271\3313|9U\252\377\267\223\330D:jy\232:\376\253\'\271kW\017\272#\210\344\271=\343\201\270\224O\267\271\r\256\007\272\"\315\3038\375\357C\272\243\322O:|j\231\272\271Y\":_D\024\272\326\032O:\230S]9\035t\231\272\370\221%\271\020\265~:\331?;:\220dP:\"\340\3309%\213\3079\245Q\023:\366\347\276\271\217\261\314\271\311sA\2711lc9\343f\2028T\031\036\272rF\0329\274\272\027\272\262\311\n:\212\330\024:O>g\271\003\211\352\271eR<\272`\353\206\271\234*\250:a\275]\2723\2261\272\345m\r\272\334\334K:$t\230:5\325\2479\217\334l:\364\251\2639\276\215\202\272\333\311\3309\353m\006:\371C\3159\027\376\006:\355N8:\005\254\27398\274\027\272\252\230T\271\256f\302\271\202\370A\270\370\233\2538\305\225\335\267U\263g9H\354\002:\003\335\274\271\256\336Y\270>\300w\271\217\337t:\274I-\272a\205P:G\3453\271\353\027\353\2709+(\272~\352\2448\217y\037:\007@\2328\010\314\2309\350\243\3428(\032\2679,m\0139A\256}:q$\3619\004\177\t:\247\370\365\2712\010\016\272b\3653:\275z\3409_\324\336\271\260\261l\271\017\030\0169\031\0327\271/.\3339\005\0247\272\327\374\177\272\212jN\272+\270w7\023\3005:\272\216-:\335d\014\272\365^(\2724=T8$\344T:\203\006\312\270\004\366R\271\300/\246\272\360b\020\272<\267\302\271\375\300l:U\375\330:J\010K9Q\312\241\270\237\237\315\271\237\014%\2729\332\2778%v\2548\222\346O\272\r\177n\272\235gI:\240\031K:\265\365\027\272.P\205\2706\026\3079s@\353\271\375\252$\272\006\031\327\272\005\302i\272\232y\2339(H\21696\244\3719{\2239:7\325\0029\260\267Z:\024\353\264:\346,#:\336Y\3709\240\376\205\272\234?\3729\246\201n:!w;\272\202\377\2018\332*~9\220\014S\272\200\2779\272\355\016\000:Un\025\271\270\202\233:\345\335\203\271\010{[\271o\251\0249UC;\272{\352\271:\266\245\024\272\363Z\257\2725w\016:\260\236\'\270h#\032\272\262\006w:/\000\3739\324{\342\270!l\3468?\333\\9\017\205\3359\377\3479\271\257\3641\272\331\367\312\271\204|\201\272\002\3502:\332+\262\271a=\206\272{\216\231\272\020 \246\272\'\263Z8\225P,\272\342_*\272\213!6\271s+G\272N~\3479\356\357\2718t8\002\272\271CL9O\034\213:\264\367\004\271\010\302D\272KD\0149\203\244\210\272)wf\272\205\350\220:7.\0149Yp\275\271\375\235/\272E+\2169\257t\250\272\331\266\014\272\344\340\26494(\272\271\375\261\3139\255\300::E\356\212\272\247\341\027\272\020\357\306\270\316\355\222\272,\027\3649#\034~\272\275\350\300\267\000\246\310\2700\206\343\270Q\377\212\2727\021\014:9\246\233\271O =\272\272\344\204\272\013\370\250\2729\212\010:\204\244\233\271\325\232\352\271\251s@:\365\226;\272\272\255\212\271\220\002/\271\305\005f\266\332c\3619\365\252\3379\346UV9YI2:=s\226\272\256\014\326\271e\231\001:\213\235^:\215\344i:(\206\314:3\361T\2717\323\031:\017>?:Dp\2709\3063\002\270-\330\214\272\026\317\027:\276\025\2638b\335\2006\\\307\203\271\357\346\372\271\341\r\030\271\300\3058\271\376\235\n\271\370\233\2229\220\275\3428\374\371\032:\235|\371\271\016\216G:7\367$\272\035\317\307\271\330\210\2449\001\230\220\272\337\241\'\272,\356\350\271\332\250\020\272\177\256!9J\345O\271>\016\203:\034GZ\270`\nF\272\350w\356\270%\356\230\271p\0257:\303\000f\271@\234\344\267\214\023>\271Z;\2028PA\237\2723\300B\271bX)9\007\016\2307\307bl\272\240X0\2727\246\203\272P}\0007\232\344\261\272\240\031\246:\2522\236:\327@\317:R\231\2559YN\'\271W\254c:`\272\027\270!\352\200\272\031D\216\272\334\312\007\272\236\320w\271\342\"\212:i;\n\272G\tZ\272\242\'\2429\\Eh:\320\212>:\"\326\224\272\222\007\221\267\026\375\2428,6g\272\033\276\271\271O\210x\272\377\343\3519\325\000\373\270\024\355\202\270\365\220\2509k-\3479-\031U:\270\272\005:6\251K\272\356e\244\272\266\360\003\272\207\366\016\270S\343\\\272\321v-9E\215\033\272t\342\013:\004\276Z:32\006\272\034UT9\367\tq9\251\307~\272\2506%\272-\007\016\271\304\361\3509\'\255\242\271*\371\351\270\'\333\351:\354M\2719\025\243\020\272h\371\224\272\364\372_:o3\0239\322\025\013:us\326\271\2423g:,\026\3429P\2663:\010n\332\271>\322\2279\276:\n\272d@(:\242,:\271\377e\322\272\346F\021\270-\263\3449\201\365^:]\010\367\271\025xn:\251\013\2709\030a\211\272_\351O9\233\332\251\271j\361z:\331y-\271\360\311\2476W\323\024\272oT\n:\326?\216\272\247\227p\270\211z\001\272\376\010&\272\022\036\3718g\232\2449\032:=:|\360\230\271\250&8\272\257.E:~+z\272\326a\256\272 +\244\270\261QV\271\t\366]\271\200\335\303\271\251\201B:}4\2278\366\200\2319t<\031\270yf\2229\242\351m:\336\374N\272\377\272\233:*\325\216\272){T\272\324c\255\272&\253B\271\330\265\2369\313J\323\271*\331\2269\313\302\232:\275\246\266\271\346\243\\\271\253\345\223\272\326\333\034\273\037\363\261\266\341\002T:B\300r\271\337\345$:\205&!\272\236\'U\272^\244|:E\021\1779\245\204\327\272zq\206\272HI\0249\265\010\3368a\253P:\2752\203:e\227\2379dr\'\271(\201\236\271M\352\325\272\336Y\021:\036\365\3448\250eS\271\3310\350:\237bd9\0006\267\270\211\023\024\270-XF\271\257\302F\272\277\031\0009\316-5\271\002\221\030\272i\230\3529Pv\2509]\335\3108\220\t\242\271\r\216\253\272\372M<\271\253T9\272\255\212\0249\177\345X:\272I\2459y9\t:\301\254X:\251+\2069\307\352l8MF\202\272\264\315\202\271o\325 :\352\274m:\234\236\370\272K\372F\272\225L\270\271\215\221\3117\300\331\271\270\235!+:\"v\010\272\375b\243\270PC\330\272\304\266X:\303\313\253\272o\327\3118\306[\353\270\253dD9\220 \203\271\035\240\3359\332\307\2539\'~:\271?\3277\272$\370D:5\027\033:Zf\013:\352=\3258\006\201\224:\245;\225\271\276\241\3467:F\031:\t\321\261\271P \33394m\277\272\r\230\357\272\247\032K9\032\363\0059\016r\037:\0338\2219\201\0030\272\354 \r9\023R}9\371\257\n:\372O+:\372\261\007\272~\246\3659f\223k\271\036\'_:\025\2736\270\374\271$\272>B\000;A0V\272Q\375x9\203\350\336\267\215\251\255\270\300p\300\272\306\314\302\270\326\251\207\271\204\324N\272\247\362\001:\2042\213\271\344\255\217\271qY\030\270\234?\374\270\032\265V:\033\021\2318\220\344\3709\327t\024\272\005\213\023:\"(\3329\003\334\033\272\007\210C\270\343\035\216\270\3679\250\271\310v\267\271\361\367\3179V\016\2505P\036\260\272\247\2641\272n\223\201:K\336\020\272\032eU\267\001\t\2259\370\363\336\271\224\26509\304\241\310\271\216\034\204:\035\277\n\272\027)\021\271\267s\306:A8\267\271s\240\3769\036\346A96\352\266\271\261\006/9\273\037p9\264\350q9/u\305\271\206St\271\203\247\2779\306\226\216:(W\337\271\263\013\327\2660\023\275\27176\033\270^\207#\271^7\2339(\244\313\271\225\307\321\2670+\314\271\323\232\026\272\357\n78\'%\247\271\341e*:\274\035\\9W\237\3259\':\364\271\022\211\2619\215=Q\272\224\3530:\022\354\1779\271\366\252\271\256\313^9h\222G:\244w\0349|\236\032\271B\362L:\026\261\0367\243\024/:\256`(:N\340\2769B\023\207:Mi\314\271\030b\3039\230\250C\270\350A\241\271\311\"=\271\007\200>9\355\205\032:\204\264\3738\312$3\272\013d\3439H\351\210\271\252\031\2728\305\206\0248\2528\300\272N\337h9\037q\255:\250\255?9&\",9A0\2619\003\030\2439< \254\267J\266t\271\002\003\023\272\013\335:\272\3249(\272G\261\2449\225\210v\272]\231\313\271\256t&\271\261\034\2138\361\361o:Y\215\031\272\032\225p\272O\266$\272^\252\373\271e(4\267\013H\223\272\244\301\2179\232h\210\272\"\361\2469\217\242c\272\\\023\274\271\302\347#9\245\231I\270u\300\203\272\351\347\013\270\276\371\305:\307\025V9\360oT9?F\3109T\256\2629\265}0:\254\245P\271m\226\327\270\353[d9rq\300\271t\030\302\271\334V\2358\030A\36097\255\t\272\013\270s:\\I\n\272\261\002X\272\002\351\036\272k\256Y91t-9)\327i9\201r\225\272\375[\2629\303mN\270\343\375\3159\3335,:\307\356\272:\305\\@\272\317f\006:\324\201\204:\251\\Y\271\3203\000\271\274\227\207\272Z52:\270{\2328)V\016:\242i\0239\361t\n:\031\346\3318\226*\0378q?\201\270[\202\212\271Y\360\261\271\033^\320\271\263!7:\244$`\271\000\000\311:H\205H\272\314\303\014\272\035\003C:\177\007.:\032\330\2669\003\323}9\271\236\3079\2439{9\342l\2678\344\025\3168C\340\3709eh\2179e\351\2316\264\210h\271\351\225>\272\344V\255\270\000d\210:E\272\3438\217\225\2539\301\001\233:Lw[:\300\357\270:u\323m\272\31570:\000\333\0029\260\361\373\271\325\342w9\312\035\02096\244\017\271\206\322\3009H\215\331\270\234\262e\271\037s\033:\'\376\213\2723,[:\306S 9JB\313\271\234\235\217:\304H\243\271\232f\2029\216?\315\271\334\222\236\271[\021Q:L\024K:\226\272\023\272\356=\3229\357s\2529\376tg9s\000:\272H1\223\272\210m8:\026\322\355\271\353\267\316\271\032)%\272\206K~\2729\014\352\271\313\000@\272P\006\000\271\304K\2149\010\331\304\272wCA:\322\204s\271\001\224V:\"\346i\271\003\312_\271\271M\262\272\023\273\2179UaN:\344d\204:F\217\226:\346\203\2779\233\310\005:\264\314q7\244\260\3739p\260\231:\373\264\2069\351&w\271\271\377\r\271}:\r\272\255h\246\270\205\013$\272\375\277n\271I-\222\272\360\274\3739o>v:#\202\266\270\336Kp9\3301:\272\200\215\225\271 T\201\271\204v\334\272\354O :s\001t\272PI\036\267!\367?\272D\2224:\321\033B\272A\376\3369z\336\314\267\235\360\216:\230\370\350\271\030\025\004:\265\275:\2728\245\3249Qh\225\271\2343\21184\347\237:\230\276I\272TN\005\271\017\263\275\271-N\204\272\364_O\272\032\205\237\271\244|\\\2726_\0229v6\003\272\253wl\272\211\235\276\270u\000i:\345\27129S,\353\271\370{\205\272\213\207\035\272\356\n\272\272\375\207~\267\314\375\207:6\331\2439v_\3119f\217\264\270^k\265:d\2436:\232\033\001\272\313R\036:)\037\2029\207\2234:\313\002\2749\325\212\2379\017Q\200\271\031\002u:\264\350G9\2305E\272\326\270\3028\037W\007\272KC\2469\274FB\271-i&:TV\3667o\003\030\2711Ht9\313\310\240:\375\357M:\223\026\001:\364O\3459\202\227\2048\235\022\367\270\004\375\006:\361\370T\271\243\356\214\272>U{9S\341E\271P&\3167A\212Z:\261\035\3209y\232D8L/L8T*8:\243\351\263\272Q3\307:\2415\024:\255\231\353\271x\235\3069c\301\342\271\244i/:>=1\272\204\365_9\251\331\202:E\334\2449\357-\231\271\235;\":_\242D\267,Kz:\003K\315\272\270j\2479\224v\001\272\251TV\272\215\177\'9,\310\005\271\253\234\3459D3\2329\364K\3208\240\0047\270C\250G\272RT\201\271\010\177\2539\206\244V9u\336\325\272\2538L:$@\t\271UN\r\272\014_\026\272\360\203\260:eb\341\271\336d|\272\311l\330\271\037|M\272\325\252\223\271\227\346\307\271\026\222p:`\344\n:\215\206i\272\320\025{\272\006\032\226\2711\233\20073\225\0009\376|\263\271\032\237\2309s\322J\272r\240\274\272\236,\030\272Q\363\2049\337\341\0277\216\203\2309(\221\333\271M^\264\271Hd\203\272#\035\024:\000\273\004\2727\267_\272\241\227)\272=` \272@\300\236\272J\177L\271\0041\364\271\232R$\272\353\270i\267x\000\255\271l\32108L\335\205\272\303\231\3429}[!:\355w\006:>\375~:\037dJ9&\265X:\014\310\000\272\340\320\3219\323\310O8\251-=\271\234\211\210\271\272\254;\272\274(\035\272\017\307+\272 \246\3779\300\262\231:X\231X\272\322\340\214\272#-\273\2719\021\t9\303lG\272\034\273\037\272\013.\212\267\353\372x\272\262\204\'\271 t\0259\361t(:\360\247\235\271zYp\271\017\274\2029\032\\\203:\354\245\373\271[\304\007\271s0h\272\034\233\2229\324\335H\270\021\266\2649F\231%\27241\236:\024\320\013\272\302\254\223\271\221>?:\277 \201\272\272\336\206\271\211[L:\222\t@\272\273\243\2009S\310\3248\3357\354\270\224\206\3756T\333M:\r\3034:)\344\220\271H\273\304\271\252\250%:@\031\3569\001\221E93\303\310\270\305\177\3529\036\276\030\271`\340\037\271\256\354\347\271o)A\272M\323\00391D:\272\033\003\267\271ae49\032\\b\2707A\n:r\230K\267\344\214\273\267\016\250\034:\266\262\2338\234\375\210\271\312x\2158\351\000\2069\335S\2629\0219\001:\"I\031:5\nf\272\207\333_9\226}\277\271L+\0259\255\351a\2721\223\035:CT0\271\002\347>:Q\354\013\271\221\270U\271M\006u\272\231!\3638\2727\t:\367\320\0239c\223\'\272\005\0251\271\355#8:\262\375\034:\233\007\255\267\207\356\217:x%j\272\3364\3449$5\323:\032k\227\271\344\255}\2723\316\227\271\252\277\177\271\360\312\256\2706\371\356\271\210Cg\272\344\215\2169r\367m\270\nj=:m\345)\271\313\336*:\276\000\3778\013\344g\272PC\3059\366\2226\272\372\262\237:\342$\206:\346(\300\271\365\032\006:\334:(\272t\211\3339\314\254A\271\302\213E9V\202\2169\362#\202\272&\201\342\272n\364X:,&4\271K\300\224:_8\2149#\34299y\'\270\271\034\001\3719\275\020t:c\377\005:U\314\210\271J\006(:\267\264\3108\261+\2069\267\256(:\320\245A:#\247\242\271\223\034\2548\205C\310\272\007\r\273\271\351 \2519e\337=\272iK\3469\275\036\210\271\353z*:w\273\253\271b\333X\272\341\351s\272\303\332\241:\372\212\035\271\027\252\2459\335\354(\272\256\266\020\271\003Q,\271_\024=\271fo\274:Z\t\242\272\300\263\230\272p\017\222:\324A\2439\020\313,:\273\367\223:\010C\273\271\200\355\330\271\253\2557\272\260e^\272U\253\241\271\356\304\377\271\035\265\3759\230W^9qeO\270xF\037\270\345\020\231\272H\036\3249N\226\3159\222\264\370\271\231\300a9\270\244%:\n\233\211\270]\262v\271\264N\223\271\016\215\2439\010h\3309\177(\323:\035\255\024\272\222\24549$n\3429\320\217!\272\250t\3329 \003\327:\247\037\016:\250\357\24174\307\3069H\237\200:!S\"\271\261\200\3519x\373\013\272\017(\217\271\246\323p:\027\rY\272\320)Q\272\376*\2448L\301\023\267\207+\307\271\\gw:\206!\226:=\005[8!\310\201\272\362\314\220\272\027\024\240\271\025l\252\272\357\271\0279\257\310\2609\231\3757\272\t\223\262\271\303\006\332\270\031\332\3059Rc :\274\216e9S\243#\272\022\330\266:\377I\020\272\201\230\t\272\362\303D\272\026l\300\2726!\246\2714~\\\272.\240\215:\355%\037:\361RL6\357c\t\272\245x,9=\020k:Z\224\3618_\267\212\272{\234\0318\010\315\3049\030;\0369\005\207Z:\034\032\207:\235\242\033\272\204\205L:\026\357\207:/\277\330\272{\216d\272\242\364\205\272\306\t\025:W\034\233:\2575\024\272\306q\017\272PA\031:*\313!\272\276\200\007\272\210)\361:\024K\3026\2729?:\236\245\346\271\027\\\232\272f\337\206\271\324F^\2715\004\027:\364\002\257\271\272*C\270\345\022\001\272{wv\271\325f\3119\030\nZ\272\275$\214\272\210\"6:\200`\017:2\0022\272\251\330\242\271I\327$\271\245\205\201:\347\215s8\245\205\210\272\347\345%\272\301\204\245\272\223B\030:fZ\003\272(~D\272\257\202\n:\203\020t6\372U\306:\344l4\270\331\351\237\272j\24449\260\257\222\271\352%\235\2716\006\234\271\306\275\2129o\030j:\024\331\2528\376F\020:\321\177\225\270\360U|\265aw):F\272\3559l\353\0315\036\005%\271D\203r9W*\2349\3657\235:x\376\251\270\200\332\017:3\272&\271\250\267^9\215.\":\333y|\272\3109\3608\267LZ9\364\250\237\271\366w\3429\332\245\324\267\020\261\2229\232\254[\271.\223\\\272\250\301\036\271\337V.96Y\3249\301\277J\271\256\000\0247\231\321.\272Bq\037\272\251!,\271gUh:P\\9\272\301Z\217\272~\262I\270b!\014\271!\336\356\271N4):p/\037\271\254\326;9\376\371j\271\325\350\000:oM\326\271\205\272\306\271o\240\014:\021\247\233\270\325\356\301\271\277\345\034\272\326\020\276\271\243m\034\270\306`\3179k\267\205\272\367\264(:\234\274\261\271\220\306\021:X\2370\272\261\n\205\271WE\217:\322\266\211\272\350X$9\033\2379\272\035\006\255\272\206\361\014:\213(K9\263\222\2069D\305\014\271\272\250Y\271\3677%\272\377\373b\271\347%R\271t,\311\270\177\267\212\271\371\340\3508K6\373\270\330\320\024\272Z\016\243\271\311\353\023\272-\320\014\272\306\024\236:\241K\221\272,\020\030\271\220\365\2259LM>:\023\34069\204\t\035:\355\374\367\271\022\231}:a\342\022\272#o\2029\311]\030\272\206\232\3048\023\03369\217|\3348\032}\2369\272#{:8R\2149\300\233\255\271\016\222\3549\223\303\2369\220f\336\271\010\3673\272ju\3259\350\2706:\237<r:\351\236\353\271\277\301\322\270\"8\0009b\204\276\271\316\002\2769Z\341\336\270\370}\2459PX\2219\230\n`:\305XS:>S\204\270GU\2279\307\366\3569/\374f:Gp\343\271+\372\r\272\332\256\313:\246\210\034\272:M\362\270PY):f B\271\246\250\203\271\006\252_9\343\215\313\271\336\010{:\363\373\210\272\315\367\0329\365p\312\270S\177\324\271X\353\013\272H\251\003\271q\216\256\271\335\203q\271\005\316\357\271\320s\3549\241\211l9\350%\037\272\234e%7]\224\2169\236aG:\014\351\36385\252\207\272y\227\216\271\006g\2339\376D\270\271\326\263\235\272\326N\251\270w\217\210\272I\353\250\270R\202\2649Sd\2139\221F\207\272\345\275\010:\230\214\006\272-\000\2079s\302\347\271 \343O9\363\225m9\001\357\2558\332\021Z9\204\030\2758,\3103\270I%\263:\213K\033:\211D\030\271\2763\212\272DKM\272\333\320\r:n{\237\270+\314\232:\362t\3219\275\006\305:WId\272\316u\2439n\243\351\271B\036=:\033\2402:\262V^95\213d9iY\014\272\006\023\034\272\212G\3349\257\010p\270=E\'\272\305\013G\272\302\257\004\271\303IT\272\211y\303\270\212K]:J\000\024\271\352Km9\010W\023:\216Bf\272m\340\2409\340vw\272\372\036\0358\3150R:\314\252\024:\236\207F:\262\226K\272\233TI:\214U\2738\324\037\0008@)\261\271\254\331N\272\200\016\243\270\375\005\2039?R\216\272w\023\2239\203\017o\272\312\000>\271}\255\356\271\257\317\010\272mH\030\272\037\366\2168\331\246\007:o]s:\\1_\271#\301\004\272\364\310$93\325\3248\365\364k:\261\276D\272\355\211\3576\276UO9\221\257\035:\266=\231\271\003\177\006\272\017\236\332\271\3046\315:\270\243\006:>IO\271\263\2333:\220\35139\235\234\3058R=\270\271\273\232\3048ri\017\272$\362\026\272q\337\000\272\223X\005\271ju::\215\037\2718sU\223\272d\220\2049\332\313[\271<a\2019\004r\3539\322\211\267\271_Al:\326U\344\271\220\"\3009\t\024S:\237\227\301\271\362\270\214:\206\206\024\272]\267\265\271c\302\310\272s\220\275\270:\360\302\271\t\202$\272\370V\0228p\336\361:x\235B\2727\026r:Fs\206\271\013\234v9\002\375\2277\301\016j\271Bi:\271\240\337\212\266.\230\3407$\222J:\236\376o:\237\346\245\270x\237\223\270u\375t\272\245\375\310\265w\342\267\272\315\314\020:\226.\316\266\367wi:\224y\202\2727\251\3439&\365\360\267w*U93K\2059\342&H\272\352F\t\272\177j_:(V\310\272\024\240\"\272\242k5\272g\024\252\271p\026\255\271\255\026\3568\234\2663\271~X\3269G\313\210\272\215\303\0108\264\364\2129\341\004H:\266!\205:\253N<:<\242\305\270\3103e\271K\\W\271C\004y9\342\352\203\272\274\310\003\272\375\035\2479\316\212\375:&E\234\272\005\373a\272\005=\014\272L\377c:\303\230\3448\336\307\266\270\315\304\2239f\205\365\271@\027\3568w\305<\272\347\300\2768 m\2539Jt\204:\225\224\037\272\2002\272\271j\262\252:\356\336\2759\205vS\271,n\026\271\250\261\025\272@\324\251\267\363\330\343\267\272 t9\207\\\256\272\242\234\031\272\211E\363\271\0174\2369C\034\242:\017L\006\271\340\000\230\272\204\335\205\272\326\023\2269\260}\314\271\221\346\261\271.\301v:\224K\212\271\034cW:\206m\023\272\3110\r:s\224M:\372\024\211\272OK|:Q \2129S\272\3779\337\273\253:*\002\":\360\357\211:\265\210\3159\"\301}\271\377\371\':O\'\027:\203\036\210\272\326\262?\272\233\307\"\272\223L\303\271\026\325\3349\322\260\304:\326O\026\272h\235,\272Y\313\2319;\037\024\272g\311\330\270o\301\0169\323\373S9\272\304\205\272=)\216:5i\352\271\016\274\027\272\324\236\203\271\247\235\3759\372u\2429\020\252\031\270\035Kk\272\270\340?\272\345\355\031:\201\251\213\271$\243\0228\276\205\036\272#p\206\272L\326x:+\272\3459\322Xw:\371\033\263:\316V\240\272\252\373\3339\001S\200\272F\217\20394\035#9\347\314O9\271\006V8\177\225e\272 \005\033\272SE\3459\312\2119:\"\014>\270\315:i:\303:\3279\276\202\220\271\265ll:?E}:\250\205\274\271\325\r1\272\276\327\265:\254\305\024\271\220\24059!=d\272\361c\'\271\"G/9\177\362\261\271z\235\2138\215e@\271\0339\2537\234\325\364\271\241X\351:\212/<:O\275\261\272\224\034::\323\242\200\272-\241\211\270\314CG\271\266\006\3749\2378Z\272/\203Z\270Z}\2516\224\201\265\272\215pM\272`\276,:p\203.\272Hf\356\271+\351\207:\260\373\317:\025Tl:t\355\006\273\234\304\331\271(A\027:\240\250o\272>\370#9\005\273C9\363/\021\271tH\033:\302\225\306\271\212\330\222\271\353\211\231\272}\003O\272\262S9\271\200\362\314\271=\210=\272\257\312\3739\360\370\210\272\335\337O\270\261\372/:\227(S:\035\363\016\271\002\034\231:re%:G\021\002:\231\373\3409~\330\007\272\232\350\003:\320)\034:\020\300o8\324\350 \272\271?n:\342J\017\272G\200%\272\371\2744:\266X4\271\222<\3778\207?S\270\260m,:\261\260\2008\305\201\3238\305\200\221:A\003\301\271\315\227\3159\222m\22198\314\r\271\375\330\201:\354\330\027:x\231\335\271\226\34569\265<\242:\014\347\3769\222j\3469m\263\000\272r\t\2338\301\037G:d\235\262\271\254W\2457\313\271\277\271\007*<\272\360\333\346\271M\367>\271\332,S:^3\242\271\305\226v9\3731\303\271\246\035\354\271S\204\0348\320gM:\t\2005:\'1!7\220\363\271\271\353j\324\270\345\014\027:\251\371s8|\350\233\272\336/\3779\255\016$\271S\211\r7mrL9\225xZ\272\336@\220\272c\363\003\272g|%8\250(\252:8\007\205:\326a\3529#\024\217\271\210\351\\\270\207\006\350\270\223\225\3338\270\261+\271\313{\007\272H\202\261\271s\'\201\2724tp\272_\206\3069L\301\000\271h\001\014\270`\2771\272%\372\203:\237\353|9\320\303\":\327M\243\272$\306\2128L\277\031\272qoE\271i\2414:F\263P\272\261|P\272&h\r\2729\322\036:\302\010C\267\026\\\346:\2114]\271\013\254\034\271\206(f\272\230\327E\272\300b|9\020\215u:J\246\220\272\n\234\313\271\034\270\2208H\263\242\271\033\241\t\271\2169H\271@u\001:-c\236\272\364\314\221\271j\256\277\270\231:\3739JN\336\270\267\221\3357\364A\224\272Y\252X\272\350\225\202\272\265R\264\271\324!\204\271E\006\027\272\025\0071\271G\340L\271`\240\236:\027#\340\270P\n\3758\033\177):W\346\0349H\036\320\271P\236\003:\374\'\2279=\202\2369\226\030h\267@\343\"9h\225\0059\0375\375\271h\245\007\271\356\346\005:}\353/\272^\031_9\375]\240:\003\221J\271\310\274R:\311%n\272\030\035\2467)\350\312:\323\303U:_\352\327\271\003y\204\271\0021\215:Ms\3569~E\236\272\346|\2059\017\3479\272\372\305\347\271\337\355\3369\252{\210\272\214z!:\263=\2609i\022\r:k\360\354\271\022\2178\272J\244\3339\356\310M:\206\350\2158\304\260\312\271\"\006\3758\230\330O\2721\315\2529\250\'[9-\300\310\271\031!*9$\027;:\316\206*\272\251!<\267\340\322\223\272w\343\2129\315\223\2409\306\310p\271\314\275\215:\231_\343\267\360\300_:%`\0359\213\271*\272)\357Q9\301\357\276\272\320%\257\271A\r3:C\237\231:+F79\225\337\t:\202\020):\230\323?\272\274@\222:\276\n+:\315\245\332\271\366\004#9\320u\247\271#z\2459\336\256e:\252W:\272\363\305\214\272UJY\272\276\030\364\271\341\263H\272\216\3602\271\333\272\36291w^5:\223\251\270\010Df:!hk\272\257\355\214:{\t\3439\352\021\336\271\262\301\2459\305$2\272\'\276\224\272\2178>9Ur\237:\010V\r\272CB\3676Jos\271\244\304^\272#\035!:6\345T\271Id\204:\305\204\':\373c_:\216\256\030\272\236$&\270l>\234:\303Q\3149\330l\224\271\363\025,6\022/n\271\273\362G\272\243\223Y8\276\023\013\272\000\240!\270\266\327\230:\261hu\271\332z\2529@\324r9Y\215U\272\376\216\300\270\357+\2518\000\233\373\271z}\233:\340\001\314\271\357X\3379\034Q_9%M\234:\347\366X:\211\316\365\271vN+:/X.:\312\337>\272P\265\224:\363hU\272\211~(\272\252(l9I\030%8\203\276\227\270\340\007\r\270\215a;9\177\312[94\007!:-]\2019@\224\323\271\303X\2259\322\034\374\271M\254\0079\036\243\013:x$\2769\373\"\351\270v*\217\272,*\007\272\034g\3509\232\032\2628x\006\001:W\017\2109c\235E\272\361$C\271\205\353o9\370\022l:\"\253>:\264\371\375\270\243\214\344\271\372;F\272\034\342\2769\372L\3658=\2319\272\304\253\214\271-\317\311\270Y.\214\272ik \272u={\272\371\312\220:\033y5\271\022\014\3678S\227\345\271\025D\3439\346\032\177\271\024aC\271\325I\233\272\355\315+\271\222\343\341\271\212\211d\270\236\2331:\241r\214:bC\'\272\376N\024:\312T\3449#\275\030:q\261-\272\0042\022\272\311BU:7\227#\272\336m$\2713O\232:\'\300\"\2722\266\321\271\310\301\004:\224\330\2507\020p\243\271\204\017J\271^`\254\2729\263\3339KmR\272\276\372B:cw\243\271\206\316\310\271\306\006\3149t\034j:\355\"\365\270z \213\271/v}\272V\261\2569\217\331\3308\010\261\3008\006\016Y9\270p\255\272\221\230/8\005\315\314\271\3278\2449\365\226\257\271\377\305$\272\377\033w\272D\031\204\271\205L\017\271\255\022k9\310\213\3638+p\2669\263\271\205\272\241\317\267:j\245\255\272\205P\2568\'K\355\271\213E\024:\300?`:|\025\232\271\221?\2309\360J\217:/\226\302\271\232\200k:Z\367\277:o\232x9G\322\203:>*\3576\2018\3157.S,\272\305\360E\272\275\223\245\271\230Cu:\302H\0058pp0:Z\016\n:\373Nf9\302\307t:\246p&\264\206h\003\272z~&\271af\3739\266\226\253:\233X\264\270\314\007-\272q5o\272\243\265C\272\312\237F97\267\215\272\213\200&\272-RA\271Qr\267:\321B9\271\253\032y\272\342\223q\271\032\264\231\271\352\322\2358&\223):\322K\326\271Pt\217\271\223n\262:\021,\226\271\001\276\253\271\016L\2078H*L:&\"\265\272\365\324h\270Kz\3349\000\263\373\271H\372\274:U;\346\2718S\257:E4\2439\3559\253\271i\304i:\264W\r:V\243\235\272\371\366$9\265\005$9\235\246(\272\205\030.\272\270!\367\270N}\2209\351\323;9Vq\0059<L\2349\233\331\030:\320i\002:\t\3172:V\370\242:\006On\272/\315\325\267\226N\253\272L\216;\272;\273\345\271\252J\024:\323\304]\270\370\215\016:F2\016:\351P\240\2718\333\252\271;\334\007\272\'E>9\034\210\001\272\251\246\013\272 \230c7\347D\371\271o\367A\271\205\017\004\272E\245\217\271\242`\215\272\371P\2079\3358\3609a\34149nc#9pND\272\351\246E\272\251\232m7]Y\006:\213\365\3549\022\220\3619\200={:i\217I\270Pyb\267\310[(9\302\212(\271}\356A\271\310l\021:;\321\272\272y\nP\272\365\211\3435mJ\2668\246\331\372\271c\352:\272\236l8\272\370P\254\270\3225\337:\304K\216\270\221\324\3609b\0240:9?\2409\266fK\272\344~\':\251\200\272:\362\216\264\272\020\342=\272\337O>\272*\354L9\366\340\2239\223\323X:\261\244\241\271~\303\036\271\264\314\3429\346c\237\271\245-5:0o\2469[y\2449c\301}9\366NT\272\342\327H\271\225\231\200\272eR\2019\223\262):\274K\023\272\317S\352\270U\215:9!\352\2019$M@9\025\215\3708eZ\027\272\020,\365\271\223\327\3717\264\203\256\2667\357\372\266\230\n\2668\t\027\2508\247\215\245\271\321R\351\271\2065u\2722\244\3749i\035?\271\275r\2749LT\"9\245S\037\267\367\024F\2728va\272|\271\35791\002\202\270~\264\241\272\303%\003\272\215\306\2449\245k\3209Rm6\271y\200\2417n\0268:_\357\332\270T\\B:\037Ev9\360\316\0169\220I\311\270\342\361\2328j\010j9\240\331E\271qP\3079#\034\022\272\377\373\260\271y\360 \272\333\325\253:\\\354\351\270e:d\272\205c<9WT<\272g\013\2359\316Ce8q\364\231\272d\273\322\271\014.\207\271\350\327\3619J\340\3638q\251\256\272\177\306y9\030\336\":\351\206\020\272$\376\330\2714\324\023:\t\312\274\272\202\034]9\242;\275\270\256\355=\2708\006\2159\306\243\3049<U\032\272\235\223*:\370\207\301\272\204\262/:\213\256\254\2717a\2079\215\335h:pN\377\272\357\001\0079\021>\234\271\346\216\021\272\366\334\264\271s>:\272\375\354\253:\357\\\315\271\373\22209 \000\035\267`9\007:\270!\340\271\203R\032:\200\r\2428\324|?\272t\027\243\271\215\232\2139\022\240\216\272\007\013\016\271\272\3475:$YH9\r\344\016\272\207\272&\270)8\215\272\'\375\2659\270\n\001\271Yz/\272\232\371+:Qz/\271\202i[8\017S\207:\365\246K:\354\"\016\2725\010\034\272)\335+\271\316$\2427Yf\311\271\220\001W\271H\305#\272\344G\370\271\370\262\r\272J\013\035:I\340\024:\342\25339\240\214+\272\247\270\221\270\3349\020\271\344+\3659($\355\271\260N\242:?7>9)\000\257\271\343\304\2219\336\023\312\2711@\324:\327\212\3409v\327\332\271\354\202&:\243}\3329\212\325\2308\032\250\013\272\303\306\33387\350\2229-H\3118\335,x:N\324I\271t\204\031\271\260\2724\272\261\316@\272\0074q\271L\243w\270\236Rs\271\300\3171\272\002U.\272\027[\n:\347\'\036:\250N#\272\232\363\224:e\352\3117\247\311<:\213/l94\252\206\271q1\0137\224\343\216\270\231\006\265\272k[\377\271\004\357\3239b\261\2128{y\261\271\307\360\277\270\243V\2377H\005\t\270\030\246m6\025\312\234\272=\217\227\270b\335\342\271\354\362!\270y\272\2137\035n\202\272%\263\032:^\267\213\271\204u\007\272\177\316\226\270\335\'f\272\\\202>\272\230VA\2723Q\2359\245T\2219h\177`\270^\321m9\373R\257:jol:\345\242j\272q\310\0319UC\2179\364\377.:\t\271\2419V\006\037:H\366\3457%\370\3138\364Z\3579\030\261\206\272%V39lb7\271\326\322~8B\360\2269Q8\3429\267\361\212:\276~+\270e$\017:\320\311b\272\242\350\210\270d\326\031\272/\001$\272\013\233\2609pG\3458+\274\003:\371\234\\\271e\036\003\272\\Cn: 3\323\271\t[#\271B7}\272\273AL\272\230\267^8\321U\007:%F\315\271j\013W\271\014A\227:\006\263\330\270\315\\\211\272\007\302\3358X\214u\271*-Z\272V\231\2059I\2759\272\347b\3409G\026U\271\302\236\2749;\271\0059\rm\002:\007\313\353\271\314*\3778\370d\030\272\241#:9\235\326\000:F\324\3609>\252\232:1\250\013\272\217\362d\271\335\021$9\334}\0278,<a:\030\375\215\272\0104G\272\251\335V\2718\233\3446n&x\271|\026J:\261)\\\272w\003\2009,\242\324\271Q\214\0229\374n\3159wJc9\375\353_9\354\376\"\272\357\247\3739\310\331v:#\323W9G\201\3639\254\347+9\350#9:^\377\236\272\216t\362\270\007\230\325\270\352\241\3309\274+(:\n\322\037\271C.\345\271\343\226o\270Q\350\200\271\215\310\362\270\254\001\204\272w\035\354\270\260\272\262\267;\245\212\271\225-`7 \313\017: \364`\272\204\273S88\317\213\267\253i\2739\365\240*:\320i\251:\344y%9\373K\3456\002\006C8!\375\210\271|\007K:h\310&:\343\335B:b\371\2249VB\3719 \316U:5\026C9\207HL8(N\201:\355\347\3018\213\252\3078]\342\3069\350\024\035:y\350\n:\356s\024\272\234\001\222:y\332I\270J\227%:\311\025\215:\210\300Q:lG\323\2713\231\3529!\272q\2717a\210:\203/\2159g\'\304\271\320\322\217:\371\000.9\366\023\204\271\232Wp:\227\222\3469x\r\2329\346D\"\270P\350F9\006:\022\272\231 \257\270F\333(\272u\'\037\272\311S\303\271\204\\\034:\272o\246\272\323\030c\272\365\376\2439\265\001\231: {\t:$\311f80\235\2009\277=,9\026 Q\272)u\226:\307\001\013:E\236C\272\037)\2339d\367\2549\325\226\315\270\371\364\204\271<[\3709\264E\270\2711\266\261:\3553\325:=\030E\271_\037\210\271\226\036\3359\232G\001:L\350L:V\r\201:\252\026\2639\024h.\271o\014\362\271\260.^9z\215\254\271W\007\0249\223\23439J\372\376\271e@\230\272@\0273:\375,\0059s#n7\177\272c:\n\024{:\346W\035\272\003\231\314\271\261\326\2668\377^\001\2727\352\254\272\232\270w\272\021\305\030:\311\220_9^_\":\025i\033\270\n\266\033\272\271U*:\311\004_:\245[\013\270 \340\0049\257\320\3779\356W\2429\016\035Z:\350[\354:\236\217\3139x\034C\271\214n|9Z#6:\020\374K:\231\"\006:tf@\272\245\t\200\272\231\262\366\267\223P\3749/\251$\272D\202\2649\305\242N9{FP\272\264d!9!\341\2559Y~\273\272i\017\202\271\216\305D\271\021k&9\326\2053\271M\266T96o\203\272\260\022\377\267vO\202\271x\343\":^\224H9\331Fe9e\031\031\271\237\2041:\274\014\240\271\3349P\2718\037,\272z\257\2039\315\316\017\272vl\3679)\217\2639q\312\317\271\002\032\004:\301I\2448b\201\324:bZ\005\270.\207\2227\360\325\365\271:\301\t\271R\200\237:p\333W\272i\236\0339o\205\212\271\356_\3319b\272\241\271\3672\2409B\266\t:!q\2469\314\010\217\271\254\016\223:\312\241\222\272\232\027\0219\2111v\272\344)\3609\017\217\3439\347\267\211\267\350 \3219Pq\270:\333\313z8\031\372?:\207\032\2427\004\334\0179\224\247\3419\374Z\002\272\303/-\270\244\251\215\271}\256\273\271\326\274\2178M3\355\271\270\252)9\326W\017\272Q\010}9%-\357\270\021\036 9\000\354:\271\025\213\020\271\237\275\3719\363\257\224:\313\037=\272\314\376v9\265\272j\266\247\267\2559\213q\313\271\315?m:\177\307\221\272Z\3129:\353\366\247\270u6\021:+\025Z\267n]\033:\313]\0149/\0243\272\025\204\225\272\005x\250\271\347\243\036:i\303\300\271\363:*\272\333\\J:J\017\262\271\251\373\257\271@\344N\271e\255\211\271&@\263\270\312Cz\272b/f\272\303T\006\271\330\345\264:.\273.:\3056\2329\341\177|9\"w1\272*\307\32383\200\3669Qh\300\271\265i\336\271Tj\376:\220JU\271\372\373^\272\373;\212:\006\'I\2723w;\272\013u\2009MB\21096\261`9\324\022u:0y\2349\251\250z\270\304\337\002\272\035\r\324\270\245\315\221\271@M,7rG>\270\003\026T\272\361\263N\272km\020\270*~99B\321\221:G\013\203:\310\351(\272d}-\271\317\206t:z\350\303\271U\310[\2718\245j:WE\025:\272\234\370\271\272\321N:\321)d:\370\\R:\370q :\324-\t\271\271\034i8>\372\2468\217!09\014\023\2749\346+\316\271\373A\031\272=*\333\271\007)\305:\342:\254\271\346a:\272{+38\002{+\272\375\366[:}}`\2718G\2769q\251\224\2709\016\0329$\n\\:nY\022\272\223\005o\271\327\035q\272\330\2266:?\346P9-\324 :\022\265/\272SB\0229\271\225\211\271\277O\2649\000=\224\271\241E@\272;\267k9\024\3174\272\344m2\270\300\366\n\272o\200\3158\263\315\003:\216\013\325\271qt\005:!\023\3338\220L\023\272\364\243\2039\335X\225\271\005\364\3009R\310\260\272\254]\2509>c\0319TAG\272\271\013\3779W\307\027\271\274\216\3129\235?c\271\023d\2747\325\325\3408\023\002\021:C9\3539\0362\372:\031\235\302\271\021)\251\271\023\275\2709\345\352\016\272\261\245Z\272v\202\260\270>Hy\2721\220\2209\016X)\271\353\310q\265x\351\r\272\233i\3628\201\235\225\271v\224y\272m\271\\9\0324E\272\023{\0039\336+\t8\r;\225:\007\214S\272!;\3529\034\254\032\272g\002\206\271\036\351\010\273A\025\007\272\226\331\2109\205\276\0169\033\242 \272\225\261\205\271s\013]\272+=B\272\261\227\2548\205\214\021:t\364\':\333\250\345:\316\022\207:\215\014\2119\340\310\3568\352\027\336:R\363\262\271\265\3567\272\373\001\247:\214-\227\271jjz9\264\344\2219^\014\000:\212\034\031\267\235bw\272,3L\272m\323$9\355[\"\267\370\022C\272\025t\023\271FeU\272\177\216\3537\270\373\3239wmF8A`;95$N9\202\300p\272\023L\255\272\005\346\207:\025\247\324\270k@\2368 \276\021\272j\004i\271\361M\024\270\360\336\274:\307\360{:\232zU9\2477\2439\331\360\036\272\335\325\007\272\311\264B:=\302.\272.R%:\234\362\3079\002\014\t:42\216:\342o\\\272\026\3542\272\300\314N9\311\27349> R:\216\007{:\030\252\3709\366MI:\316\034\177\272\333dG\271\372\212\3047\274\314t\267|\255l\271\252Fn:u\010\001:e\"\033:\357+\373\2718a=:\212\036\260\272\241\002y8x\217\030\272\270Y\002\272_\232\030:\273;\027\272\266\270>8+\266\2119t\373\2709\377iL\271j\002\037\272\303:2:\343!\2048\263\346\3648\212^\2739\232\204;\272\311\233U\271\335\231v8\323I\215\271(\205-\271]\347\026\266\257\363J\272]\302\036:\213\016^\272\3247\0308Htx:\177\336\311\272\277\221i\272F\027\233\272\020\363X9\226u\006\272\264L\333\272\335\267(:\306\0203:\272\250\\:a\203~:lR\2619\3128\3429\364\312%9\030\267\232\271\277\244\205\2716\263\"\272\315\177\261\271\334\225\2429\374\345,7`\371\226:\212\307`\272LkH\271sK,\272,`\2029\016[$\271AW\225\272^\312\3368\263@\006:>21\272\224Zl\271_\\+\272\r\034\3507u6!\272\205\350\2129\272\271\2759\223a\217\272\205\252\027\272\000Q\21588`\2319\350U\262:\326\237S:\257\330]9\215\351\26391\305\2319\255\312\212:K\014\016\271F\361\332\271\341\236\201\271\021\t\334\271IC\233:W\234\3169o\250\021:\321\300P:P\304\206\272l\251\234\272r\366=\271\300\372\2129\342,l:\274s\\:/\310\20082\242\2008\377\200\3159\263\013\336\271\362\271\357\270\306^\2007\322|\027\271W?\032\272\352\014\275\271\377\371<:1S\240:u\370\254:Z\024\233\270$\010\037:\367\315\027\272\307.M\272\035\370R\272c\274\311\271I\314\3309!\373\34787\217\0269\225\314\2248\243\037+:\355\255\3259I\301\217\271\263\373f9\026mL:\261\261\332\270N\302\3329\000( \272I/=\272\030A\2559\304a\347\270\202t\007\272ZL\330\271\245\210#:Y\030\233:\355\252\t9\ti\304\272\256U\3618@\026\004:\024\234\357\270\'\350\t:\341Sb\272Q\356\004:nP\243\271+S6\266\223\207\2649\310:\3009\370|\245:P\247\030:\007_):\036\235\3109\212\316s9\332\000\2759\272&\000:~\230=9t@e\272\235\034M\272~\315\232\271q\035r:\014\307v\270\224\345\023:9\234\243\271I\274d\271~\263\374\271\334\316\266\272\342\225\302\2718\007 \270\240\243\030\272?\251\371\271n\260\031:CG\035\271\353\036\342\271\205G\307\270\r.\2379\2659\3319D\201L9q\347\251\272u\365\200:\373\013(\272\262\002(:\023\231\361\271<E\333\271~\025O\272\031U\032\272\213\274\036\270!.E:\320z_\271`\243\234\271*\335\365\271\266\005e\272\270\'@8\211p\036\271\001\222\23084\234b\272\354\002\323\271\300\232\0049\2349\016\272~\304L\272\017\202\211:\206\024\014\272(\213\276\271\204\33749\3174\014:\270j\255:\325\377\242\271\252\001\013:\257v\0168j@\032:\351\310%\271\336dT:\213\267\2227?\272\020\272\2751\241\271\351\230U\270f\014\036\272\261\022Y\270\374%\231:S\371\3508z.\353\271f{X\270\211>l9s\260\255\270\244\254\201:9~W\272\366\257\2209S]K8\001\207\002\272\305t\205\271~\225\376\271\023\036\265\270\233\347\2509\322?\2049\202\217\3158r9\220\270\267\026\026\272\n\3418\271\271b\2719\301\006p:R\373\013:\025\243D9Y\237\':\236\3325\272k\274.\272M\25599\032\311/:\327D\377\271\300\312\240:\345\340\202\272\014ua\272\250x\3509i\037\371\271\3746\317\271c\244\372\271s\301 \272\270\234K\272\2761 :!\350\t\270\355\276j:\265\020\223\271\351\035\177\272_\005\324\270\336>\342\272\221\013F6\035w.:\332\325y9\241;\2059\300\301\036\267\363\001\312\271\354\203\2309\317Y\205:\227U\r:k\001+\272\002\361l\272\374\365\2109\027O\216:\222w\303:\245\010\030\272\241N\320:\000\340g\271u\307R\271`\200Z\272\362\354\205\271W<<\271\344J7\272KK\314\271\035p\020:[\374\2269f\200^:\354V_\272\217\244:\272+\2275\272\\\353\220\272K0\004:\356\314\034\272\230\312S:\024\326\275\2718RC\271\"\217\2429\350x/\271Fum8\032\030\000:X4\2249\032\225g\272MjY\272\310\264\332\270y@\32096O\0069\252\235\024:\356i\2557\233\177\246:\006\034\010\272\262\351\3019\250\347\014\272\223\201 \272HQ\n\272\027L/\271y\200\010\272\010\346\2329\314W\036:i\250\0059\204\274\263\271\203u\0148\203\022t:Ku\\:\375\033\3429\255\024S\271\317v\272\271\031\235\t\272[=\342\270h\226\177\271\010\245\210\270\231bb:2\330\311\272\341\255\001:\200\262\003:b\310\3718\204*\256\271s\321\347\271\035\245\374\271\022\273\014:l\016o:g\003)\270\006\006\261:6a\316\270S2\227:\177\233\346\271\252.\2348\320G\017:\211s\2367,\352\3029\234\353\r:\205\245\014\271\232(\017\270yB\354\271\005\256Z\272%\363!:\035\340\202:\275\027e:\224d\233\271b*|\272\350r\270\270\360\227=\272\242\211\237\271\013\372\2269\255\3504:\322OC\272\276$[\271\306]\212\270R~\025\271\245\254\003\272,\225u8\337\\\374\271iP\265\271M\032\034:nVZ:r\203\033\272\032\312\305\270\022=\0318\005Y\3109\240\000\020\271\360\3447:P\355\2043\226\232\\:\366\210\346\2716U/\271{\347\2527;H?\272\215\267\2708#\264\"\267\013\210\037:\274!\203\272\261\344$9u\240-:*\253\0348\007\305\373\271\310z\007\272\370-<:7\3165\272\002\014\001:-t\005:\267\327b:\r\210\007\272@\205\031\271#\347\2239m\004\250\271\322Z\016\272\324\\\251\272\234\3374\272\221\206\2059ny\031\272EO\3449\324\370,\272 \232\2379\263\240\234\271\337\262\005\272\006\244\3219\343@\2009o\304\202:b\252\275:HM\210\270\335\332\331\271\035\207J\270c\247\r\272t\253\212\267\271\360\224:\335.\010\272\334\221\3379C\240E\271\314\270\013\271m\236{\271\212{\257\270.\323\3719]\332\036\272\311B\3448\337B7:%n5\271E!\237\271\220o\2138h\377\2309\315\022^:\\\303L\271\341\316#:O\355\201\267> E9\271\036,\271W\',:C\003\337\271\217\303D\272f\201l\272\224H\017\272QP]9\007\267\2609\3046\233\271\304\315\016\272\230\266p\272\316\032!:\271\n\354\271\343\235B:\345gW:\215\321.9\221-\257\271K\354\277\272\353\246\370\271ho\000\271ad\3279\311\335\272\272\216\002\023:\003i\3049GjP:\034\246g:Zp\230:\334\341\203\271G?\321\270\253\325\036\272J\274\235\267\230\307\321\271n\217\2158B\277\2579\3476\2439\375Mk9\253L#\272\242\360 \2727~\3748\231F\031:\256\024\246\270\372\002\237\272\t\034\224\271R\037\367\2670,\3369Q\346\203:\211ax\272\362Z\230\271\270%\321\270\216\314\317\271G1\3729\311+\320\271\017\314\364\270Zh@9.k\200\272\013\356\n\271\300\273\204:GZ\216\271R>\224\271#N\3258\362\263\005:{\210\225:\321\207\2739V\030v\270\006\201[9\327\337\214\272\363J\332\272\330\357\220\271\033\037]\272\025\3168\272CF\327\270\352#X8\235;\3129\314\341\364\271S\203\256:\211T\272\2712\206\3008\007\234i\271\255@\277:=\201\377\271\347\016\363\272\023\204\201\272\317\235\004:-\371\3509\234\315\031:\024\2707\270\265\255o8\2546\326\270\352\235\1779Hm^\272\000o\233:\'Y(\272!\035\025\270\275E\241\271\017wQ:\374Jr\272\304W\013:p\207\2079\226\254\0169\217-u\271<%\213\271\232\243\263\271\264\250\025:\027B\033\271H\221q\270EH\"\272.\376\026:\005\256 \272R\274\341\271\334\336Z\270\325\307\026:\333R5\272\r\0210\271\234\241\247:^\023\2418\225\017\3559\002\361\242\271\374\260C\272\304\375G\272o\365\271\271*\312\370\271\233h\026\271\006 \3159\'\305\177\271\222y-:/P\347\267\003\007r9W/\252\272\033\300\37692}o\272G\205\217\2711v%9\330\006V:\327\t\324\267z\321\313\271~\302f\271\223\333\243\270cHS9\022\240k\271-\022\306\271\014\364Q\272\246o\2149b\006 \272\362\234\206:x\336q9\316\036\213:\252\017\301\272\006i\036\272\2210\2629\306Y\t\267\245?&8\311\211\0029\244f\332\271}\302\016\272\333t\000\272,?M:\201\251\000:\201\351|:s\351\226:\350\240\230\271]\237\373\270W\315\024:\317\024\2349h%Z\272\366F\345\271\344\314\215\272B\244\35785\036\331:\213\342)\271@\336P\271\r\210\353\271\250:,\272\007\226=\272R\264\004\272\217eJ:\253b\321\271\351f\027\272*\230k\272\024\355\"\270d\331^\270\305\214\020:\010\030\257:&\3678:\306@\002\271\2333>:0\343\211\272\355Wm\272n,f:\250\032\021:\263\237D9l\260\0269\275\344y9h\345\221\271\251H\t\272v\377c\272\017R(\272\231)G\272\243\237\212:\225\020|:\343\200\264\271L\301 \272+\252@\272\304\301\377\270U4\226\271\035\333\215\272\234}\210\272eqy\271\330\004\347\271\374\270\220:\177\206\304\270e\225I\272sg\3008\276W\222\272>\352H9yV\2359\364\'\372\271\236\262\202:v\177\002:\375\027\244\271:\321\301\271^\345\204\272\361J\2629\031\260l8\377|\206:\336\250+:\324\036\3729%;\315\271\022W\3769V\352\017\271\315)\3709T\016\3169\247\006o\271JqX\272%\3558:\342\335\224\272\215\262!9d8\003\2729|\2069\007M\254:\323\316\265\267Z\006\00294\207?:\016\360\023:\016\r\312\271\036\326\010:\264]\014\272d\331\226\271\303\231\201\272\346\330S9G\335(:\362)%\272\216\031@\270\241\367[\272%Z\2418-\203\301\270)&\2747\220\256\t:\203?\032:X:+:FNe7\362Ld\2727\001\213\272\2418\344\271\336\207\3118\207\357\022:\317n\203\272\200\273\3619p\222\260\271P\343\":\032\210\213\271\022q4\2725\001\305\267-\254\3469\274\022T:{\210(\272P\256\345\2714\360\t7\205:\231\271\332h\3449\330\322\2479\022\216\213:\331;\2519\271}\267\271\215\372\2208\'\312l\271\372\243\010\272\033\177\200:\221\036\3208aH\214:\221{Q\271\352\314\237\272\"s\2438c\243\2509\226J\":h\327\237\272f+\030\270\375\317e:\n\251`:\025\275\364\271\2210\2137]%[:\016\023d\271\255\032\251\272\306\010.9;\302e:\026\365\3166\311\362\025\272\310*\213\2711Kn:<]\023:\304\\\246\270\\A\351\2711K59\227\307-\272\030yI\272\277p\230\272Cx\214\271\021\035\200\271\010[1\271\2021\265:\333\002!\271v\243\000:\223<\017:/\222\0028Z>\3039\316\226e\272>8\352\270\223\313\252\272\220T,\272rZ\304:\311\304\0219\337c\\9\1771\3569\351`m:>\215\202\272\336\n\222:\355\255\237\272(\342\2767\236\277\217:s\254\240:E\333\205:\227\375\024\271\330|\010\272Y&_\271\300\242\205:Vf^:\010\376\371\266\375\313\330:\336\323\\9\211\0212\272C\317\221\272\3010\3439\377e\227\271\017\257@9\031y\037:\272\207s:\264\352\223:\313\350\223:\341Q28\221\3718:5\272\217\271\036/\3458SfW\2714\024\266\271\346\310\2739\344\220\2008j\243\327\271\004\267\225:\3730\3409\203 D:\365\031\2146O\327\004\272\027\210\321\270\021S\3259\305\262\362\272\352\001\2047\262\333\2329YI\2039\025\313\210\272\235\213%\272\rL\240\272j\350#\270\224\362\24695f\0139\372\377Q9\315\214!\270\364\302\245:^i\035\272\346x\236:\252\205\2629\274\224\227\2718\256\3728S3\t\271\032\341\2039\020\231\217\271\003\211H\272\252.\031:\363e[9\0222\221\271\324\242{\272\233\t\255\270\255\336\213\271\320w\220\271d\254%\272~\te:?\342X9\022E\t\272\nf}9\356\311\3139\037\202\003\272\204[\007\272p\376:\2711\343\004:\272\375\2629\240\314\354\267\344\277\221:B\004\t:\332\354\024\272\233\206^\272<\372}:\023o\'8\203Y\254\271Z2~9\035\23138\316\3672\272\257_\3179o\027r:v\311\034:\025VY:?\242U:e\027\207:K\321g\272O\371D9#\212\002:\330z0\272\334v\3549\272\323H6>\212.\272\230\223u\270~\362<9<#\232\2709\020\000\272jB,:\252\346\364\271\236\337a\271\242\002\2269\"\230\340\270\265\336\3448m,\220:/x0\272\03727\271\201|\022:\223\006,9\342\317\236\271R\200\375\271\340\321\206\272\020\204\340\270\351\326\2315z/\261\271\034\315B9\211J\017:\323]\333\270\352[\034\271J\271!:\300\331\034\272\352\\\203:&\371=\272h<h:\232\245\0379\267i\216\271\351\366\006\272\016\252Y9u^\272\271\022\350\255\272:\372\3338\031\372T8p\260\371\271\324;\005\272_Q\200\270\226(\301\272\365\223\3709\177a8\267u\205G9\233\226{\271\237\021\3629i\021\0207\317]\032:\r^\3429\034\251\234:X\203\031\271Ow\2359\266\22737\314z\231\270\373\252\265\271\227\352\032\272\367\354\275\271\213\376i9\370\360\2009\004c\336\271^\360\3508\225\363\023\272\327\025O:\374\377A\271\374\225\272:s:\2109{\375<:\272rp\270w1\r9\362\360\2749\231\246\375\270)\343\"9\367\361\035\272R\373\3728Ne\3318\354\037!\2721\023\207\272\246\316\031:\351m\2319\242=\036:\375\276R\272\366\201\2718\331~\020:!_\271\271\030\351\241\272\317\001\300\271\254\346U:A>\2758\366\250\2749\215G\233\272\344\225\201:\365zW:\233\001c9g;\325\271#!\003\272\204\020\014\272w\020\201\266\236\215\002:\217w\010:\201\007)\272(\237!\271(:\201\272\254\371\216\270;T\231\271rn1:\303\1775:\336\005\3768\207\320\276:>a\021\272\274\243\3409\356\253\200\272.\234E:\256\320\3408(\250\005\270\271\\,\272\355_J\272\377!\2049\273\254\2419z\213\344:lh\0209\337q\241\272u<\026:P5\022:\025X\026:\240Tb:\250\030\237:]\324\216\271Lw\370\271\304\325H:{U\315\271F\302\032\270\367\010\333\271\035E\2369\233/\3409\325\371\225\271}w\217\271=\266\2068\311\330\313\271Ly\264\271`+F\271\001\251\004:\262E\322\271$.\362\271f\273\233\271\330\272\200\270\r\241\253:\002\244\223:\0174\3249JYt\271\322\033\204:a\273y\271 \255E\2729\3279:\236\345\202\271\233H\361:\263\203\002:h\277\3279\373\2457\271\001\315\036\271\035\036\035:\323X\3579MQ\2159\371\367\2169\304\21309\246w\035\272IB+9\t \016\272<G,\271\326SR:\027zi:\025q :\251\260L\272\240\322\3119\3736#\272\310\330\2179\266\274\365\271e%\034\271\246\314\216\272\336\005\020\272\265\225\3209\251(q:-\016\3328E\026\240\270G\25259\253.\305\267)\361\203\270\220,T:\205(\3639{\3479\272\366\337W9\025\207\037\272>\205\345\271\2245\3159d\213\2349\234na\271\037\332\247:g\374\n;L=\032\267w U8\017Q\007:D\274d\272\240\375\3679?\033\331\270\262p\240:U>\2449V\315\321\2716\014\006:\305P7\272\251\224T\266a\025(:\311\350\216\270`\360~:\000L>\272\233N\304\267}\200\3079~\177O\272l\306\274\271\313\363_9\340\327\0269\212\233N9\247\007\3638\210)\036\267\267\000i\272\260=\2018\335\264h\271\331\216\t:\030|\257:\231\377c9\276E9\270\235\276D\272\031n\3059c\r\0229\370\316r\272\\\"99\334Pn\272\027b\001\272\24134\272\033+d:t\312C\272C\322)9L\004S\272E\t}\270\354k\214:\244\021\033\271_\305\205\272\210\361\310:\014\327}\272\246\263\245\271R?\264\271\360I\227\271=&)\271\0312r\271\232/\227\272[\\\023:\351\3146\2724\230\253\271\3028\203\271\231 \034:\026\212Z\272\033\244d:\003\004\031\272<!\3549Z$\2728\261#\303:\203\307t:\026\354`\272\322\304\\:30\036:\021\366b\272V\350\006\272\277\221\2519\241U\324\272\005lj\272\321h}9<\263\265\270c\300\2559\365\023\25196\023\223\271\204\327+\271E\003\3729u\006\314\271\2177\344\271\033m=:\036B\r:.\257\330\271\234Y\2339\366\34559\305\224\3279qU\264\271/M\007:D\217\227\271\311\342\240\272p\222{\267\013\\\2438Y\"\247:|\346\241\271,\024^\271;!#9\201\203\027:}\237\322\271~\240\221\271\273\270\2739&\3625:Gis:\251h\221\2709g\006:\202m\257\270\265\241\r9&W\215\272$\023\3439\3721\2179f\354\360\271\247\275\'\272\212E\2358\241\031\010\272oG$\272\320R+:(\240\3007\275:l:XX\026\271\336\256\237\2710ya8\315k\300\271\023\376\3359\270CW\272\255\033P\271\336G\000;\202} \271\351P\232\271*\344F6\030\342\224\271\024\326\343\271\n\320q\267\204E\247\271\3107\267\271i\320p\272\274\233h8/\237\020\271Xkj\272\0240F:\257\025_:_\026\262\267\334HF\272\324\321\014:\nw;:\006D\0269\244\030\0108\034\215\257:\'\203\014\270\230\312\3747\370QU:9\326j9\351\364$\271\317\037\005\271\325\002\034\272T\367\374\271\350\033\'\270\360\352\2419\002g\221\271\244\320!9\225{/\272s\005\3379&q\232\272\343\275\206\271\246u\242\271\334\332\036:i\302\303\271\312\354\303\272\315w}\271\240\355::\364\313Z9mb\3339\347GO\272\311]\356\270\'\233\230\271n\275\262\270`\213u8F\025A\270j}\311\271\036[\214\272\r\374M9\356\010G\272\275\371\353\271\034N\223\272\322^\\9\344z\023:\336\356\2519k.S9>\327\037\271\335Y\2578\245qX:\242\354$8\211\217\231\272\026\225\33792d\266\271S\367\027:\032-67\202\336x:)E\242:\r\353\263:\032\032r\271\360\003\3019\377\312\020:\343\2448\272\247\241\360\271?\257\272\270\217\3572:\366\301\2639\310\2360\272\344\320l\272\347\236n\271D\3065:\001\2269\2712\023\266\272\004\357M\272u\243\032\271P\254Y:\3716994>\022:\036\332\253\271\361\332\2349\363E\004\271\251\373\326:\204\316\177:\361\256\017:\377@\204\271>\372\373\271\201\3014\272\365^\2749\243\34188\017\\\017\272k\203\210\271\263\241\3039/L\3418t\314\2049\007\362\033\272\036\353w9\306H\177\272#9\023\272\214\225I8\343A\245:\010\343\263\271\327H\3549\016\177G:\024y\2559\036\367\034\272\256\376H:\240R\220:*\346T\271\374\244\277\271\376r\3609\326hx9p \217\271\376\023*\270R\002v\272\251\322\3479p\261\3008S\357\005:\236\324\250:\344\365\3029\272\354\2039\315\244\21499\374\306:>C5:\311\334\026:\000\316#:[Q\355\271{\"\035\271b\\\257\272;\203\2559|\260\3328/1!\272\247ae8\357\202\3269d)\002:\257J\376\270\265\267\2429\224p \271\252\3420:\230\234\020:V\026\24298cY\272Z>\032\272\013|\264\270\360\'\201\271I\026\027\271\352\252}\271\0230\3428.\005\307\267ty\0328\246[\"\272\200[\003:\324<S9\237c.9\221\371\314:B\300k\272\035\220\026\272\262\002?:\310\315C:h\017\2519\373\217\311\271\244\326\032:\271Oo\272\274\343\313\270\016\305s\272\324\255\'9\003mS\272\357\230v:6Q\267\271\r\370;:z%\001:\0016U:\003\220\0349hh\0309\025\21677\234.\3628\017&\207\270P\232)\272M@\336\271\"\030\001:\010\320\":\203\300<\271v\021U:\260\001P:\302qj\272T\256^:3\226V:\334\220\200\270#\031\025:\243\004\333\271\235\274\2379\303k\025\272\242\201\213\272\216%\210\271V\276\364\270\321\255\3359\302\216=9\366>\354\271\r\033\026\272>\227i:\2158\022:\323y\3108\3723(:B\366\2539\230p\3569\006\\\013\272\"!\370\271!R\270\271\006L\3219\336\206\007\272Qt=9\356\001\207\272r729Ye\255\270>|47;\313W\270<#\007\271\316]\224\272\2350W\265\332\264;\272GX(\272\365\377g\271\235\254O\272\007z\254\272\330i\000:\374^\023:U@\2319\337\026V\272(\253B:\231\301\212\272\260\364\t:5\260\3769\311H99G\323>7\003\264%8N\305\357\271\331W\260\271#2\3546\374k\2149\231\261\3448(\021\363\271D\337\346\270 \005\225\271\357\355W9<\353\335\270[\261U\272\000J\232\271\230\350\022\272\364W_\272)u\202\270g\304\3369$\300w\272\361(\3618\342V\231\270w[g\270T\200A:\241\205\214\272D\322\363\2715Qb:\337{\t\271\201\336W\271!\225\306\271\205\017\0009|R\024\272UR\2348z\363\313\271\322\370\250\270\271\270\366\271!\272::~\233\2669]\346\310\271\334\366\352\272\262Bk:\014\014\3409\330\302\3069\010i\004\272p\300\376:\255\366:\271\251Vy\267A\347\332\270\366+\3379\377\301\260\272\203\367\2229\006{\253\267\376\254\277\272\221\315\2149\225\34129\001\322~\272[\316\023\271\252\tl\271D\207\3428\225N\246:\r\231\231\272P\204\3729_\2735\272l\236\032\272d\355\006:\304H&:\363\301\3018\266\304)\272x\227|:\361\270\274\271\371\262o\271\255w\207:\006q\255\271\336\003\237:\370\266\2549\250\371\236\272\273\257a\271\364N\3158\346D\333:\271\340\005:b^\200\271\315\233\256\272\016u\277\272\347\322o8\023C9\272\207X\323\271<@E\271\263\367\325\271h\tG\266\031\226\036\272\222\243=8B\026\0217\235.%\272z\377\250\270W\003\027\271[\036c:%\213\201\270`\177\024:S\330\3117&=\243\271[\305\320:\376\334\207:^\037\023:\036e\221\271\255\33289\014\242\007:\273\221v\266\314m}\2721Xy9_\240\0329\326Rp9\213\205\3429\353E\013\272r\373\227:\342\\D\271\302\346\300\272:\244a7!\370\014:\005+\243\271\315\303\022\271-\372\374\271;a\204\271\245t\273\272\347ou:FK\2759v\013\0229\276\030\271\271\333\014U\272?\216\000\272\333\000\322\271eg\246:N\227\026\272\357\201\2359\207\254p9\241\344_\270[\013H\272%\215\247\271&v2\272\002\273s:\216\223\\\272\312l\260\271(\033$:z\27348\220C\2779\266g\231\271\237\312\276\271\313\275\244\2714\201\270:\24644\272\366\n\2408A<E:6\211\305\270\327\210N:H\336U9\302\300\237:M\263\3437e/\022:d G:k\236\301\272|\217\0208\202U\355\270E\276\227\272\246\352\331\271\250W\2159\213\316S:[\205\311\271\250\344\2539\021\310~\270\2656w:\373eg\271\206>\010\271p!\343\271\247\344W:\314\203_\271xl\014\272\326\312&:J\215>\271;\014\3139ps~9\210h\3449Be\351\271\2366k9\306\231\t9\201\361{\272\207\346K9Z\3219:\342A\2749\340\025Z\271\337\"\032\272\005\323X\271zf\031:\003\001&9\241\276\363\270\303\304M:eKm\271T\333\2119x\354L:Sk!\272o\305\2019\324\234\2759\007BI\272\233-\2527A\377\2528v\230\3429F\24749\335mz\272\'\024^\271\017\270\222:\234\317\033:\265\267\006\272Ze\265:\265\033W\272H\361\2119\325\331Z\271\355\3032:\211\332\000\272\312\346[\272\261\305\214\271.++9\232\313\225\271\022&)8\253\361\312\2714\321,\272\".K9\375\023\3059\340\365I:\214O\375\271Y\006\3427\311\322\':\265 1:\036\216#\270\377\240T9W\332\211\271z\226\246\271\223\022\3069\212\347\0019J\255~:^a\r\271]H\016:\205\230\2348\307\336\3016x\"\000\272\033\340\005\271\255d\013\270\203\374\3258\260\353\026\272\372\224\313\270\010]\n\270\243\037\317\271#\220>\272Q\264\337\270\204B\330\271m\325g9.\337>9\276\303\2639\326\332\3579\177a;\270\347\375b:\210\021\315\270\023\304\020:\311\235\213\2720\311[:\276\211&\272=]2\272\225\320\203\270\251\272\2318Sl\243\271G\210o\271R\341-8\202\261U\272\320 \336\271+9s9Y\306\201\271n`\367\270{s\204\272\216\342$:`\377\3326pK\305\271xf\014\271a\007*\272\202^\26291\321\220\272uD/\272\200N\2419E\317&\272Q\337(9\210.\212:p?38\325y\302:\362\201r:B*\2639\3302\336\271\336\344\010\272\206\021\3508\371~g\272\n&3\270\352\035\0028@\n\027:\"\312\2349\366\3529\271\260x\017:\201\207\276\271\002X\021:u\237*:\372\261-\271\312\243\207\271\260\252\252\270\325kG\265\316\203\216:\344M\r\272\304y\n:\001\341\236:\000:\3649\304\332\2439\307of\2707\205H\272\310\264r:{P\266\271=\311\2418\342\356\030:\224\202\216\271\325\207\272:\343\242J:\372\377p\272\301\203b9\0073\252\271\007\262,:!\360<9\214\305\255\271>i\255:\177\n\341\271\0343\0319RUT:pV\210\272cn88\301J\2168-l\231:;\235\3509\277\2475:\032\200\363\271Q\037\260\270\213\261\312\271k\327Y:\177\372h\272^\277\311\270\277L\206\272\325|\022\272\002\243\221\271\021L\2369\277w<:\300Y\255\272\370\273\3369\321e\245\271D/\032:\311c\2779\325\2269:\364p\3018&[\2669\241\037#\270\374\216K\272\341\3200\271L\207\0028\003\333 \272\030N.\272\216S\253:\217\310.\271\270&\3238\204\251\252\271e\007\006:\274\036\244\271\226Q\214\270y\0002:%I\340\271gyu6U\345\2539P,\003\270\3035\237\270\255\373=\271\205\243\213\272mGw\272\304\240\307\271\375\234\356\271\307U\211\272=\265G\271U\244B\271\377\005\242\270\010\331\024:\340y\2339\203\277\000\272\243\207\364\271\016\322\2477\027\274\2618\255\220\2667\245b\003\271\21096\271\201\236T\272,y^\272\314`\020\271\031\355\2618\301\037\006:[\325(9o!\263\272V~\257\270F\313\210\272\356\306\025\2719\025\254\271;\000\221\272n\255\3207\034\370\221:\033\243\2509\344\313\2029\320\251\3739p\275\300:D\340@\272\030\252\205:\247\335i\271\n\242\23790\356\021\272\301\"J\272\2450\233:\371\265\215:\2222\265\271\232c\303\270\337\"\223\271C\335H:\275YR:HL\207\271\231t\253\271X\210\205\271\333=\0249\314\217\203\272\020\310\2429b\233\3039\254a\201\272\212DQ:9\177\341\271\200\035\3019\241\267*:\026]=\272\001\222p\271\344\323q\270\005](9\373K\376\271\354\355\030\272\253o2\267\334\217\231\272\202\315\\9\005\320\252\272\3052\217\270s~\n:\n\r\251\271\337\370\005;\311\301\202\270\034wu\272\236\205\251\271\211\026\252:\320mS:\246a.9\033p\3259\243\265\3509\204\314-\272\344\017\222\271P\242z:\364\203_\272\244\265\250\271w\255\256\270\335\216~\272\022k\001:t\035\234\272$\205\t:\325\227\314\270\202\353\014\271i\t\021\272x)3\272V\217\221\270X\200\010\272?N\2169\205\2778\272{\220\3009<n}\271*1D\272\347\033c\272\376\325\3005\275a\346\271\n>\2339I\030\030\272J\333\3409\340\213[9\210-\2609\034\036|9\357\022\343\270\316\0318\270Z\023p:/\317\205\271O\214a\271\230\256\265\270\241\343\0029T\0141:3\375\250\272;qY\272\2564\226:\231\247\023:\272>2:v{\200:j\317_:$)\237\271}\200k9E\326f\271\240q\n\272\002\377\r\272\001\021\240\272t7\013\272c\374\305\271\345\342\250\265y\267\033:\t\0052\272YrT\272?L%\272\202\207H\272H\336\000\272-NY\271\224W\255\271\355d\265\271\230\332\312\270\260C\017::MW\270Xj\273\271\227\352\025\272\371\317\266\271\310Gc\272j\360\3069\247\305\2609\0333\2539r\234r\272\025\0000:\247\330\023\273\021\002\\9\250\22099\257\306\t\271\032a\274\270\233\331\2169\215\210\257\272\300\3458:TW8:\034G\014\270\271\221\034\271b\223w8\357\364&:\'H\242:||\022:\213\223\033:\356\031\034\271yN\347\271\2629E\272\255\324\2568\357\231!\271\361\273\t\272\363{\260\271\032s.93\263\227\270\244\275\201\272_`\t\273\265Y\3528\244\334N\271ed\\\271G\006t\271\233\354\200:\023\231\3169\352^\2479\363_\016\272\330Q\024\272#N\271:f\321\204:p\306\034\271\315\013/:\310^M:\274C\22798\250\003:~w\2179\252\'\r:iP&\272\362\276K\272\217\035\2039\006\252\2479T\020o:4\024\2549\205\032\2016\231x\3229\314:\235:\\\332\231\272=\340\010\272\224\2649\271M\032\255:\021\032\267\271\355\337\0308\356\022\2219v\353~:M\360\0279b\222W9\035\323\203\272\370\277\300\271C\325E:.H\3209\207<\304:Xc\026:\251\324m\272#\247\234\271+\313\24096R\224\271q\362C:\276\032\2659\201\243q9YA}9\033\351;\272F\342\372\2716a\322\271lL69\000\222\2359.!?:\003\241\211:\304\276\0169\005\340\201\270\240t\t\272\247:\244\271\241hB9\300\025\3439~!3\272\274\032\0239T\362=\272>\233\3729\307\204\237\272\'\265X:\365\235\236:Q\205\3449\'\035\003:\337wa\271?\333\3029\004\357\'\272\036\205\3249\312\227\225:\276\216\211\271\372\240\001:\226\217\r\272kW\2149\036\252\236\271\3401\2309\216\345r:\260\363\275:\222\217\252:\203\362\314\271j\217\266\266Z\276i:\275\343^:\273\245\207\272\232\305\2659\322\024\264\272\207\002\341\272\215\001\2069\"Vi\270\325l\3468\270\253\214:\302*7\272$N\256:\203\032\330\271I\024\0339\311\230\2509_\177j:H\202\205:\t_69\014\364e\271\241\364\2435\331\031\210:yG\031\271\237\223G:Z\247\360\271\201\223~\271,\241\272\270M\377\201\272e\315\3618Z\312{\267\232%(9\237&\246:{6|:\333\230\0039aS?\271u\006g\271\033<\'77i\3168\362\024\034:\177Z\':\004&\005\272:\316\262\270\2333J:Q\210$\272\0060\3119wo\2529\311\342\235:$\265[9\222\230F\272F\211\2609\341\214\n\272\252\000B:\330\376\2639\207\002\0169\331{T:\3237\232:\213\033\022\272\354\016I\272\372\266W\272\355\016\2629\370\2453\272\255\n\214\271\256\246\272\271\374\000C8X\215V\272i\356]\272\365N\021:\370o\3058\317\306\3126j$\031\272\204h\3339r\027\036:\264\214E\272\212\204w7\261\204\315\272\303\231\237:\365\340\026\270\342\314\0049:Fr\272Bk\3209\364K\2749\324\021\273\271\020\317\3519\t\217c9\020\361+:\241r\222\272\252U\205:\005\213\325\271\264\204e9e\3559:\270\225\n9\317OC\272\276\231\r:\364v\341\267G\201\222: >\t8\001\215q9},\3608,\232\322\271\213F\017;;0\177\270\250A\346\271g\303\230:\021\221\250\271r\347\30192\246i:\200\031\313:d[F9\364R|9^\366\314\271\216\313\253\271\316\266]\272\306\313\247\271kV\222\272\276$+\272\322l[:\037\276\361\271-\344\010:\271\314\221\272\020\250x\272\327t7\271\306+A:\320\220\3149>3\025\271\006H\364\271\204\317\3049\346\177\262\271zR\033\272\352\003\250:\'\230\2109\224\017$:\272a\2439\237\234\2348\375\036R9Y-\035:\334\266\221\272\017\361\361\271\243\360\177\271Ut\"\272\336\301\023\272\265\271\2507mz^9\274\23479\247\264\2209\211T\2529\023\377#\271\021).8\223\337\t:C\351\224\272\207h\3249U[\202:m\336\021\272B1\2669/}\2079cf\204\270\251&\243\272\265\r\2367\347\321\252:7\tP9kbx:\310f\20096\2741\271Y\370k\271\243\372\216:\327\236B\272# (:\215\002\275\271\345\005\014:\253\031{\272\266\330\324\272Yh\'9\272n\361\271\213\203\231\271\355\002\355\270g\001L\272h>\2428\361?\3428\202ux\272NU\2149\236K :\200\356J\272\327\022\250\266\304\235\200\272k\225\322\267!\3700\272\227\317\206:\303\211\021\272\2553r\271\214\261\n\272\275\222\2739\363\247j\272\264\200\2278\013\271\2469\330\336D\271+-\3419\270\221\025:\'\244\201\271\241\022f\2728\265-\272\346Ds:\3644\020\271\344\237\2328\005<R9\270\3676:\305R\370\270\201\363\220:\271v\2429\227C\2469\355\253\2419\210\306\004:.sM\271\3639\212\271R\275\022:$\310t\272\244\000\323\271<\"\215\272\357r\251\271\347\301\2438\273\013\2538?b\031\271\206Y`\272&t\257:\370\226X\271?\3220:\244\240\2029\271V`:\326\003$:}\360N\272\202\304\3028\n?z\272R\313\023\272\000/&\272\203\030/\271\341\252U\271\314\020\263\271\004;7\272\256\177<:z\356^:\304/\017\272\rB\037\272\3371<\271\256\266\"\272+\307\002:\"\236F9[\242\230\270\304\3036\272\254q\246:\331\254\n\271\033<-:\031\026\200\272Y\202\2729\314\0271\272L\225\2569\243\222(:Rr\273\272\374\203\037\272\025h\2379\346\235\3379~\242\356\2714Xl9\227\261\312:V\270x\272\316\3641:\345j+\271\361\201\"9\332\263\026\272\345\252=:X\225\2009\027\251=:sL\2359X;\317:\353\332\2357\010\243=9\2759l\271\255\370g\266\354\306\231:.z\205\272\273*\357\271%\321\360\267\266.\375\271\250\353\3169\r\316\014:G:\2459\257\374K\272\330\032R8\320R\3039\326R\0329\002)u\270Q\312?\272F\010a\272H\301::\326\272\037\272g:\200\272L\026&:n\322\252\271e\206\t\272\020\013\021\272\244\371 \271\036\251\3029\014\325\247\271\330{\230\271?\207=:\223B)9J\261\2379\364\276M:\226\275\2278\317C\2368\312\014\336\267\034\276\3529\324\267M\272\350\235T\272\201\354a\271A\247$:\371?\\:\007\022\3528\352\232t:\371\217\007\272\260kG7\260I\353\271\r<P9\'?\3737Se\025:G\262>:\340~\236\271\017\331\007\272f}\2377\356\323\343\267\355\277\235\2718\236\0258\227\250\325\271\252=\312\271\226\305\2606\340\240\225\270\350A\201\271\326\272g\272\350#+9=\274\r\272n\246\2039T\004\2338 #\227:;\377\3749*\320\2428\376\371\265:I\304;\272@x\210\272\243\007\332\271\376\236%:5/\255\272\266\376\035:\242\346/\272\303\314\2569\343S\275\271*\024_9\244\213\000\272Oq4\272V\237\302\267\342B\034:\2352\37787w\017\271\226,i\272\247\235\2759\362\317\3626\002\277\3559\3130r9\201\205\032\271F\346O\272\2659\3509\210\t\2109\005v\2517\266a\2528\347\216Z: \362\0257\306\334\0229\315\021\232\267g\266\242:0\r\3568\233\254\3737\265\343\2318\224\247\314\271`\034t\272\"\177\3609{\270\327\271\260\275\333\271\r\030\3547,\213.9\361h$\271\222? \272f\310\3749\270\177\321\271i\000\3237\177\334e:a\220\363\272\342\332K:\341\344e\271\344\276\27598\216\002:o\211x9a\211\3419\220<\2028;5\0318\210\026\226:\273\312#\272\264\006\231\272I\375,\270l\252Z9\014+3\270\346:I:\271\361^\272\037\350?\271\n\356\214:\364L\327\271\310[\002\272\305\356\335\271\3176V\270\307J\241\270\347E\2417\006[\022:\324\023\241\272\331V\2759\345i1:\270\211*\272\201\242\0229\252\374A:D\363[\272\001\036\021:s\345\2479=?n:\304g\222:e\346\235\267\341h\007\271z2h8;[\207:\322\332\0259\\\377\244\2707~3\2728O\n:;\301\2679\211\2313\271\255\211(85\016l:\007]j:L\244,\2720\316\2179\203&\3428\010\307::}\234\014\272;\351\002\272\256\377)\272/\323\2019<\365)\272\307\250\311\271YK@\271\270Fu:B\357\26090\316\2659\266\004M:\204\200A9}\253\023\271\304e\3759Zj\031\272\321\326\252\272\200\344\2619\215\337\226\272\003\214&\271\010\331\3519C\337\027:\250k\3748\373\241\020:\357\222\212\271&\324m9\270\274O:\247\207\027:\177D\037\272\351\377\2479\034\312\2669A&\2776\237I\r\272P\356\027\272l\245\2439\343\'\267\271I\330;\272q,\353\271\327\2011\271\231\0136\272\324\234\227\271\353\3076:\210\010\217:er:9\033\013\3579\263~\263\271fWg:\000\r69I\330=9vY<:\363S^\271h\n\323:\026~U\272\227\264\3657\375i\3219\244\2438\272\337\\c\272\271\363\305\271n\r\251\271s\261\216\272\363\035\210:\346?\3119\004\220^8\362\213K:@Q\227:\367\370O\271]\327D9\237Q\2339\304\357\t:;\030\232\271\371[k9\002\354]\272&\355\032\272\202\035\367\271\014\243\2719\235\035*\272\020\324K\271\267\020\3428\"\347L:\376\354m\271~B\205\272\375G9\272U\032[\272\206\360\303\271\035\373c\272^\347^:hX\':\324\275g9)`c\271P\262J\272\222\303::lN\007\271\301u\3479\020\205\217\272\272\024\325\272\271i\201\272\010\223\3249EoE:\371\000\2119P\220o\272\260)\035:\316p\323:\302\021\2478z\017\003\270|%\313\2712\251\355\270z\243\234\271;\266\3039*;:\272\013\213\200\272\301G\345\271\205x\302:J\031(:\032\360\2447\247\260p\272\255\030[:\324\026\305\271\327\017\3319(\037=7_\224\317\2712\203\326\271Es \272c\227\006\272N\244\27693\254\017\272(\177l\271\240\325E\272*\177\n\272\345\211\366\271\361>\3338\361p\3529Ys\2739\016\347/\272\337\262\226\272\225Y\315\271KL\014:\240A\3118\007\2670\272\241C\2528\306_\204\272B\024\214\271\316\006\364\271\331z1\270\3347>:\355x$\272\232\253\2249K l\272}x\2437\0057\n\273\220.]\267\217\001\255\271a\222\030:\2068\3318\216C\201\270H\365\224:wYu:\253@\205\272N_\3119\343[\3007a\221r\271\214\3657\272w],\271|gL\272\200&\026:g\266\376\272\247\000`9\270\205\3179\274\026\3719\353\346D\272\323uS\272[`i:\360\261\3359c\362\3239-\347\264:\274\000\013\272\024\304B9\257\263\001\272\326\213\004\272\275m9:_\256\361\270\261&p9\265\034P\272\035\3332\271\001s:\272\026m\300\271\216\027C9\251p\2429Wd\3049\252V47K\242\255\271eF\256\271\315zF\270\226|\2029\242\177L\272\331qF:\317\242\244:\r\264\273\270\267\3732:\265\332\014:\247\364e\272-)\331\271|]g:H\262\335\271\200>\244:,V\3259\221\035\207\271/\325\236:\311\246\213\272\360\354\275\270\361y0:\271\303\213\272\342\365\3138\310z\2239\362\t\3149\310\317\37197\321\277\271#\376\3148\321\2152\270K\352\274\271\241\230\2119\016aB:\347\355\317\272,82\272\375\250\2539\000\366$:W%\2359\020\036\302\271\376\234M:\270\224$9\215\325\2039\356G>\272\361p\341\271\021\344Z\271<\020o\271\035\270\207\272\211\300\362:0U\3379\\\231\2308\347s\371\271 \317\217\271\351\214P:\273\231\":\253\214 9jY\304\271_\205m\271\346\000\346\266p\032\3019\\\365\246\271\031w\177\272Y\200\3009\257,\210\270\207%\020\270KN*\271|\274\326\271\237ey9\321^,:\271\310I:\000;\207\271\327\243\2719\355\353\325\271sE8:\022[\033\272\"\226x\272\345\357\21082\301\033:c\023(\266Z\226\313\271\245^\206\272\315\305\2339o\220\373\271\311v\205:!\374D\272\2126\211\270\267M0\270\335\031\3629\310?\032\272.u\001\2726-\3209\000\223\244:8\317\312\271\376o\255:^\324\034\272\013\307Y8\025\260[8\305\237\2559U\30619\254\252\0229+%\246\271\363\323\350\271\215|\2269Q\200?:\300\335\002\272\211D*9\375n\266\271\270 29\253\370\225\2710@/\272\223\001>7w*#:P\235Z\272\364\t\273\272\366\017w\271J\3003\2720\227i\271\342x\2149\014\251\3358\213\231\033\272\tf\010\272\246+\2438\230\024\021\272\036/\3449u\337\2579wiD9+b\3439\253/\':\267\233/\272W\220<:\272L\327\270v\3360\272\250\004*\272\206F\376\270;\t6\272\243\254\037\272\356\250\254:\340\255\305:$~\214:\365\177\274\271\250\226t9\036l\261\271=\237R:\210\315(:\365\215\033:J9\2009\014%-:/\341\343\271_\370F:\232\200U:x\305\3548\273WH\272\327r\236\270\\\022Y9\315\214u:\200J\232:\364g\177:\017\332t9Z\227\313\267h\340\037:\021\361\325\272\240\272\213:g\342\266\271/\334\220\271\2619\276\271\260\336\":M\354\t9T|\244:\362\'\2469\366t\200:\342\343\3119\337\221e8~^\020:N\237\033\271\370\310\227:\007\317d\271j\344:7\033\247]7W_\t:\250\323\3029g\263\2469\264\t\207\272\376\222*\271\030\275+\272\003\263\225\271c\037E\271\331\203\2639\031\"\017:M\234\2749\217\2640:\016I\326:\332\021\2269\227\367\1779\226\2773:\002\322\265\272\017+\t\271\325\030_\271\266+l\271\267\222>\272\231\230@9\267s\004:C\352\3429\257\033k:\256m\2718\"\327q:O\246\203\270\210\236\3548?b\231\271_dx9ap(:L\362\3148\273:w\272(U$:(B\026\272A6\2079\222c\305\271\rC\205\270#\373\230\272B\252[:\014\3212\272\003\227\2769\256\231\035\272\333\256\004:\221p\246\272\337+L:\271\370\032\270\214\345\244:\363$\r\272\312\275\355\271\306\355\252:\256\301\0239\373\021\320\271,O\242:F\336n:\231\243\342\272\246\370\322\270f\213\025\272fs\316\270\304\340\261\271\030g\345\270\026LY:\236\326.\271\307g\2378WF\003:\214\200G:\023]\020:\222Pn\272t\324\3027\213_~\272\363\270\2779\326\32379\302\rH:G9s:\356\345\3718\331\311\226\271\277I\3309\333\272\371\271\225\257^:\342\244~\271R?\252:8o\3259Z\024\3128\347\207\026:F\251\301\272\270\203\3659\204\235\2408\231\334\201\272\374 \367\271\0272\3159\341\303{\272?\227\007\271\242\017#\272\224\311\352\271n\354\034:\233#\2609^\025\216\272C^\21489\346\344\271\213A\030:\234/\2059o\327\2739\212\205\2239]4\0149m\336J\272\215\304p:\266\352X9\324\275\202:\314\3304:d\007\351\271\223\345\007\272\215.\3309\362I\365\271\216\207o8\202\212\302\270\260\307\2759g\3767\272\216\220\333\271c\274.\271\337\300\0209V\246\2729R\",:\324`g:|\t=:\323\334\3609\303\337\222\271o\200\231\2720o\0178\022\325^\271\2364\304:\024\344\026:4\217(:!\342\036:e\217@\272\343\326\314\271\361\374\021:J\343\n\272\n\205\3779\352p\2569\322\335\023:u\227W:\3317\303\272\2212\'9\221qo\272\341\212\222:\275\022\007:tw\013:\t\003!:T\353\245\272_\323\237\271\233\336\2009P\255O:\342\0012:\254\242{\270\021\333q:\205\343\3139q\276\307:\224\207\0069\307\374\333\271\213\353\'\2721\357\004\272\266fC94\343::\213\336!:\013\214\265\272}\025s\271\301\027\244\271V\224\3258\254\217\n:\237\336\014:??\023\272\227\220\345\267\246\370\270\271\310\254C7\310\r\016:\337\236\256\272\367\272\036\272A\220\001:\334\353\222\271\226\312/\27256\232:;*;:5\227\3459\224-\303\270\030>\0059\214\344_9\207vI:\321\200\3669\245\364\2738]\345\031:\265\202\':\021\352V9\013l\275\267e\331\332\267H\211\274\271%\'\205\272{\317\010\270\216,/\271\302\375f\271\312\337\35291w*\2701\221\323\271\266\232)\272O\362\013\270Hz\243\272M\007q:\2536_9K\r\306\271\204\371\227:\242c\317\271\347\266\260:\377e`:\236\345<:\312\004g9\212\216\0219\221!D:\241~X:|\345\300\271\021pf\272&  \272\327\007#\271%\220`\272\271\215\254\266\210\004\250\270\321+\247\272\035X\236\271W\'o\271\t4B\272\025K\000\271t\375k\271\267_\241\272\311G\205:\016\346\215:d:\3628\273\230\20691\343.\272\372\n\207\266iK\035:$\300E:R\224\000\271\311`\311\271\262:k8%\276!:\205t*:\'\374N\272\300\325\n:\362\225?\2672\207\036\271\350Y\031:\213\017^7\r\334\2759\350AP9\231\323\023\271}_\205\272\247\007\231\271\347s/\271x\222o\272\215\361\3548|\203W\272~\n\3149\n\271a\272\036o\2358~\322@\272\342Y\271\271\216\353%\272\244\031\032:\263dt\271^\007H9\372[\267\271lu\2709f:n9\302^\267\270]\317\3657u\351\0378=y\362\267\007\n\221\271\324\034\230\271;\223\3759\204{4\272&\257q8\262u\3047\006\331\n:Iv9\272\027(v9\021\0204:\0144\353\271\232\234\354\271\347\270I\271d\276V7\246\321`\272T\340\022\272T\016\2457^\373\241\272\026\007o\272l]\260\271\\\027i6zXX\270\3567\365\271\206C\2209\212\366\0048\312DM9&L\3028h\014\213\271\376\354\222\271\300\306z:{\352\2769\253\276I\2671>\202\270\365\306\003\272\036\370\215\271\304\020b:\320fe\272H\261\2439\305\321\206:a\361\260\271\207\n\014\270\246\205\3209w\214T:02\370\270\321\327\2218\272c\2619\275C\3519\200\347\2308\210\373,\272\031\332g\271wA\355\271^\356\2658\341$Y8#g\231\267-k4\272\354\327c\272\317\007\210\272j\202\2748\350\353N\272\360 \214:\237}l\272R\340\250\270\364,\276\270J\237X:\377\026\256\271$\216\027:\370\212\237\270p\261o\271\342\334\245\272`<\2259\347\277\310:*b\206:\222\025\330\271!\346\034:\220\256\360\271T\350\330\270\3415\227:W\373\326\267\255:}\272\357\273w\271O7\2539\350\323\214:\300\223\206\272ur;\271\361\202\2348\232\013\3179\2372\240:f\031\271\271\031\257\202\267\301\032\037:i\234\260:9\270\310\271\316\363\002\2727\316\3449\245\252\340\271-\302*\272q\313s\272b\231#8sfz9\227\002r9\204\316F9K\317\221\271\344\356\2269E\321\2368\315\013\222\271O\320\254\271\326iq:\352\255\025:\016\310\2169\217Q\000\272\244\315\261\267\2044,:\246+\227\270\301m4\272\037V\263:\266\274I\272\322|\221\271[\370.\272]4b:,x\'\272\335\004T:*S\351\271:\221\3449\177\032\3139g`\3479>\314\207\271\327\223\240\270\2335\310\271b\2137\271ey\2139w\204\004:\230\213\200\271\305\2554\271$\315\320\271\306c\0109\260\266\"\272\0229\3009\236\376J9\006\207\241\271\211&*\272\270\332\3369\020\210\247\272\313\177\3219\271f`9\357)\020:J\313z2\020t\241\272\030\0213:r\222\261\271\360o\016\272\001\023\2229\376Rk9nd\3728\256H\201:\252z$9\230\237\0019\260\363\214\271\277W!\272\307\022>9\\\352C\272\300\304\322\271\241C\350\2677F\232\2727s\213\272\344\364\327\271\253\323n\272%\377,\271\3128c\272s\363h\272\232\364\3648\301$\225\271\233\224\307\271\007\376\036:\312\247\2649\221z\342\271[\3420:\363H\214\266\310\301\366\270\033d\005\272\257\231\2009\201\353\2269D\305\230\271\312X\224\272\270U\263:<A\22599\212\273\270\334\354Z\272\246O\364\271o8\225\270o\364\304\271\345\372\301:\227\004\025\272o$\3168n\361t:~\216\3479!\207G\271+\375#\272W\025\2019\244\252\325\271is\016\2720\301g\272\211\034i\270\275`\3139\037J :\351hi9\314\351\030\272~\271;\271\002\3451\272\211yw\272\354\361\013:\365\262\255\271\345\267\'9\037\035\210\270\260@\204\271\037\252_\271\n\037\2339\371\276\231\272\202\247\0359\r\253U\271\2035\324\272_\376\2239\313[\310\272*!\':\375$\246\270P\003\270\272\372\326\221:5\202\200\271\216\2743\272\262\222\214\272/\277\234\271\022\302\302\270\021n\0319\222(\247\270y\317\200:\373\265&:n\005\353\2709R`\272\260\242\3238\177\013\363\267\310\305\224\272Gx\023\272\274\220\270\272\262\373\376\271\226E\274\272\307\317\000\272\023\222\336\270\372\325\302\272\037\255C:\335pF\272\212SG\270|\202\2128\314\376\213\271\271\223\226\271\347\333\351\271:\033?:bP\371\271\226\322\225:v\034\247\272\206y\201\271\027\332z76\360e\270\207\0245\272\314\022<:\356.\001\272w\\Y\272I\344\3459\007\223\26775N\2119\367Xq\271\200\003\022\272\236\323\3769\331\363\277\271\037v\014\272\014\327\036:\333eK\272C-\3539\274\370\0219<>\270\2715i-9\365\274\324\271\237\350\2259H6\276\270\223\202\2079\245\344\256\272\210\265Z:\r5Y9\311\"\2277dg\243\272I\371\344\271]\"\207\272\253\252\310\271\3656%\272\023\220 \272\311\227$9lC\3557\003\317\215\272\335\317\023\272\226\002\305\271/jo:\016\210\0218h\215\3539P\252\267:\n\032G:\363@M:\202{\241\272k\337n\2719\373\362\270\233~\3169\321*(:\023:>8v\366\013\267\027\330\0319\320\307,\272*^\2759-\271C8\321\203\034\272\327{(9\027\323m:\242\014^9\272\210G\272\204D\257\271\305\350+\272X\210\3077\324 \263\272\321Xq\270\345V\227\271c\336\220:\327\314t\272y\222\3558#\252\025:\006z\345\271\026*\000:\212.::\365\227\3669\007!\264\271\270Y\340\271K3\2749\215L\036\272\024\315I9\213\210\3029\312I\314\272P\235\312\271C\212\2018Q\352\254\272\236\304\234:~\235\3417cA\260\271T\2746\272\253\370[:p\366\314\270\276\334\271\271\2248\206\272V@\2067\014\276!\267\\\362t\271\364\377\3259\365\314\033:\337\n#\270\271\214+:\341\202\312\272\251%s\272\270\366\206\272\277\021\005:\226C\026\271\277\023e9qD\000\271\nXl:\327A\3039E\354\230:\224z\021\270\021H\3478\263\312g:\357\021\235:\371U\031\270\233\244P:\337.9:\351\025\t:\255j\3369f\346\233\2716\017\274\267$1C\272$\314\213:\307\267\177\271\354l\0338Q\326\204\270i\21079I\354\3378\232|89\233]d\272\205r\255\271\357b\225\270\3077\221:\236\217=8>q>\272)\256\261\271\211=\250:\211\333\243\271B\272\2229\352B\245\271j\336\246:/AJ8\277\235\3569 \321\005\272\'\322%9\243\256.:D\325\025:\3125y\272\377\031\r:\330\202a\272\323\022\3429\224P\243:\036\341\0179\020\302\003:\276\235\2617\000\007\002\271\366\301V\270p\033\332\271\323\025\n9*q\036\272\314\200\3379\261Oh\271\224;g\271\244\371\0379$wm\272^\222=\272t3D\271\336>\0019\025\010\2628\300\016\n\272\256\212W\272\265\002W\272\365+;\272\270\3543\272u\005?9\"\340\3019\274\323\276\272\212\306\200:\207\325\3719\277\242\2439\022l\212\272;\212\353\271\000\350\016:\331k}9\301\034\0359Us\3529\222\342i\272\347\323\035\272\355q/:\017\202\037:g\010N:p\276\220\272\037U48\251\312P\271\3525\005\272\312\217\036\271 \001/:\342\336X\272\337o\033:\0107C9:8\0349W\212\310\271`p*:\251\002*:\257%\3758 \202Z:\241_\332\271\371(T:,\351\347\271\"K\242\270r\236\334\272\210\236\033:\333`>9\2359|\272\325p\236\272\223hL:*|\027:\017.\0239\2067\255:\235\003\2478\316}\006\272\341\215\031\272`B\277\272\002\234\036:>\201\321\271(e\2768\362\335\030\271uh\324:\361ng\272=\373\2469Z\215\242\270\335\276\307\272\035\232\262\271\315\3271\272\325QJ8\256\354l:@P\237\27132\013\272\373>v\272*)\245\272\326a\2039\226\365\334\270\002\20208\304\227\035:}\ro\272`\261\37699\244\033:\3647W\272{\021\031\272z2\023:\372\304\020:\226\307\3339\220sZ\271\301\267\t9\210Jm\271\213\r2:D!\021\272\326\336\"\272\331\r\245\272\322\244\335\265\271\020&9\241\367\'\272v(\020\272\220E\001:\272\365Z:0~-:\335\031Q9KBO\272\215\214\n\272\222\313\3039\237\013\223:Wn\034:b\212\025\272\333&w\271\330\247\3428\203\010\237\270N\354+\272\266v2\272\206\342U\272\265\016\232:\326\317\'\272\006\373\224\272\213\200):\264\004G8$\322\244\2709Q\026:v\244\3229\363\'\330\271\236\346\277\271\354\02329a2d\271\205\240\277\271\032b\3419\341\225M\272\n?x\272\237^\t\272\030\241/\272\375 \2119\347\212M\271\263(\3728\314\232\2329\357\345\336\270\244/\3129\234\205#\270\324\025h9Er):E\3555\271\372Y\340\271\352\256#:\250_\3519t,\354\2715\256Y\271}\211U\272\241V\3039\271\032\304\270\035N\005\272\333\346\271\271\247\214\364\270\323\244\2178\351Il:c\205\207\272\232\004):\325\233\013\272\'\"\322\2710\272\2569\212\310\3159:\255\243\271\010\377n:\310j\3079\354\032\3309u\325\3467\233\022\223\271\342\344\022\272\234\2153\271YI\2448\037KZ\271\276Ui93~\3768\362o\005:1\352\3369/\216\205\271\234\352\240\271;\021\254\272\240\3452\272h{\240:\305\235i\271\232\214\227\271@\305\216:\027\"\356\270\025\225\':O\021)86\250H\272W\025\022:\2565>8\020\353\274\271G0\224\272R\343v9\230K6\272o\317\342\271@\376\243\272\020\360@:\345\363\2469P\007\323\271\346\020\2319MQ\2619\332\023y9=A\2739\357\370\010:f\002\020\272\007AA9\242\256s\271q7\3609/\013q\272\335\007o\271\013\333`\272\357\030\3019\"\266\2739NP\n:y\016\3538Y\312\006\272Jy\2229\025x\206\271\317\345\324\271\002\003\205:\007J\0339\223{\006\272\r/\022\272\303\273t:i\237\252\270-\\\000\271\364\"\200:\032FV9\315P\2319\323t\013\272P\2624:\362\206e9\245\205J\272\224\327\207:@\320k\271\323(K9\252\323H\272Sv&:k\277\n:\242.\3129\241\225{\271\3678%8\205\240\224\272\233UO\271M\027H\270\243\344\234\272f\311M:\370Z8\272\215\303\002\270ll\036:\365C\034:(\r\3718x\310\277\271\265S\\\271:\245\361\266\376\354)9r\355{\272>\340$\272P}v9oe\2109T:\020:Y\272I\272e*n\270Z\0147\272\005\355\313\2711\222J:HT]:\247\022\0136\276\206\263\272Q\17739\275\265\3009\364\031-9\225\025\212\266\2060\023\272I\200`\272c\342\204:4x\325\271\245\242\010:H\255\2118\335*\262\271\313\275\202\272\262\177\334\271q\261<:rw\r8\364\353\245\271\340<\214\271\220\336\242:^\035\031:H5\243:\020\337s9\377\203\025\272\271\357\006:)T\003\267\177\221M\271D\214\240\272\230\342\t9\001\376\257\271\215\250W:\260m\r:\356\251O:\237 \0338\357\262\n9\321!\030\272\364\273W\272\326\n\2079\276(\2369K\233\214\271\207N\225\2724l\2449\353\327b:\266\321\206\266\311.T\272IC\275\271\377\261\201\272\356aS:\206\034\377\270\035\256\2609kz\334\270\340\257\220\272\332\023\3719\371-3:\2779\030:\277\032L:\307\007\317\270\024@7\271\016\316l\271\231\257<\272&\036\20291j\2658L\242\025:o\344M:>\303\204\272\035\224P\271\265\211\'\272(uy:x\302\014:\026\326\010\272m}B9\357|\224:<u\3418a\351\204\271\314\361\213:\0164\241:\257\031o\266\361\350\242:2m\020\272?.E\271\032&\27382\235\2468\222YI\272\025\202\332\271\367X4:\375\364j\271\370v\30595\305\2349xR\0339J\260\3729\306\367\2239Y\037\2539\"B>\272\377B~\271\352\213\270\270\010\265\210:\337\207\027\2717_\245\271\271\313\350\271\355\235\2629\016\206\251\270\327\034H:\232K\276\271T\355\022\272\265:q9`\307\265\271\272\302\3619\344y&:u\344n\271\323\204l:\310\342\257\271\364O\2479\021ih\272\177\264\2429P\266>:\225\343\234\271\021j\3028B\242\3739\251H\324\2670l\310\271\320\034}\272\306m\340:#\367\020:(\216J:,G\217\266Xc\'9\242\025\000:\306_\0209\236\366\257::\255\037\272oE\333\271\271\317\304:\302>\207\2719?\224\271\\#\371\266\333\267\222\272\303%\216\271_O9\272S\374\205:`#\3469l\362$:\243\350\201\272t\251\3449\207\243+\272I\262\327\270\002;\302\270o\034\2079\026^\033\272\3502&\271\301^\241\271\346U\3469\255\247\302\271\002q9:\261\274e:\356\366>9\305L\262\271\320}\3149\221\241>:\r\245=9\033\213\3148\253\207\261\271k\3113:\036\302\241:\355\014\305\271\222.\032\272\341,7\271\027\342$:\035+a\272\267\215\3318\341Z1:?\212\345\271\316\273\242\272,\323\022:{\356\372\271\313h\036\272\207\'\272\272\"]\235:\014\024\206:f\210\245:\266l\236\271\221j\002:\267\326\2309\222o\":\261\264I\272\200S\371\271\217su\271\235\351\202:\003\211\t\271S%i\270\364\32629[]\212:\260\007\313\267pG\2438|\214b:+2O:\265\273\246:\266\323\347\267\355:09\253_\3758\250\376\235:\362\360\227:\347\234\0268\022\035\275\270\214\245\3278c2]\272\201\233L\271\213u\273\270(\250\314\272\325UM8\247W\322\270\210C\213\271G\236\233\272\363\336;\272\247\013\0309\275\236/:\3342n\272\032\0332\270\204\212\371\272\354%\267\272\000\nc9j*\3538\\\376\250\271\203\375\'8\333\023<:\352\221\216:\007t\260\271\372\002t:\220LM\267\000\r\030:\276\240t\272\377(y9(\217%\272\301\322\\9\205Nm9.F\331\271\035\315\2535\225\336\202:\315\003\203:@d\2029\246\322\2259kT\304\271\034\312\2519\262\206\252\270.\221\322\271\005\260\003\272\254yX:h\250\204\271\352n\211\272\030Ph\271?\027?9cR\020\272\272\n1:\324Ri\271VF\006\271;\335\2139,\341i\272P\260t8<\235\300\271\275\270\003:\376\355\2007\253U\001\272\365\321\021\272\373.\2138\273\036\216\271\245\036\306\270\335\255g:\247\241;9Q\247\3418\003A6\272%\017n:\023v\0138\020/\0229\261)\1779\376\306\3459\r\203*\271\370/\2349\363\366\215\271)\"Z9\233\250t\272}\253A\272\367w#:@\024T\271%-\2227\021\364z\272X\304L\272|\2108\272\217P\2478=\225\001\272;TE\272\216\306\0359\352\345\2647\036\234\263:PW\003\272\354\202g80\340\250\271d\310\367\271W\3708\270\351\207=:Ts&\272\323\312n6A\n\034:\364\222\3139\321\202\3639EF\334\270\316\"\223\272O\335\2759\355\350E\272\377\222\227\272\3628y:/\"2\272\213\200\363\271L\nL\272n\003\353\271\"\304\202:)\n\':\036~\362\270\324\2075\272\261\202\3009\277\255\207\272\250\360+\272\315\265\305\271\375~\2318TkX:\321\227a\272I|\327\271\252\342+:\033\276\20578\201\3467\t#\2008\2163\000\272\001 _:\025\034\0208Q\310E:\000\215\257\2726^N\2713>$9|W;\271S\342\034:\253\310D\271\277\252\003\272)\2712:\355\036\301\271`lN:\367\303=\272\326\347\3419Z\364\244:9\030\004\272\376\270\3409\361\373d\272\030\n&\272\320$\3649\"\324\026:Z\206\026:O\224\241\271\357\032\2529\305\362V\272\333\025\2719\300\273\3249\'\234\2647\321L!:\231\330\227:\027\231\356\271\305\230x9$\031\022:\332r\222\271x\365r9~\315A:\0209\3438\016(+:\312\261\3506\244\330\263\271q\354+:\347\276\000\271:\202\223:X\322\224\270BT\355\2723\214Y:$\313\224\272\001;\233:\214\332\340\270S\254b:\260O\230\272\355K\252\271\353\004\347\271\031\274l:q\343\013\272\013\242\327\270\346\204y\2712)2\272\354\"\0358\3430\016:\203\206>:\233\002R9\303\360\0218\244\004\0078\245O(:\276\004\017:\223\206\3549\310\026\3249\027\342M:\225K:\272\'\206O9\267\001\377\271\005\000\234\271m\206{:p\362\177\272\227\303\021\272\377\231\201\271x\002\357\271\037`\205\271[\202\3729t7h:\377\024\3718\207\307Y\272=4\321\272&K\363\271\265\250\0379-_\2369\231\215\3047K\024\035\272\263\314\001:\025\344z:\364\007\3329\004 \225\271\333=\020\272\034\006\225\272\243\246x\272\0227\3556\t=1:\336d%\272\2268\036:\223\310\3649\256mv\271\000\332\3459\374o\367\271\tw\033\2727\312\037\272\217\242\0309sF;\272\231\306\213\272n\256\222\271S/\3137\n)\0347Q\314\277\271~\272\2779q\020\2039e\314\3347\237l\003\271\210\246\270\270Bg\202:s\004\230\272\215\262u\271\342|\207:\246\013g:\352\'B:Q\314\r9\222\313\0049(\255U\272G\231g\272\337;r\271\036SH\272;\316\212\270\266\031\'\272\241\346\022\270]\234\2059YZ\2369F\317\2108\024\247\316\271\342\326\200:\270!\010:\n1\0269\323\227Y\272l\250+:%\321:\271\365\023\271\267\205\227\3437jo\2349~\006\020\271\262\315\3509\210\260\2079`\245\003:K%@\272\004N?\270\2709W:s\246\004\271lda\271\336\257\362\270\277\203\244\2704A\20684\302\3019sP_\272w\215\031\271\206)\206:\2568\200\271h\023\2319wte:\363\366\2067\260\r\330\270\372Pb9\235\256\2339\030\t\3779\017H\270\270 y\032:\377\311G\271\014!\2378\315u\254\271\"|F\272b\177^:\371\"\241\272\257\2148:6\347\2009X\254\0069\323\3300:\023?\000:\016a\2317\252\274w9\306\316\232:@\332\227\270\035(b:>\333\312\272#\214O:\351\244H\272\260\217O9\2374\236\272G\353k\271j\003\2539\020\316\237\271\001\273L\272\251]\247\272Z\325\260\271\035\277\3529\\17\270t\256d\272B\354\2559\3606\360\271\206=\0359\214\276\036\272\221V\215\271\332\256\226\270\327\341\2239>\227R\270c\356a\272c9u9\231\3003\271\303\253\274\270\220r\250:2\350\030:\205C\326\270\332\257\3028\240\204\335\271\235[\213:\334AG9\370\027\346\270lnZ:\361\213B:^\206!8\310\227l\272\205\220\3009\262\033\006:p\214\034\270#\254\351\271+mI:\031\356P:\271\341\2409\t(\211\272G\24009\027\250\013:\035\220\2369\001\217\333\271XaC:V\321R\272\221\203\3319j\320#:1\212\231\272\201\356\206\271\3757N\2710\235\0009rc\303\271\2026V:k\'99\\)U\271TB\306:h R8ZF\224:ds\017:\227\223S\272\221\373\367\271\036ZN\270d\375\323:\341A\013\272\253\270i:|\375\217\272\352\331_\271\346\354\016:\t\264\3638\275\301\364\271\350\037\207:\221\242\3739*\2277\271\234Gl:h\324X:\2462\202\272\331*\177\270\267\331 \272\231\367=\271\327T\004\272=\247\2649\350\267\025:F\034\017\272\377-\023\2728\377\275\272\024&0\272Kw\266\271\240\323\3549`:\3049\215(\235:^\214\3779\020\204,:Y\361\361\272D7\024\270.\370\254:\313\227\3149\227\253\"\270\025\260\3149b\233\336\267\256\212!\272j\224\022\272\326\227\017\272\"\306c:@\250\':\3340\356\271\205\240\205\272\306\177\224\271\3579\004\272\232\\\0319\022\210\345\270\367[=: \306\343\270\375j\223\272\330*\3229\320\020\033:\342\355E9X\031\35590&G:J8)\2721\243\035\271\300\354R:b:\376\271\000=\2179\376]&9\265\343\377\272o@\223:\007\223?\272\330\301\005:i\016e:v\006\301\271\273t)\271@\240\0019\234\317}:v\265\245\272\213\337\354\271\035R\005:\341\327c\272\306\326\250\272\352\270\007\267\305\277\2349\230\213\n\271q\036\2658\257h\2109\036\370\327\267\225\307\':\311.\3029[\335\205\270\004\324\250:\210\307\353\271\300_\2446\302\347\362\271+9l\271A:N9\221H\014\272\353\3625\271\326\353A\272\324\350\371\270\021 T\272\007FP9:v 9)\335\327\271\266\306\234\271\004OW\271\205\334:\271\236\315e8\311\337\327\271i\355\3129\271\265\034\272\317>y\271v\224l\271(L\030:\335\033\2559\303\3560:\007\335 \272\306AZ\272\370G}9\222\305|:\254\322\372\271Y|4:Fjr9\214\350j\271l,P:QU\216\271\261\002r\272\'\334[\271-<.\272\346`\216:\317W\307\271\324\216<7\222\222\354\271{m\007\272\356\037\2479\220\'\355\271\333\366V9\242v\207:\217\370\2149\211\274\3459\nAb\270:\361\204:>\355\242:qt\377\270\377\310\300\272`\273\262\271z\336\374\271q\275\2119\307\312\233\272\200\274i9^\250\004:/?\266\271\032P\3748\235\343*\271\213T\326\271f\014t:N\361\247\271F\001\243:NZ0\272\246\300\020\271\244tu\270S\261\2329ym\2729@/\232\272\255}R:=\275T8\321\33319\235\262E:\031Bj\271)3Q\271\345\313\355\272az\3719\372g\035\271\324[\036:\340\3242\272\367\"\272\272d\340F:AM6\272\356\006\236:E\236S9\313J\3259 1a\272r\225A\272\220+\310\270H\nW\271K\375\3769\335\014P\272\363\314>:J3E:\225\307\242\270qTx9\232@\250\271\2675\304\272k9\257\272\213F\2629\3167\005\272o\335\0139\345\275\2229\002\022;:=%\3469\251\020\262:\221\315h\270\t\022q\272\010\262\224\272\346\r\207:\255nT:Y\366\2679t\031Y9\016tL9\303\013\265\270\005\202\2238\"&\3168\302-\232\271\201\034\312\271\024\263:8\271JS\267\316\206\0029\314\016\':2M\r9\300\207\3219O\017=:>\025\204:Ux\313:\356s\2639Yo\3219\2357\251\272\340B&\272\215\371 :A\361`:\002cY\271\006\221\233\270U\020\0057\361\240\2009~\327\226\270lg\225\270\351\244\032;h\304\276:j\372i8B2\'\270F\216\3618\225_ \271J.W\272\355g4\272o\321h\271M\253K:a\215;:\255\342_:G0\257\271\204\315\211\271\343\034\032\271\202\363N9cRd\271\344SM\270et(9\300\246\355\270\233\324<\266*\027\30799\034\3339\003\251%:}\006\24196\373]9\"Fb9v\014\037\272\330K\':\374\300\204\272^\274\314:S>\222\2725\253\264\271\355a\366\271X\265\033:\257\333E\272\3150\2049n\232\210\272\003Y8\272\037\317\301:\326\005=\271sR\3619\340\"\302\271z\252u\272\025\252\3038o\t\000\272\"<\223\271\375\250\210\267\366\030\262:l\027*:\223[\360\271\304\363m:\211\266\231:%\277I:a\2763\272\240\346B\272\371\007\016\272\304\336\204\272N\23677\213\030\373\271\177\371s\271\275\334\231\271t\233\0227\267\220\260:\236?\250:\177ee\271\177T(9\344\335\2038\244K\201\270\0262\252:\374\310X\2721K*:\306\230\236\271?\243\2059\353\025\307\271\274Uv\271\354\\L9,\256):F\363\\9\007T\222\271\0236\227\271&F6\266{\253\271\272\212\2057:\256I\260\271\030q\021:\320\323\227:IV\204\272\360u\007\272p%\3016\305\344*:\222\316\340\267\026\356\330\271\272\036\000:\273j\'\272&\234\314\271H\350\267\271<\3405\270\000xl9\225\025\2759\217\024\3249\236p\240:\035D\0337\267~b9\272E\212\271\264\310p\270Y\211u9\327(\024:\230[\362\271\241\253\017\272D\337U\271u\222\1779\240\322\203\272gS\235\270\356\313\3379O}\035:\260\'j\272\213\000&:[}\244\270\"\216\332\270\300\\\3748S\231\3239\205\275-\272;\205\006:\265\366y:X^P\272\204By\270\265IH\272\024\201\033\272a\203\021\272zN\303\272\233\360K:\027\372\3069\t9\000\272\372\332\3377k\361\201\272\364b\227:2\314\256\271\001\005\3409\335\024j\272\021\031\023:\177\252\356\270\364\010\207\272T\312\2209\022L\214\272\335O\2769\215\347\263\271\3050\2079\340\024\206\270\221Xh\271\237\220\211\271\200\316p\267\306h\2309\241^|9ZhQ\271\336\241\3278]\027$\272)\320\2139\006\307L\270\307_\2779\316\214\233:x\2569:\334:T:\233\016\2049\224M\3749\331\2373\272)h\3439\361<\361\271\204i\261\271\305\347<\271\222\371\353\272z\000\2507\021n\030\271EC\202\271a\302J\272\360\343c\271{\010=:\220\270\313\271 \210\221\2722\210\037\272\3049<\2720\220\207:\344\231\217:\3058:7r\t\2349\354\227\003\271@\002\03589\265g9\324P\035\271\226\356\3338Rbd9\267Y\364\271SO\2448\344=%:a}\342\271\030\237\231\267\271\344\033:\321\226\257\271\237\363\022\272\225;8:\034\354\3778\371\r\253\271>y\n:\263\241C\272\'\250Y\272d\310s9\354\340\010:\026H!7t\276V9\357>\'\271\002%\304\271o\306B\272\351vJ\272\360KX\271\221D\2179\'\005\035\272\345\323\336\271RW\246:\264A\345\271\221\036\375\271YD\t\270-\201\020:L#R:h\207q\271>\211\350\270]R\005:g\200x:\267\363\204\272l\234\3009F\331=:W\211\245:{8>\271qG\225\272\304\3434\272\312:@\272.\377C9\323\222\t8\200\274X\270\237\302\204\272\177+\232\2712\23149?\211S:Sm>\271\350\305\033\272ql\217\266\350|\016:v\004\202\272;\204D7\356\206\2409\030\202\3018Ds\003:\260\225e\272\261\237\242\2702\367\032:\033\217\325:^f\211\270\366\2240\272#\247A\271\002#\024\272\242\327a\271\227`\257\271\364b\3639\252GU:b\236\350\267\3156\351\271n\344\3339\3528Q:\226\260\2059\2352\314\2712\004\3529\375\331\3269\\O_9\336\225\3318T\207;\271m\260\204:\010j\305\2718\231\2308\377\306\276\271<\247\3449\222RZ\272Q\264\272\272\235w\2009Z\265\0078\243t\376\271\362\276\0019F?\235\270-\323\3258\306\234\306\271\205\255\036:\341\315\'\271-e\002:\252\201\275\271\301\217):\221e\343\270D\246{9\251W\271\267\014\333\250\271XB\227\272U:\00490\364\350\271\t~\202\270\206_\2058\014\347~\270r\0343\272{\373H:\024\005-\272\250\312\0109\206\345S\272\234\300\0269=S\241\271\351\'\017\271\004\254\020:\243\320?\272E\331\003\271\032Yj:\03464\271|\265\3319*V\230\271\311\027\347\270m*Q:\270\037*7\207\034>:Z\315\234\271\036\222,:\020E\322\271\031I\301\271\236+\t:nH\362\271\030W>\272T\357\035\272\000z,:\270\266r:\265\037\002:6{_93\324\223:\257%\2139\374\341\362\271\017\034\2118N8\263\271\273T\3228\375\336\240\271\317UD:A\304\374\271OtH9\255\\\2279\335\366\325\271N.x9U3\376\271\370\177\2136\223d :\324\211\n:\033L,:\365\360\t9\003\242\344\272q\275\214\271\013B\035\272\311\221\3129\240\017\3169\254:\2239\016G_\270\223\335\2438:\210\020\272\221\311N:\206\213\2429\263\035\0149\004\206\2119\317\232T\271\007|\3258\213\356\237:\304\305\371\270\273\362\244\270\022[\222\272\3255\3359u\365M:\370\351K:\303\214M:[\205Q\272\315\275\253\272:\241H:B\316;:z\275\343\272\010\265\3377\n\346\004\272\022\270\303\270\027\024\3249\342\354s9u\366~\272\364\251\217:\007&d:@\233\3079]\354\001\273\031\215-\272\265\374\256\271A\3527\2728S\374\271t\303D\272\372\021\0239\364\014;:\032\276m\271\264~\'\272kS\315\270\216\254E:w\242\322\271\231`\3569L\301\322\271^\307\"7`\302\3229\362\207\310\271 [\002:\000\270S6\017,\251: \221g\272\013\214\313\271P\225;9l\035k:\\\236\3409\033%<\270I\004U\272\'1\313\270\235C%\272J\247\00795\00329\275\0249\272\320\244\325\266\007O<:\3321:\272*i\3369Q.\227:YX\232:\326\002\335\271M\216\256\272\325>\310\271\373\356g8\026\177B\272\245A?9omo:\263\n\2337\004\246Z\265\246\351\306:\377\343V9.\324V\2727#\006\2725V\353\271\246d\0219\262s\3349R\377\220\272xnH\272\326\001\2569v\022\2539=\371\0249\010a\3109H\021q9\310\213\313:@\222\255\271\345\262\032\272\367^\3058\007G\225\271P7~\27120}\271\337\334\3179\030\035s\271#D\372\271\022\231\230\271\255\371\323\272\256U\334\271\\\'\034\271oW>9\307\341f\270~\234\032\272\347\037K\272\257\t\352\271\017\262\021\271@x;:-\374\2278\230|*:\347\030 \271\2209\201\271\345\207U:\207M \272\221[$:<\366\331\270\371Vg9\347\344\025\271K\346\243\271j2v\271\204\022\033:>\332\t\272K\035k\271\370:\002\272\261\215\2407\025\001\021:\257\346\032:PM\321\271\271\354\256\272\306\336\264\271\217\210\001\2739\027\007\273\rq\035\271\rd :\215\312\021:\366:\362\271\306K\001:!\204\367\270\317\371Z\272\262B\344:\324\206\324\271\2375\0109d\026\347\271\204\241\3419\013\371t\272\242\267W:\216=D\272\323\205\242\271\226+\223:\225\275I\272;C\2079\224| 6w\203\3027CB\207\272\007y\262:\014\026\264\270S\024>\272\375n\3438\341\007\221\271\313z\020:Y\034\274\270&O\214\272\213\3414\272\271\376\2378\365M\242:Lm\3439\356:\033:K\016\227\2726!\':\335\273M\272?\224\002:\315\034\234\270\031\235i:*i\305\271\231\267\270\272\320\324\300\271\222y\3317Nb\3358\223\236\336\271\206\020I9`R\345\271\302\350$\272\272\013\0059\322\356X:\247K\250\271\241\030j:\361:F\272\355\327\272:>\225\'\270L\177}\271i\277]:_\010\371\271\266oR9[v\311\271\314\267\273\272c\371\3019]]\025:@\343\024\272\336\003\005\271\205Ug\272\302\334\262\270\254R\005\272W3\006\272\227\203\260\272\324\347\253:\201\021&\272L\r\304\270\271\2405\272C7\360\271\014\014\2637\022n\216\271@\032r:g=57\266\331\"\2717\306\202:\277\365\341\270\257\306\2519\352\001\036:\375\242\261\271\314\276\027\2708\203\2169\246\237\000\271\221}!:\217L\205\271*n\352\271\372\222X\272\014\034`8NeH\272\252\' :\274\265\177\272JH\2619\340\305S\272w\335\035\272O\223\216\272\330\355W:\036\354\257:\331\253|:\276\"H:\277\240\203\267\n-p\271\312\250\342\270\225x\202\271\033\016c:\232\263\\\2715\346\27698\334\261\272\370\003\2559\223\233\244:\250\323\035:_Z\2329V!\005:j\025=\271o\250k9\275\025k\272$\377\2319FY)\272\034\302[:\002\351+:\261:\242\271\022\250_\270\"\234o9\272W5:\017<\3339\276\253\341\267\nv\372\271\213\303\230:t\271\357\271\026\211H:u\022D:\037\323\3459\276\032\242:O\207\006\272va\3119\237\341\2348\357\323\247\271-\261\3079\337n\314\271\207\n\243\270\001\037\232:\300\377\3469\345c\010:\003\250\325\271\257</:7P\007:\267J\256\271\256G\2539+\253\2749\355N\03391\006\3518\"?\253:\210@\237\271=\322i:\350[\330\266\'\004\232\272\357\000\036:\227w\3009M=\026\271M\335\307\271\323r\3069\t\216\026:E\207)9 fF:^zl\272\272Cu:\301XM\271\355\264I\271\037\266\32299\013\234\271\246wh:\236\207\211:\202(&:\377\353P\271\017\345\275\271B\356\3229\3146\236:\350\t$:0[N\271[8\035\272\031\217\301\272}\253\212\2704js\272w\244\037:\363g\006:M\336!\272\267%q\271\'\26649\360T\3648\305%Z:\331\345v:\325{\203\271Q\362\324\271\\\263\352\271\016[&\272\200\367a:8D\2029\250!e\272s\234[\270I\323\353\271\263\201\326\271l\033\206\267fs\023\272zx\0029\364>\3108\025\241H\272\263\225\3769\305\325,9{\326~:0\221\216\272\034\267O\272\240;+\272y\250\001:\366\364\315\271\353\231\205\272\226cO\272\013w\350\271\376\004\177:\332\367k\272\231$\0049\264!h\272\372Go\272\343cF\272\202Z\2529\371\016\3209\240O\2047\261.\016\271\231\212\226\270I\022\2459\225\213u\272jn\037\272\007\321\305\271v\320\n\272\232\002\002\271\001.\3349\323B\\:\030sX9l2\2468\264\345U8\n\243\000\272\324,_9\027\277\217\271\250Gb:\025A\2639\372\212\301\271y\272\254\267q\024+:\325\273\0379f\311Y\272\223\260\035\272\007<\335\270\205\034\226\271\252#\007\272\314\205R:\264\237!\272g\356N:\256c[\271\351(j\271\231\375\303\272\035\252\277\271\347\373\266\272\363\241\034\266o\202N\272\311\374\363\270c)\n:y\320}:\271\375q9\337dF\272\372\316-\2725\\\212\272d\240\365\271\2548:\272f\263\320\271\n\036\243\271\037,!:\313\177m:\243\247\305\270\304\314\020\272\2041\2259\301p\2638z\257t\271\214\227\215\271;\321,8\244\230S9\307)\260\271\230\315\225:\222%\361\271z*\343\271\246\362\215\271\2002W\270\234\244\256\270\275\345\0109\305\021\276\271\333Mx\272\300\010\3659n\332-\272\252\336T9\231$\3679\237\255\2249\217i\2758N\213\357:\367\224O:\305P\3519\273\312\2728\253@\265\270\366\'g\271_E\251\272\347\356\270\271\2279\004\272\231\364\3008)\266\341\267\341.\212\272W\364\200\272\020\000\2209t=\2659U\036\3669\323o\230\272\236\232\020\272\\\204@\272\317\035\2206\021!7:\211\263\2479r\021\2668(i\3559\006g\2459\266\362\201:m\314x\267\366\342c\271\241<\27696\303\205:\230%.\271\014\362Q:\272c\2459\275`\004:\326O\"8WZ\352\271\\\311^\272\222$\374\270\256\220\2029\361\\\035\271\177h\240\270\264y\323:w\333 :w1\3029U\317M9\356m\3259\034\256\024\271\2560\314\270\331(\331\271\267\256\3569`\027\034\272\"n\370\271\332\014a\270\326N\017:\006\304\271\267\251\214\211:\010\177\257:\340\002g9\343B+:\275\201o\272\206UK9\013}\2529\333Q3\272e\230|\272\222\272\016:\n\247\221\272n\365G:\317R\373\271\223\224\232\271\313H\2138\271\0053:\373\240>\270\344\267\021:\230\255(\272>\005\0319\272\221\004:9mh:\303\350\2418P\032D9\302\365C\272\353{S\271O\374\321:\023E\354\271\270\253\274\272iF\3209Qt\0148\030\273\2409e@\315\271\341\242?\272\024\021W9\035\370j:\020\036\003\272?\226\0369E\21129\232N\2329I\355\027:\374\203\266\271\017\353\374\271\351\206\3629#F\325\272\376\340G\271k:4:E\333\2219cSi\271\306@\245\2724Yq\272\276\362t:aCU\272x8\202\270\320[\2369\357d\2609\346U\353\271\223\350\0369\237G\256:\177\301]\272\036\244\237\272_\020\311\271\212\323\347\271\251\014#:\236\201\0379\001?\334\271\220\024R8m\rG:lf\335\271\372\336\271\270\354\220\0178\227\262\233\272\256f\274\271\006)\3138\273\323\"\272\242\004\2258\013\252h\271\212y\316\271\336\323k:\354\365q\272\341\362\354\271\372r(:\203$\000\272\334 \241\271Q\n\262\271~A38Q\354_:\371\253f\272\311\207t\271\215\343\237\271\375S;\272\304\'\201\271r7\2259\317\312\234:\005\262\346\271\333u\253:{\031\3549W\361\016:\237\340\221\272\035\364\\\272\023\365\262:{\026\3309p\365\017\2708ef\272<C\256: \206u\272t\315S\271Y\3327:=\367s\272\255\001\332\267?\340\332\271G\201N\271P\374\224:\372<\0179&\302\3279\206&&\270\356\255\016\272=\314h\270\324\200\317:g\327y9^\373\2137\260\336o\271at\360\271\337_)\271\215h\342\271\341%\347\271\'\037\035:\325\356d:\262\013\3449U4,8\002\0308:O\2010:\002\324\261\271^n\n:\206Y\2269g\357T:\005\216C\272K\243\2519e\006\220\271\211\242?9\251\251\227\271\271H\267\271xa\3669l*7:\3366\2057\341vN\272\017}\201:\344\362J9C\235*\272\177\"\2229\020D\244\270a\251\375\271i\310\2759;\326\004\272h\234\202\271\344\315Q\271\360\307=9^J\222\271\371I\320\271\034\345\3339\267\213G\272\005\325\215:\000\250L\272P\326b\272\323\314\n6J\033\3229\345\210`9\200\247Y\271^65\272\0059&98\341\3319\344AI\271\001\2272\272Y\265\3609\341+U\272\215\033\201:\014E\3359\364\026\306\272P$\006\271\327c\202\272\375\0310:V+\321\271P$\0359\321\n!\272\022.U:\372G\2269T\370E9\344\245k\271\267\374\004:\311\314\251\271F\007\267\270tM`8\032-\3359\370|&\272\3523\020\271.\272\302\271\376$\3279\340\360\207\271u\310\021:3\t\"\272\224\225\0108\316 1:IF\347\271\205\250^\272\360A\002\272\355\333\035:\177y0\271!>\203:\324\355\320:\240;\212\272A\331\2409\204T\016:\006\363\2059\365|\1779\333\026\2179\035\353\237\271\204c@:\266\177k\270\345\264\306\271\313\021+:\003T\351\271\344\016\023\271@1\2629\244O\005:\316QO:j::\272\237\377\302\271VT\3319\001j\034\272~\000<:\245\262\214\272\377\345=\271`pd\271h\021\237\271$\255=7J\234\017\271\227\2700:\317#b\271N\023\345\271g\t]\272\334(M:\220\250\2119\337\360\r\272$+t8g\214\3018YJ\001:\261Vg\271O\261\246:d\2730\272L>[9\214f\3548r_\352\271\217S\007\272\216\254\273\271\016\"\020\272\202;\3129@\331I:V\037\0149\250\354\":0\034\034:Q\234\206\267\035\024{:r\212o9K\226\273\2715\364\26587\237\013\272\205@p\271<!`9\270\177<\271)\213N:\013\020V\270\204/\344\272\010\276\227:\324\324\r:\010\211A\270\311\312M:\211\376\200:,\027Q\271*v\371\271\"j\265\2670.N:F\334p\272\207\200\32789\360\037\272\221\276\2039\341\227\2468n\305\3468\212\276~9\350\000k\267\277\251\272\270_\311u:H\030\3629\0033B\272|xt\272%\364\355\271\311\327/9\333>?:\354\366&\272\013C^9R\366\307\267\270W\201\272\273\tp\272\377~T\272R\345\235:\027*f\270\374G\007\272\000*7:z\222\231\266\337O8\272kv\221\270nl\3039\325\027x:EVG:\320}\2018\377\336*9zn0:\305b\222:y\211\"9\267\246\3567If\220:\205y\2028\005\251/8eW\031\271}\307\217\271\335\367\2009y\311\307\271@S\230\271\034\035\312\271\251\250\0035\316\007G:G\375:\272\317\244\2127\370\202\007:3\325-\272\330\375\243\267\313E\2118=\366P\271\226K\n9n\320\335\271\370\034M\272\335\216_:\322Y\025:\014\031\030\272\253\335\2329Z\237\030:\244\337\020\2722\2655:\266\006\3768\n\013t:x:=:\301$\033\271#\220\243\267\337\327\366\271C\236\206\271\223\2204\271t@V:\002\343\010\271\034\277`9\037\037?\272\n\246D\272\242\261\203\272 \243\2367\364b\2417)L\r8,A\373\271\020\355j\272\273\010R\270Jg\t\2726\\\0048 \272\327\271\321\243\032\270}\372-:h&\201\272\272L\350\271\000\202\r:SW\006:^\003\277\271H\010\352\271\301\255,:1B09~0\007:\t\r\200\272\023\355w\271\\\267\3408\233u!\270\177\324\3249Y\375\337\271\260Pf8\256\322`\270Qv\3629\375\004}:X2\253\271m|19\257\237\2709g\242\350:g%\3069\347%O\272\211oq8\027\324(:\2760\222\271\271\016\221:M=&\272\323J\214:o\207\35498\023.:\034\375\265\271m\370\200\272x34\272\327|\005\272\377\307\030\2715h&9\217\024\201\271\177\205\025:\245\024.:\023\264\3248\0305\3009\212\212N\271\37647\272,\206\037:\355\344\362\271\027\253&:\262\276\\\272\2508:\272\032\221\271\271\002\337A\272Z\226p\272\304\036G\272L\317O\271M\300N\271LP\323\271\202\315\000:\337\352\0349<4\2239\343\323>\272\276\"\240:\345?\003\272u.\3229c\024\247\2676\\\001\272\004z\024:\210\0342:\033J\306\271\310\231\2119/l\3279k\034\227\272\243M\266\271\230^4\272T\203\345\2708\261\004\272vE\000:\341\323\022\271a\357?\272m\'\342\267\263L\326\271\224\304\2717\t\366\301\271\271/\232\271?-\213\271\356\230\32487pE:\347\022\t\270%E\351\271d\230\031:\323\3008\271\"\237\2419n\034\0319!~\241\2713\360\242\271\213j\301:\232\206q:s\242\201\271\342\333\243\2715\027k:_\032\'8\350\372\013\272\365$\0369r\002):{k\333\271]\306\2468\360F{\271\'z\005\271\'\003\250\2728\367{:\264\323,\271\036\356l:\365O\325\272[\244\354\270\324\364\330\270\205\000\246\271:\267\000:\212\311\254\270\376\3428\272\225\261\033\272g\357r:\231|\223\270\205\224\211\27174\2069\3209\30182\343\2008\222\335\240\271\364\'I9m\271U\272\214\210::\017\214\031:\021\020\265\270\233\311\246\2726c\246\272\\\232\3209#\267\250\272\230O\252\2720\350\2436\006Z\207:\240L\255\271T\240S\271$\031\2779\030\370\234\272e|\257\272;f.\272\315<\2479\364\356Y\271\311\247\201:Y\177\2509X\002\244\272\326\177,\271\303p1\271d*\3259\335\275\014\270\352a\225\270\333h\334\271\n\307a\270\217DY9\267\302H:\205.\3349\200\001\245\271\276\25539i(\022\272v\304\357\271\274\026\332\270\370\276u\2722w\2429\'\2659:i\343\3679\231\001\2229\357h\273\272c\036n\272\004!\3079\335#\3249pW\306\271\272\306\243\271J\367/\272\320v\227:.\t\002:\253\200\2458\226F\322\271\246.\244:\342\313W\272qV+9\235\003=\270\247\260\3409\321d`\272\361\2570\272\306\357\2108HT\353\271\007\305M\266G\002\027\272\\\253{:\362\004\210:\375\27787G\271a:?Z\005\272\013zR9\031\341\324\272F\374\'\2719\177\3279\316#R:\364$\35694\036\20395\236p\267k\032\2549mz\3156q~\2568\000\257\222\271\201\277\261\271\260m\2528\2724Y:k\345\2409\361f\356\271!\241e\270My\35280,$\272H3\226\271\026\037\t9\202\222\2139\241\377>:\216\352\3669\353F\3169g\327\362\271>\311\010\272\0223\013:\356\277\2639i\033\314\271\334w\022\271o@|\272\373\326\206:\021 f:\200\016\2169\342\246,\272i\212\027\272=\275\024:\317U\2129\350uO92\370_\272#s\022:\371\020?\271\362n\030\272\226>\331\271\370\365\200:\262\32169\223\0200\271p\210\224\271!\246\021\272\233\212(\272\243\223\2568\242\321U\272\325\244{\2729\016\2639\337\010Y\272\202\"I:\"(\230:\025R\3449\3515\333\271\373\024S\271\r*\3409\215\0330\271\224W7:8169\331\223O:y\001\2429\250Q\0359\0273\0269@\274\2579W&\2519b\301\004\272\3658\3709\242\357\035:N_\2428\344#\262\271\342\361\2179\243\201\2579\222-|76\360=\270\373\007\204\27110}:g\346\231\272$\257t\271a\234\2549\357\264\3629\2527Z6\301\024\002\270\233D\030\272\347\007\31097D\216\272\231$\263\270\227a\3129\273wj9\265\270\0309EV\034\270E\343\2129\263\334\2529@\032\313\267+\212\"\272\251g.:\326\032Y:\354u\t\271\356\203m\272\256\032\336\271\024\267\243:\360\244\2669\210\226\':`\013\034\270\255^\354\267Lz\2009\005\226\2608\007\201\31065J\013\271\367`<\272!\265\272\271\236\020\002:f~D94,\250:\355\000\300\266d^=:\020\232\273\270\tN\3669{\020j\272\013\243J:\227\347\032:t\260z\272\364.\3349M\222\2728\305\304\2619=\350&:\342\220\361:\373\211\006\272\014D89\0005\266\271P\277\023\272\232\232m\271\371\325\021:\330Re:\3212\303\272U\315\3439$\006\212\271\022\026\301\271R2\212\2723g\022:i\377\313\271\320\361$:\355X3:\001\240\034:\3211\0219\200\302\2209\233$\342\270q>\"\272\004\267\342\271\300\372\257\271\205\350\200\271\277>\320\267=x\200\2726R\n:\375\262\244\271\010;\n:R\365G\272\030\320T:\226{\246:6\215\37483\374?\272\355\350b\270M\354\244\271\n\312\210\271\212\350\245\271\356\252n9\261p\233\270\023>e\272\252\325\3559\316\362\333\271H\002\2059\273\257\232\2706\377\307\271\336\327\223:O\320\311\267\311\200\3409\230\006k8\302\307\002\272Z\377H\272N6\273\271s\0102\272@o,:\030\313\377\271\226\311\374\271\277[\3329\0165@9\215Y\3039\201\013\36596\000\202:C\273N:>I\364\271w\323\213\272@\263^\267\312\223Y8i\315\365\270\005\312\360\271\216\331\r\272\234\301=9\024\200\367\271\364]\217\272m\334+\270\255\200\2519\022n?:\004[\3658\337\256b\272]\345\376\270\2127\315:\202\253\3249\002\372\241:\303\254N9R\007\0249\013\371\3108\364Q\212\271\027W&:\272\227\250\270X\300\"\272\327\320#\271\177\216[\267o\211\0208\346\241C\271\221mN\272\247Z\244\272O\366d:\322B\206\270\274J\207\271\rCf9r\315\305\271v\304(8\230\336O\271\354&\2269\207B\346\271\232&(\272Y\367\2304{x!\270\035\002\314\271\247Ro9\000\027\365\270\225a5:4\270\270\271n\020\2638\374\027Q:\327t\024:\254\223y\270b\346q9Xf\n9\240B!::)\2459f\310\241:\234\321\2319\020\025Y:\344v}8\241\321\0108dQZ:\274\362\3339\276\032F:2\035\364\271\333\352\223\272\327+\3779Ua\n:\305`\246::\221\2409\324\254\350\271\245\037C9,\207\2409\375;\r9\264\026E:\231\270`\271\223}\200\2726\210\20691\214\355\271\333\033\t\272\017\021\010\272\'?\276\271\002\225\005:\344\021\000\271\332\3352\272PE\037\272#i\0169@6\014:B\350\2209\341\315\334:\204s\25383q\203\272\tc\3239S\271\3057\001\256\t\272\2045\342:!s\2479\306\"`:d\255>\272\235\332\370\270\232tA\272Y\351\230\272A\2379\272\270\321\263\271-\312\330\2718\261\n:\236\026\263\270\326u\005\272H\374U\271\241\274\033\272\365gz\271\202\356\204\272\316n\262\272\335\037\303:\243\025\270\267\264+\246\267R#\3128\217S\0329\311\356\2339\220\211\016\272~v\307:\3575>:\tu\224\270\004\023\003\272\303i\3259M\311\037\272\300\267\266:\026\031\r9 C.8\235?\3359\350\217\3069\216\236\032\272\254\211\016:\024\356\0069\354D\2019fcK:mq\023\272\2511\233:Pu\222\271<\000[\271\014(n9\257\206\224\272\177\314\006:8$W9\362C\211\270\347\376\224:\254\315\203:\247\211J\272\364\241\001\272\312x\2409uWH\265\024\350#9K\024O:\374m\0378\204\315\013:j\374\2169o\354<9\315q\3229\326\327e6\261\307\323\271\267\025\347\2717\344\"\272\274m\027\270R\370\205:\351\374X\271\'\303\t\271n\'\205\270\253s\2478S\303j93\2212\272\371\214\273\271\254\324\211\272C\342<:Q\3177\272wd\210\272$&\273\271\350\322\236\271*\035\340\271\261\337\327\271Z\265\'\272\376C\215\270\341\317\22090\205\263\271\337#i\272`&\005:M\2707\272p\000~\272\227\037P\272^\251\244\270\257p\2529#MZ\272j\374\0269\257\006\205\272#\'\034\272\240\026\0229\247\352\2558 \304\2407\3704\214:=*\210\272iBu\271@\335#\271\210\357\265\270\266F-9\376\363\3166*\230\2549|\215\236\271\371\021\307\270\276`\215:\301\223\203\271\2546\2679k\331\2109\333Q\366\271/\225\2448\262\361\310\271\252~\2549\t\233p\272\225\214\0109\261\021\024\272:(\3309z\317@:\245\334+:#\010B7\321\3429:\344\202\305\271\316H\2237-z\322\270}.c\272\310[0\272\001\r\254:\34322:\330\017\3579P\354S\272\306\243A:\030OW\272\377\017V81\177\024\272\257\240%\272\267U3\272\321X\0359\010G[\270\251K\2677\237\210<:\307\377t\270\355h\212:_\271Y:j\'e9<\235\035:\324c\026\271p\024\2628\"G\0029\2003=:\365\330\\9V\265\007:\220\362\3609\3078c9\256\277O9\365\367\t9\3017\023:\000 $\271\026\232R\272P\033\3635\260h\216\271\275Q\\\272\246\322\244\272\311ZW\271\203\014\226:\373\014i\271iMn\271k\275k9*\037\"\271Sa7\271o]\331\265V\205\2679\201\267\253:\030Q\335\271\035\215[9\204#8\272\271\245\013\272{A\261\271\262\003r:\263\207\215\272\363,\013\272dP\017\272\343\233\021:\273\217\215\272\207\341\345\270\3564\3408b\031\314\266{\205\2248\251\240\2439$\026\256\271\270\223;\272\324\016\230\271\250\022\200\272\351\231\256\270v\351I\272T\037\200:\355\351\243\2712M\321\272\363\361\342\271\373\322\241:P_=:\350\344\300\271V\253\004\271K\247\200\272K\221\356\271\254\262\246:L\336\014\272\305,v:\307E\007:n:\202\272\017\233\2117\231\231\031\272\003\014\205\271\266\232\2269\363\010k\271\361\210\3278\251\2030\272\251\236P\267}\376\2569\356q\2667!\316\2708\312P\014:\3407P:\310\010\261\270\355\3069\272Xe\r9.\352\017:\205\333\250\271}\261t:WN\007:\354.\2526\014H\0069\365\034\020\272n1\241:\370*\"9\300\035\2219:\224\3609@\207\266\271\376\300W:\272|z\272=\256\3109\006\0251:,v::\02290\272d\216\241\271\353\354\3149\247\245\3059\"9\3379\333\303\0205\322E+:cu\321\270I]\363\271q\244\271:\272\026a9 \254\212\272\331\362\340\271\026R\210\271\026\202\347\270\356I\322\270U\377\200\272\210\330\313\272\347M\203\271\257\277\317\267\300\306\341\271\340d7\272r\021c\272\345!\007:\005\211,9\347\3271:\267\177\0068(\035\34086\371n\272\242|\3049i\355,\272P\267\0218\303K\034:\270,\345\271n%+\272\013\207\2358\253c\02183\220C8\235\376=\272\324\346\257\272\267{\243\270\350\n]\272a\035\3309\266k\3659X\016`\271u;\3748\201@\3218\314\3473\272\313\024\t\271\311e\332\270w\377\201:\324\326\275\271\242SR\271,\206\207\271^\312Z:\351J\353\271 F\207:Y)\035\271v\003\311\2719\262r\272\030\333Z\270\267\270<9\242\356\2148\337x\31688\225\":n\030\2108\331&\024:t0\024\270\361\263o\271\333\363\036:\002\335F:\227\254\r\272(\255w\271*\245{9\350\323\177\270\314\303l:\t\362\265\271\261)C:K\267\207\270O\0364\272\246\226\010\272\233\334\221\272\020\376`\271\'\225\001\270\322\262\327\271m/.:\377D\24374\320\3239\0243\320:\374:H\272<\247\001\271\250\376\002\272hXc:\337\'\261\272\303\227$\272\02066:\271\033$\271\23263:\3565\222\272\226\220S\272,\273\275\267\332^&\270/\233s:nK\207\272\013Q\360\271\364h\2628M\321\261\271wC\226:\274\013\026\272O3\244:\247\227F:\007\340[:\377\257\265:!\344\317\272\303\177\3319\216er:W\377\001\271A\r\230:\220\264\2329L\276\345\271Mg\037:\244\227\360\271~\r\2348\355\033\t\272\225\351|\272\246<\215\272\225\317\034\272d\321\022\272\357[\010\272\326\300\307\271\374\267\215\271T\020\252\272\001\300\3459\205\274\320\272\367\3254\272|\224\014\271\016)\2179vq\013:\247\224\201\271a\001/:~\231\005:\376\324\310\271\363\273^9\347w0\272\362\270W\271/\241\2359r\030\t\272\300V\314:\257\226f:\377\255\2408\350r\206:\333\354\034\272\026ij8\345\224\337\271\274t\317\271\327\210\016\270n\276F:\313\224\3209\013qi\272\027q\241\271h\374\2069\312|8\271+4\2379\r\032z\270Q#\t9n\376;8>#;9{\013 \272^\376\027\272\010%\354\271\027P\2709\037\337\342\270\317\363+\271\315\322\2649I\016\371\271\252\010n\271\022\022C:\303\007\217:\252\367L\272\213\324\267\272\266\006\264\272=&\023\272yUN\272w\250\203\272\034\342\":\222\271y\270(e\2759s9\263\271\240\333\':\363\006\200:7\230\237:\nr&\272\'e\013\272\371\"\247\271$N\3719\031|\277\271\222M!\272:\315/\271\3505\311\272\022\017\016\271z\304\035\272Ll\245\267\002\ny9\333\321!:\334\324\000\2719H\3279\237\370\230:\300\020\204\272H\2015\272\355\344\0069\032(f9\017\265g:\252\226\20683\310\3748\313\366\212\272kfE\272EJ\3279\t\276i\272\200\244\234:\321\376\305\266\272\024P\271{)\322\271\221\304\3038\210\213T\272\311\340\2149o6\251\272\223\331s:!\322\2578>\035):\232\353\254\271\306\247\023\272_Pd\271?\335\331\267W\211E\272O\r(8\321,\323\270\232N\302\272\217\213\203\270\276q\223\272\260\274=9`cd9\\\203^\271+I\3659\031P\2579\215W\031\272\326\005\017\271\260\037S9\315\363O\272\340\3122:\251\325\2759\247\3130\272B\257\335:\202\314i:n\351\3418\226\266\323:\035K\'9\361\322>\272v\205B\271\226\005\262\272\326\307\207:\035\361-:\331\207?:\220\223&\272J\224\037:\013\336\2607Z\r\230\271\311\023\214\270\215u\337\271\017\320h\272\014\315\376\271_\235\372\271\343n\222\2724me\272F?\372\271o4h9Z\321\374\271E\341\366\270\300\201_95X\3517\252\"J:>\272$9\225~\3676I\266D\272\367\236\363\270b\243\0059@\306\3249T\222\37492g\020\272z\017\025\2722D :\343\321\264\271]\360G\271\312,\345\270\346Z\335\271\203\347E:\251^\305\271_\240\016:\2320]91(\2609\311\357l:\335\3761:\220\203G9\234\363w\271\203,\017\272\037\265s9\013\375*\270W\r\200\272\255\232\331\270\357\245\235\270\034}\251\267\013\350\242:|\355\2469\022\356\300\272\250\322\300\271y\335\275\271c\226\0148\366\211\005\2713#\001:\216\246e:\220\'\215:dJ\2179\3253x9\251\265\3219\350\355b:~\316\n:\002\207\275\270\260\\\2659\377\232G\270JA\003\272\362\215:\272\014\273*\272\340\365w\266\021m\225\272\346\373\3149\370\036\034\272\206\221\221\267\276Ue:o\366H\272\321Y\027:\2474\242\272\374J@\272F\201\232:\355U\032:]n\2619\314\t<\271\232B,\2728ec\271\220<X9\017!\020\272\263\030h:\367\024\2119\026@q9~\270\326\271\216\213\364\271\276\313\3229\3249\256:\253\345\2778\021\rR\272/>\273\272U\312\0359\000\030x\271`B7:\262|\3109\274\207\2509\003\344\241:\365\243f\272\313B]\272QN\3559\247D\323:>O\024\272Y\2454\270C\371^\272\247\332\205:\253[\203\271W;#:\001\177\2429Vx\342\270\3629\3109\2745\262\270:\355\3319\367\003d9\343\004\0218\305\330\001:\213}\223\272\355\323\"\271\211\275\212\270\315\'\317\271un\347\270\330\207\2159\t\357[9o\365\317\271\212\352V:L_\033\272\036K\240\271\006\320\363\271TS\330\271uF\3237\267\036\236:\201\n\006\272\315\032k9\r\215\344\271n\262(:\335\274Z\267~\372T9B\256)\272\205\330\330\266\222\343<9j?P:Ao\2427\2442v:\007\364\314:w9\3207Lt\365\271\330\351<\272.\021*:\207|\n9W%J\271\177f\010:\326\177\2118\355\240\3009\315\277\217\270s\354\3709\246p\032:\276S\3209p\270\2759V\354\3139\225B8:r\036\240:(\300\3719\270\312g9S~n\272\236_\3128\032\210K:\320\262\301\272\001\373Z:W\211W\272F\364\2659x\320a:\031\334\202\272I\334Y\266\277R\320\271\335\000\342\271^\301\027:\363zV\272\326\2406\272\220\243N:\375\352`:Y*\3309\230-\276\271\335\313b\270\375K\036\272\340V\311\271\231\345\320\272~y\033\272G\016\240\271\232\020I\271\270,\3159\221\374\306\271w\324\207:\237\t?\272IS\322\271\222z^\272\332\2516\270\322XN\267\266\333\243\267:\335\010\272I\'\":~+\2569x\3500:\246-}:\010\351\243\271\207\205\207\272\300\220):\272\025J7,\030\331\271u{l\272;\360\254\271H:\353:\346|\2609\231\260\230\270w\245.\272\210/\000\272\347Y\220\272I\376\223:!\023\274\271\335\350\0309\220E\3439p]e\270\206\007>\271D\253\2639\016\014\210:\234\331\241\2719\212\202\272R\357\"\271\036\213\023\272g\333\350\271\256\220Q94(\233\271\325\207\002\272O\024M:b\341\006:>\262\205:\250\251\306\271\024\303\2219\272>\030:+:~:K\312\2508\275\332\2569-p^9L\240\027:\325\244\0329\004G\034:\025\205\3229\001\262B\271\355\332\212\272s[:\271J^\235:Cw\260:E\365\212\272\310a\3657{\263\333\272\023d\324\270\271+\2429D\230\304\271\364\334\213\271XP\370\270\341\350\264\270\317Qq9\033\364[\271S\014\341\271\364\'\3159\230\357\230\272\003@\273\266^\005A\272\370\020\2437t\272\023\2726W\2379+\356\3069\313\276\241\270\177+ :\351(6: t\002:\375D+\271De\3169\203\332\240\272d\005\031\272\320J\r:\353&c\272e\370\021:\366Hd:!\2274:_\203*\272\0374\327\271\025\310\252\271\rB\331:s,\2149\375}\351\271\210\337\335:j\364\3329\353\367\361\271\003&\\7hA\023\271\327\034K9c\"\300\271}\254\237\272L\213$:]\355\247\272\240\336H:\211\036\220:\214\252?\272\3737Z\272x\025\2309\313f\03384\366\3519:\232\2719o\215_:\204v\320\271\252@\24090\216\0149s\365\3577C\206\004\272\200v\t:\222\305z97\330\213\272v{\004\272\373J\334\270\304ZK:\351\207e\272j\232\3259\321\010m:e\263(:\340B\002\272\323*\016:\263@0\271\222\030H:8\nX9m\236\372\271\344\253&\272f\214\r9\267\034f8!\177\023:\027\244\357\271\373\302\2369\017\260\2778\370\304\2449\034\203\330:x\3271\272\242\201\010:\307o\352\271\221\242\033\272\226\211\2269\010\000C\272;\347o:\261\327\210\271fE\2369\354\006\3549\262\354):+$\252\271!\036\220\2720vO:\236\331{\272\315\022v82\177\214:Q\371E:\315}\316\271\021\254]\272S\253:\272>\271\3369\270\225q\271_U\3449\344O\211\267\220\215\0249\244=\220\272\250u\2778\'}\031:\234:d\272m\023j\272\360\025\2469\237\003\374\271\nN\004\272 \350\204\271\372\013\365\272\\<\024:\327\003Q8\224\343\3539\224\241s:\025\372g\270t\257h\271\373\215\342\271\370\256\033:\353\031\2539\261\240\010:L\000\3277s\364\016:\013\226\213\271\310$\3649\310\323\227\271\331\"\314\271\241\337f:0V\3668s\270j\2717\353\034\272\216cx9/\363t\271\322\003\212\272\332TO:\346\226\321\272\007\\\337\271\343\3507\272\3729\226\272\333s\337\272\215S&\272\303I+9\374\335N:W\014z9Zp\236\271\001|\\\270\263\003\3379Cp\206\271\007\240\2319\226\365\3068?H29\231\364\031:\310\020\234\271\204\355Q:q\230\275\271REj\272p5\3459\035\206\360\271\005\242,\272\001#\243\2720\223\013\271\\\307D\272\3308\024\271\333tH\272`\027Z7\373\345\304\271\221\323\313\270\010\027\205\271j<\2049x=W\267\216\207\227\271l\247\2639\355\333\2248\177\271\216\272\345\256F:\346K.9$\272&\271\222\230\206\270\rt-\272\320\300h9h\214T\271\274\273\214:?\0019:8T\2559\274\353\37393r\035:Pt\017\272\303\337\200:\017B\3719\243}(\270V\334\240\272\\>\222:\322\337\2729\033\230\2259\261O\354\271\200-\323\271\3431\035\272\002E\337:\254m5:I\201\3428\022]\375\270\000\217.9L\361\227\271l\030o9\266\372\363\270.\246\0328\371\310\336\271\004\222\016\272\254su\271\232C\3009<\214[:*\221r\272&\300\016:~\250\232\271\336\357\236\272\223\255L9\203EG9\375v\2658,\250f\267^\245\353\2716\021\2767g\342\220\270\337\031\2349dnz:\311\366\2039I\251\2278\334\272c\272_\317\t9\032\004\220\272\211\316\250\270t\216\2209M\367G\272l`\232\271ZM#:\240$\371\270`^b\272p\223\017\272\242p\205\272r\024#:(\376g:\253\3372\270\210\337\346\271{\206\2169\272+\243:\351\350\004\271R\017\352\267HZ\3559~\231\312\271\256N\356\270w\300\0339\311\306o:x\224F\271R\3628\272.\313(\271\213\201\314\271\227\013\013\272\345\232\274\272@\330\3559\272\244;:\271%\\\271OC\3518=Ww:\255\353\263\272B/\023\272\t(*:\032\365O\271\300\322\223:\231\353\2268b\t\315\270\217\330\3539\251;\235\272\325\250\210:#m!:\214\30589\311\270L\270\234\224%96\310\243\272\323\034\215:\323\214\':\"\3403\271\230\270\226\271\356\355}\272t\323\213\271\344\211C9\333\001\0339X\327s\271\247!\0278\263}M8\252J\000\272n\327\270:\233E\23297\332\343\271\252\2502\267\372\003\'\272\260\217\212\272\307\254\033:`\177\006:\316\330\n\272\000\013\277\272K\r\2478i\220\2379\260\274\3359^\033\3069\037\2659:\'\"\245\272%8/\2728\260\216\270iM\t9\013\'\021\272\322\317\331\271H\233\254\271F\263\':\220\372K\272^\20259-@P\272\332e\2079Md\2419\022 d9\314\336\n:I\304\305\271\277b!:\2625\003\272\324\331\2139D\213\2009\n\211\\\272\331\203\227\271\"\344\0039/\371\321\270\265Df:\234\274<:\353\241\377\271\216K\354\271\216\214&\272?\270\237:\0262\0179PH\2339r|,9%r\022:\270\336\220\270\255\243\336\271n\270D\272\255\334\002:\267\272!:\215e\3479l\2532:)7t9A\275\314\271\330\274\024\272Q!\0077\347\274)\272\"J\007\272\241\214\3119\350Ds:\321>\013:\024\3040\272\020\355x:\242D\260\271\253\016/9i\004\201\270\252\210+\272<B\025\272Pk\022\272y\344\215\272\022\363\023\272\3503\253:\257\026\025:\327\366\350\271\372\353\2007R\377\240\271\254\320\313\271\274\373\211\2670O\0259?\267?:\013\302\307\270\272\213\t9\207\205\0069\337\014\273\271Mj\3468n\030B\271\2410\2678\3344A\272\217\201\3418B\216\035\272\037H\272:\242\37099\362\306P:\215s\2758\345\243\253\272\301\002\n:\340\3419:]&\177\272^\254\236\272\206\272\233\272?k\2359\350U\326\271\216\247\0309u\1778:\232\213=:2\330U9[\300\224:\226+\2268,\'\214\271FXe\272]A\3629PX\361\271\220DN:\235\021T\272\264\017\303\270:)\r\271\256\273j9\327+J\271\000Wm:08_:\331\316\234:\343N\3207\2674\236:\367t\2529a\273d\265\216\r\023\271\250\003D:\356\365\2169\301\224Q:\223\023\3478;,\350\271(\ra\270\332bf\272WF\2267\003v\206:\263)5\272\027\257f\272+\2514\271\025z\n\272X@\335:\265\246*8\307\251N9\221\337$\272\241<\002:y\260\264\270s\260r\272\2708\357\271e\373S\271\343\350P9e\316\007:\310\225\327\272\014\335k\272v\350G\272\212\037\3579\376\267|\272zH\r:!\332J\272\013\202\227\271\307\254\2319E\225\244\272\267r\0228/\314\3119\312\032z:\r\375~8\263\242\0219\275a\3349\r\220\235\267\373JK\271\265\274\2259H=\300\271*\034\265\271\277\344\3649\"Q$9\027\332\232\271D)/\271v*\202\267\273\344\3049\022Zz9\255D!\272@*\016:Ke\2629\314\232\3508\376\212S:q\300T8\3743\266\272vk\222:c\346\2059\3235\010:-`*:\010t\223\271NYi\271G\342\2358\322\006\2115\013\240]:\032\302d\272{q`\272\305\270\0207\335\3668\272\330:\345\271Y\032\205:\037\276\3369\275\t\320\271\\\366\347\2715\211q:/\250\251\272=\233-:\0332\21681\024 :M\250\227\272]\341\2159\267\230\2578\345L\257\272\363e}\270\001nG:\325\034$\272xd\2329\033\226\'\271\n\342\n\272C&\324\271H\366\020:yWb:L\304r8\013p\0019\031RU\272Y\230r8\350\234\027:\233\030\177\270\033(\3669\235G\246:\023<\206\271\241\233v\2724r\006\267-\260\235\271w\235\024:-\"\265\272M\007\0279Y\210\300:\251\236\3168?[\360:\264\026\360\271\247\001\3758\246\037Z\272\0170!\272F\267\3179\204\303\022\270\226\332?\272!\261\215\271\234|\2419b$R86\261b9A\360\026\270X\253t9ZC\2439\347){9Ei$\272\317\377\031:\277\275\35655e\207:X\245Z\270\245g\006:N\006\3239\317\344\3418\365\215\352\271\210\275\342\271\377m*\272\363\323\256\271\371L\240\272+\005!\272\211\334y9\360\034^:\004C@\272\202\007\224:\321\234^\266\254\265\034\272\243\207T9\'b\343\270\252\"\312\271d\236P:\004\223\0248\220\234\223\272*\354\021\272\336)\214:\032\271\260\272\257\244\2119\342\277n\270\223\214/9V0+8F\327\224\272\340i\004:s[@9[\n\3217G\025\3549p\262\0348@O\007\272\036@\2428\302\205B\272\001g\277\271+\374f9]u%\272\364\034\2268\326E\373\272\276\356\3539\r-v:J\257<:\021\027\002:s\336\0229n\302\0269\025\343\244\271q3\005:\375\245j:\342\264m\271\334\223\3319q3H\272$\244\2209\002\331\312\271\353t\3159\233`V9_\377\356\265\267i\233:m\274\276\271\371Vv\272\201e\204:S\250V\272\216oR9\210l0\271l\314\2277\321\306\233\271\313\210\001\272}\311W:\344\037\013:\251q\014:\311\276\3179\241\033\016:\310\375E:4\334\372\271\025\354s9s\231\000:\350qs9Q\242\2779K\036\2419D\227\216:\243\355\2019-X\021\271\"/\2719\234\240\026\2720x\272\271\213\341\227\272\347\225\2359h\245\232\270\364\005\224\272/\031e\272\033G\255\271\035a\265\271\031o\214\271\354px9CY\013\272\340:e\272WK\200:\276H(\271\371\327\3269\373\35539\277\202h\272$\213\020:\026\273N:\247\300\352\271\016\364\033:\320\227\262\271\311c\215\272\023:\220:\354J\276:I\177e:\277\0217\272\301xY:\270X\222:C\\\226\272\303[\352\271\250\"\367\270\201V\353\271\2240\343\2715\251\241\272{z\206\271\217\310w\271\204\375\217\270\345J\3578\351\221\2758\271\241[9<.{9W\337\264\2716\256\r9\025t/\272\031\356\321\270\253X\351\271\352&+\272\211\215\3519\336\017\024\272\216Q<8\314i\025\272\231X\227\270\363~\346\266\230C\316\270)\245%\272\373\026s\266P\030e\272\353\004\2079\336\0045\271\332J5\270:\203\2659\271SA:+\363u:\312n\037\272\200%\261\271\245\316k9_\t\005:\211-\200\271j\023\373\270\017\267\026\271\330\366a\272*SJ:\346\335\2319b\207\026:\205\264\024\272\312i\207\270!\313\222:\330\344;9-\354\241\271\207$\3137\316\337\2269.}\214\272\032<\2426^\254[:\242@\2249\367I\036\272j\342p9\211\0272:\213y\2069\326m\007\271\215=\2518+\244-9\212\303\r\272c\333n\267\200_\021\272\033&\202\270\027\006n\272\363\374I\271\321A+:\214\366\202:\013o\234:z\3519\272\200\027\033:\242\250\235\271T\227\016\272\344\027\373\270\007\037\326\2715Q\301:u\3278\270\023\207\2079\363\306\320\271[\275b\271\'\216B\272\211\257\3228N\206\3619\366\215F9_\007=\271VH\211\271\r\274\366\270\000\355\n\272\035\2723:\254\352\202\271!\367\300\272\244\254\272\271\216_-:\343lQ:\232V\027:F\r>:^}\2439j\247.\272(\214E8J;\3049\177\214\031\272\037\006\3469U\365o:\375N\022:\031\256l9\345\nq\271\003.\237\270\004\232[\272S\355X9q1\320\271\255D\325\271>\003\226\270\256\255\2349\2737\032\271\247C\205\271h\203\033:\332f:\271\252b0:\322\006\2247\236\010G8\365\201\0348\321>\007\272\030l\021:\251\177\207\272\361\200\37791\364d\272d\343\236:\030x\0179\'\271\003\271F\316u\272\\\204\234\272q\341\331\270\314\0066\272/CM\271v\357\347\271x\263\203\271`\202\3259|:\211\272\253\342\3428F\013e\272s4X9\230y\000\272\024\330\227\272\023\363\2259$)\3079W\222\231\271\007\314\223\271\236\265C\271X\272\202:\374~\'9\231\020K9\353\326\"\271\340\277\257\271NVr\2725Ha:Iz\2579\215K\003\272\2456\373\272\317\330\364\271\374\351\"\272\210\377\3549\013\247\3359Q9I\2724\021\013\271\366\301Y\272\230\234\3119A5\207\271Q\221\213\271\314\354\217\271\351z\025:\306\247\3629H\375\2557I4>\272 \276\014\272\213\320\306\270\016?O:\341\203-\271\201\006\257:\236\325\033\270f\034r:rH\201\272\021\32339\206\332\200\271\374\022\307\272\330\312\250:\234.\221\272 \205\321\271\315\222\031:\020\t\3449.F\3549\006\342\032\272W\217)\270\275\017g\271\234\024>\272\252\211\212:u\213\034:\222\350\242\2727\207\033\272\274_l9%\206j\272\367:\230\270|\352\253\272\006T\3479*x\036\271\021r\204:\032]\010:=\210\260\270m\316\034:\262]\001\267B\3550\272h\226I\271\255\326\2139T\253\324\272\350I@\272\351\216\210\272\240\363\037\271\235\365\263\267\270\216\035\272x\216\375\271\230\366\2729\014\372\2778!\270\2509\323C\250\271!Q\0219V\013\026:\016\234\224:\236T\372\270\334\203\272\270B\205\375\271\373\375\3768\250i\237\270/,8:4\245\035:\202z\232\271\306\277\3579v\246\346:\311\3720:\376\204M\272\261\237\2259\344\240\221:\267\204\025\272\304\376\030\272H\231*\272\345\325\236\272\356\341\2009\253g_:\217\004/\271\255\304?:e\242\20498+\230:\252d\2179\206\266G\272\361\367W:\363\177\271\271P\353\211\272\320\337~8f\032=\271^#.:\203y\331\271\007\006\3558}\334m\272\370Cn\270\257\363\243\271\325I_:\234\345\026:oT\002\272A\007\0139s\263W\272\311\353\022:\332 \3348\224\361\025:\241\304\264\271]\245K\271\334\006\205\272\304\313\3558\355%g\272+:\2709\342\026\326\270\'B\2319\321$\010:hxq9s\267\207\272\227\021G9f\223\207\272\362\030\3509\345\006\205\272\331\3018:\354\267\206\270\020\232\037\272\204\241\220:\250\350\026\271\016i7:\312\272.:\3642\005\272\032\266\202:\310c\3258\313\245\0239p\3464:\253W\337\271[y\033\2722\232\362\270Q\330\246:\017\327\031\271\207\025\233:\353\234\216\270B\002\310\270\314O\200:\222\010\241\272\2667t9w\340\211\271$\2379\271\224\211\2149J\'\2549w~3\272x\241K\270\3571A\272\245\032\207\271^\325\022:\213\177F\272\256\031\273\271\202\034\336\270\304N-:X\016r:\r\220!:n\235S\272\n\361\2749Gj\211\271\220\272\2047\252?\":\025\036\2009.Af9|\224o\270w\351<\272K\037\222\272.\2045\272\255\002!\271\255\252&:\021\013\025:\262W%\272\313*\256\271\224x\2418\314\231\035:gNy: n\031\272q\t\303\270\206\245p\270G\233\320\270\321\037\':[\366\0008\037\2242\271\034\\\276\271\202\217\273\271\205\026\307:F+\240\271J-\3769pv\250:Nk!\272\200\350\272\271\204\314,\272\202\361\024:\261p 9lAI\270\006\221\3149\262\025\0148z\2617:\234n\027:\230\314\346\271;\240\230\271)\272+9\tZG:\272yO\271W\016\325\271\017\377\207:\263\210\3409\006MA\271\0055!\271i3\3779\361\010\220\272\217\275\202:\234\373\240\270\212\240z\271\\^\r:|\272]\272v\322\000:\017\3606\272Hw:9[w\002\2721\272\252\271\362\273\333\271&\217\003:fH\206\272\332\022\037\272p,\231\271\346!\324\271\235Q\3407\302\370\215:\r\246\2609\023B\252\266\032_\253:u\305p\271\203C\2048\211\242\0278h\261\2609BR\006\271_}\006:\264\372\267\271\257\'o8\355\230|\271\271Jj\271\237\374,\272\207%;\271\322\260\334\271\nq_8\024\205\2409b\306\n9z\356\330\271U\361\324\271\352IO\270\255+{9\307\225<8\337~\216:)~\230\272CC\351\271\374&\327\271+R*\271\354\340=:0$\033\272\360\335\323:\320\236*\271Hc\3549\r\335\021\271\275C\014:\303\341\324\270\002\035\357\271af\276\267\014\310\021\272lM\227\270M__8\253\244\250\271\035$\2259a\242\010\272\376\304U\272Z\2505\272\212\331L\272Q\260|\271\305\342J\272b\325\030:N\215y\271*\365\n:\0375\350\271\201\376\030\272\346\177k\272\357D?:\241be:\023;\031\272ei\227\272\355-\336\271_\001%\271\203\352\0009\027\342\365\270\271\254\307\272!8\263\2720\220\36778\013\036:\304\366\"\272\250\356\265\271\221\207\250\271BN\0046u\247\0329\316\267\0109\331Z\216:D%\205\271\027\nm:^x\2719&x\0348l\211T9\345/Q\272O\330\026\272lx$\272\240\206k96&\3108S\267\304\271b\025\3609z\327b\271\227\375\0019pf-\272 \347D\272\326\301N\272\033\333\004\2728Ep\271\321\022g:\2316K\270\024\213A:T\367\2178G\001U:\211\230\223\270IH\264\271\376\272\256\272\317\262U\271\311\262\'9%\025_\272&%\256\271&\247\353\270o.\237\271\035\352V\270\333\303{9\010\273\021:{;S9_\235~:|vU:(\244\260\2722\255b\272h\313*:\353\270w9%\017\357\271P\005\0378r\177\246\272\213X\034\270\353  9\332,\353\271G\217\306\271\366\2615:8\317\2656\255\365&9\024b;\272\326nx\266t.\3439\006j\316\271\347}\2758\236\215z:4\210\n\272\264\332\2769r\035\021\272\346\321^:3\331\246\272K\'\0217\250\261\347\270\n\227r9w\222\016\271a!\224\272\376\317q:\266\255\3569\2651`\272`\201\223\271E\215\216:\320\301{9\323\267\260\271\350X\013\273\004W\3605\234y\213\272\362K\000\2729\026\344\270\250\r\356\270E\377\211\271\376Q\223:\r\201\233\272\201\226W9\245E\020:\032\240\212\272#\216\3458\221`d:i\300X:\373P\3028\271\245\036\267\310\t*9\252\352\247\271$\303\232\272\370\265\3509O\327\3049\3471\014\272P\237\351\262\024PF:Tg\2049\364T\312\270<qw\2722\217\2749\232\001\026:h\027\033\271MX\227:L\177\2529\317\362B\271r\ts\267(\232\2339\217A\232:\360\327\2669\272\230\2209\376\231\366\2711u\343\271W\277\3409Z-|\2719l6\271 u`:\321\344\217\272S\250\020:\\V\277\271\353\206\346\271\237\365M:\242\260<\272Z\034\2128\333o7\272\351[\202\271`_\255\272d\271V\272q\257\245:\241G\3559\n\\\262\271\000\255\3417\017\271\225\271\244\224\2548\362v\347\271\30060:\344\205\230\271?r\205\271\217\251\354\271\203}\215\271&\006\344\271\262\352\214\272|<\2609\200\305\213\272u\\\211\271\370A\3209\335\260x9\304\302y:(\200\316:\031\351\000\271\n\233j\271\314\201.9\327t\010:\017\200o7q7\0059gu\3749\371\245\333:\320\r\3559\243+\3679\304\260\343\272cIf:K\367I\272\031^\212:\357E\010:C\355\333\271\346}\251\270\254\021\312\271d\326\031\272e\331\361\271\334\202\036\271M~\006:\324\"\0079\023xD:Fm\2609\250\026W\272\207\033\3639u\216\2259i>\2109p{\2329nH\240\267\241_6:\0029w\272G\234q9\177P\031:C\362#\271\212\233@:Yr\3039rT\0149R\360\0029\256\230?\272+\257\033:\216\205O:\321\306\0179\3370\3419\332S\323\265\213\260O\272\362j\030\272\017\351k\271\376b\217\270\032\376\366\270\316A\227\266ps?\2728\211\311:\240\355\362\271=\\\3349\017l\3169\2131\255\2715\026-\272^\216X9[i\254\272[\322\3069\002\236i9\302!\245:<q\202\2718\312\211\270\366[\3179\364\225\206\272\256\227\3719au\2559:\315-\271\220\206\3729\276\274\023\272\3114\261\272\376\"\276\267\010\263\006\271\301\rF7|6\377\271\014\377\024\271\254l\030:\275\313\3149=\360\037:\373t\271\270\002\330\010\272nJo\271f\361\2249b3\034\272\344\351\261\271\032\"k\271Q\276\240:\300@\2019z|\010:\023g\034:}^|\270\030\321\233:\310\030&:\217U\013\272\311\263\3149\265\323\031\272\325\254\003:z\377\277\271\010\243/8\350\201\260\271\261\013\222\271\241\224\2139\306\222\216\272\010\244\253:(\354\3428\272\225\3139~x(:c\007y\272\312\3455\272u\230\2778qZy9J\221\314\271\274+\\\272\300\334\207:?c\033\272\310l\212\271\272KK\271\016\310s9ls\260:Y\355\207\271\312s\240\272\\\'\t\273\250Z\220\270\333\255\276\271\362\322\233\271P4\212\272\020\251\321:\200\347P:\037,\235\272CVo:v\321H\272\213\261E7\333b\354:\302\013\3419\264\372\'\272\371\216\202:\026\30579p\235\222:\037`\3759\276\253\2259z\177\3019\326c\3338u\252\264\271\342\261?:R\332\033:\002\010\312\270\360\233\300\271s\301\233\272t\216\016\272\252Ed\271\375\007\014\272\225\220w\271\364\260R\272\230\216.\271\270q~9#\247\250\270\306\367g9\250\023}9\203\241\361\271_\320\343\270\225\223\n\272c\216R\272\342h\210\271\255=\3459\216\205\3129\322\306$\272\221\340\251\271\013\200\2559q:\017\272\\0\010\272\203 \2259&\226^\272jUB\272\232w\232\272\252\220\216\272oBx\271{\367T\272y\342\"\272\023\363W\271F\314?\272\3557\245\271\216cB\2701E\2329\243f\321:\207Ae\272>p\022\272\250\276\034\271-\240Q9l\324\221\271^\331Y\272\236\031\3678\000v\3129\312C\'\272\377\325%\271\326XG\272E\024\3329\275\030\3468\214\'L\272A\210\2538\234\273\322\272\257K\303\271\333\206[9\265~5\270Y\235\3159\203\356$\272\355\361\3279\373\343\211\271o\214\025:\037 \030:\247\230&:\301\215\3139^\006N\272uW\205:Y\032\r\272\032Wk\272#\200\007\270\017\304\3278sh\2129\005\262A\272K\314\374\271\001\334\2539\333\315T:\224\223\025\271\305\343\277:\362\355\3078\002\031\2569\3236\263:\2452\210\271Y\321\006\270y\030\2669\372$\236:\354Vn\272\371\t!9\271\223\231\266\351\017<:u\364+61J\253\271hU\311\271\324\363=9\"4.:\020R\362\271\223|\211\271}\262\206\272\2263\375\271\246\273\0328Z\230?:6(\2048u\276\376\267\266\300\272:x_@\272\256U\330\271\312FB\270\271\271\253\272\322@\024:\0257*\272\271\317:8\352\002~\272\302M09\376\025\0105\267\316S\271\034\202z:ng\2429\326<6\272\017\240I:\000W\023\272Fm\210\271\322\236\337\271\345\270\325\270\316\265\033\272\016\201,\272c\027\323\270NU9\271\003\210j\272\033#0\272\370]d:\335h\221:\271\345\025:\222\006S:]\010\223:\021-q\272?y\2668r\274[:\205\022\0229N\2731:\200\374\3638\303m:9R\321\350\270\257\263\0039\352\345\0369\n\264}\272\2624p:$^\023\271X\260\027\272\010\n\2129\006\377\272:\2626\215\2672\374\2168\216\235\001\272\322Y)\272\306\020\3368\\]\017\272\022e\037:$_\3558\360\035\2568\231\346\3378\027\345h\272\031z\'\271\313\364!:\300N\237\272\330:[9\267f\2569\004>j\272\n=\025\272\360\007|\271\231\321j9{6\2218\334\36209\246N\2758\205/\2049\006\300I:\002j\002\272p\312?:\230\206\30484\226\3269\314\307\2619m\310\2107\263\205\2049\0033\201:\302\362p\272\tV\2269\224\2247:\303\226\221\271|)3\272B\375\2429?\2404\272nX!\272\345`[:\306B\216\272\020\323[8\334\275,\271\035\377\325\271<\373\0369\016,\220\272f#\206\272\2306,:\207\313a9?\207\002\271\017\345A:\332\274V\271^4]:\306\267\301\270\373H\010\271\3005\016\272\222n\211:\251\375X\271*\370\263\271\230\2042\271A\377K\2724\\R9\262\225\2548\014\021\22798\353R9:\352\3749\325\205\325\267\032:P\272\364\207\216\271u|\317\271\226\327\334\271\221\365\217\272\306\374g:c\371>\271\263OV:\031\350\325\267\212\301*\272\'B\2648\246\206V99\237\3069\251~\206\270\022\237\231\271h\272\356\267\363x&:\332~,:W\306\023\272\245W]\272\022\301\227\271\030\272\250\271_\353\017\270Gk\2719\302|\204:5U\276\271%x\322\270.\312\313\271k\211\2469\'a\3779\311d\276\270\272\013\227\271\024\267|:\022\307E\272\357\306y\270\224\365\003:\273X\032:: \0239\301\274\024\271\334\326 \271hGJ\272t\3113\272\211G\026:\274no\270\225\035L\272o^\021\272\341\351*\272:\320\3169]Yo9\003\003\334\271\367\\\007\271\224\025\2339\265\301>7\0164\3639}\005I:\217\370\227:\362F\206\272\203\205\2269\226A\2269g\270`:\344\t\20798K\":\240\037}\272t\212=\271\206A\2239\267\202!:\037\376:9e\332`9\001\226z9\004\350\022\272\263>N9\233\201\3679$b\r:\314\236_:\343\324\257\271\316}\215\272CJ\324\271\335\252Y:\000\314\251\270\237Ek:\002A@\270/0\220:\001\013\263\271\007.\013\267\377\244\3558\266\275\007\272\213\345\016\272\304\014\3078\235\346\r:\271j\035\272\310\311x:p\016M:t\030/:\334\240%\271\373\3153:\363\370@:}V\225\272\237\315\224\272Ap\260\267\026\371\021\272&\255\2319\276\2029\272/\255\3339\025\331\240:\030\254#:\275\327\360\267\354\201%\272\005\225R:4\356\216\271\037f\244\270\223TA99RP\272\341\020.\272\227|1:sCs: \311\024\272\315\220\264\272s\350::\003}\0007\255\007\206:a~L\272Enk\272)\261\002:\327\274A:\307\037\303:a\254%\272a\035%8d0t:\205\3214:\233J\224\271}\222w9\3225\320:\001XJ8/\353\202\271\373\304\007:\004\353\3468\366\371n\272\205\353l\271\"\3404\272#\034\212:\237\321z:\363\327\235\272\2460z\272\306\016\030\272v\237~:\324\310\276\267&\374\227\267\313\023\260:\014p\32490ZM\271$\262\3639\302\221\206:\226\376V\272\303e\2779\235\205\235\272\2477$:\321\037\3348\334#\257\270;\214\356\271\2440K\271\237l\223\270\016\327\031:%r\3409\301\037\2279\201\007\354\270f\320\030\272g(i\272eTL\271\325j\275\270\265\267\361\271\233\243\027:\375q<:(`19\201\231\363\271\217\203\225:\253\342\n:\2321\210:\024\033\251:N\205\017\271\3065\2319M\274\034:\373\253a\271\315\204\303\271\370b\2169\0307\206:\022Sg9\241F\201\2717\256\307\270\221\207\2178\330\242\021:\366\371\343\270\364\206\236\271\334gZ:J\366\275:$\251V\271\255\210W:\2149\025:\213\250\2509\315\242q:\263\274\2127YS\1778\336*\331\271\240\352\211\271\036\363,\272\257u\002:N\031\34791s\n:+W\3329M\326\027\272kw)\27201\005\271$\004\023\271\327\223\332\271\366,\231\270\300z\':\371\356\0019r\204\3669wN\\\272\363\254\2108\325Wj\270\322\007v\272\216\252,:\024?\2437\274\350G8}\210i:6\327\226\270\225\201\005\272\350:\':\317\357h9\316\244\010:\270\261\2009\307\".9\017\304(\272h\032\177\271\204\360\377\271\016\261h\272\023]\2568M\350\0207\260\221\227\270\262\247\314\271!\201\0146* \250\2719Pw9 \363\264\272\202>\031:\264\373\235\272\'\02439\202\207\204\271\251\254\211\272\267\017Z\272m\222\235\271\213FD:\025\237p:\307\231\217\272\323\262\232\272hlm:\255\253[\2716u\255\271\363\265%\272\237\321\244:\273\341\021:`\364x\272Zu\210:\001\270\255\271\030\263\252\271,\260\245\272\032\207\243:\347\016\020:\264^\226\271\256dT\271\017-\003:\330\365\000\270\263\002k\271Gu\0348\366B\005\272\331\3220\271\301\341\233:f0\360\270\004YJ\272\014\2551:\013\035\004\272h\240\341\2719\277k:O\265]:]\001~9\326\017\237:\035,o:\242@A\272,-a\272m\037z:8d1\271\010~g\2723\003\2069A\270Z:K\321\222\272A\335,\272u\010q\272\333}v\271V\036\3369\236\247=8\320\213G:\3546\3459},\3559d\32189v\347\357\271Z\245\3609\034\340\021\271iZ\2669\354\264!\272G?\2628\367\202a:N\030?\272\321\353W\271*\035\":\367\250\213\271\027\217\036:\273\371k\271\177\354e\272R\022\033\270\337XW:\232\27239\330\'\3218hq\2667\341\005\3009\206\307\2769ND\2078\263*::\306\336\013\2718\036\313\271N\r\3548W\312\3269\350\230\232\271\220-\3668\033\037p:\037\255\2458\260E\341\271v\251\221\272\313\237J9\332\\\231\271g\374\202:\372\372\222\272\3123\200\271\362<\2719.:\2369\261\355_\270\311}\240\272\300\233\3079<q<:0&\202\272\r,\0179\200\342\357\266\313\224\360\271U\340M7\034\301y:\235\007\213\271G\363\r9\022h\231\271\242%\3239\n\373\':\352\322a\272\345u\022\271~\310\001:\243\000\202:l\3779\272\n\235\304\270\352\030k\271@a\216\271\006y\022\272\224\365*:+9\226\271\312h<9%e\3318 \001\226\271?\333\033:fJ:\272S\214\312\271I\\\r:\270,\346\2717e\3008\211&\":\244\332\321\271=\355\2749n\237\002\272\225\326\241:\344\020S\2714\312\016\272|E\236812%\2713\216\036\270y0\003:\243\253J:\t\332F7Sr\2639\353\002Z\272\200\377[\272\200\246\2778+\016S\2712\257@\272S\203I\272\220YR\271\257\265w\272\331s\216:\331\003\0318\277U\200\270\033:\275\271\326\245y9\253\027\34199|r:\240\344j9e=s:+8H\272#\010\2279\017\0247\271\016^H\270q\226\335\271\221\344g:\344\217\247\271.~\177:H\357::Z\273\2649\322\255\3249\346\262\027:\377(\2269\304P\2757\234b\2709\334\237\3518\243\n\252\272b=19\356\n\244\272.YJ\271{,\2429\325\005\336:\243\216}:\371\261\2359\240J\240\271\224_\034:\313\373v:*\263\246:\3556\341\271\336\213\3029w\003\017:o\304\016\271IR%:\037\226\006\272\353\345d9\300\360\013\272\"{=\271L\260\225\271\335q\2729\323\233=\272\024\030\3338\207\202a9\014K\3249\274S\271\272\257\\~9\311?\3239\260\350\2019\202\252m:q\0327:A\t\251\270\331\310\3677)\370\276\271#\227\337\271\212~\331\271P\364\244\271\276\024S\271)\032\007\272~\372\351\271h\304\2579\022W\223\271\\\002\3139\215j\302:!(\006\272\023\211\2469\n\362\2459\rv!\272\370a>\272a\326\2079\241Q\374\270\214\227\364\267\242`\261\271\217\217$\271\225\322\325\271P\314\3369v/K\271%\220\340\271\327V\214\267T\267u\272oo\203:\215k-\272o\213\372\271z\227/:#8,9\024$\005:R\010l\271\037\033\201:\364\006\3679\216C\223\271\235J\010:\354*\232\272\267\212k:\272\014\3209\335\331!:4\202):\305Sf\271%oV:\246\206\3049\\0-8\003\376\035\271\3662\2227\253m\'\272\242\253\2778\275\016K\272\273\314\321\271\350\350\03190q\365\271\206U\2049\216(e9M\207\3349\246\364\3169\277\325\025\272\200\233R9\236C\216\270W\256+\271\203\372A\272y},:M\346\2429\344\004\0029\215$\0329\265\372?\271\263~\371:\216\374\254\272\276 [\271C^T9\007@\0029>y\2379eL?:(x\245\271\353g$\272Iw\t\272\302Y.9Bo\311\270\032\240\276\270\022\311D\271\364\034f\272\224\242*\272\030\354\3359\221\362P\272@\202\316\271\231zM:\335\216\t\272-\244\3557\2043C:\314\'\213\271%\303q\272c\256W\271Py\2509\2436\2759\240\2662:R\246\007\272,\342\262\271\210\373\2218\270\321\2119VxR9q\273Q\270\'\222\356\270\324a\202\272\225\260\2219p\006\231\272\356XY\272726\272\241(^8I:w\272\211\017\013\272\351\340>6\372m\200\272_\261\3239R\025k\272?\217\0108MO\201\271G\342\3559\260\022\333\270\"K%:\222.\264\272\341;\314\271F\354=:\327\r\010\272Z\017#:1\304\022\272\276\356\300\271@\021\3079~\277\0347\331\203\256\272\222Mx:Lym\270\235\357\022\272\326=\254\271r<\216\272\217\025m8\275\270z\272\024\275G:\207Z\213\270\23010\271W\304\263\271P\';:\234\324\324\272k\3137\271\345\2362:O\342\340\271\027\2640\272\006;\220\267,\002\022\272d\260\036\272\367\306\026\271\022K\267\2702Y\3529\270F\200\272\017\213\2728\374GA:\202>\3469\366P\0249\016\216\036:\\c\2359\034\210\006:\336\\\002\273\243\311n9\310J4\271\010\020\3378\"g\2239S\037\3168\3416\3339\260g\215:M\326\371\271\354\325\335\271\216\000/8*\200\037\272\327+\3778\244v~\272\204\265#\272xP\\:\277q\33686\023\2519=3Y9Wq\2169\214\357\201\271\244\370\333\271r\333g:P\211\001:dt\033\272w\276;:\371z\3629\007&t:\341\352I9S\t\014\272O>\026:q\017R\272\256\277\3739,\200\"\271\005Z)\272\177+\000:s\233c\271q\264\217\272?Q\003:9\271\205:Y\367\306\271b\303E\267\251\237\235\270`\005\001\272\013\314]9\361\271\234:\270\362\2269\241\016\2529,\346\0219\021l\024\270%k\2609\034V\002:p\002P\272\343\366\205:\016\\\3077\226\271\2768;\353\3459\341c\365\267\320S\222:\254hI:\202\361)\272\363^{:\272<\027:\212\n\3019\311\206\207\270\035\266y::C9:\t?\007\271\374\'\035:\016\213\2039\223\350\02686n6\272\027{\037:l\353\323\271\262w\242:\304v\000\272\340\223O\272K\\\200\272\337_\2528$\262\246\271]P\357:,\334\211\271\327\'\272\271\014\275\320\271\340\375\2618\335\301\220\272\247\334\216:\301\270\3449\340\314,:\251\010U\270=\306k\267\356\252s:\357\313\306\271t:6\271F\272\':\320+8:\3251(\271\005\330^\271\370\031\267\271\350\017%9\021&\252\270\241\345%9\321yW9#\005\t:\030\301\024\2729\376\231:\375\237\3669\327\234\007\272\231}\264\271\230\\?\272b$i:\340}\177\272\365K4:\375\331/\272\337\247\000\273Y\275\335:\001\010\303:\243`G\271\013\232\037:\311\005\35591Z\211\272#\220>:I5\3069%O\325:SO\221\272\"\204:\272\3241[:\340\204\0079\332k&:\300\304\222\271\017\324\2149\213\3629\272cq\2027\321\307\217\271\312\321\025\272<\336\004\272\314\214&9%\370\t9#\244\221:\263a\2749\263<\334\271\325~\n:\370\370\231:]\334\324:k_\n\271\263\232\t\272\027)\"\271\223]\220\272&\203\203\267x\351\023\272#\350\270\2714\366h\2718\253\225\271~_#\271\252\006\203:\210\t\3539\245\306\207\272u;\222\270\375\352\232:\310\337b9\363\020\3479-!6\271\"\371\2078\2440\302\271\216M278\355*\272\343C\2279\315t\2779\314zf8\351\2773\272\342#\213\272\223\257\0029\337\257\346\267\343i\n\272\325C\3438\3636\361\271uTJ\271\374\216!:\320lQ:\r\217\3029\334\237\214\272\013\320\0139\021\002\177\270\021\022\334\270&\224\3109\244\216R8\265\207f\270\251\032\2109\355@\033\271\364\206]\271\026\337k\272\003\205\023\272h\326\372\271\371\367\241\272\343\310\342\2710\302\243\271\247\322P:\rI\240:\364;\2719\365\226\2509k\'\3659tX\240\270\003\301\2648\216\376\255:\037\245\243:ZV\220\270`F\"9\346\023d93&\374\271\273I\032\272\2370\200\272\221\351\276:\223\271\261\271\323\"\350\270\363\220\225\272\347a\010:\017\256\347\271\010\033\017\272\031<\2509\216#O8@\304\272\271\262\243\200:Bx\024\271\377\215S:\304\363A\272O\363\016:*\343\332\272\216J\3419\361\020\3419\036o\216\271\2646\201\2718\217\020\271\375I\":\207\244\017\270\256\245\264:f1\3769\334\014\2109\265\334\206\272r\227\205\272\312\301q\271\267\331a9\215H\0208\251\206\366\271\302\305\346\271o\020\225\2720S\207\271\320*N\272rUd9y\332\344\270\247w\3779\257\371\014\272\246\371K:\247\317\220\271a\177<\272\2348\354\270T?q:\\\264J\271\300\361h:\367\277\327\267\305c%\270\nH\265\267&\377\025\271\244\306G\272\325 \003\272\332\376\237\271\371\210P\272O\255c\272\221\234\3079\307\nF9@8\3439o\276\001\272i\277}\272\204F\022\270\177\345)\272\025\301e9\324s\223\271\271<W\271\313\226\2568\205\031\264\271\252\004e9Y\0345\272\256Wi:\335\323\2308>\333E\272\223;M9\r,\027\272\364\260\025\272\205\177\317\270\t\257v9\021\305-9\241\357\2359\016\336\036\271\205\266\356\271\211\247\2106D\314\2509\020\251\34199o\207\271\317#s\272\253J\004\272:\035\375\271\013\310\241\271\261\235\3349{\316\26396\317\251:\317\017n\271\213E\3518\200\3256:\347D}9_!\267\271\2575\3268\377\300m\272c\233\3719\223\341~\272\026\1773\272\322\265Q:&\035r\270\200\037\336\270\333\314\325\272H\3671\2715\370\220\272l\306\3039\204\276F:\321\236\247\272\344\334\245\271\006\257$9\215\177C:\357\034\2229\314`,\272\207\000`:\024\001\212\271q\263(\272\336m\362\271\340l|\271\025&\2379~\216\255\271\244\330\250\272E|\3469\005c\3308\310\255\2775\177\n\225\271Tf\340\271\354\363}9W`k9p\240C\271@\027\2779\2655\3309\2523\244\272\200r\0217tk\271\271\362\001\2129\233\266\2719\207\361\270\272\361y^9\n\003\2019p\313\321:~&\2718=\027C9\367+Y8C\254\036\272\262\373~9(\322\t:@LD:\263u?\272\002\215\2449\020\003x9\220\375\200\271\256\371\235:\2629w\272\217Q\2228\213W\215\271E\224X9,,\3169k\352N9\223\210\303\271\333\365\2658\004\246\020\272t\"5:/\220s:v\351\255:\342\226\214\271\327\3052:/\006\2669Go\240\2709\215\3448\221\224\304\267\325\261\0229\2421Z\270\377j\266\267pC\2749\201\326\005\271\204\005\24495\331\310\271\004\334\303:\364\262*\271\234\303:9\223\177\35298\007\206\272ki\2218;I\312\271\334\334\200:u/\r:\274\200\004\272\243\324\2629\207yM\271ejB\271\226\337H9F\332b:[\321T\272P*-9gy\0269\207\311x9\300\020\2309bH#9\352S::\356\230\245\272SkE9C;\026\272\337\266\241\271\243\306.:\212\220\3728\212\333\203\272\020\325\200\272\204J9\272K\n\260\271\003u\235:\210\226\251:\003\331\365\271O\306j9\0351\302\271\243\3456\270\352\237\276\271\335\275\0359\247XF\271\206\242e9\203\317r9G\017\252\271(\206\031:w\320\317\271\033\365\222:\035 T\2720\213V:\351\224\2539>|\017\272\204\301\010:\027Y\310\271+\332|\272u\356=9\335_B8\310C\3609 \026\251\271\273\375\0068\321\221\333\271k\336\222:`\264?\272\007\3765\272Kb\2519\232\262\330\270\236\343\247\272\204@\371\271W\243\2409\311~\203\267\363\224\2059-\3050:\216u\327\2660\\\":0\210\2409r\215\2218\316\03509cG\311\271$\206\337\271G\320q\271s!K:\002\257\3329m\221\276\270\346bI\271\230P%\272p\"\\8\341\t\357\271b\014\n\272\207\214f9\022\307!\272\233\r\2129]C!\272bD\304\272l3\3669I2\330\270\365aF\2718\211\267\272O\213\t\272R\211V:\024E\014:\233\311\251\271\316\315[:\347(C\272f\317\204\271T\026%\272\027\223\003:\222\276R\271\333v\332:\001\366N\271\321c9:q4-9\346\2335\272\372B}9\036|\r\267\217\373P\272\323-\2239;\256\0008fZ \2716=\202\271\255+\2216A\313H8\261?\003\272g\006\3138\023l\322\271\235h\2179\025\313\3457\341\n\3629K\007\3207\346\260\275\271\275\324-\272\023p\2428\351\270\2129\317\302\036:bCf\271\334[\334\271\002W\203\272\204\270\037\272o8\000\271\001\274\216\271\262\262\215\271\002\312\t:\246\020\3329\007bO:\3554\2009m\212\3209\024\322\273:\313a\230\271\347\316\324:\250Oh\272\353\262\017\272\177\017\2319F_\016:PU\2009\231\302\0219u=\211\272\"\300\2529\\\362\221\2722Y\374\267~A\2008^\231::|\271P9\335P\3639\t\372\232\2729+`:!,\3269\277\376\013\272\302\314\037\270\224d\244\271,,\030\271\313\212[:\261\260\2069\322~\3309\366\246\307\271\357Q\020\272\251\327<:\021}\222\272^Z4\272\315\356K\271c\375D:\200\270\210\272T\004\215\271/\003\017\272\206^\354\271Z\213\032\271\345\021;\272%\177\\9\237\027\3709\201\373\275\272U\271\016\272y\352\2428\237\2055:\306a\2009b\302R\272\211\254\35592\336\252\271g\371\002:\030\200\355\271b\261\027\266rN\023:$2\3258\n[\271\271\251\261\323\270\035\305{9Y\023\357\271\246\263\3658l\237\204\272\311(R:\\\265^\271\303C\2529\216\342S:\276\326\030\272\037T<\272\003\\j9\033\301\227\271\240I!\271\003\007T\271\267M{\271[\004\206\272\0039\000\272\234G\335\270\033\020\277\271\322j\3118\003\254\013:\341\266\2739\302@.:\311y\3079\376K)9\276\352t9T\247!\272:\275`\270nm!9L\344\\:\257\326\":\226\022\230\270\353E\0138\022n\311\271\245$\3059\205\276?\2724\373\2749\214\240K\272J4\024:(\276m:S\220\0349\366\002>\272\030\\\03594\036\27475\276B9k\360J\272\362\024\030\271PU\221:\024\243@\272\315\252!:\371Oz\272tt\002:\376.\2229\355^\004\271\177\177\260:v\'@\271\210\366\023:\016\357\010\270\244\251\302\271w\006,\271\253T\201\271\334\352\004\272\316j\220\271c%\371\270\366\001\323\270\227\315\272:\025\315\3329\356\247\244:2pX:\251\024\316:\006\300]9K\253\204\271e}]\272\n\367?:<\0265\271\343\t\272\2717\323P:\037R\t9\0060\3539a\210\200:\350\377\310\272]\250)\271ip$\270\340\277\247\271\341Z<\271\366\002\3129\246r}9\005\224\\9\265_\031\272\010\372\004;\322\r\212\271Q\321\377\271x\343\246\272Cs\356\271\343E]:\302\372!8\177\204\3429\202\331\003\270)\226\351\270\0372\010\272/\365C\272\301N\21698U]9\3315\013\271E\025L\272hc{9\372\360\0009*\017\3519\321\201\2259AQ\325\271s\223G:u\371\235:\027w\2778Ec\0229)\224\2218\360$S9\332\226\'9Odc9\216\333z\271Q0\3349\343\021\2218\212\306\203\272\261\321Z:\213$0:\265\000?8\023fN:\320\245\2757\037\366\036\271(X\337:P&\201\271l{\203\272\375\232R8\027\234\3629M\311\215\272,\220E\272\347Y*\271\357\336\032:\350\\\027\272\271]\0248\323\307\244:\254n6:\377\300\037:\340\357\2409+7\212\272\235Zp\272,M%\272\307\305$9d\000F\272\206:3\271\362(\233:\207\024\231\272\007\3646\271\257K\227\267\362`\3379\224\001$:-\304\006:E\340\264:\024%\331\2715\343h:!\004\0149\240q+9o\360\023:\016\333E:XwF:\316HR:\207\t\225\272\203\267\2019\243\272\"\272\211@@:\230\336W9\337\222\3049;$U\272\026\265\227:\323z\2709m\355\237\272\273\003?:e;\017:\234\332\r:\255-\321\270\315\266\2369\265\256\361\271\375\271V\272\270J\345\271h,\234\271u\251\2079\352\365N\270\243[{:W(\273:L\311\202\272\207\033\364\271\036\261w\272\371\326H\271\211\300L:s\326\3709\205\377\0139\324\313?\272s,\3517\263$4\272pv\271\272\256(\3208j\326[:\\\300,\272c\314\3029\364\027\231\272v\267\3069<\244\2139\336\007\013\272vKJ\271\241\035%:\247\362l\272\340\267\2018\266l\251\271\261\017\240\271~G\234\270<V\225\271\347\014\324\2724\030.\272*\217::\275j\002\270\205D\206\271\344\204-:|\332):\262\253\230\267T\004\2719~I\224:\250\235F\272P92:1\313\3059\267\363X9\002E\0139?\233\300\271E\2576\272\236\023\025\271{+\001:\230\0356:\263\213\201\271\367\315\255\271\341M6:\217\373<\272t\322\232\271Q\004\2229\004\263D:5+\3059h)K\271g\245*:\361b.\272;H\3219{T\3179\242T\3608\373p\3249\026\3643:\366\325\257\270\225Y\367\270\231%V\272\304\001\2669\2136\031:\014OK\272[\204\210\271x\353U:\345\351\035\271y\233d:\237I\273\267\332\01359\316\036;\272\nb\2039Y\203\232\271\340\035;:Rr\3529\216\001\346\271\263\332\017:W\2627\271\235\266\2469\361\365\240:2J\3109\220I\217:\376\340\372\271D;\361\267L\220.:4/I\272\277\3752\2729\241\212\272-\372\263\270oo\350\271\216\367@\272\244=N:\302\346/\272\346\037_:\340\310C9\204\341/\272Db\201\271\263\346\247\271\235I\2307E\276\232\272\236\232\3339\214\033\004\271\350c\2509\351@\3009\274\330\264\272\024u\010\272\017\027R\271\3776<:\026\237\307\272\023=%:\366\313\364\272\346k\273:|u\004\272T\"\2459N\001\305\272\377\010\311\270\002\200\013:\341\216\361\271\336uS\272\265N\255\270\033\246\207:\330\314\004\271X\221.7\346GV8 \023A7nD\232996\r\272\000J\214\272\204\031\355\267je:\271\240\260z:\'\363&:\204m9\272\352G9\272v-\3659jn\016:\227\251\307\271K\311\007:qPf9e\364\3729\201\355b9j\346\013\271.&\3079\"L\20797\231&9S\001*\271\\\253\360\271*N\016:\207\005+\272\017\252\005\271%\340\310\271\262\244\2578\374D_\270IV%8R\013$8\371\201G\267\177\3500\271a\026\335\271\030\036w9\025\342\204:\004,\007\271\0244X\272 \277;:9\224\325\270e\353\0329\366\023\23797\001N\272\027dl\270d\235S:N\217N\272]\376H:F\313\314\271\344\260\245\271I\023F\271\275A\014:\324z\2469u\213-:\311\02129\014\245\222\272>\264\000:\327zY\272\035\312\':\360\341\276\270h\350_9Y\270\004:\356\305\210:\n]b\272\267\242\2318\344\212\037\271\237h\232\271a\325\005:j\231\3039\301\334\021\2710B\027\271\314\361\0278\371\201]\271V\316\245\270\260\203\2319\366\311\326\271ys,\272\347&J9~\027C9\371\036\0139\306T^:Fb\337\271\321$\316\271]\351&\272Wn\003\271\377\201\3359\352bd:\313\245\265\271|\2317\272\317\007\021:\030\037\232:x\200\2624\352<\217:\223\215\335\271c\247M\272t\275\215\270\261w#\2715\246\315:\354q\"\272%c.8\021\030/:\224\376\2769t\321\r:~8\0049\257m\222\272\233\370\006:P5:\272\357\260\3529\3766\007:\267J\232:\035\247\013\272p\346\346\271[\233\232:S~\364\271R\342U93\036\2419\027\232W99\264\264:9\250\246\270\321!\221\271\303\252\3549sN\214\271)6A\272\350\032\336\271\3135C\272\234\304%:\177\252A\2723\222\034\272\224x\3479\266-x:\206{J\266S\006\204\272\201\031\3679\232\372\000:L\225\334\270\305\371\33490{\3759\274{;:s\271\205:\207\233*\272\n\366\022\270\265\276\r\272D\336\336\270\313\033\3209\336~98D\266\221\271\206\316\021:(\3768\272JR1\2722H\360:e\275\364\271\227\027!:]\252\304\272\370\224\n:\'\\\326\271C\270\2239\02613\272\006JV\267z\033F:\356\315>\272\000\300\260:h~\0329e\016\0249\262\030{:^\222\215:\"\023u:aX\360\271\032M\3448j\\T:\017\304d\271\020\327\0219\2378.8\231!\3779\224\221\220\270\374&7:Z\324n:_A\"9\246\327y:\3501\2338>\233q:3\301b\271`m99\310\376\25794\247\331\270\251\014\3279\273/\307:\222\251\262:\026\362q\271O\230\277\270]\244N:\362\025/\271\362&\270\271l\265=:\265\013\267\271]c\0359\266\031\323\271V\226\223\271\363_b:1B\223\267J\242\3028\014\363d\271:\276\021\272iW\301\271\357+\'\272\014\200\0338\211A\030\272\314\331\007\272\315\347/\271\366\245\256\271\255\025\030\272^I-9\363AN:P\\u\271AT1\272Egr\272\274\037/\271\230\347\207\271/\026\3319\240\275(\272\377_\347\271\342\203b7\350\365\234\271\310\010\3028)\267\0369^#\004\272:\222\334\271\204\327\360\270\324\3273\272\024[\246\267\357\"\363\271\3547\200\271\327lF:\316\202\0209\013\013\271:\021\354\252\270\375\231):\220\246)\272{\246\327\271\030\327E:\333m\013\272\321\305k\271\261\254\260:\275\032V:\0054d:\236\014\':>U{9\321\233l\272\262\327\\\272\300\350\267:3\000\271\271+6\325\271pS\345\271\010\014\264\271\232%\225\272\037\217Y99\204\212\272;z8:\232\313\2519\266\016\2269\026\004\3048\242\212V7\336s/:\206\004\356:\341\002\031:3\301\246:\225\003\022:?\0058\271v\241\372\270\347\245\313:\035\205\214\272\365\233\2479\324k\360:\257\203\3368h\230n\271\201G=:C\305!\271\236\334\025\272Ir\352\271;\250d:*\340[\271xR\002:\306\347*\272\204G\005\271%\006\206\270\030~\270\272\001\030\033\272\345\242\256:\376\363\235\271W\022\3049P\\\3609\tO\010:\006\\%\271\246\314\212:\310\277\226\271\275f5:\242\264\2319V\261s9c~\002:Q=\353\271\336\325G\272r\033\2769\312x\027\272\251\016\3167\034\t+\272X\350\275\272\236\375c:\327c\0309\004n\270\271\224a\362\271u{\004:Es\2319\013\312\253\271BD\3329O4):\231\214\r\2723\242\3069F\332|9\352\212#:i@M\272\337~\2729\025\225\306\271\341\r\t:\"W\313\267(\'\202\272\306g\275\271uYT:\306\372u:\301n\3539\014\353\n:\035i\006\272\013\235E:\337\003D:Z6\2429Y\347\004:\204\020\3479\367\313=\271\261\365*:\351\374\005:\242\275\35592\206\007\272:\n\212\271B\373\24680\327\224\270\326\256\2049~\325\023:\'\367\2719Z\306):\327\374\3655\232=\300\270\360|\233\270\030\234s\2726\273\316\2718\270\304\270\301\247\205\272\275/Z\272v\202\n:\251\331q:*\305U\272\257\343{\272\217\nH\272\354\240\2469\306%k6!\240,\272\211%\3078;\235\031\271\257M\231\271~{\332\271m\277\245\272\025\217\243\2725\216\"\271\221\265X\272\026\270\3538\224d?\271\322\373\202\271\316Z\3749\016\341_\272\246P\233\271Fy\274\272v4[\272\014\r\3768\374\352\3329+\210\365\271\207\367i:\243\236`9,\253p:\002\313p\271}}\364\270\352\252\034:{>\274\270\274\02789\367\270\2059i\2455:\237\244\200:\311\233\236\272\227/\r:%\325\023\272 j\262\272\253\017\2218\212t\3309sYO\272\030?\2139\364\001(\272\245\305\265:\303?\0249\266a\3639sV=:)\031\356\271\025\0367\271\202\024\222\272\362\276\315\271[ -\271\242\366\2639`\334P\272\225\177.:Ih\350\270\370\322=\272\352v<\272\2728\313:\010:\2448\230\000\3769\205 \0069\370N\2538cT\014:\342\213\3568\031\321\031\272w\276\3519^R \272\033$\244\271$\027\322\270p\241\235\271z\210\215:\332\252?\272\003\203\31790j\204\271\226B\2039\032\215\223\271\3319\346\271\201-\216\272`m`9s\333\34198\320=:\343\370\3708\r9\033\272\255\361\250976\002:\344\322\023:Y\316\365\271\310\226\t:\334h!:\205u\2509/3\3448\366\001\3169\322x~\271\360\310!9\273\371|\271n\233\214:\334\225\'\272\036\000\3369\244&\2049\215R\006\272\263\304W\271`\300x9\326 \262\272,@\3749\356\224\342\271\253\377p:\305o\21494\374\227\272\233a\316\270\371Qo\271\364\364\225:\257\017\005\272\342\242\2129\027#\020\272]\366\356\270\307\230\225:\356\324\243\272,\003K8\365G\207\272\326k\3229\315\242\212\272\321\244\211\2713\037\3079\272\3422\271|p>\272\234\212u\271\342\013`9\301y\036:\340\310}8 \350\2439-\346$:#\211E\272P\263\251:\002@\211\2717\323\304\271;o\217\272A\300\0149\305157\342\227s\271\274\266.\271\335\372\"\2719\212\3719V\362\022\272\215\215M:g\272Q9\375\365 :]N(\271o\207\030\272\255A\":\333\343&:J2\243\271\344\250\001:q\\K9\217_\2159s\320N:\227\254a:\375\301\350\271;\215;\271\321\264\337\266\210m\356\271\313K~\271\330\000\207\272\032\356\206\272\217\235\021\271\326\010\010\272\001\311\031\271ML\214:HJ\2768\366\375\367\271\230\214\3019\351\230J:4\007\006:\231\031\017\272\263Ws\271\376\036\025:\320(\200:\250\367\r8\260WN:\\\214\373\271v\037\0278\363\373\0309hR\3329\032\2709\271\300-q:\032g\022\272\250\014\035\271\340=\210:\225x\316\271\350\205\017\272;N\005\2715\247\3568\210\177\267\272JU+:\037K\"9H\342\016:\212\304\2519\024\317\370\267\032\251\355\271D\272\005:\243q\317\270\303z\3418\373Z\021\272S\'\300\267uSt\272\201\036\014:H\025\207\272\024\311e\272%\026\277\272v\345\03235\344\020:\020T=:\352\244\35780S\000\272_\333!9\036\316A:\332m\313\271\315\2778\2723\321]\272\325\025%\267\020B\017:\254\005\242:+\027z\272S\000\3648A\332\304\270\275\372I:\307\375G9Kk)\272\250T\2139\374\345\265\271\275b\034:!~)\271\240 ^\271\032 g\272dr\363\271\306\237\232\271\200\232^\272\232\262{:\343\245\232\271\337s\023:QP\245\271b\305!:)\013\033\270n\033A:\310B\235\270\266N\3719w\230\216\272\322l\014\272U#?\272|\010\0028\252\346\3109\233\303\2336I\351\337\2704\247N\272\341\354\2169\226\224\374\271^;2\271\3578\031\272W\262J8\024\313\210\271\177>x9=\344\2569\023\32458!\356\256\271\267,\267\272\303\333\22095\364M\272\220\0026\272\216\360L:c\332\'74\252\t\272\334\344\001:*+#:\326\275e\271\211\262B\267s\255K:\372@7:\034\037\025:W\243X:cF\263\272\3238\262\272\365\272p\272\320\224\325\271*\221\346\270\370\307\224\272\343\346P\2723S8\271\316\324\0179\007\'::o1d\272\246\252\n:&3d9\312\263\337\271\t\300\3068\032\035%\272\261\367\037:?\361\264\272\231@\331\271\034\000*:\2306\307\270\303\0335:y\311\370\270\255\320,:+:\2349\255\245\\:\205w\317\270\334&\225\271%\330\202\271\335\217\037\270\377\000\n\271\345\200\334\267L-%::\361\\:\265u!9\023y\204\271x#\36590\026\320\272\0253\035:\2137\'\272+\020\302\272mQC9+\250\213\271B\274\010\272d\222I:\204\217\031:\017\300\235\271\227\367\217\271\337\n\254\270*\205\2609\266\222\3519\363\256\3409\335\331b\272\221G^9\221n\3559\336\234\3769\312H\024:\202\024\251\271#\250j\272$\276\036\272\327\362k\270\234u\203\271VvW\271\302.\247\267\200O9:\256\351,\272W\250E\272?\3169\272\247\373W\270m\352\342\271\335\366\322\272\n\225\025\272\225\254v:,\306K:r\250\376\265h\263%\271\367@\2529\'\001\2239\244\227\\:i\211\237\271\"\274\266\272k\370*8{\335\2379\222\244\204\272i9\3079\366\023\t7<\326\032\271Gx\244\271\363\205\344\271\274\244\3059\245\366\2278[4!9\025<u9\323u2:@\276\2769\250to\270\001\255\23598;\204:\252\206\203:\267Jp\272K\313\234\272\250\024t\272\342\270%:\314\3700\272\271R\357\272\327\216.9\032\207k:*\244W:\3012\3208\363\025H8\246Z5\272\277%\327\271\350\220p\271\250<G\271x\247p:Z\214\2718\271\211\205:\361\226L\271#\274\3529F\023B9!\333\220\270\205\006\036\272\326-@\272@\257\304\271\325X\222\271\276\264C\272\370\253\354:\311-\2629\373Z\3619\276\301\255\271NVb\267J!\334\265\023\272\3209\220:\240:\253r\023:\004U\223\270Mu\243\272V]\004:,\233\206\271dTl\271R\251\005\272\244\350\010:\230\206L\272E\261\252\271\t\257\341\270\320\236\3229\336\"\231\270)$\2019\273\247f\271\330v\251\271t\371\2059?V\0109L\376\006\267F\335\263\271\264\351\2358\356\312\004:m\026\211\271\233g\3339i:i\272\223J\2469\230\312\n9-\364\2469\213\315\026\270f\205\273\270\321\371\2779\307\007\304\271K\266.\271t\334\2019I!\023\272\270\201u9+\261z\272g0\t\272\026\2159:\006\005\016:\274\3361\272m1?9\242\237/\272\360\216\'\272`\357\222\271|\243{:p\370F\27215\203\271\343\337\t9\313\243Z8\214\277\204\271\007\336\344\271Jnd\270\200\213@\272\327\310\277\271\254D\223:\326\263\021\271\246Dw\271{\322\3609\264\014K: \351\233:\340\377\2359\263\362\237\272Cqs7\261\000\353\272d\361]\271\023\223E\271\342\324E9w\207\244\271e6_:+1\372\271-\304\210\271\023.\211\271\304S\204\272{\240\2569&\347?\272\3177C9\355\325<:\360\351\3039tX\023\272\345\2478\271\034v\202\271`\275\3559#,\3008\016r\236\272\354i\253\271\322\220*:\2108B\271\211\230\263:\315\010L\271=o\2579>^q\270\214\3025\272\226_\235\271v\235\026\272\342M\315\270\317\322_9\2745\254\271uA\2469r\266\3228\310\312o\271\030\305\323\271\023{\0369F\213$7\246e\036:2\0143:\227\003#:\263@\206\270\204l\3619\334Ha\271%\344\2179\250\207p:\371p$9\033\337d\272\320{\213\271/\235\006\2727\227+\272\373#\367\271EJ\"\267%\350\205\271:\214x\271\375ad\271\356\343\2629L\247\345\2714\220\204:\323\227\363\270\345\274\243\272!l\311\272\2118\005\272\325\266\001\272{;m:e\234\3639\003\202\206\2677\250\234\271\257\313\3429\213\236\2679b$\327\266\306\\\270\271\235\177\242\272{\315\010\271/\336\2339\230;\236\271CF\2559Xh\3349PE9\271\020N_:\335\243\2739\213\230\3678r\346\2427\257\312d\270\210\216V\272\263F&:\214\332\2129T\264\032\272\336\244\0269\236\212\t\272\365\264\240\271\237\353\257\271B\372\000\271\304\026o9\342z\3709\200\013Z\272\252j\3628\340\037V:\354G\3229\003\035\241:hd>\270\210\357\231\271 \261\036\272#,\2076\314c}\271\2641\2109\270jO:\3757\037\272\222\233t:\021\005B\270G\362y:\303\35748\257\346\2379]\321w:\031\361\014:&\242\2467\225W\251\272\017\321\347\271\3300$\272\252\266\345\271\nj\0148\016\230\267\272\276\366[\272-$\3018v\234-\272\311\003\t\272A\270\0379o\276g\272L\243\303\270~\264\313\271o\304\3329{G}\271j\2624\272WYN:\n\266\326\272nh\2218\255\346\2278vy\2247.h\024\271\0273\010:z\251\002:\354\316\237\271`\320\326\266\243(\256:\214w\362\271\230B\303\271\327,\262\271o\323\3638\017\000b\271kU \271\2302>9\377\323\2329\351\034U\271\234\203\2419\211y\364\271\"\027C:\223X\2109\323\373\2568\213\277\221\271\3663\034\272\352\371f9S W\271\377\023\021:\027+\350\272\260\010G:\036\032\025:\nf\243:<\347\360\271\221\202\010\271\344\0226:\353\2073:\321\275\261\270\271\240\000\272v/\235\272\267UW\272\016\300\207\272\236j\337\271C\365\202\272T\272Q\271N\310^\271v\231\311\271\361\3640\272\325U]8\"\336;\271+\342!\270\371>\n\272Kk1: \237\226\266\261G\310\271+\r\3769\307\227\200:\330>\2439\030k\217:\207ba\272\325\221&\270?\324\005\271N\252\0209\373?\2159 \207\3009\271\316\3279OT\2069;\204\277\271\331\300]\272\t\331\322\271\304`\2769\"<\215:*\030\262\271\251\270G:\223\261\310\2673\n\004\272&\354\267:.\032n\272\233>g8qI*:\255\275\007:}&2\271:\327\1779\304\237i:\272\026\240\272\215\000=\272\253\264\371\2717\000\3728\371\306\003\272\235\266\233\272\244\325d\272C\245.:\340v\2729\217\267\002\272i\367M\270g\260\206:\221\220T\272\276\327\353\267\364\274\3507\251x\26298\331\366\2712\331\221\272\240\022u\272\304\227\3758\006K\0359x>\0109\275\242Z\271\0243D9\324\216\004\272\344\266\315\265\363\331;\272\272\366\2177;\224\310\271R\302%5\267P9\2713\240\203\272\331\023!\271\250n\2139\233\320\2739Y;\2059\263\334\206:4~\344\271\305\333\3369\277\301\322\271f\217\010\271\250\254\2249\032>\035\271\370+:\272\325\276\342\2717\2402:\302\010Q\272\016\253\'8\376~\305\271R\217\263\272\230!\0368\346\274\312\271\004\343\345\267\313\253\030:\306\252/:\307\377%\271%\0014\272\230\265\221\272ru\026:\222B\2109\231\003B\271\213\226G\272\327\260\0149\376eY:\210y\307\2719b\3778}\033\026\272n\200H\272\003\255\356\270\341\277\0379\254\256%9{\253\025\272\023\200j:;\033\303:&n\200\272\266\376P\272\315\364\032:\3330\002:\032C\2739\337gf9Zy4\271\013yo:\273k\000:&\345\031:\304*\031:\332\316\37196\350l9C\341\355\271\236\364Y\272\344m\001:\251V\3579g\302\2309;6t:\262B\243\272Z\205\001\272F\013k9\325R\231\271\246\354.\272\021\255\216\271\201j\2039d\243\3349\'~\t:I\377\217\270\362@\021\272\016f\223\2719\r\006\272}(5\271\371|\3537-\320g:o\210X:;X\214\270\202l\304\271\336\237g:\354\365\232\272\331)\017\272\030\373s\270\304uQ:\365\003\013:\2728\302\271[5\3548\373\236&8\031\020\314\272\266\225\3438z\271T:\026(\2059\266\222\020\271\205r@9\324\343\3668\367-a9\240iv9\303\212&\271\354@\237\270\261\320\2009r\000\3079\376\034)\271G/\t\272DN\236:\356G?:R\022\335\271\003a\026:2\317<\272\362\013\267\272\336`\224\270\223\264\2449\2545\246\272\364\265Q\267\312\215\235:\273\327\r:\033\254f9|{S8\241\335\226:0u\3319\025?i:\303\254\0039h\027\2039\350z&\272j~+:T\266\225:A8\3377=\324\2069\316^\332\270\237\362B9@`\2729\363\332\0039\322`_:AF\3747\302]\204\271\246\237\25791\302\263\270j\203\224\270ec+\272r\0217:\236~\021:]\243\2079\354_\363\271\215u2:\204\221\3278\205\253V\272R\r\177\271P\310<\272m\304\0209?\252\247\271\352\350\231\271O\244\2109$U.\2726\254\3239\273\016@\272\306\322\3708\263\340\330:\212E\3579#\300\2259PZ\0359\tv\0228kS\2648\t\341\2179=\212E:R5\3319\024\335\2719y\206\2569S\313\3758\220\273\260::|\2609\363\025l\272\241\336e9\322\241x:*X]\271\276:\024\272\306\220\202\272!#\325\271\274[\234\272\202\'\000:]\020^\272\206;\t:SyP:\370\353\3659\322\324G:\207Q\24392\261\251:\267fk:\200\267\376:\353\006\2009\207\247(\272\374\345\034\272t\221U:\336\000.\267 \351\035:\210\221A:\350\250\277\271\243\302M:c\203\3779\234\317k:\333\233\236\271\206\034\3268\020\225(8]0\2369\001\222\3479KB\220:\213\210\3649\242,\3678ns\2429\343g<9f\214\016:\217M\216\271t\301\2368\276\360A9\345L\323\271\214g\220:\241ZA:e\376\3148\370i\2447\233(D:(\301-8Mb\262\271\352L\2479\201\276I\270ae\027:\250\374\224\272\324 \255\271\271\211\3279\017\221W\270\321_\3069\352`\3469\222AY\272\025\373t9\035EV:?\312v\270\337\3553:\304\177\2227t\315\253\271\203\030\223\270\203\336\3239\323\345\3639d\3270\272\320F\034:YW;:\244\331\2738I\334\201\270\271\027E9a\340i9\334j<:\244rs:\027\277y\271\231.\332\272O\305?:\344\220\2759sHk\272\356\252\227\270a]_\2729\246\255\271\232\240\2219Ci\226\2713 \3238\206_v:\251w\266\271\265\37618o\274\271\2715[\271\272K\021\3209\002r\270\271\3420\3349\374\247J\270\366\260z\272\241v\177:\230s39;\304_\271\374W9\272\274\3274\270\203\235o9\000\301\3339\203\331\022\272\027o^\272\254\0251\27256\203\271\201#\2116\210\300P\271t\233\3379\313P\n\271\311E\334\270\020.2\271\361\332\234:\227\234\216:\203\230\3349\304~\256:|sv\272:!p9\201\237\275\271\255\303\327\271\237\251::e\035\033\272\260\003e\271r\250\225:\361\035\3048\273\232\274:\320\213\002\271\222\333\232\271c\326A\272\205R\242\272\276\021d9\373@-\272\337\r\240\271\021*\354\271d)\221\272&\251\010\272 \024u6\010\327\200:A)\342\271\225\203\":r\267\344\271rZ\311\271\306\301K\272c\373\330\271\252\376\3549Y\033\205\272\305\344\036:\000F6\272\315%\0268\034!\236:b\366\275\272*\002\0179`\342\0049\000S\2319\306\222r9^L]\271P[\0179,>!\271\n\034\255\272(\375\276\271\031\220|9E\215\2669p\240\001:\336\202/:\256\362\003\272G.2\272.\2705\272\215\005\3617\2151\006:\241!\3559\216\246J\272yT :G\356_:\225\230\3129\022\324\r:tB\3078}\343\310\271k\324\2579\266\357\210:\302\000\236\271\346\242\236\271wb#\266\236\321\217\271\350\243\213\272\241\323\026\272\200\237\241:EM\005:HPN\271p\277N9FC\230\271\221\2176\272\342\031A7\243\240\263\270Z\007\034:2\356\261\271\265r\3008\201\003\021:\254\003*\272:\030\000:\300\211\2239\340\355\242\270\300;F:\315:t9\360q+\271\213yF9\372Z,:3\331\2529\225+\313\271kA\3259h\261\2039\3374\225:\374]\030:\'q\2729\355J\2158\317\021\202\272\023\345D8\315mA\272\340vO:>\035\2378\006\010\"\272\021\3644\272P]`:Mw\3578\344g\371\271\263\017^8]\033\210\270f@\0269\342\274>:S\177\3558\216B?\272N:\2358\333a\007:B\311c:\347\360^\272\260\\D\271\002\240~\271\372^\242\272\311\004G\271\006\235\034\272\234\326\3219p\373y:`\242\236\267zZ\010\272\":\014\272\035~\245\271\214z\207:\2437\027\272L\037p\271Y\225\034:D\300\3349\261JM\271}\376\237\272-\024d7\0276[\272+\022d9H\005\362\2678E\227\271-\265 :Zjr\271\t\337w:\236^\303\270\274\340\0339\243WZ\271\317\013\t\272\353\365\346\2718:B\272\3677\2119\000s\024:\307\"\333\270\266\001p\272Q\034\371\271\3541%:}\036\2269tM\211:\021V\324\272RP\2729\003\277\013:\316\336\360\271\271s\225\272B\016\256\272\'Q\001;\0310\214\272G\310S9)A\32382Wb:\236v%\272n\2555\272_\251C:\030\270\r:\330>$:T\331\226:\346\214t8\263\355\035:\006\006\303\270Y\202\r:\265\350\2439\316\004}:\177\036(9B\251\000\272\211\017G\272\305\323/\271}/+:\025|\217\271\227\351H\272\277\333X\272G\237~8\342\013V\272\240\260\313:>D>:\026\303K:K\327F:\202\324\006\272m\213\006\272\347d\214:&\335\223:\355\013v9\320\247\217\271c\246\2159\334\225\210\2723\003\037\272\r`\3157nC?:F\0363\271\205{8:\273\371,\2711\214\327\271R\266\337\271>\2446:\230\250\231:\354\340E\272\361\010_:>\241=\271f\274P\271\023;\223\272\003,T:\332\211M:\0378J:\320\277\260\271\303<\013\271\263\016\373\270\345\216\233\271}C2:>=k:`\014\223\271\220\363-:@\365\2678BM\3269C\027\030\272\317\366\014\2721\257\035\272\226?r\272xh\2519w\3631:\330+\266\270k\307\362\270\366\276G:\031t\003\272SO\013\267\002\356\3009\362e\034\272P\002\2039h{}\272\271jm:\303\204\230\272\026\rM:8 \3239\200\271\233:\350t(9a\327\003;#I\034\272\311\330\342:\237\332)\272\270`\263:f\221\2129_m,\272\210\235\223\270\002\330\2429aL\326\271\024^\203\272\377\261m\271\352\260`\271\207=\002\272\020\224\3478o\271::\207:\021\272f\021C:\347\321\3549\351W\216:\\\350\233\270d\343=:\313m\210:\222A6:\3377\333\271\235\262?:\307G\2549*\351\312\271;6I\272x\350\'\272E\275?\272\367\350]:B\227\202\271\220X\2239\366\242_:\2042\3049)^\2449\367\222\2349y\n\005\270\314\300 :3\030\255\271\000\300\022\272\356\373)\272g\227K:\230&\203\272\210u\262\271\013km8.w\2539[[\3419\0233\223\271\226!\220:J=\312\2718@L\272,\233@\270\2053\327\272\340\377L\2723\345`7kz.\272\264\003\2039\307\007\255\271\266\202\3419\332\032Q\272\357#\3347Pb\014\272\210\032K\271e\361\231:z\010\345\270\\\275h:\221\315$:\375\3568\271\263*\032:\t\01769\014\321\2229\211\035 :`\202\024\272H q:Y\321\2119^Q\205\272\362o\3049\375\r99\316\007&9\313\300\227\270P\344\3439%(,\272\030\007\3028\332?\3159\253\233m\272\177\355?\272X\021\003:1w\2259\020\3772\272\277*Y\271\233\334C\271\205\234\3079\204\206\3249\233\367Z\272`[N:\377\344\221:\365 \240:abW9A\221\247:\364\315\2029\037l\267:|\013J:?Y\016\2715\236,9j\2669:\225b\2229\001[K\2727\201]\270Z0\023:;\276\217:)\261M\271Ko\340:zoG\267e9\207:\244\351W:\031\0366\272\322R\222:\277<V:X\246V\272\250\352k:K~\226\272>08\271\272k\2719\2057[:\037\177\226\271\"\034\306\271`\246A\271\370\366\227\271\224\365 :\336\210k\270G\342%\271E\177d\272V\265\3469\320Z\217\271\325Qc9\017\022\3549G>$9\322\320\201\272h\334;:\235\020]:p\365\'\272\254\332\355\271\205\251$\272U\333\017\272\313%\2049\240A\316\271\225r1\271\024\001\007\265/\267\2579M\347\270\271o\340\330\271);9\272C\225\2559+gK9\033%\242\271=\327\227\271\263P\323\271\017\014E:\347a9\271\023\256\0029PZ=\271\354n\213\271+v):d\264\025\272\327[\2638\005\341\204\270\374\213\333\272i\351\020\271\300\324Y\272\023\027\037:\3232\326\270\262\362\"\272\007\272}9\243b\\\272\237p\205:Y\367\215:b\270C:\234\247v\271\250\025\2559\271Aa9\213\3047\272R\205E\270\265p\207\271\252\316\3039{H1:J\233/\272\n\354I\2729o\323\271MD&:W\310\2159l\366\2459C\006\3209\2156\007:/\365\2339\013Z^\271\010\017\253\271\216\373\27381w\273\271\230>7\272~\300\205\272\252\305\2329\316`\270\267\256\366t\272\020\217\177:s\215\314\270\020\302\3657\200\356\226:M\031\2609r\206\270\271\343#2\271;W3\271k\335\3669X\323\3409\321\000\200:\236\242\3049(\237\20098\316\230\271\034\274[8\354P\2619\252J@9A\227(9\235\301\256\270\013\226\025\271\267\226\254:\320R\002:E\257\242\272{E\305\267^\371I9^\370\3049\206,Q:\340\347>\272x\221\002\271ya\215:D\212\357\270\210\216\006\267\\\261\330\270\312\322A\272A\261\n:\205`s9\',P8\030(\3578\373\346\0239\007\027\022\272u\230\206\271z$\2739\217\276\007\271\342\313q\270\246U\3679f\004\217:\0063n\271&\361\344\271\260\251*\272\352\267\010\272P%R:q\363\331\271\341\243w:\320^\210\271V\322\242\272\330_/:e4\3129>\323\2239\230\316M\272\212M\274\271~\025\240\271[\251\270\271g\362/\272\264\257\262\271\010\214\211\272\272]\264\272\nGI:>\037\233:\254\253\026:\255F\017\272.\272\203\271\\\272\030:\036\320\201\272g\326\211\272\014E~:hfQ:\345\256\255:V\205\007\271\277\322x\2703D\313\271U-\037:q\245\01784\t\010:rZ\025\272e=#\272\366\264 \272\257\254\033\272\'\357*\272\341\035,\272\313\236E:M\005\177:\201\206\345\271VJ\253\270~\214\2208\007\202!:=C\r:S\301L:/#<:z\235<\271\232\023\3718\242\202S:O\354\234\271\364\2263:\023\24468\025\333\210\270\032\007\211\272\265\023\2479\243\370\370\270\257\230\315\271\036\302\3619P\24439s\205\032\271\305?\2579\213\206\026\272H\374\244:\270I\3519=\271\272\271\332\240\0109\256\035\273\272\007$=9\216Ik:I\324\177:\221\235\364\272\250F\3219\007\371?\271\203\003\226\271\024\274\203:\224.\256\272\026Jt:\"\214e9\205\305\3529H\231%\272C\270\'\271\223\005\216\270\242O\256\2722tA9\351\345\367\271\"\005\370\271\013Y\355\271\301\177f\272I\201\'\271_x\3719Y\033\233:VY\247\272\232\315\300\270\270E\0018\206!L8\347\013\332\271/!\0239\330\324\2469+\327\212\270\267S\021\272wx(\272\267i\213\271\336\354\204\271[TZ:\017\360\255:\005\302V9\244\313~\2719\205\004:g\362\2549(\325+\272\033\300\203:\0203*\272Q`0:\224\337T\272\215A\2519\"\211%\272H\252{:\024\2613\267\340Z\216\271y\331\224\271Qo\253:\336\37118\305\241A\271>L\3329eHG\272@\n\177:\013\372\2069\347\031\200:\303\332\372\271\210\r\3227\n\305\254\270J\177f\272 \332v:a^O\272xdv9n\035Z\271\241\237\315\271\300\207c7p\266\214\271#\005J\271\311o\214:4\374\321\271]b\236\272\263\025\2129\316xB:R\367\035:j\243\3059u\234/:\024;\013\272\332\241\26394\375\035\272$N\330\272f|\3549~\311\2479]\261\3319s\210\222\271g\36709\027\302\t:\020\005\275:J\352l\272&_\031:\337\273\0019\247\353\n\272\034m\022:N,\030\272q\241&:j\302\204:<\300k:#3\3117QB\270\271\241\260\302\266\341\037\230\272p\245\2658\225\021\202\272\304\024l:\0072/\272\344\030\224\272a\367!:\002\335\321\271+g\233\272\330\360\2479\320JD:\354\255\243\271\362B\010\271\002\014\325\271\327^\304:\275\262r\271\224\364G\272\270\\\3569\342\314\3759p\314r:44\336\271`\327\3218\272\374\320\2716\352z:\024p\2419\342\364\341\272\002\343\200:\321\214\026\272\260\240\202\271\203\034v\271&\343\307\267\314\317D:\347o]\272Z\177\0039{sI:(\323\300\271\212]\244:\235\241\2409\\p\323\271\237u\021:\322\350\2229\305\2318\271\t\321^\272\314\013\2669\302\252M\272\205Q\2019\355-\361\271L\240\363\271\273~\265\271\377\323M\272\237>\355\271@V\220:\313\3741\272\306\'K9j\215\006:\220\035W97\024v9\'.P\272\207\004\303\271\273\202\2029(\035B\272@\310I\271\342\276c:I\24698q\217\2239\206\202\221\271!D\217\271\260\246\3318\222\261\3278\354\217\231\271\212\217\325\272\353\207\3149\363\210\3379\026\031\3539\257\342\023:\020\310\004:\372\340;\271ZaS:\021\t\010:\364\235\235:\204\30659y\363J\27265\266\271\220\372%\272As\323:x\340\2339\330Br\270KZ\340\270\236=\027\272\340\030\\8#\377\2059\252\322)\271t_\34393R\035::@\3719|\n\224\272\312\355\277\270\222\214\203:\031S(\2724\274z7k~\375\267\355\313\027\270\344F\t\271\331\000\331\271\304\322@\272=\275\251\271\2518\004:\003\332Q9\337\263/:\233\350A\271\007A\020:\317\255\275\271\262tR:\357\311\002\272\023\000\014\272\302T\244:M:\230\271q\r(\271\242\201\207\271dC\2449\005=\014:\346\004&\272\356\274}\272\301\301\031:\223\322\0279\203=\030\2729u=\272R\366\024:\240P\37188\3535\272\367S\3319\326\240y:\361\337\221\271\201\364\3329\267\314p\272\357j|\271\224\315-\272#\306Y:6\312\226\271O\331/:&*\265:\312x\331\270g\235\2028!\224\021\272=6V:Y\200\364\271\261\361A9\333\023\257:\350^\222\271\344{\201:0\226\003:\316j2:\001fq\271\233T&\2725\324\2119\034{P\272H\203\0179\356RL\272\203\000w\272\'\365\210\272l\243\337\271\006/\":\177.s9\353t\275\271CRF\272\267\270\2559\300\334\234\271U\263@\272\020\250\025\2723\347q\272\344\312\364\271<\031.:4\256\331\271-\247\311\270q@\247:M\220\022\272\306/\037:\303\233\007\271\004/\3419Z\207>\267\366\253x\272\035,\0049\317N\t:\271\240.\267\000\354\354\271\207:\3219\246\346\017\271x\026?\272\013\210r\271\277\377\007:\222\250\351\271\t\264t9|D\027\272\000\335(:\260\322\\7L\250\257\270\343\335\215:\025lQ\272\355\020T\272*\000$\272E\317\2629B\301\221:\232\303\202\270k=\375\271*r\2658^\324\325:Ma4:\352^\2538\345\375.\271\221o\333\271\014\350N\272\035P\3379\326\325\304\271O1\2178\272\212\2049y\224\2148\244)\001\272\207\224\232\271\364V\300\271\364\314+\272W\270{9\333a8\272\314g9:O8\3239_H\303\271\306\337\035\272\020jH9\233$1\270,u\322\271\372\024\201\271\306_\023:\244w%\271\207f\3159R\364\372\271\002a\274\272\226\216\0329m\311l\271|\314u9\357\301\n:r\3313\272RS\337\271\217\235&\271\220\265\032\267\276\001):4\234;\272w\360\034:\230\3635\272\262\232c\272\335C,:\t\263\0228B\r\3169\216y\2449\367\037\240\271\322L\3208\303(\000:\356\2458\271\314b*9\306I\223\272t\263A\272Z \2639\021h\034\272\r\322\214:\315B\2549{@J:\236\315\355\271\323\r\017:V\006\255\271\004\360N\272Z\006\351\271\"\003\3749\335lG\272\243\274\376\271\330\224\001\272\".\3629(\356B\271<P\2769\023j\000:\213=\371\271\304\300\362\271\330r\222\271W\320\3659\224\334\330\271\205\340\217\271,\345\362\271\322\244\235\270v\362?83]\326\271\027\244g9\326\320\207:%\273\214\272Mji\272\316Oe\272k\273\3708\341\213\2529t\246,\270\274\304\035\272Y\007\026:\016\274\247\270\030\240\3059p\323\305\271i-\203\271\264\245\010:\266a\2748\001\365k\271\026\250f\272\226\314[\270\344q\2769\024\221\215\272+\262\266\270u\243\2469YQ\240:\341w\207\271:\311\3049y\026O:+\256\n9\033 \3759Z3\243\272\"\241\372\271\255Q\314\270\350\027\36398<\023\272\003\212\005\272Xn\017\272 Z5:\267\337\371\264\001\262\032\271\257c\326\271\343\334\027\272\t\213J\271T\361\0138\037I(\270\2410\232\267\366\260y:\037\274t9b\213\031: \265H9C\373\215\271\000\025\3559p\030j\272\212n\3009\302\024\2469\250\301\373\271\234\377G9\263R\30398(\3509v\3158:\3150\330\271\331j\222\271\2510\3348QZ\031:O\342w\272\343\351h\271\014z\031:\217~\3719l\270\205:Hl\236:\013\311\"9\205\316,9Q0\231\272|D\0318T\324\034\271\033G\005\272{\t\312\272\212\341\2067\334(S8\016E7:\005\014\240\270\266\327::\377\315\3079\313\272\215\271\321W\243\2716[*:m\321\2749\367\t\37092O\310\270\016!\307\271\026\334*9u2\230\271\246\335%\267\233i\0079H\267\2219jU\223\270!\363\024\272`\326\213:\333\363\262:I\372\031\272\266r\272\271X\223\3548\333\220!\272\360\307\352\271\363\264\223\272\246\276\263\270`3\202:&\025\2609\224\001\205\272\301\255\361\271\227\352\3418{\354\'\272\030\2727:w\371\0259y\221\241\272xR\241\271u\237\3559\005\311\214:+?\312\270\310\344o\272\307-e\272\357\223y:\205C):\000\326g\272g_\003:{\02199\266\006\200\272\t\313J\272\344\372f9r\3744\272\312\363L\272u\317=\272\\^\022\272\241\177v\272\301\3376\271\205\222R\272\223\363\306:-\311\3129\001\305\3269\245\373m9\303%\311\272\374\022L\272\007\334-\272\202a\215\271\201\352\t\272\016\004\2349\313\361\2619\006hi:\3772\3118;\272\3338v\31078\025&\302\270,;T9\317\377X:\035\212\005:\277\003\235:yQ\320\271\370\245\376\271\315VA9\217It9\275\016\010\272\253\221e\272\223\365\n\272\256\263\272\267\304\030>:\277\030\2069c\203\0069d\274 :EI\2519\362\340\226:\252\331z\271\255\327\25688\276\206:\375\233\222\2719m\037\271\020\362\2369\266\214-:B\236\355\271\324\275\3228\024\2673\272\203\371B9ek\3419\n\254\360\271\251\3344\270\243\356\3539\266lB9\2411\327\271k\243\246\2700\3330\271&_\2759\020\341\006\272J\244\027:R\230m\271\365\n\037:l\177\231\272\251\376\274\270H8\233:?\205\2349m\\)7Th/\271\006&\237\266\010\343|8\346\307\3229\301\240\003\272\350\231\213\271\036\346\262\271\244MG:>V#:b\017\021\271\t\367\201\272\201\277\342\271\356A\2049\251\033\2159\215XL\271\002\256\025:\316.\2519\035\264\016:KB\035:\362{^\272\245\005,:(\212C:\034s\2338H]\'\272\027\001\221\271T1E:\253\023\006\271\221\247\3068\312\033\036\272\277\217\2059\220\341\304\270w\304{:\237v\340\271\277A&9;f\201:/\361$9\027\304z:\224\013|\272\322\237N:\315f\010:6|A:,<\3519\341\235\220\272\206#9\272<\353%:\245\005\345\271\200\017z\270\347\276\013:crt:\032a\301\272\312kT\271$\32399\267\341\376\271\317\314<:\214s-:\"k\2179J,\241:x\367^\272\304~\3529J$B9_\0161:k\026\251\271\201\255\00594\034\2627\250 \022\272G\276\002\270\374\016\225\271Vt\0239\0314Q:\252\030\r\271\312\370J:\323\3707\272\307\024\222\271\351\217+\270?\270J\272\354\326\3619\326\342p:\022\326\265\2711\010\034:\313\305\3019\036\244!:\253\006]\271\217\325A\271/J\3769y\030Z\272\353\360\211\272+J\306\272R$\270\271\321S\255\272\035\232\2748M\033\347\270\351\024\2219\250\342\250\267\021Y#8f\353\347\270D\022G\272$t\227\272\301[F\272\021/\3308k\"\237\271c\327~\271a\265\2339_\374\2359uV\357\272\3078\251\272\371\264D\272\276@\252\271\345\222.\272\037a;\266\035\017\036\272+\235\2728\337\027:8&\005>\271\300.\':\213a\3078\376 6:\226?\3748\227\220\2559\003\000\255\270Q\357,\271\027\206\271\271\205\250^\272\375\327w:\363\360\3127\363\271\3739\330\237\001\272\343\357\216\272mQ\034\271e?\034\272\024`=:=\274u:\320\312\2129f!\260\272b1\r:~\312\2569`\307\214\272\300\374\3359\222\246\2749\334\362\3149\035\322\n\272\356B\310\2714(\257\272Xq1:k\210\3119\035\2314\272\315\235\224\271\340:\005\272\031\037\037:%\030\241\271\373nG\272\367\023\222\272\004v\3009\003\336I:\3557\255\272\004\315\024:\335\225\265\271\014\023\2538\242\334\241:1>=:9\215\203:-\263\2739\227\205\2708\210n0:E\240\252\270\231\370\305\271sU\251:\200\366R\271$\031\3409\355\0215:Ge\214\271\005l$\272)qS\272b\214!\272\023\326X:\220EY9\222U|:\250\267\250\267V\357\2148\302\254<9\033C\226:\205\275K9\342\353\3319\225|\246\272\342\"\2649\352\370\3259\326\354\3278\350\300\010\272\356\027a\271^\227\304\271\2670x9\r\217\3278\033\3779\271\307\2035\271\316\356\3779\001\001&\272,f\263\2714\253+\271\311\0343\272\032\363\2009\221\276c\272\031\237\230\272g\201 :\337\323q\267t\006\2469\352\367U\271\26330:\032c\260\271\035F\2609\213\376\2519-\371\33590\233q\272\266S\2269\205L\017\272\337t\2718t\003:8\247\225>9\356\213\215:\361=\":_s^\272\233q\3527\367\252k:I\231\216\272\002\264\254\271\356\242i9\313\324\2468\366R\221\271z\327\2149\0020\013:!)\2569\246\005-\270Q\334\330\271\024\036\261\271\227\372J\271\346y\224:\001\353\227\272\034\036\3409\010~\2579h\257K\271\226d\201\271\322\206\006\271\363\016;\272+z\021\272\360\'\204\271\017Na\271\345\371\214\271\24547:\264\261*\271\211\207\2779\\\313\211\272f\007f\270x\010m\271\254\224\3039\236\177\201\272\255\266q\272[\230\205\270\'t\301\270\266\277_:\304m\214\271T\034#\272\230#R\272\366\353x8\263\000d:\344\177\0259\273\247/:\026* \272^\343\311\272\017:\017\272\201F^:\014\263\027:\246\2725\272B\\\374\271\300\nJ\271\245r\341\271\304W]:\346\231\3109\203\357\243\272kj\331\270\275\034\314\271\252\221+\272\321\013\0218\277@\240\271\r\020\3058gR&:\013\207\340\270L\324 \272I8\216\272\277Q<\272q\007\':?#m9xI\0339\031{\300\272r\004\371\271\300\343\261:\340\023\\\270]\205\231\270\000\001A\270KIA9\261c\202\270\213p\300\271\316@\322\270U}\2369:\230\264:\276\252\3148C3!8\343[\247\270Ni\234:}\023K:\340%<\272 \261\3769\323\363h9E\256\342\270\203\363\03590\227\300\271\362\373;\272\213n=:\262K\325\271*\260\307\272\013\350{\272\347\n\315\271\371l)\272L\341\0278\211H\022:u\311?:\207\226\3049\256L\362\267}\325\2219:g;\272g\030\204\271<h\2419\010\270@\271\225.h\272\020\240\2748(\347\000:\211h\2419\357m\267:\314\361\3309yZ\201\272\353 \211\272\004\316u\272\337P\3508H\246\235\271\271$\'\272\224\343\215\270\246\205`:*/\200\2721J\265\271\216\"\021:\323\303\366\271\007\255\221\272\010\027\360\270=[.8\211\004\264\272\341\202\224\267I\201j\271\r\350\325\271\340\323\2429);\346\271T\tO:\240P\2549\254\305\375\271\317}Y\2713\014T\272\310$\255\272\312?\006:ZnH\272&\227\236\272\"\031\2359U\252\217\272j@\000\272d\345\027\272\271\376\026:\356\241\254\271\251r79\204R=\271\220\311F\272\007N&\272\363Z\3649\262\346K8K|$:\'&\0178\261\327\313\271\251!\023:\202Nn:J\000\032\272\020\200Z9\325\374\377\270p\034\261\272\211i\325\271wu\034\272\301\003\2039\031Rm\271\354{\3619\231V\003:6[\366\271\306\377\2138\235\242\316\271\336!Y9\355\247\3108Mo\0078\272\267\034\271\022\030\206\2724\255\327\2711\337\3036!\037\230:n\271\217\271u\220\276\271/\217\215:\313\262\3569\363\345\307\271\213\003\205:{~q\271\002\275\2637\3354\223:\242E@:\247\271\027\272\361\246\036\272\322N\3709\313\002\214:\223\354\000\272\002O\005\272\037\234\037\272\306+\222\272f\231\035\272\301\267#9\243mQ\271\304y\216:Z\327\006:\255\024J:\324yo:\342p\016\272\024\310\026\272X-\205:6\250\271\272\026\377l:\352\227\3227\0327Z9\002\345\241\271F\2519:\217\320\3029g\316Z:\030\032\n:\366\034\032\2718\313\001\271\205\361M\270\334c\251:@\tV:Ir\204\2725\304\221\272m6):\031(\3178\307\310\2708\266\251\020\272\250\226\032:\316\244E9M\367\227:\356\217\204\271\244\353@96\001\201:\271\341\t\272p4\025:\211\023\025\272?h\t\272\2345\311\271\222`\250:p\277\260:\315\211\256\271.\353Y\272\323\007E\267b\305\036\272\230(\2539\302\256\2569\324\232\004\271\327\342\206:\036\230o\271\344@\217:\245\201\2139\020@3\271;c\240\271\211\2305\272\212?38\224W\323\271\300\2079\2718<\3776\310(\000\271\027c\3767\323r\216\266\201\007+:\n\372\336:\210\374\0239N1f\271\211\275\3259\3769\221\271g\004j\271\262VQ:-\342\3729O\027W9\352Zb\271\360\013\3019\371\230\343\267\t\240\016\272\217O[\272\202+\2019\366\026&:\325\374\2119h\362\036\271\010\375\326\271\342\263M\271\250Q\2679\234\257\202\272y\010\000:\305\334\332\270\307\254\2279\223\211\036\272j[\362\270\333\316\241\272\367\350z9\200\\\000:\214\354\206\271\372\341/8\374,\201:\360\036\2469.-\003\273\'\332\322\271\315\033\3339 m\355\271\221\307$\271\356\030\201:D\235\004:\225\3047\272\235q\037\270$\177#\272\336\306\256\270\000\0108\271)\271\026\272\364\nK\271\314\034\310\270C\347-9\310\362\203\272\230\233\203:Y8\374\270\305{$:\032\227\014:\274\0017\271\320\320x\272\264G\321\272k8D\271\364\341\266\271\277\024\037:7\353\0205\301\207\347\271\277\034_\271\031\201\242\272\351i+:b\271\r:y\372\274:\034\240\330\271\254\343/\2664\277\037\271\177A7\271\034;1\272*Ck9Ug\017\272W\016\373\270\277M\257\2712\312~9\2065\224\271\341)\310\270\277\201\017\272d)b\271\253\320\2549b\242\305\270%\342\345\271C\243\230\271\r\247H\272qqO9\342r\202\272\034\210\216\272+\323U:\300V\32194\3560:x\024):\307\230\2139\246\316x:\032X~:\335 \2529\026\302\216\271;u49J\301\251\272\361\025\200:\365w\t\271\032I@\270rG\t\270\026\242\3529\016\375\2279\003\330b\270\312\347\2749\337)=\272\220\233\003:\203\232\':\235pl\272&\022\241\270\207\302\345\270\004\330\3609R\260\274\270\260\355d93,\005\272\322Go9\237\234\3108\335 \022\272\221\214X\271a\361\211\270p\331j9cf\016\272T\205\315\270L\377\235\272\356\342o:\350U=:\362d\321\271\240\300\013:V/\335\270\346\210\003\272\216c\331\272$}\031:uq3\272vJ\205\272\276\177\3079qd\2479yT\201\272\315\244z8\207n\035\272 \226\3619\373\333\221\272\234\346\3369U\\-9\216^\025\272yu\261\2715#f:\232\206\032:\263\367#9\333\366\200\270\357\022\317\271D>\362\267\271\310\223\271@6\3309P\317\2519\211\260h:\314H\307\267\360i\231\272\325\232\2069\331\356F\272\030\2175:q4#:\2152I9\345\226\3068\300\301 \2727\260\034\270\242D\3639\221\215D\270\264\317\350:N\033n9ig\347\270\016\247h\272\nQ\\\272\307\344\3339\026bs\272\215\324\'\272w\364\245\271\223\340c\271+\260\207\272\363\363e\271l\301\"\272\203\375\2609\222\033P8g\375\031\272\241q4\272\353u\360\271\032\241\257\271$\242\"8\373\367\237:\253\324\2757\275u\2478\356#S\271I\235V9\263E\220:]\200\213\272\250k!\272\222\220g9\222\312\\:\262:\256\272\336\230y\272\225\014P9\370i@\271\'\267X\271\016+s9s\035G\271\330v\220\271w\245\3609%\342\3259\025\312\366\271\n\335\026\272\333\216\\\267\032GK8P\\\367\271^0\033\272^\010G:\211l`7\340-\2137\021\302\204\270\240\252\270\2671\02248jl\352\271\250\233\2529\022I=\272\211\320\306\270o@\013:)\225\036:\311D\346\272}\206\306\271\341a\22698\217\2419\207\277\006:\207R\243:\363\244%\267\356\225\250\271\036b\232\271K7\216\272@A\0239,\00029Q\357\224\270\243\367\3358\232\327\032\272!Q\3379{a\3139\203\271g8\335o\345\270v\020\365\271-5\345\271\213\014\2118`ID\272\032\373B\271/\374\3127m $\272\231YK\271g(\3769\002\024\222:\021\013\3669\213\352\3608\304\334\010\271\303\211\3708\212\300\247:CY\216\272\272\366/8\210\204n\2715/\3729\312\037\3459m\344\2729d5\2538n>\300\271\325\246\":p\341\216\272s\356\r:\253\025C:\202\351\354\272\303?\2448\221\343r:\205\355\036:\213$\025:`\366\265\272\t\255H\272\244D\361\267;&b9\331K0\272\261\350;\272l\335y9\232\005Z:$9\267\271}\345\335\271\020\253R\272\235v\21684\323 \271Q\357\220\272\216Z99\026\343K:\315\270=\271\335\371B:\006\326\3109\265\307\3409Sy\332\270sF\243\271\330y\3019\263J\304\271\030C0\272\006p\261\270\306\243\034:\231\002z:\020\034\272\271\235\227\0148\376\026\266:\202\357\2079\237\272\213\270k>N:\372B*:\273\265?:\277\305Q\272-\262(9\024c:::K\233\272\024i\033:(\030\001\271^\034d:\326\310 :s\217\235:>\215|9\302\004\354\272e\233q:r`\030\272\324\010\177\271V\332H\2728\213\352\267\371;\320\271\226\263\030:\304\3529\271\324\344\013:\331\030v:%n\2019\\!\3719A{\002\272\010e\232\271\000*\360\270h\266[\272\331A@\272\254\342\233\2705\211>\272\213e\025\272m%\2009\264L_:!\024\372\271\264\027\241\271jQ#\272\3011\207\271\264\253\021\271Ri\256\271\322W\235\271Z9N\271[Z\005\272\r\276\331\270C\375\031:\264e\'9\367\205K951F\271\215\325\2107\227\371\3358\255\312\212:\217\362U7T\017\307\271\202\34668\303\005\007\271\342\276\023:B\356q:&%\010\272\377\313\275\2725\2729:K\211\003:@\370\377\271y2\215\272#_\2166\353-\25091\214V\2714\221\361\272\367jW9\'\267\216\272\216\351\2248\206\003\":\273\025\\\272)\033-9\365\324\230\271<\017\206:\254\270\3329Y#G\272\204\201\366\270V\304U:\0004H:\2049\201\272\275\212\014:\221T\020:\253G\372\271y/\2619\0246\2569\235BC\272}\236z6\021\033\352\271\030\237n\272`\345/:cpp\272\245\026\330\271\373^0\271\002\030\3479\327D\276\271vu\252\271*\355\234\271\274\016\r\272\031\037\001:N(\004:d\032\0368\250\374::`\235\205\271B\023\276\270f\253h\271H\230a\271\273O\014\272G\267%\272K\375s:\017ge98{\004:\356\252\3279\257\322\3168\340\273\024\271\'\034\004:\350\224;\272\300<\2109V\030\276\271\324~\313\270:V\34178\222 \271_x\037\272,\236\2039\225\367\177:\'%o:\000\207!\271\370\"|\272\346c\024:\r\323\321\271\363\374?9{\307\200:\375\373\2759\\K\3359\376\367\2718\324\302\273:[\222\002:3\03159\035O\343\271U\275\2709\264\376\310\271I\365d9\272v\205:\016~P\271N\336\212:3SL\272\254\t\347\270\271\025u9\217\342\030\272\240\364\253\272\271\005\217:d\323\002\270\237>1\271)\343\336\270\231\371\326\271ODV\271x\026\256:w\217\314\270%\341D\272Q\005J\272N\356e9\241\235\3279K 5\272s\246(:4 \023:q\006D\2727k\3519\342\266\271\270\363e9\272\224`@\271\275\202\347\270\312\002\004:`\036\264\272\305\251\265\271\027\267\3039\205\235p92\332y:\326\257\347\271w\330g\270\202\306\2269i\204A9\\\275*:\243a\3729\013\335\3549\374[\2319-\221\207:\332\332]\272\3060\222\271RUc:\267xO:\222\360=: \255\2359\356\3533\270\341\257\203:GR,\272]\0033\267\033\261\2059\020i\207\271g(T9y\r/\272H\354\3119\013\027\001\272\001\224\3679\353L\215:\263\331\2079D\t\006\272\2231\3648M#d\270<)V\271\365\335\317\270\037\313\2208\222\332\31097\030\207:\201\303\3109\303\272|:\350\033\300:W.w:\200\030\351\270\202\273\245\270\010\374\357\271\207\243\3349\324\207\2729}\031\2739\326w5\271\216\210\211\271\237\376\261:qJ\201:\035\230\377\271\321\317\251:\260\352*9\311\204\2036>Ct\271z\303I9\321N\0309\344\3465:\243B-\271!\243\275\271\032U\323\272(=V:@\356\r:t\317\017:F\203\364\271\275\36129D\237\2019%\016\320\272\311\230\242\267BwO\272\360\223\244\271\324Z\340\271\343hD9]H\225\272\315z\212:\342\354\3158!G\032:\362\306\3239\214\362g\270\341~\027\271z9\244\272\375\302\244\271Jr=9g`\3139V\265_\272\006(\305\270[m\251\270u\252\203:\2270\036:\3503\206\2722\255\037:\177_\2709\343\355E:\023\203O9@.\24299\365k9\035\245\3208\232\ry\272\357\206w\271\312ez99^\002\272\002\030\001:?V\026\272>0\3737\024(\003\272\302I\3079\372|\203\272\330o{\271b\021N:\177#8\272\263\257D\267\202\030\t:A\242^\271A[\2359{\346\273\271\325VQ:\010jc8\353\223\210\271\t\3069:\315e\3519\301\341W\271G\261\216\271\036\232\023\2712\302\017\272\211I\026\272\211\023\21684Xo8\350z\267:\370>&:\371\327\003\272#m\024\272&.\2159\321p\026\272\315\375j9_\200\245\2728B\271\272\024\034\3178\r\000\032:a\036\213\271\364\274\237\271\017\374\253\271\230\032\361\270#\032\303\271e-.\270\242\260U\2722\247r\272:@\306\271T\372e8N\277\200\272\325i\036\272\260J\3558\351\245]9:\225a\271\341\322\017:~\255\034\272\326x\200\271\374\203\260:i\311\203\270\247\231\2306y\337N:\221_8:\326\312\215:s\206\3039cr\035:o\313 :\323\243\310\271\365\302\004:\'\315\0029\025\2570\272\214/R\272\273\0265\272q73\272\241\366\320\270#*\2609\204\022\234\272\330,\230\272\372\206\354\271+l.\272\365\273\021\272@O\342\271\2706\2649\317\274f:u\342\317\270C\207\2146zv\336:\304\377U\272b$\020:\027\350A\272Ew\203:H\201\3509M\314\2358\016\246\3139\234^O\2725\311q\272\236S.\272G\202\022\272J\376\340\272\247\0274:O\220O8\322\337\005:\345\343\235\271\010\001\3028gm\251\272\376\006k9\235:c\272\322\214s\270\206O\252\270\214\236\017\2716\252\022\272\323b\2459\202_\356\272T\3036\271\000\302\265\272\377\255\276:\036lU7\3017\3269\361\246\031:\353\344\246:w\246!\272~z\014\272.\010\2259UB \272\206\347\3679Q5\021:\214\3208\271\266FD:5O\3169z\306V7\242^%\271\220q\3109<\236o:fN\3769@\000@:m\302\2259\323\303v\272T\207\2269\r\261\2029\261w\260\271\034}\t:\3763\212:C\341X\267\235)\241:D\271\3529\356\221\201:z-\230:\346\273\3459\346l\2209\225\340\"\271\310^\3049\253\\\366\271Q\331\035\271?m\004:\370\213\336\271b\375*\270P\300Q\270D\266\005\271nG\3608\242\234#\272$\326:\271V\267\264\270*\3411:\007d\23480\201\021\271\271\353q\271\226\230o:\300\213\035\271\353:@9m\"(\272\027\355\207\272\347\177\3058&\353\2648,NE:M\333\207\272;K\r:/sD\272\375c\233:\210\t):\371\267\2018\3348\212\272Y\362w9\221W\230:\322h\031\271\355C6:\341 \235:,\210\25293-\23197\206\237\272\346\370\301\272\002\272\\:\352\2322:\t\253r:\371j\257\272\356\210=\272;\356\235\267\336q\237\272\246\017\203\272{\274\2069\332O\222\271%\224m\270\177\236\317:q\217\2729\017R\0329\312\001Q\272\263h\"8*\\\2339\372\352\2538J\001\2609r\205\027\272\332\006\211\271\364\237\217:!H\r\272\"K\2209K\243Q9\000/\252\271e\200\213:\tLc\270@\315\013:\364\250\257\271\357\264?:(-\206:\t\300\311\265,\212N\272\023U\240\272F\010\0328\0349\255\270\276?\2558\215\367=\272\000\276|\272\301\211\2249\315o{:\000\357\3139p(Q\272\257\367\2739f\272=\272\241J\260:\321\261C\271\332&\0109\022\305[\272u\021\213\271~\216\242\267\375\307F9\"\352\211:\213\223\023\272\204\021y\272\251\210L\271\366\313\217:\003\260390p\255\271\323\304\2129N\371\t\270\333\311\3019\363\355H\272\036\277\3079J\366e:\225k\334\271I\024!\272:\231h8|\252\025:j\240-\271x\217\365\271\016\277\003\272\211c\357\271\364;3:\336+m:\2455\261:s\336&\271wru\271S\270\177:\202\306\324\271i\035\013\272\224C\215\270\217\357\3639\005\rO\272\255e&9\030PI\272\347\304f\272\315\2714\272\221#6\2721,\351\270v\020@7\024xv\272\274\266\316\267|9\3679J\3732:\020\257\027\271\024\247\376\271+\312\204:\207\324k9\237\203\347\2715!\020\271I\3130:\215.\014\271J\251g\272u0\232\2721xs\272A\220\350\271\032\212\356\271\363\362\224\2708\314\000:\345\014\2519\206\277Y9\377\334\260\271\003\177c9\023\3438\271\302\3031\272E\220\2039c\260\377\270\226\302\2238l\20519\362H\':;3i\272\201\254\303:\002\0360:\014\260\2209\033\2027\272}I\336\270\0161\017\272:j\311\267\346Cm:\032\017\022:V\366\2107\306\247\363\272\032\256\t:n$f\270T\232\3538\345\317\201\271\337\\\r:\330\323\0008\377\007Y\271J\362\202\271\364~\214:\335\373\3369f\002\304\272r8\235\272\250\220\251\271\241\210O\271\305\277U:\003\231\3009\024\315\356\271,5\267\272\313\300\200:\247\312\025\272Z\373\3769m\24129\231\364s\271x\311\230:X\354\033\272E\224_\272\220\222\3729!\036\3029\023:+7\303\206\005\271\276i\3279\261\027\0258\375\332\276\271\266\346e\272\010[ :\355\002l9\216qn9\273a\333\271\003\307\3078\333\234\333:z\375\247\271\003|\034\272\202@\211\267\\\020\2218\016\037 \272L\'\006\271FCJ\271\366w\014\272\264-8:\024\243\261\270\205\276\004:4\234\230\270ba\"\272y\344-\272\337\247\002\272<^\3109\246K_9\n\244h\271\341\217-:\2525\3517\253\257\266\271\322e\002:K\023o:\365\274\035:)s\304:\312\354q8\300a\025\272\'\271`\271\356XP:<Y\201\271U\253q:\342\030\3229\354\023\003\272\310\037\246\271\306\343\002\267m\202C\271\336\236q\271y\354\005:\021\2025:\244\255l8G\242+8\302\371\241\272\233\025v9\32418:T\261t:\373\360\2106\357h\305\272\324\343{\272\"M\2519l\273T9\3459y9\260\327\007:\032|\3639}\201\207\272\346\336k\271\t\213\3369~j\002:[[_99\277\277\270X\335\016\272\301N\024:\n\006\017:?\314\3109\355M\346\271\241\262a\272\214)o\270,\205\350\271\275\217\340\270`\256\3628\365\273\010\271%\320\200\271\234\230\206\271D\25109\314\227*:\220\027\211\270\323\270-:\250\375\233\271\223\304\26394\334\030:M\0072:\350\030\024:;W\001:\252_\n:\330\361\225\271OGg9\212fC9\326Sd:\271/\006\2727\021?\272c\3356\272\355<\202:\313}\032\272\350\001=:\306\263\347\267\223^\000:\261\333\224\270\341bO9\366\263\304\267\034\2251\272lu99\272g\3158\352\234\036\272\2544\0027b\224\200\272\357\232\3377WT\2219\r\260\n9(\301\001:\324*\013:\036\222P\272\360\036\226:\214\300\271\271\331\242\030\270\255H\3078\352T\227\272_+\1778\315\367\3769Z\225)\272\2223u:\207\240\2549A\t79l\034\250\271\337$>:\242 \3539\373\224\215\272S\014\007\272\010\272=:6\216\233\272a\020\037\271`l\030:\364ju\272\010\355\205\271N\322\2039\266\244n:f\032&:<|\364\271\261\341\331\271\025m.\272\376w\223\272\013\007\3257\226\331\222\270\322\n\312\272\034\014\036\271\274\302\215\272\347mO\271^\017\2139\267\335-\272\245F\014:\025e\3448D\353`:\004\326\265\271\252{\2679\252\313\332\271\251_\340\270\224\rL\271F\323Q9\033\343\3559-\274b:\224\007\021:\206\007!\271,\201@\271m\226\0279\252\036(\272\202\037\r:\027k\302:\017\216\0349y\032\002\271\334X\034\272\030\233\2658k\226\022:\364~\2569)Q@:\204\177\3519\2270]\272\301\275\002:\007\327[:\240\000\271\272m\r\3019hX\311:\375\346\003:\245.\220\2673Tj\272\025\356\2639\333\177\201\271\024\r\2219wP1:\266}\375\271f\340\3228\340\310l:v\301 \2714*E\272-\307\005:T_\221\272\231q\235\271\366h\3529\346g\0319i\"\2329s\372\3539\357F\'\272\\\366\306\272&\313g9\237\302\217\272HV&:c\022v9J\221\010:\232\350\0309\212\260\314\271\017\347\236\271xv\004\270\2144%\272\031w6\272\276KW9\023\333\001:\365\252{:q\037\352\271\"\004g\2706\375\301\271A\000<\272\233\227R\272\204\024\3349\210J\2249\310^;9\315\246\2038\0045\303\271\031\236\3239)\220}\272\034sy:BA\3269\346 <9`gB:\210d\024:\337\314B\272\000J\215\271\033\256\3128\213\274\2738s^\007\271U\241V:\332\237E9\026\000\0328Lf\220:\260!`:\031|\3759t\326\232\271\372\0349\272\312F\027\271\362\021\232\272\263\316\r\271k\201v\271\257\353G\271-\377&:\t\3226\272Q\225;\272\034\223a8Ph\3119$\333\27296\007\2728\211@6:/wF\272\2056\2309|P\211\271@Q\2119\201\277\0169\246X\2259\224v\206\271\367O\3529\323\376\266\271XK\022:\r\013\341\271\342FI\272Z\376\202\271\354A]:g\237|\271\305\350~:\317\3304\272\\I\014\272\363*\221\270|g.:\254;\265\272\037\037o8\314m\363\272X@\3267\354\n~\272\264\327U\272\305\206\241:\007\212\207:\346\262t6\203J\3456~0H:Mxy\272\335\243h:\372h\216\272\214\037\013\271\352\306b:\243\327\227\272X3\225\271\213t\267\272\231\016\2539\215X\365\271\036#\204\272&\275e\271\216-D9\242\245\262\270$1@\272So\232\272;#\2229m\003\233\271\346\004\314\272\245\315\207\272\035\276<9J\224\222\2727\207\351\271\315\037\234:\314\2063:S\206\2449\313\"~\2711.\233\270\213\356\300\2716m\014\272\237\021\215\272\321\217\022:\233\321\236\271\310\374\3429Jh\217:\027\020\221\271\314\\\023\272\373U\3619\337\275Y:\274\225\002\272\036\242\001\272-?29>\224\2559?\347\'\271t\355\216\272\344N\225:\214\020\021\272\177\336\034\272\262vh\271\345\364j8MB\013\272l@\2269A\247/:\253\033|\271BEB\272\205\277\265\272\250\264\020:\255<\032:\037\017*:\177\236\0149\317-c8u\n\370\271\230N\021\267cH\3569\242\305\300\271\317\203\236\271\034\251W\272\t]\001:&E\222:\365\320\014\272\335\035\2259S2\223\271\321\272\2469\375F\3168\244\340\016:R\202\250\272\375\2558:\366\265\3438g\014\216:\300\336B8\020\224\3239\357\327\007\271\r\212\206:\272N\'\272\313\365O\2725=C:\322\310\320\272&\024?\272\003\350;9Bz\205\271\005\002a\271V\215\320\271\367\345\377\271e\232\224\271\010\030\3249d%\367\271T\t\270\271\267hk\271\216\311(:\227\322\3659P|Y:\272\216q\271\374\315s\271\351\323\004:\335\315w\272\257l\201\272\327\300f:wid\272[\'d:KQ#9mFA9\265\026T:A\317\3019\357\321\3149\302\234H\270\377\274G\272\272N\276\270\342\351\250\271\177SZ\271dD\3619\274\227\3048\337\200\255\271p\204\2119EF\023:\303!M:(#\007\272/\265\257\2723\243n9\211\240\001\271\213\266\3368\023t\236\272\305\237f\272\342\310^\272`\342L:v\253\203:\207@\n9\\l\2018\006\305\2129\246\301\020:?0\3468\252\322{:!V\3418p\021\3339\367\265\3069\370\371#\272\352y\0358\203\202\030:D\037Y:\370\023\32590$\036:\336\330\221:\270]\305\271\"\257O\271v\346*:q<l:KY\033\272\216\315\304\271\251\370}\272`\277\243\270\021\310F\272\037\360\2019\213\370,\272\213\033\3359\213\036\030\272\016\307\244\272\312\024\007:M\2018:\205\026O:6\334\2179\234\271f:o\255J\271%\327U\272\303\027\231:\317\036\2229\010\313\3579\355\241\2058\354\345\'\272\322R\321\271\330\016\2447\230O\321\272x<\2776\365\251O\272\243\337\031\271>\353K\271\010g\207\2728\266&\271\354[\3117{\343\305\271\331\030\335\2707\320\321\270\231]\361\270gX\014\271\337\264\2139TU\3028\342m\\8\261\246\350\271\357\356C:\246vF:\022\357\017:\273\006L\272\302\021\0069\245#B\272&\200\325\271\352\310!\270\257\"\267\271\224\252W\271\334}/:\n\234 :\032\024\210:\3273\365\270\333\340\006:\337\331\2658\372\307\2568\364k2:\257p@\272\027\222\267\271Q\244\026:-\0372\272\313c5:\326\371\002:\017\253\206\270\277\n!\272\200\235.:u\021\241:\201\007\3249c\257\34383\t\2739\364<\246\271y*\\9\322\355\366: \226-\270\335\344\010:\342\330#:X`V\272\022*\2719\276\353Q\271\002t\203:\243Bg\271\013X\242\271\246;\254\272\275:\334\271R\252\250\270\203_\243\271Y\001z9\325\370{8`\017C9\303\275t9fW\3148\347\345\237:2\215\3529\032\361\2209)D\003:\303\345j\272\010\200\31587\037\302\271\356\2617\272\260\363D:\232\327\3218\014\216\006\272M\020\233\272]J\356\271\374\224\023\271\205\343\2719\253]@\272\030Kn:1\274\'9m\360\005\272\374N0\272\365_q\272^5):\207\360d\272\244\330\3079\240k\261\272\323=\330\270Gb\3378\332\027\2329\325\2223\272q\22349Vd\2639c1\2178kr\24770 W7\205\2260\272E`2:W\030\267\271\302]\0059\305\337W:\367S\005:\270\231H:\244\001\227\271\3407\3179\330K\361\271W<\246\272*\r;:|\327\312\271\251\'\252\271\224\030\3009\020_\351\265-\257b\272\2255Z99\210(:\343\r\2629-\357+:\253\004\3109A\362\2539\325\264\002\272s}\234\271\234\257\200:\205<=9N#\234:\247\004\013:\206\337\373\270D\365\310\271\355H\257\2711\370R:\357.\332\271\027\332\0138\026!D\271]*D\272?4E\271\200]\214\271\030\275\321:\371\212\3059Y\257_9<\267\207\267\243\023\006\272\335G\026:_7\265\271\255\221\222\271&C\002:\207{X:\336\327\025\272\3719\r\272\335\345\316\271\000@3:\326a\\9\023\314\261:a\351`\271]w\255\270T\027e\271\305p\25799f\010:n\227\263\272\352\034\3269\257\354\311\2722\332R\272\274d\251:\375j\312\271\221\315$:5\273\':\321\316\2309\213\214(:\335}x8\020o\3419f\263\n\272\3607\3109\013\217\20460\217\242:\333\247O:!\312\3058\266\217o8*\272\3139\231O\265:\213i\346\270\007\177\3269fN\026\272\241R\307:\301\262\236:\355\232\264\271q\0067\272\370=\0039\267\252\261:\r@\2447\010\223\3419\252\2218:\347w\214\271\376\010\214\272\354\002\3749K\315\247\272^\217\023:u\316x9z\263\032:\354\263\2239[\003\226\271\300R\3427\246,\010:XZ\3529U\'n\271\350/\0029$]\267\271\230\030\201\272u\230y9\341;\316\271=\352\3618\244=\032:o\0372\272\005\2058\2727\365\\9s\221T\272?t\0249\353\361\257:k\004;\272\003W1\272\326\360\010:R\227\354\270\201\022\021:&\247\0059.W\251\271\317\304\356\270,\003\2179-\362\266\271\302\360\234\267n\244\234\271\345z\364\271\2166\346\271\352\"\342\271\376)\205\271\361o\2329\326\364\017\271\360rN:\30713\271\225%99\340\273@:\361\236.:\305%F\272\253)\0349\034\234\223:hR*:#\"w9\333\036s9#\343\2548\367\243\005:\250\222\253\272n\205\352\271\177\022\200\272\213A\3669\204\026\2309|\030\217\270=\303\362\271\215\310m\272\335NO\272\355\373\006\272\245\037\3629\203\353\217\272\215\023\2418n\034\201\272\016\233\016:A\216\0319f5\263\270\321\013\220\272\365\032N9\267\031\270:\375\24269Wgb\271\013F\260\272\037\306\212\271E\341<:[\031\2519\204h\2667\3069N\271\223\267\2529\2636\266:\025J\355\271\201\347r\272d8\346\267`!w\272\003\321\2727\311\265*9e\371\205\271\224-\3149K\361\346\272\225l\237\271q\246\3349\370O):\374Jo\270\342\227\3059\007\237P\272\\\023\231\271\331Ti\271\360l\313\271\004\324\202\271\200y\2029T\256\340\270i\254\211\272|\024t\271\253@\3528Y&\000:\272\234\256\271\303\213;:\253sr9\210\r\007\272\211\212\005\272\2658\264\271qJ\375\271i\266\3129\3777\252:\024&\3528\234\257\366\271\016\317`\272s\323\006:\027+\2357,\267\3748\226\010\250:\227\"\023\272<4\220\2711%T:v\262#:\261\236\1778\021\372\2259o\311(9P\327z9\352<e\271\223\247\031\272\2022\227\271\251\207\3368Hl\2379\207\314l9\375vE\271\366M.\272\216\373\256\271\017e\034:\301O\2049t.\201\267\320\260\2128\017m\316\270\255\373\'\272\263\0349\272!v\2429\217\262)\272\025\356\223\272\206v\t:\035\202a:\312mm\271\341\243\204\272;@.:\352J\216\271\356[\"98\357\021\272\003V\331\271\213\364\032\272\007\306\r9>\025v\271\254E88\334$\026:\277\034i\272\221\315\276\272\277\355}\271\217\331*9g\t\r\273\277$u7\345\344\0269D\354\276\271\236\252\202:#\321]\272\0371S\272\rX\234\271d\006\327\271\264 <:oGF:\341\240\310\270\3728\300\271\003\204\2309O\325\325\272\230\310\200:\236\326\203:\2638V\272\320\203\022:HqT\271\246\246\253\270\375\351y\272 y\3268\020sI:g\326q:\246e?\272*\355x\271x\356L9\222\370}9\366\"\0049\352K\360\270\241R\373\267/\202\002:\022\224^\271\314!1\272\306B%\270o\034):}x\201\270k\250\3229\311\213\224\271,\207\035\272W0\345\272\253\3008\272@\357\001\272\023\003\32394vO\272\177B\3069OwY:Uv\206\272\263\030/\272\350}\036:\321\250V9j\312\26491\246\201\270?\356\303\272h\022\246\271\021\2454\272B\2152\272\021n\0139\2728\356\271,5\206\272I\336r9hU\0039Z\030W\272\031\272>:\216\310\2528\334\036\2279\300\020\204\271R\350\367\272#\251\221:\267\312\302\271\221/V9\226>\310:c\000\306\271?YA8\241\002\3039)ST:o)\346\271\316\357O:\305\316\240:\016\003\001\272\t\375?9?\300\230:\006e]\272+h\326\270C\262\214\272\267.\2048\264\214\330\271\306B\222\271\353\231\233\271\275\n0\271\277\307\3379s\r\267:\226o\215\271<\253\310\271\221\024i\271[\rV:\313\213\2569H\234\013:H\331\2259\377M\0179\017F\373\271.\223\223:U\315\273\272\013\246\014:\367jI:Xj\204\272\377\037+:\277\264\0369<\227\230\271r\216\025\271\240\370\215\270\217|\256\272\025*\020:H]\326\271\364\221f\2725\252\3757\335\031\007\272\203\2605\265)\3260:\347w\234:\351\214\372\271\026\211g\272\263r\3358\003\335+:\365\327\000\27237\2069\t\226S:wp\030:\325\n\177:\256\265\242:\374\207::\364A\3359\276b\2249>\341\037:_!\0319\213\212\2229N\222\205\272\253\370\020\272!6\2768\0137\327:\222\254C9\230c\0269\322\337\035\271X;\312\271\215\"\302\2716\226\241\271\306g\215\270\003\317<\272\353\222\275\271^\340\361\272|o\373\267\032\035\233\271\375\205\r\272\034\352\2739\246\033#\270o\245(8\262\207\2519Y\304\'9\307\260J\272\242X\275\271\317P\3119\201\216\3309\314Y\373\266\351.n\271\266\226i:\215\247\3178\342``\271\014\n\260\272\271{\3666\223\326\3069\360\334U8u\327Q\272\2774,:)\301\3339\034\027V:b\205\007\272\251\326\300\271\001\312C\271z\242\252:B\320\013\2729\214\032\271\311q\202\271\347\027\3348.\317+\272\220\017\325\267\337,_:\'x\3248\334\231\260:\026\205\225\271S\035\013\2722\377e\272\234~\240\272\023\334\316:a\303\210\272\036\210\3456\000\253!\272\324\376\035:\'\003w9\336\024\305\272\354\261_9\320\243\207\271\222\342\255\270\206r\':d\205\332\271\216\003\0049\0010\231:\235!\212:\215\356\302\270\246\323_9W\376j\272\327v!6\177\243*8|\023\000\271V\303\2139\265\030/:%\307\201\271\304\345\202\271\335\022\3309f{G\271\255\t\005\272=\2637:\301\210I8RD\262\271 Z\':\\\215(:\250\376O\272a5\2067\256S\344\272U\3562:\317\256\243:\202\331\014\272\276\241\010\272\202\002\241\271\030\252\2028\010\031\225\270:u\3419\221\235p:\023\\\223\272\322\322\316\271\317]\n\272\022C(\271i\024\2038\272V<\272\264\002\3649\034\261\"\2711r\0169\237nk:\003v\3038^\236j\272\031}\"\272\374\346\243\27214\3749\001db:G\021\257\272&\244\277\271\005\210/\271\014\243\022:\365\323X\272\316\236d:NS\2738\256\252#:\217\350\302\271\344[\024:&?\\:\372}\3539\352,\3079J\202,\272/)D9u\311\3069\227M\010\273\"\2013\271w\235\210:S\007\214\271[\376\021\271\264\352\017:\220\262\30399\372\213\272\2740\2319\026\000\201\272\325T\204\271%6q95\3758:\235\333\252\270\2257}\272G\336{:\002\300\n\272\350\00658\35068\271\001\321\255\272Tt\2458\337\225%\272[\266\271\272\304\345g\272\323\201\3248w\214+:*\017\030:\374S\263\272\033\326\2077sb\2769\235)\322\271\014>@\272\242D\363\271\031\301\005\271h\364\3559\340<q9\204\002w9\355c\207\271\001\302f\271\337D\2476M\272W:\327\010\313\271\375k\220\271)\004\314\271q\234\000\272\216b\031:\226\374#\272}\305\3259` l9x(\3359\211\245\013\272\234\235\332\2712\325w\271\016\0068\272\027\r\275\271\235C&\272\004\330\2269\023\3108\272R\255t\272\261\266\020:\0025\2408\024\327\010\272#&\3519\3648\222\272\313V\035\271\323\237\2456uF\027\271\266\372\2149\301e\0079L\'\3118\tC\354:gR\336\271\252\212\201\272\264\217$9\234F\':\334\240\326:)\340\010:\'\2571\271\374\317\377\2714\005\2529N&\266\267\260\233\357\271\021&<9k\325\215\272\251\254x\272\251U\25592\343\031:nG}8\2156\016:2\226\306:\272\026U:*NS91P\222\272\223\341\364\271gP]\271\342\263\013\271\213\244\\:0\352\235\270\267\035\2439:\215\3369JP\252\272\342:\223:\371\032\031\272m#\3269\312Cz9\333\301\200\272\022+\2069\022\272\006:\231\243k9\340\375\264\271\215\251\\\270R\351\0308\270;#9\350{W:\307\346\201\2717P\316\271d\331O:\353\016\334\271\344y\022:\233\202\373:\372\"a8/\226>:\370\360?:\236\324F8\233\265\211\271D\265\3448\311\366\261\272u\245\2329\226\371\216:\006kl\272\301\235\247\2711\301:\272C\235\2209sx\002:8\333=9vs6\271\215\333\3149\273=\033\272\2616G\266Z\317\266\270\311\350\231\272\204\017\2519\337D\027\272r> \272\262\236k9\017\354\227\271\342\344\014:\256Q,\272\210\030\213\2721\030D\272\024`\360\271\032K\2439\000^U9+\355L:\243;\256\271\233E\3459u\366h\272\337\031\3058\344\266\3358\0137\373\2704x\3649\351\311O:\270\004\375\270T\235Z::e\2249+\236\3018^J>\271\343\354Z\267K\235\3728\206\024\2607H9\326\2705\010I:\237\337\031\272\232\036\027\272\306\341\312\270\275<U\272\324\2759\271\350[;\272(\"\3109\233U\2338I^\026\271\247\006(9\3470(\272E\016S\272\230\355\267\271\002\3467:o\252\220\272t5=\272\225M\305\271C#y9\374Ua8\304\246{9\352\264\202\271D%4\272H\276\2538{\210\022\272(\245\020\271\312et\272<6\245\272\300\027\202\272s\001\022:\2750\336\2702U\212\272\243\005\3579\233\306\n:OJ\0169\004\353\2109\303\376\031\271\261\263\310\270\301\033\030\272\023\3235\272D\267\\:w\234\2269\275=\2278G\177\373\271Y\336\2109i[\235\272\260`\3429H\277\326\267\244a0:\311\206\360\270\323\312\031\272\315\221\307\271_`e\272\375\313v9\274A\304\271\314.\377\271\341\221\3269\271Q\212\271\177\336\213\271\215\277\254:\231\314a\271\311f\315:\361\263P:\274\310\3009\306\202\3167\374\24769\357JZ9\336\013D\272\200\300\365\270W\331\0349\247\243\r:\365l\020\272\022\314\2539\352V\3179a\352s\272\262\25499)Q&:\233C\006\271\325i\3639,x\215\271\323~>:.o<8A\32099~\300\301\272\335xu:\324n\024\272\323\300[:\321\360\031:4i4\272\222\031\2159\3378)\271H\325\002\271\250\235\303\271y3\030\272\013\177\340\271b\\\007:\320\341T9.\2076:>\247\272:a\227\210\271\302FT\272\351\220Z:\332\374\r:40\2579wU7:]I\020\272\3516\177:cTB\272C\3617\272,\303\3748\314\030\316\271\3035{\271Y\260\375\270\332\275\3449\r\242{\271\3321\242\271>\022s\2720\2424\272s#w\271\342(\35296\231\0008#\204\2419\2638\306:\225p\004\272m\223*\272\244?U\271Z429\312\346M9\261Tv\272\232+@\270\222d\242\271\355\312\3279\261\272@\272[k$\271\360-\0109\374>7\272\362\021\032:\362qs9r\334X\272\250\262\3448\235\267t\270y\004\252\271\203\307\025\272\3600k\272\036*-:\323O\237\271\367\264\001:A-\014:\363q\2169x\372\340\270m\215\342\271\t\036E8\315\251\017\272\013B\024:\004m\257\272k)\342\270w\036\'9&p\211\272|[\225:M\203~\2718A\0029,\363L:\024\341\205:\345\023\3356\357f\347\271\010\3262:(\213\351\271\003\307\3549\276\177-:\036\336p:\027\270p9\0358O9\206\225\003:x\357\n8U\267o\271df^:\217\200U:\267c$\272\237\217\010:\206\\W9#\243c\272\341\013\2439\277=\222\271@o(\272jm\010\271\n\330\242\271\330\333\030\272\3679r\267f\026\2369\304x\0077\022\022 \272uc3\271\230\363\257:\027\336\356:\022\236\275\271\323\234\3249G\351k9J\373\215\271t\304\'\272\3404\273\267C\244t\272]\244\273\270x\322\2669\336P\034\271\'\321\020:\200\256\033\272k\270\217\270\330<K\270\215\214\3204\tw\353\271#G\2559tc\025:\201\037\237:F9\276\271]O\021:\\\2119\272\366\257\005:\\j*\272\205\353H\271q\014\3158!F\232:\016\303\2639\343)\2449o6T9\206\276d\272\3022\202\271\250\024\325\271\377\312V\270\200\300\024\2703\333\2539\206\323\347\271\304_\227\2702\001\247\271S2):o\r\307:i~\000\2727\372\217::Y\003\271A\376F\272t\016\264\271\006=%\272\311\307h7\333\370\270\272\010b\245\270\212\214\203\271-\362\232\271\233\2158\272\365,\010:\032\224z\271q\343\215:#\323\2058\257\222\014\272\323\3638\272\0331\3669\370\252+\265*\271w:\322\000\343\271\271?\3659\350O\2549\200Ew:@Ab\272\357j\037\272\314\370\251\271\260\005\0179\354\361\\\270\265F\247\271\361,F9\277o\002:L\002\231\271Q\377\3449\275UO9mI\242:\005\014&\272\252\231\332\266\354v\010:I\024\2159\000\0056\272%\"\324\271\0175\2169\023*o9,W\201\272lkR\272~Z\3719R\201$\272\354\376|:\333j\205\271\323\331;9R\234\233\271&h\006:\342\000`8\315OL9\203j\233\270P\035 :\325\361\347\270/j\2179\240\373\2568\261\213&\272\271\203\003:\031`l\270?6K\266V\013\234\271\n\3747\272\205l3:\251\205\2309\206\030\3279\332\375y\270X\365m9q\031\3038\033\240\022\272\031\300\010\271\0038~9u\214\2648?\372\305\271%\316\325\272\330\372\2449\276\202\3239\017z\017:>\372\203:\305\002i\272\265\000E\272\034S\272\270\277\273<\272\241)\2419a\0373\272*_99\014\313\2129`\027\025\272\3500\3339\230\024\2579P\0239\272\251\223\226:\251\272(9\243mt\271eS\212:\232=\220\271\247\273\0048\"\261\230\272\306h\0329\374\032\3459\357\214@:\315\352\355\271\016qS\272\224\366\014\272D\20289\340\274\0379\343g\335\270\355\016f\272lr\215\271QiT:b\204086\312\325\271K\232h:\313\242\275\271\334\365\0059\034G\314\270\343~\023:h\0318:\272j\337\272\246\224J:j\002\2079\257\206\003\273\371\224\3649c\251\035\272\n\271\225\272\345\274\243\272\033\333\3027Z6\2319\254o\332\271\352&j:\271\315\206\272\017\210\204\272m\013\207\2722\013\245\272\213\203{\272\321\326B\272\031\213b:&\202Y9\234\377\005:\003\254\303\271\275\032\275\271\364\223V\272\242\304\016\272\023>\3768\207d\232:\365I\220\272\024\213\206\271\236~+:\247\201\030:\221\013\367\271\3371\256\271\253O\220\272\371`\367\271\272\236\372\2716\026\211\271\265Rn\272<\3702\272N\342M\272{\241\242\272\256\250\2549\216\037\016\272\360I\025:\n\t\232:\025\364C\271&]\031\271X\336\271\271\241\023\'\271\352S\':\026\316\3559\237h\t\271/\265\303\271\317\"i\271\306\3011:\335\315#:\024\256M\272M\336\2249kff9\177\336=\271\024$\3129\236\rU:\317\000\233\2678*\3779\032\361\2729\312\2236\272\032\344\000:$uX::\251!\272\317\302\3058\\Z\252\270+\252\251\272nw\233\271\374\376\245\271bs\231:X\254[9*i\357\271FV\024\272\277\323\312\270\230\315\2739e^\307\271#\n\204\271,r6\267g\342\2509\255\016\3509\341\337\030\272\010CW\272G,\036:/\306\271\271\005?\252\270\227\206\235:\276\232c9\221m\30191\017\020:\232\301\341\271\372\376\210\272\340*g9\324\214@\270s\231j9\013\237\3158L\024 :\317\210\222\272\010\0014\271{\2445:\235\034\267:1\024\t:\247\006u8s\355\211:\223X\245\270\307\254*:H\244\0069_\035u\270d\367\001\272/\217\3079O\332\':\353\223m:\226\034\2648#\322\3379\035\325\3418$nc:\030:\3009\351\251\2729\275\310\3309\003\001\275\271\226\323B\270\215CT:\225\270V8\363o\224\270_T\n9\330\337A9\214\2477\271\031\322\3229\005\022\240\270O\203\003\271\333\255\250\271\310T\017\2716\267\306\272\276{>:\345\324\216:M\033\0068\366\312\0259)\354`\272\303X\220\271\203*\000\272$3}\272+\020^8L\311\2049/q\025:\363\275\3279z\234O\272\"\367c:\245\202\234\271v\204\n\270\257\220\3749N\303\220:\273\036+:\301\272k\272\255\032\21499Q\3559 \217\2529\325Vx\272\177\202\367:\000\235Q\271\0165\025:&\302!\271\304L :^$\242\267\025\266d:\002\320*\271\264\026\306\272=\252(:\\D\225\271\016\325\304\272\335\220\2759\323\027\264:\254\343\024:f\023r9\307\200\277\267\201\025\n\272!0H:\363\260W\272\347\212\3449\366\271\242\271\376\'\273\271\207\205\233:\300\307\'9\301\311\252\270qY>\272\177\022\2079|l\3109qP\2057V\037A:|B\312\271\216\276\3369\301\336\2218\343O\227\271\252Kc\272\256\317%\272f8i9G6\323\271o\006\223\271h\233]:\030\340\21187\3604\272\033N\300\272|\261>:\376\333:9\035\204\3559@\323\2519\357J\261\270\177a\3348\3622\216:\327\342\273\271\033\314\253\270\233\244\253\272s\331\2079\005T\306:%\245V\270\376W\3408\300\340\3729{|\013\272\243\313}\272\224o\001\272\214>\223\2701\263\':\277\177v\271\215\307\3559\316v&\272\212~o9\375\233\342:>\0321\271\353~Y\271t\005\2729\353\270\213:\272\021N\272\203\263k\270[:\2027\256\227$\272\3505\013\271\3257\2638F\355\032\272\260k-:\336n\r\271=\035\222\271Lz\240\271\242\004t\271#W_:z\346r\272\327\262,:\032\356~\272\004\232k:\361\317i\271]6\215\272lc3\2725D%:\207\357G:\253\223\3419\224\0273:Xn\005:\014\253F\270\245*\357\271O^\2008\355\266\\:d\325\301\270\326\00229\234D\235\271\222\255\2538\260\031\2119#?\n\271{y\234\272\010\314j:&\320\2439\007S\331\271OS\253\271\241\345\3169\252~x\272\332Vq:\002\205#\272\267V\331\270=\341\2519\365\025\3549ab\016\271\007\277\0338\036Y)\270t\026M7\034\341|9o\335\305\270\257\372\3659|\242\335\271\035S\331\271\377\227):\330ev:!5\263\271J\231y9NU\304\270\265\205\3729Z\214\204\2725\347!9\223#K:\242<\023\271n\017p\272\276:\223\271<p\311\271w2e:\252.=\271\215{\007:\305\311k9\256]\2049:\\\251\271\021\322;\271\211X!:f\223h:Gx\2758\270II8\246\367\3418P[D:o\274J:\\\253\2448u\241\3638<\343\327:w\005\237\270\371\301\215\271\n\206\2519k\003L:\351\377i:\225\206h\272\026\023\026\272\374\207J\271\236\371o:\201Y\274:J\352\3779u\232\230\270>@\27581EA:\277\377\031\272/p\252:<b\351\271\004\022d:\0349\001:\310\2167\272\2624\3219\374\255I\272\252\353\030\271\366\252\0169T\304+:\272\273\'\2653\236\223\271m\3629\271j\230y:\326\370\t\272\310\035\260: n\3579\372`\001\272\363\322A9\026vj\270\3506\3649\264\333\207\270og\315\271\353\253\3369\365\016w\272/_\004\271\326=\367\271\037\373g\271q\217;:\0263\217\267\'\365\200\272\336\243\356\271`\327\2568\301F\237:\035\332\256\272\034\\!\271\023\340\004\272\037\312\3449\301d\2129&\266\276\271\324\244X9\323\231\0029\203X1\272\274p\0048\035O\2329-\217\3509\000\"(:\347j\02099A\000\271Mx\225:\362{=:\217,g\272%\314\253\272(\337\024\270\324\356\3539G\216\302\271\312\232\361\271\254PO:(\3715:\222\273\276\2717\312L\272$Z\252\271\300`\201\271\353\255l:;\312x\272\2359\212\272h7\3028\371\366\2649\306\210\033:EJ\016:`\252\032:\265\375,\272\200\363T:\351\265\3516\365\207\227\267\323\355(9`\026@\271e\026\242\270\364\025\r\272\333/\230\271\036C\'\272+\261\3339a\010\202\270#f\370\271qX\3018\221\336\216\271<\237@\271\'\257\230\271\376\223y\267\004>\201:gU\2449%|\"9K\210\2209\325~\004\272u\014\3359\256\253\317\271\007\234\340\270\305\353\2655\347\336\235:\331\250j\272\211\356\3329\005%s\271\001\375\222\271Y8\351\271\264\025\003:%\214\2379\342o\001\272\027\003\245\272\276\217\351\270\000As\2724\004Y:O|\210:\031\342\007:9\002O\272l\352\215:\0000\337\271\344f\020\272\260\3616:\373\352\267\270m\037;:\0352\3377\342\331I\271e\225\372\270N\266]\272\377\3103:\303\244\3109\235d!\270f\336Y\272\227A\346\270F\212J\272X\026\2049\271=\331\271\\eL8\245\217\210\271\257\365b:j7\332\2713\335\253\271\002\303\233:}\337\2168\205\345\220\272\277\372\027:\026\345\246:Dr\312\271>7\032:R\323\263\271d\321\314\271\306\t\3079+_\010:\3440\275\272\002%\322\271\0017\3769_\212\2249=:1:\323A]9m\335h\271\244\247\3719\354t\016\267J\013\223\272{,\237\271l\234_9P\313\220:9\024\\9\365\221@:\214w:\272\\\215\2168\034;\016\270\\\223\206\272;\026\211\267\305v\037:\035b\2169SJ/:ma\2379\n\002U\272\345\370\020\272QB9\272\337\211\336\271\035\275e\270\235E:9\211\340\3009\004Z\r:\241\325\316:\266\026\0038\001\337\313\2700\021*\272~\350\266:\037q\003\272-0:9\313\234\005\267\375<\214:\334\215\3539\315S\215\271\235H\3317sWf9\025\202\3109\032\212\3369\330\251\2758\337\225\200\272\\\277\240\272g\323\0219\350\233\2749\347U\2309\356\326Q\271\311\331U\272\010\364X:#\r\365\271\251&\330\271\366\375>\271\270>a\271\032\257\2319\361&\304\271\036\365\016\272\304*\275\270+ \256\270c\326\347:\355\374\023\272\354\363\2368\312\260\2538W\'4\272$\341\025:+JL\272\246\033\333\271a\346\315\272y}\2349\026t\205:\326C\244:+\3100\272\025\r\3109]\364\233:\312\262>\271Q\350%\272[\213\3278\232\252;:\031\177\037\272\3006\275\271h\313\217:\323BB:\244%K\272\010\262\r8\260\346\225\272\247\245\235\271:\213j:\350s\3209\323\233\213\271g\212\2669\265\026\215\267\335\264O\272\"\036\3019\227\276\201\270T\316\2279\222s\231\270\242\324\350\272\273g7\271\276\246\377\272\364\271\253\272\027\221\025:\305\035\3429Z/\3219\250\207\2679\377\213}\272\n\210\217\271\345\034\0179s\206#\272\243\372I9\344\350\0078\200\356A:\243+@\272\315q~\271\370\335\210\271\263B\2129\221\367\2079`h\223:\242\341\2328B\260\3679\240\032G:.\2713::m\216\272\306.\31194&\0359\'\261\306\270\324\301\236\271\\\372\306\271f\357\3669\302%T:\316\203\312:h\010\3507\273\257\216\272\331\000p\272\200Ts8e\320\3269_U>\272.\240T\272\203\2641:\r\232\002:\371\311\\:G8.\272\356\3228\272\242\370*\272\005\250\'92M\267\271\257\347\2359\355\354\374\270g\270\r\272\371\311\2519B\214\0349\201\302\2559\207\205\215\272\370l\007:%\330\272:\204yy:8;06s8K\272\226VO9xGr9\203\365S\270\246X\003\270\372\007g\271:\330\327\270\332\262\004\272\353\302W\271\334\242\201\272/\230\252\271\374\"\202\271\261\362\230\271\035\325\314\271B\361\3709[\023\2449\225\274\252\267y\277\255\272\031\227\3239\251\005x\271\251\001\216\2712uw\272\t\264>9.\211/9\366\375\3409\007\325:9\"\215\2729EK\2119\007\223T\272p\320?\2722\003\021\272\306\250\213\272\233\310o\272z\021\304\271\277\367\2539\n\270\212:\177\216\200:\3366~\271~\013+:Z\361~\267\331\206\267\271\323889Xo\025\272P\341\3059B\257t:\n\377F\272\314\235\305\270K\036{9Q\371t\271\231&\321\271\016\023\265\271\210\033\2469\367Q\0168\313\366\026\272\261\r\3159\340\317\2618\000\247\3478\272\010\2738*i~\272=\323\311\272\177\323z8~\006\005:\306\33188o\035\206\272N\302\246\271\367\205\316\270\nA\3309\325Wp:\233\213\3019\263\024\325\272\035\237>\271\312j\2666\325\274\323\271\020v~\271\035\336n\271\2458\024\272\365,t\272\236\206/:AW\3549t\003\036\271\246\022\202\271\334D\002\271R\342\365\271s\014\230:q\030\234\271r[_\272\200\352b:\343\315\014\271f\334d\271\351\3171\270\306\001\306\272\215\301\3039\260f\216\272\370\277\301\271 \031<7\327\301)\272\252\327 :\031x]:\340)\250\272\206\305\212\272\261\370\3729@Q1\271\333Y~:\001<R8\370\200\2209^\353\t:\363\032,:\214I\343:\367+3\272\300\"D\272\274\272\306\267!\027\n9O\034\3249\026\303}\271\324-\3379O\253\"\272\374\326\200\272\371\'C:\255j\3308\312\026\3228\2229\005\271@\212-\272o\237)\272\244\336\327\271\366\352\270\271\265\t`7\322R?\2722\203\310\270\250l\305\271\374\231\2669\241\357\003\271\335\305\237:\333/\247\272\314\362\370\271\300\244\2009J`\016:\3156\244\272\357s\000:<\014\212\271NC\3529u\361\030\272\216#w\272\325\366\3429\033\356\201\271`N\2379\243Co9\235\237\3278S\336\030\271\345\203\303\272N\343#\270R\327|\271\316\362\2509{\230\002:\212c\200:0\245Y\272)\177\2419v\364\026:M_j\270\266\203j\271dt*\272\355\212\352\272\323s\023:\035\353\026:\224\335f:\274\212\301\270\323\255\2359\360\335?\270\001\246\212:*\013{\272\373E\225\271\t\354\267:m\314\t\2726\267\3159\346i\231\271\341\024\3029\377\275\t:\'q\2338.\243*:-Z\2419r^\360\271j\033\260\271\214\277\\9Q\254\3218\001\037\262\272\245~U:\355\333\224\272F\037\344\271\330gF\272V\351\220\271\010\216\2069\021\330\262:h\002\270\271\375\257\252:K\260\27785\334\2519\034:\1779\240H\276\271x\242n\272\366t&;\240tu\271{\016P\272\355v\004:\211Zp\272\252\030\2509\264\217\036:\344\356\3476\217\347\252\270\031 G\272\316\022O\272\240\327[:\245\205}:\020a\214\271\010j\3228E\330\356\271\376\225J:\303\210.\272kl\252\270\203\326\2559\217]i9\316\304y\270Z^\346\270\020\250\312\271\205+\214\272\332\311M9:\002v\271\r\033)\272\304B1:\345\244@9\334p\177:K\222Y8\345\344\312\271\016\n\2218\016\243\2039X\301\3179\305\2722:\374\250\215\271]\n\375\267\020}o\270\301K\226:\211M\006\272\340\336r9\027K\371\271\362\237\246\271z\372O\272}>\021:\222\235\007:\262V\002\272\331V\312\271\302\3774\272\375gX\27296\333\271\013, \272\332\360%\272\316]\3269\377@^\271\306\200\326\270M\252\207\271<\255\220:\274\034_:\217\311\371\272\016\206\212\271\333\224\0358RT\037\271\025R\016:\346;\275\272\242N\205\272\220u^:\227\n\236\267\027^\":d\223\3129\344\231\031\272\270S\3479\355u\2619a\256f:\177\315\266\272{\023\375\271\324e9\271s#\263\272\361\241\367\266l\333\205\272\221\r\202\270\226\177H9\241\361>:@\313\210\271{_\333\271\374U\371\272\204\247v9\374>\3429\233\356-:\247\327G\270($O\271I\314\223\271\025\223\250:u\332\0068\311V\2458\332\275\200:\227\2625\271i\005\313\272A\204\003:\200\377\"\272\337\263\212\27135k\272\317\354\305\267\021Oc9\372\273?:\213\235n:\253\276r\267S\254A:O\350\035\272\344Dq\272\304\002\3027\304\302S\272F\021\301\272\206K\n\272\373\267\317\270\331\222G9q\271\3439k4\343\272\256\022\026:\3324\2338\316\r\211\271\256Ak:\261E\0079uN)\271r\t]:\237\317U:S5\224:\226[\3159~\306\023\271\0268\2009>\263\272\267gE\005;0\201L\272\333K\2168\322T\t9+\333\2148\377K_\271\2448b:\'\222\265\270PW\023:>\t\235\272\001\314\230:\271\330\237\272\334N\222:,)\230\271\204L\000:Q\352\3579\217\324\2259f\235l:\002\234s\272\204OP:\255\252Z\272dO\3258\211\314\254:\2701\244\272\212\3137\272\311\232\0219\212\305*9\215\030\n:\267vy\271(\214^\272\365=\273\270F\207\0349\366\341\2159K\321\303\271\014N\027:I3\3278\211\231]\272\312\346\361\271\337\270\2558X\"\211\271\350\340\255\270\255f\0019\232\333\216:2\370\236\271;)\3208Z\005\2039,\264-:\327~}9\237/S9.\344k\271b\306\177\271\"\350\035:@\025V:J\205T\271\323\371Z:\006j\0139\251\266M\272\326WB\271\265\323m\272\256\237,:Mn\255:\2355\340\271#E\033\272\377\002\201\270\211\220[:\323<I:\010\373\3348\351\350\2768\027<\t\272\234\226\331\271S\303\316\271\204\273\241\270\211\300{9\322\375G\272b\r\367\271i`{\271Z\322\r\272\357\206\252\272\370\224\035\271\210*\301\270\244s\215\271\240\016\025\272\217\371-:;\003i9\307\033o\272\324H\210\271\355\232n\272\207\224\212\272\321\327\2449d\252\345\270\033\271m:Q\344\003:w\\\202\271K\\\232\271pv\241\2703\351\331\271\354C\257:\301E\2277\330\221\262\272*\350\2779\257\205\000:A\234\2357=T\271\272\357\021\252\271\243LD\272nm/9<0B\271\237\312k\272\355\361\023:I\032\024\272\263\330\2339yz\025\272\314e\213\271\032]r\270\333o\343\272Z\001\335\271\033\343R:)\306O:\024\353\212\272\025\033\261\271~\210x\272\326\013$\271K\033~\271U\251\017:6\357(\272\212\2770:\221\313]\272\010=\366\271\243J\"\272\n\362\302\270 \362\262\270\274\235s\267+\377<\272\333\350@8\272\232P\271\313Q\204:\306\200\214\270\301\214\2369p:\214\270w?\2609\243\346\246\271\362t\2139\221\207\261\271\336\032\3568\332\322\260\2707}\2149\205-\2609l\246\017:\300UJ\271\225\033x\271p\211S:>\"?:\022;-:\317\266\366\271y.\0329\341\336\312\271S\274\016:\254l}\272\323\270y\271\273z\':\232\277\3679\363\031\260\271\230\373\3359\224\270\252\272.\277\255\270\230\337\2229\037\327\222\272\305u\347\271\203G\3459\271\315\025\272\256\035\034\272n\264m8m\342x\271\222P\014\271\347i9\272\371\311^\2729\017O\272\326\367k\272%d\r:\277C\3539p;\010\272\263\262\312\271a\002\027:d\2511:\324Cw:\345m\237\270\373\352|:\372\222\2409!\300\3069\355n\357\271\354\035\2449U\352\216\272\371c\014\272\266:\2329\204|\342\272+\267}:;\r4\271\255j\r:k\210\3319\266@{8\347\036W9\341\032\3169V\235\3509m\233a\272\236\354\213\271\320\tU8\224\316\310\267\312pB\272Y\017<\271\360\227\235\271\272\323\2079_PZ\271\016\020\2207\327\270D:z\241\2168\327\216\006\272\212\245\337\271\237\217\006:\251\246\323\271\251T\2069\n\333s:\240j>:\275#\2249\\\033\2778\026J\022\271i\220q9*\300\3418\340\230\240:\320\333?9\006\272\t\271\224\346\005\272\226A\251\2713\230D\271\035\00789\211\3342\272:\030\371\270\363\235\347\271\361_8:Y\00079\202\224Y9\210\177\0348w61:i\316\"\272l\207H9\235l\0329s2I\270\036y\3779;\264\355\271\214\213\0109nw\2178-x\240\271\261\000\'\272\242\352\3009\316\370\211\271\3239m\270\227\252\2529\261_\371\271\253c\271\271\311\265^\272\236\035A\272\246\203\2219\031\357\366\271\267\236\3059\024\006\3069\221on:\253\335s\271\"\330~\272\374\204Y:G\233\367\267\306\272\273\271\335\256&\272\320\315\035\267w\217\255:\3771\2329\247n]9\201\274\0368 \277\253\271|F\3568\364\247\250:\2530\303:\346\350z:\332\227\004:\211\177=\272\277D\201:8?\367\270X\372C:\240\004\366\271\245c\3039\360\220\3728b0\303\271O\037\2029*\34659\216\277\000\271\035<[\271\323g\270\272\001\200\2039f<\2109aj*\272\251\013\2279\347^\0209\032\357,\272\345?\260\267\331\333G:\271\230$\272\030\367\3357\333\330\036::\006\2019\340D\3617\242,\216\271\256d\0309,)\2319i\024\2278\003w\366\270\223k\242\272\261_\254\266\273HY8\214oE:h8\3468\003\230i9->\001:\341n\'\2724j\213:|\220\212\271\220x\3546\317s88rS\231:/\rt\272\244\203b\272F\302\016\271?\035\3628\337\361\2379\305\026\t:X\205\2147\034\\\274\272v\377E\270\302\323U:v<\3339\327\003\016\271\356\355\2359\372K\261\271}\350\2659\265Z\225\271\033k\270\271\226\200\002\271\006<y8\320\003\240:\256\307|:m\341?\270~\245\224\270\371\2277\271\324\302]:\310\324.\270\223L\2059\316r\343\271\306\262\3779*\001]\272$\003\2378\217y\3669C>\212\270$\017\3756\204\003\257\271\330\251\234\270{\343\240\271x\330\203:\031L\t\272I\302_9/(\":kR\003;V6%:\325\342\317:\r\253`\271\251;\014\2720e>\272\216\342\2549~\316O\272\2502\025\271\373\315\3159*\006<:8\347g\270\013\021\3139\005\2425\272\315&\t:\315\234\363\2719.\017\272O\334\246\270|\342\2269\310\264(\272\367\032\2369\375\206Z:]\321\027;\345\2248:2\360?\267\267\230A\270\r\035\031:\274\237\240\272\202;\002:&%\246\271.\361\227:\002\300F:\201$\346\267e\2505:\033~\027:#\377\2619$5\243\272\367\352\323\271#\272\201\270\347\220V\271\215?\213:\3542P9\206G\225\272P\254P7\273\322h\271\217\331a\272T\251g\271N,w9\3435[9\034\t\3459\260}\2259J`n8\242w\345\271s\245u9#=\"\272\357\013\004\272\203\232/\272<\033\2119\202i\363\271\"\2617:(i\372\271g\377\016\272\234\362L\270E\325\2019A9L:T%\0029\245\366\004:\021\372\246\271\'\310\225:\023tw\272\014~1:\353\333B:\303\201\231\271\226\322\2657\2314\312\2709o\206\272b\266U\272j\005Y\270\204\036{:\247\037\244:\273\341\331\272?5\027:l\257 \271\324\225\362\271\306(\226:DGf\271\030\332\350\271\242[D9\345j\354\271bd\2119\342\207G\272\377G\032:[+\210\270\034V;\2727\260[9\232\204\010:\325\037\363\270\n\251\3069\262\350\203:\314\337\2739SrK\272v\322\263\271/,\277\271\017;W9\362\367\016\271\241OU:\nV\3569\355\241\257:\343\321\034\272\265;\244\271\2251\201:\033Y\2239\212!\3408}1\024:\215@C\271\310\264T\272\207\237\2019\230C\3529\314\026!\272\244\020\2779\322\325\31589Rq:Z\317\2459\247\273\002\272\327`\2639\002<\277\271\231\020\037\272m\277\2508\006\361\30292\334\263\267\330\03439M\266\3008\262~\302\270\003R\006\272\002\257\000\267\216_j:\336h\2609\314\253L:R?\2349\312.-\271\257\"\3549\007Rc:7\337\017\271\'\177\266\271\357\322&6M\373\0279M$\3229\222\367\312\272I\231p9\220tE8,m\2009\356\257b\272j-\252:>\367\0319\335\017\':\257\227\2469G\024~9\200\373\3029\022K\3249Y\306\315:\210\030\217\272\n\220_9\353\007\223:eNR\272\322\336\310\271\216\250\003\2728\210\006\271\271\275\003\272)\223\017\272\307\021\"\2710\t\260:\ni\027\271Z\334\303\271\261\315w\2712\256\013:\262\234\005:\327\361\377\2716&\037:M>\3538\341b\3779U1\2009/\203\234:^c\243\271I\035\023\272\327=S\272\022h\2016M\020u:\014\216?:!\257\226\272\353\224\023\272|l\372\271\274\306\273:1\36279DH\3769m\006~9(N\200\271\311=\\9\360-i8\255B\230\272\034\305\214:\200\2560\272\343\034\2109@\374E9\345\337\254\270\324T\032\272\363\326\007\272,\036\004\270g0\307\271Lc!\272\3064_:h8\0177m\000\247\271X\234\225\271\243\211\2779\254\265K9\304\254\2178\264\363S\272\205\037\025\271\033\323\243\271\273]n8D\330\210\272\305\27378\257\36199\341\003\3309w\211\226\272X\206\3659C\206Q:\360\332\0139\303\271\376\270\014\345f\271\331\346\2309xD\036\272\261\246\253\267\340;\371\270\211\\3\272:U\026:\243\317\n:\326\273.:\001$\203\272\2445\3117\246\010\271\271\237\263N\272\267>\t\271Y\210\003\271\030\213;\272\330\364\200:\221\247\030\271\251\337\202:\234\325\003\271x\226&\272\020[4:\205\360\006:\021\216\255\271%\023\033:u\366\003\272|\365N8\0340\364\271\240\376\251\271\225\014d\271L\264\212:\330g\004:\313\363h9W\334N\272m=f:Cka:\376e2\272m\032}\272\3731\241\271\023\"\25289B\2279\223\025\324\271\325\346#\271\025\344`\266\367\001n\271v\t\302\271\001\027\221\271\210~\035\272o\226|\271\033ad\272\206\211\237\271]\236N:M\270<8sc>:l6 \271\021\021\300:\037\374\3109\225p\366\271\027/*:w\320R\271E\0002\272\036r\':(\302\257\272\240\353\036\271:\035 \272\206\373\266\271\32488:\341\242\211\271b\233\217\272\203\204}86g\r9\242`\2439\217|y:\200\027g\271I&\372\271\373\234\211\272\201D\2639O\335L\271\200\243\300\267\002h\3719\253\221\217:\356p\2579\017$\212\270\361\307\2019\204T1:\321b*\270\250\254E\271M\032\2378g\255k\272\375\255\237\271\235:H:\360\321\236:,\211\230\272\276=\007:\213\2112:\260\305\253\270Q\000[9\277f[:\254^\340\270@\017\034\272nX#\272\225\273\013:\344\0200\271\t6 \272\033\372\216\272MF}:\211\022}9\220b\314\271\207K.9_D\3649j\267\322\272}q$\271\352;\003\272\035\363\215\272B\250\362\267<(\244\271*,?:o\n#\271\014\366\':\245\360I9\212\225@\272\302\262S7K\007\2008e\\\271\267\245o@\270\022\307T\272\375\342\003\272\366\200\201\272\311\036\2559U\004\313\272!a\2129\214\263\212\271\252w\2079\361\003\2469\210\321:9.\231\254\272n\226\3509\376\340\3349\177\256\030:\006\333D:\351\333\205\272\320\254x\271\315\262\2469\351VT:M\332\3669\301\364\n:`\032t\271\363\300\0209n\320<\267\303\322!9\305 \036\272##\3419i\320I:0\204\332\267\251\255\213\271\010\330!:\032\374\3569X\370\257\271\2260\247\270\227\214v\2725y{8\037_\374\271\303\304\235\270c\340\3419\235\372\306\271m~@:d \244\271\213\031\3458\340\354\r\272[\211P\272^\300\227\271\210|-:~m\261\271Tv\000:\225}\020\271\260\260\2738\270g\3679P\331\017:\025\325\2206\315yk\271*J\"9B\022\2149PM\226\272\370\035\224\272\022\032\3619\331\346v\271\314w\021:\266\004\234\271\215)F\272\273\271\226\270\201\211[\272\310C@\272\213mW\271\004\013\"8\322\362\207\272\236j\233\272k\345\257\272\255\261R\271a\345!:\370\344\r:\022\277\004\272\2311\177\270+\363\2449\275B]:9)J\272\375$N:\014\315\3269M\206\3169\205a:\272\001M\2249\035\001\n\272\236\'K\272\255uK\272(\225\254\271\273n\034\272\266\332l9\036\215\2628\0171S\272\267J\262\271\037C\273\271MH#\271\376\351\211:\\y\'9\016\r\242:\331\346\'\272\031\027\230\271\324\334\2039\277\020t:\202a\2119(O\341\271\253k\256\271\354.{9m\001\3637lR\267:c\004\022\271\275\246H\271\372\313\023\271#\320\032\272u\307\373\270V\247\342\271\226\363N:5J\3409T\226F8\215R\276\271\253\\\223\272\352\035\2338WK\215\271\262\330\243:\345n\016\272\243v\325\271\n\2430:lDB9\026\332Q:l\205T9i\021\006:?\361\244\267\221\300x9\325\310\304\270=\253\2408R\347)\272\306\307!:\356s\r:\271\344s\272\212P\014\272\373\337\2779h\252\244\271^~\261\271\351kE9SM\003\272C\354C\271\326c$:\333\370\023:\272T\3738\365N^\270Z5\320:\034\010\202:\316\367f:0\260%\272.\307\r\271\355\004h: \244\272\270:\237\017:\244\324\212\272\342\003\3539\031\325j:\22196:8\235\273\272;\261\274\270\325\315u:x\01658\347\234\3248\302\265\217\272\241\"\230\272\340\217[\271E9\3618\360\036\272\271\264\224\010:4\233\2729\335\240\"\272Be\0138\3502\010:b\021\233\271\327M\226:2\231o:\004\355\004\271o\254\300\271\350\331k:\237/\347\270\252p\007\272\3228\026\272?C\0109Hwk\272q\034\2519<\236\004:AX:6\0360\204\271\372\222\232\271K\322\031:\271\026b9\236\032\3149m\221\2569?Z/:\205E\021\271%E\00599\213p:\277U6:\035\005\001:\032\353\021\272a\210\3718\307\322X\271gE`:\207\0213\264R\270\330\271\371\326\3379\r\216~:\236\n4\272\277\'\223\271#bG\270TU\3259I\354\0368\024\331\2659\243\333S91v\3269\n\226\2238CH\026\272\223;\217\272\355\327I:\277`\0079\026o\204:U\214\3319\370@\\7\230!09\2709\20491\216\317\270\245\026\3129\367J(\272\350\31128\362\177)\272u\345N\272\340\240\234:\252\036\3029]*\357\270\307\"\335:m\341O:x\335\2509Z\250\3109~\321\3739U\310\3549\274\350\2359\250BO\272\372\016\370\271\3627j9\355\314*\272\362\312\2419\247\35359A\025\3749\350\261\337\271\350\027\237\271\331\211\3249L\030\315\270\367\014\3129\263\223/\271p`\033\271\374L\3709\035\2232:2\3560:r\240l\272\225\005(\272x\3127:\366\3301:#\356n\271\270s\2748~\\\002\272\310\372\3527lP7\272\204Ei\272v\000\304\271V\362\0379\327\021\3409\272\346\2459\304\323\2209K\347g\267\365Q\335\271P\020(\272\033e\3659\350\22579\002\324\2129\351&l\267\210@\004:\247_\025:W\201\000:C\t\244\267<\371{:>I)\272\360*3\272=4\271\271\370\013\214:\007n\001\271\366\352\203\267v\326^9k\017J:\254\364_\272C[\231:x\006\305\272\364\325\3669\262\212\262\271d\243\350\271\367\305\036:\307<\3459f\223\2549*\335\277\271\215@N:\302D\301\270P\255\226\271o\323<\272\350L_:\200S\261\271\023\313\024\272Q<\"\271\333].9\240\3748\271\336\342\026:\341u\202:\247\006~\271v$\302\271W\371\326\270a\215\004\2721\201k9\177\275\213:|`\3418!K\247\271\306\343\323\270\277\312C:\314\n\212:D\353\2749d\337\240:\004y\001:\200D\013:\222p\3159;\3500\2727\020\0209q\214\254:\273\214\260\272\305\337\3649\221\351\344\270\216\272\2729\205)=9\362\266\272\271u\362\311\270\300\304`:\236\344\345\271\354\320\333\271\002\351\207\272\000\020\255:\r#\365\271\276f[:\001\017f9D8\334:\244\000\2309\007\352\264\271I\355c\271b\334\3326\340\252V9\355\3201\272\37414\272\321\213Z:\213\307\016:\274\351\364\271\036\341*\270\033\2434\272A\036s:\347\353\2739\346\207v:H\231b\272\272\275\3629.\336s8\035\272\2649\244\326\210\272h\347\3179w\240@\271fl\225\272\274\371\037\272\337{\014\272\2433\213\271\351\314\3527e\370\3319\270\222@\270\250\336+\272?\317\251\271\020\346\000\272\257\031\207\272L\307(\270#W\271\271\277\224V:\310\275\2605\306}\243\271\205i`\272\014 \2149\247\337\246:\031\344e\271\331\255\2529Z\236\251\272\031\n\367\272jI\":\0174\016:\002\342\205\272\362\024p8\215v\030\271m\241\2758\323\200\220\272\337\362\016\272\362\376l9\203!\247\272\265\351\276\271?\344X9c]\n:\221\355#\271>\256<:\301\234\246\271\001\372\0249\004b<:\244\004\303\271\316\363\247:\334zU::\215\2128Ju=:Q6\343\271\323\361a8~\006m:\230\002\317:{\322\202\272\007=\3319\334\300\3309\301\261\2069\371\0019:\347\013\002:\241\231\331\270\177\356\215\272\334&\343\271\037R\017:H9N:-\201\2179\252?\204:p\212\036\270\337\302R9$}\2639\t\207\210:\232Hf:a\370O\271\353oV\270\312\232K\270$\276E:\336X\263\272\006d\332\271Ce\t;o:3\272\t\005t\271\303\271\033\271/\345\220\270\263^=\272\206l!\271\323\347\036\272^<7:S\023-\271\374\353\247\271q\235\3178\030j\330979\001:\326\355t9\234i\352\271?3\2629b\3170:\234v\232\271\215>\270\266^%\263:X\370\026\272\252\336F:\361\274\256\272\214v+9\320\200)\270\270\264\031\272aK\3648\373\355*\272)j\265\271\004\303\n\272\204@\003:y66:\330\"9:\325\005A\271\313\342\255\271\021\331\027\272\321\020\361\272\360\361\027:\0130\322:u\247\3028\230\254\2319\002\020\205\271\356\032\223\271^\355\353\270On\2139\030\227\215:z\347\n:\265\242\254\272\375VY:N&\014:)@\245\272n\204\n:\r9\242:\314\237\2469\207\\i:=-R: \275%\272\313\206+:3l\202\271*\033M9Ok\035\272\231\204y:1<7\272\205\355%:u{P9\237\326\371\271\253\301\203732\201:0\360\005:\203\035\3359u\n\250\272\211\362\210\271\017\005\305\271\372\"\210\271_\3612\272\306\360\363\270\t\332H:\317X\274\270\350\313\211:A\326\345\271\334w5\270\276\327\303\272\235f\3137y\210k\272,\007\3109M\002\n\271Y\216Y:\313t\010:\214Z\006\272a\22299\007\364\2028z\250\213:\014\246\020:\356\240S9\211N4:\250\362E:\307\255E9=\233I\267\251\274\200\271\001K\375\270\204Pu\272\2069\2569\370\270\0226\026\345\257\272\304\326-\272.\331$\272\312\230\0019(\315u\271\363\333J:\335\375\226\272\272`9\271\373\3532\267\345\023\264\271\024\360\2079\rX\001\272[\315\3169\305$,\272\003\226\2169y\203\2759`\226\241\271\2435D\271\005D\301\271L\250Q9\0376%:\033qO\271\247\247X9\370\241<:q\006,:Q\360\267:\351\3454\272<\025\205\270\321z\016:Ino9\263\230I:L\336-\272r\323\271\272\215\233c9\013\200\257\271\275m\223:\272\273\243:\003\373\t\272\326\2252\271S-\3639`\242Q\272\254Wd:\277C\0349\201\001\207\272\264\030\2078\217=\342\271\222\237f9?|\2129L\356c\271$C|\270\352\256\3569\226\326c:\266\262\3439a\347\031:\211\317\2259\274ZI\271\203\020\325\271\326x!\271\3672\3478R\005\2579\270\327K:\344\355I:5|\2617\201\211\002\271\230iF\271,\347\3779\017\000\3149\347\"\204\272+X\335\272r.\034\271\330W\025\272\355\014+9\364X?:0\2228\272\340.-9\205[\247\272\305\004z9\313\336\016\271\340h\271:;\036(\272\211m\213\272_L\331\271\254%\220\271\017V<\272\324\202\273:\277\242\215:\321\311\2209\271k\3629\234U\233:\371\212~:\351t\3139n\021\031\272\241r\2168|\252;\272I\r\211:2\235\276\271G*)\272\240\205\347\271I;Q\272\374\231\003:\320_\220\272+{\346\271\3440\230\270\322\026\307\271\324\265\007\2702\217\n:A\227\230\271\223\246R\267L\215\230:\302\246\2348\240\256\3579?\253k\272F\202/:\01643\272\270h\3209(Sj:7\201\0358\021\020\276:0\tE\271\305\360D9\224-\320\267u\'\321\271L\316\004\270\225\262b:\330*\2078\364q+9\2244\3619\235d\0249H6\2249\334\343,:\022\025\2139Y\321\327\270\t\355:\272K\"\242\272p\233\210:\332F\216:\211\n\277\271\214\321\3129\321\301\017:\3361\360\271WQ\032\271\t\214\337\271o(\364\270<\310\343\271\323\377\247\267\372n\330:\367\016\032\272\242\226\206:\227\233\0329\355\357\224:.6\334:\277\003\034:T%\016\272\232\241E:B\301P\271\207qx:\"\241#\272\343\203\013\272\307s89\260b{:\306\227\276\271yC\261:i\316\020\272l\2204\272\331\330\2079\000\337\2679\037\021\2739\350\010{:\220\314\2139\357\020\0179\374e\204\272:\370t\272\330\361&\272/\2657:\000\254\n\272\266*\261\270\206\324\2119x\215\343\270\276\"\2029\212l\306\271\004\245\304:\247\307\361\2716\345Y\272v\371\264\272lVs9w#!:\301\364o\272t\36389\213\224c\272\236\260f:\250I\2518\347k\3009\000[o\270zU\024\272\223\001\263\270\205\305G:F\220n\272E\357\211\272\244\324\027\271\376e\213\271\207\266?\2722\211C\271\360\211U9\305\031\304\270\010\365\2139\324\315\001\270\017\345\2047\356\324\0008\273:\260\270\250\030\356\271\357\036\234\272p\300\202:b\223\221:M\t\2569\214\263\261\271\351\372\2479>\013\265\271\001\333\032\271\326\345\030\271\006\232\273\271\014\226\23095\276A:\250\267\n:Q\233\005\2720\261_:\2720\003\272\356\r\021\272Z \336\271\267\02778J\354\200\271\257\372\243\271\300w\3329\030{d\272\206\302\2419:.\032:\274]E\271\014\026\275\271G\374\261\270\232S\2569\267\310\0319\346;\3658\273\275\222\272\"\023\2669\364j\002:j\007^\271=\361\253\271\227\263\343:.b\2429T\367 9+\310\200\271\330\356\013\272\016\311\277\270\235\273;\271,\361\204\272\240si:M\246W:\203\227\t:\360\221\224:*\244]:\206K\001\272\025\210c\272\334\025h\272\030\204z9\227/\357\271k\222\3609\212\021\304\271\343U_:M\277\217\271\356F\214:\021\247\033:r\312i:PL$:\r\025\3349FQ\202\271B\343\211\267\374\201\276\271\177\334^\271v2\300\271\236\246\023::8\355\267\376O,\272.>\260\271\0039:9\227U\026:\315zO:\231\334\016:\357Ni9\t\236\244\271\225 @\271\262\326\316\270aK\005:\267\225\3749\013\304\032\272\277\006\2267\376\035\257\271I\265k:\t\251\2309\306\300\":\301\313\217\271{\250\031\272?m\036:\315M\326\271\017\300\010:\177\337\206\270\275\201&9\210\304s\272X\325\353\271h\267@9\305a\267\270\204\232f9)\374\215\271k\022\374\271U\237;\272d\363D:\370\301\036:\246\306E\271b\250\320\271Kn\3078\332\025\303\271\315\367\031\272\310\354\t\272\023e1\272\217\224\024\272[K\r:\032\224t\271>\343\236\271ml\334\270\234/\317\272\2438f\271\367\370\354\271@-\332:\333\027\214:\324\235\3669#\253y8&\343Y:\275\235\2549;-\314\272q\036\207:g\352\037:\243k\3339\313v<:{\017\227:\256o\034:\315\372P9\030kG\272%$\220:\334\303\\:\307K\3308\"\032\\9\200\276\3739\017\255\220\272\202\t\255\271\213\2419:\223\230]\272\357\370Q9Y\266f:\025\251\241:@4\'9\204\337\037:l\340v9I\224\316\270:\255\206\270\273\300#:\305<\003\272\325\274\3478\003\373@:\244 \3247g\376\325\2716\330\2709h\343\"9\237$o9\221\373\014\272K\270\301\2708\272F8y{6:\3731\0179\212\\\2658Y\000\210\272\377\"C\271\331\233\276\272\364\r\2639\271\300r\271\366-9\272\003\322\034\272&\300\036\272,@\337\267\332BC:\252\374c\272C]\321:\007Hg\271\264`\r\272\016\351\3508\347 \250\271raN\271\315G19\320\230\3728\210\375\2258x)\233:\235Rg\271\016\032\342\267.\270c\272\246\336\20595\306G8\023D\323\271\277\240\257\271\363\253\021\271\234\214\227:\r\374H9\364c\2628d0\2167R\002\':\226\304&9;\031\241\271wf\0079\225\261\027:,\026\237\271Z\236\020\271\240S\0219\337\336\037:-?K\270~-\2148\224<\004:\300>\252:T\010\037:j\366\230\271\213Q\237\272dQ5\272jR\364\271\320\200]:\364\237\305\272\214%\304\270O3B9\266\264-:\352\220\375\270\342~\2039oY\010\272w\214\2379%\'\3139\025\362z:\326\366W:LUD:\352\327B:\200\265%\272m*\230\272\016x\212\271\245\304P9\320\204\2369\315P8\272\313\330\2009\037\232\333\270\210WV:\354\344\2049\310t\212\272\301]\241\271T\n\032:p\325\306\271\264\333\3439\260]\351\270>?\2579\220\261\020\272\362I\236\267\232\373\314\267\014\004\032\272\320M\3519\036<p9\336\004\311\2710\007k\272\266^\016\272\317\314$8\345\025\000:\322O\2578\305n\335\271h\007\\9!\025\027:q\302*\271\331\303\2269\373\331\205\271^L/:Eg/\270P\254\211:-A\347\271\241\311\262\272\206\206\215\272-J^9243:&\200\035\271w\200!9\002\352.\2711\254\':t\371<:\326\023\324\271\374O\026\272\230|\241\272\324J\3619\014\323\033:m)\3638H\352n8O\002\2049\177`7\272\007\227\3138\327>\3709\350\203\230:%\220\33392\341\3548`+\n:Q\0201\272\202\277K:*\376!:\364`\2049\017\206\253\271\223[\005\272A]?\272\360W\236\271\014\376\223:\237O\357\270\203\366\350\271\366\200:9L\010n\270y\201\3579\365,Z:7\350U:\251U\033:\300Y\377\271Hx\215\272\032\303\2139\253W-\271\033\350\327\271\211m\231\272\311\261\023:\021\237\0139f\213\353\271\301\224\213:\007\226\3759\034y\3739$k4:\004{\3129,\375\272\271W\227\3379\241o\033\272\032B\201:<\353\344\270(&\244\272*\036\2459J\255\273:\032\373\261:\234\335\3609m\215\214\272\244\352\3069n\033\260\272:}:\272G\350\t:\221\274\200:\020\345\354\270c\261\017\272\201\226\2249\343ad\271\230\277\261\270\r\255>\267\232;\013\272]\357\35691&\340\270\346\255\315\271\0010v\272\033\001\205\272\222\343\0139\361\316\377\271\304\222\210\272\216\226\007\273\210\374l\2714\021\341\270\320\241\3149\320M\2348|\346\341\271\300X\0058E\233~\272\330=K:\312\232\2007\2116\350\271\330\\\007:\366\234\215\271A?J:Y]D\272\nT\020\2726\333\021\272\021\247\333\271\274\203g:j\326\016:K\223\2659 \371\037:\336(\3239\037\274K8\330\375\3049I\252\256\272\261\303P\271\250\375w\272\023\323\3309\344\350-:\320\244\3369\370\273D:w<\031\272\274\202\204\272i\344\035\272C\\.:\031?M:\272\355\220\271tD\2648\204\021J9\005\330\2568\2567\3619\225\006\005\273\247\260Q\272\0068\035:\204\216\311\271jh\026:#J2:\037\254\0139)\363#\272\005\344\2269#Pa8\340\247\262\272\303o\\\270\342W\2729\344GO\272\302\244\2349\333\267\"\272\202\211x\271\325\320*\272iaY\270[m\342\272]\017\2269\347\265\357\270\276\375v\272\304\246\225\272q\341\272:\005\2656\271\3006\2129\220S\232:\244T\214\267\3168\246\271Rwr\272\311\305C\271<\260M:\332\217-\272\306v\2649\024\232\210\271/4\037:\375BJ\272~\241\037:\350\262\2176\267\354i\272\312oN9\231\035Q\271>\342L\272\234\001;\272)\357\252:\007~\003:\253\352\020\271\007\206l\271 O?9\342\267E\272\032\030\235\272\242\322\241\271\2654\3119\335\322c9`8\3357\205\244\253:=\210X:\263?\037:\341U\277\271[\025\316\271vf\2719\003Zr\272\026\0313\272\206\266;:u\323\3279C\232S:\014T\313\270 F\3449\001\312\207:\331\02489U\n::\362\3428:\324\374\230\271\313\017\3219d\013\":\264\371Q\270Z6,\272\250\202\2209\355\016D\272sH}::dx90?0\272&\376\245\271\033\373u\271Fsj:=\231X\272N\022\"9\231*k:\242*$9\345C\004;\346\036\2629\264\31309\255\3278:M\231\2349s\02119\360\006v\271\002\276\347\271\327,\210\271\027\n#\272\334\322\327\270Ki\325:\000#\0067\rn\'\271\014\025\200:%\261\021\272\022\227\366\271\371\037\314\271\354~\230\272\016\037_8\214\334\223:E\317!\270\251\245\2128\352\275\347\271\235G\030:\013\270\3629\030\352G\271`\240\3159\304\301\27487\237<:\275\307w\272\205\320\225\272\027Q0:,F\2228^\230\215\271k0\242\271\202\240\313\271\205\270\005:\354\335\222:\0266\314:\271\275\377\271\033\321\n:\2438\227\271r\260 \272z\216\033\272\227\343\235\271\001]\351\270aO\235\270Zk$\2727\027\3759w\351\214:\365(\3375c\234Z\271\300`D9\335\354\307\271]4o8\"\237\361\2703\250\021:1\356\3709W\302\377\271\372\013\272\2672\302\2579\336\275\310\270\245y\025\272\371\002\24496p\2219\255\305\036:\334\301\263\2701\025\017\2721\023\2558\225\300\372\270Z+\303:h\303\017:\220\222\036\270\002\":\272\265\\ \271\364\336.\271\341\234q\272]\204M:\263\221V7M\371f\271\323\027\n:\333\207\036\270\257\"\340\270+\002\r:\034O\2668\302\304a\271\347~\031\270\277k\3259\263U\36292\247Z\272L2S\272\006\020\236\270\333C0\271\025\035\236\272\366\353\375\271.\261\031\272\320\257F\2723[x9\360\006$\272\316\243 9\347\323\216\271l\037\234:)\004\2049\270\311\252\272\377\206h\271\000\254\3338~-N\272\316\222\\:|\200\21197\017u\272\251\352\3219PR\2769f\356\345\271\326\351\n\272IL\232:\365\177\335\272\212=@\271-K\2718gz-8D\234\0279\347\356\233:\264\363\373\270\215\377\r\271\347|\3279\210\211[9\305?\2669\245\252U\271\'\322::\315L\260\271\344I\207\272U\212\007\271z\223\3059\002\365\'9O\252\2359\004\314\264:7\324v\272+\224:9\211\305\0055s\235\3449\331\246\026\271\212_\2239\336\346\2779\373\246\035\271\364\210]\272\224m8\272\323\244\210\271\271\017\232:\204\215\":\025;0:rU\210\272kI\352\271\336L3\270\201\334\305\271\250L\307\271\222\010\211\272\333|\274:\311o\372\271;\"$:\030\266I7\000sY8\351+3:@\360;:\347Z\217\272i\276X\271\020\363z\272\234T\023\272\335Z3\271\244\262\304\271\337\351\205\272P\013[:\'H\206:\365\274\2209\246\010v\272\244\036\3316X\303\3238\001\304\214\271b\231\0279\036\'\333\271\014\372\263\271\337Aq\267,5\0149\r\361\212:\310\342\010\272\372\333\364\271\014\200q:g<4:\253w\370\271\032|\'\272\002e\2109\357\305\354\270 \236\364\271\233O\3429\235\330D:\236\354\'\2726k\376\271\002\217\2009\034\275G:K^\233\271\327\335\247:%;\321:\310\373\031\272\327\327)\267y~\3459@\356\211\271\213\26699\330\216@\271U\271w\271\360\337\314\270m\354\2349\264QO\271 \250\2568g\251\3307\2366\001\272\367\344q9-!\032\272\177d\20197\267\242:\262\232\3559\263\021G9?v\2246\343Xi\272W\025\34785\311\023\272\231\374&9\266\343/:\353d\2509\320\036i\2726\004E9oA\363\271\236G+:\337\"\330\271T\304,\272\034\007\213\271\356C\3057\342\344\3538,3\0359)\341\3009\243\312\267\2704\334>\272t\246\002\271\247q\266\270\267\315\036:WdV9\261\324t:\277\262\311\271\372a \270\0347F8\013\rT\266m\017\2039\277\273f\271A+\341\271\365\223\024:\263o\003:\020\243\0267\324!i\272{+E9B\"\271\271\336\356\2349\036\016\010\272\351\322\030:i\272\006;\341Ow:\371\314\303\271\006\365*:\231\374r\272\352v\2019\211\314&9\265Q\356\271E\356\006\272\363Of\272\314\307v\272\246\026\2548\321\001\3138J\360\210\270\263d\374\2719K\2019,\315\2069\273g\303:j\373\241\271A\356\232:<c39\002iS\272R\352\213\272\236\007\331\271\3775*\267\316\352=:\344E\0059\216\321-\272\232So9\363l\220:N\003\2639\206\276\257\271\374\272\036\272\241\323+:M\316\354\271\210\311X\272\022\376?\272\237\240*9\243U\343\271y\331\247\271a\356\274\270\374*H\271SFO:/\025\353\271\373,6\272\224-m\271\214\302\3078h,+\272wo\2558\334[\014\271g\005\35497f\3009R\016k:\366\374\3468\374iW\271\036S\023:\356bg:\315\265\215\272q\275\2269 P\0059\035\352x\272\233Vx81.6:sM\3769\353(a\271\314N\002:_!c\272\363w\215\271\336\363%:\354\233\031:i\023\030\2720\250*5(-,:\221\277\305\270*kD\271yh\222\272\324\204\013\272\367\027\221\272\245}\234\270\303yV9JEB\272\353K\2638\027\317\2629\202;\231\270\327\372\001\272\211\343n\270\356\253\245\272\337#c:@\317\303\271\235\340\022:\026$ 7\252\322\003:\260[\265\271\200\'\241\271e\243\217\272\342S\036:\365\257\310\266&\336R:\3749\2479M\212\361\271\"[\354\271\332\006\207:\272\013\010:(\353+\272\205x\330\271h\262\000\272;\013\026\272q\356\203:P\227U\272\340\347\211\271\312\000\3429\303\377?\272f$\254\272\3723\005:\244\322[\270\364\375_\272u\242I\272\004\031\3718_\265\2509\333I\214\272\364\222;:\314N\276\271\343\317\2228[\361)\272\007\200\030\272\347_4:\016u\316\272{\373\235\272>\341\2658\261l\220:\033\r+\272:\330\023:\365\261\3709\346|\210\271\260=\221\272\363\320H:\316,\3277\232\0354\272\321\320\330\2715D\323\270\373\275\033:\345\224\r\271!\213\016\273\n\021W\271R7\224\272G\023\331\271\371\325\3459\342G$:L\003 :\365)E\272\274\271\0339\006\033\021:\250\262\3769;\353/\272r\033\246\271\031\275V\272\032[\222\272\034\327\244:\242\272\375\272\000S<:\246\024D\272\027\221.:7C\330\271\005\213e7\311\353\371\271\367d\253\271\315\300[\271\037o\014\272e\032\2058#\"\201:\307\257\257\271\033G\017\2713\357\3239\205u\2209\332\320\3277z\340\242\2724r\23792\305w\272S\356\364\267A\365\261\271\230b\304\271\314N\034:.\017\3208\270\317\354\271\\\267*\272\355\005F:\332\254\2419)\223|\272\3445\271\271\025A\2019\365=\022\270\312\241\353\271\321\r\2117SI\\9\000n\201\272\323t\2779\370\227\2329/\206|\271\303\224\231\271l\212::\355\201\3309\202\274\265:\363.%:\302\326/\270\205\317p\270\247C\273\270\222F\001\271\316H\206\271\016P-\271\020\341v9\371\341H\272\260/I:\377\034\3429\0016<:nN\3269kG\022:\372\223\t:\326\314{:t\r?\271\373\371N\271)\310\\\271\013\253\037:\345\236\3219\317\310\3349S\213P\272\205b\255\271\3612v\271\372\207,:SR\355\271\005\375\277\271\000\013\301\2670y\251\271\"p\2759\263\347\316\271c\022\323\271e\327\013\267\024\364\362\271\n\376\217\270\260\331\370\270\032\245X9K62:\215\021\213:\331\266\260\271\205*\3427y\033f\272\023\316\2169L)\217\272s?-9N\235\006\272\230\324\017\270\311\374O:\036\002K\270x\260\0238\321\014\3229\272\203V9\345n\3678\307\222\254\272aZ48\354\312a\271\000\206h\267)I\0109)%\3379\034\353\3739~\007m:M\2735\271\350D(\272K\375C:\201\316\353\271\322\307\3709F-D\272\375\206|8\361\010Z:A\\\326\271f\256o9\0076\\\271[\027u:T\317\007\272\237\230\316\271\325N1\272\203Z\317\271T\017U\272\335\262\265\271\030\224\362:\201h\241\271t\2716\271\216\304\002\271\307\276\327\271 4\214\272\335\234V\271\372\247y:ig\0259OaQ:b\302\2119\225\211\000\271H\332$\271\013C\0209%]\266\271\345\211+:\364\356H:\323\014}8J\237\313\271\204\326\2439\225F\226\272\370Ix9\007{\005\271\223\215\217\270\217G\0259\331)\246\272\344\226\2229\026C5:=\330\t9\212@$:\367H\032:\315\261\235\272\264l\021:O\326\2358\000\"\3179#c\3579V!\003:<\240\311\271z\"\352\271\210^\2049\216\2714\272\262w\3628\234\003\036:a\304\207:4\203V9\305\365\325\271\010\347\332\271\023\002\313\270KI\2368k\355\2479\327\334\203\266\005\376):e^\2638\r\216\364\271\323\202\2339\300y%9\024\213\2319gd\2249P\013\337\270\372\245\201\272\244M\364\270\\*\211\270\322\013\2269\230(\004:\324H):\210\315\002\272Z\\`:\272R\267\2723Z\237\270\356\230\217\271KJ\372\270\303\324\033:\347z\276\271\214\034\300\2717\2612:\026Y\3078\255\034_9\240R\271\271\275[\247\271\333\346B\272\263\352\206\271\253\327\3028\323=\026\272)k\3479Q1\t:\024~H8\245\361\356\271\370\023\242\267x\n\3259\232\352\267\271\313n\2249\314\224Q:\217\315\217\267\277~\014:\006\336v\272m\023\206:\006\226<\272\251\361\375\270\274\'\332\271\250\325/8rKM:n\2237:\000\271\225\271\356h\203:\250V\2529O\016\322\266T\\h\271\230\027\003\271L\000\2209\276\262\315\2713\027\253\271o\270\006\273\\\275\036\271\227\202,\271\350\274\266:\374)\301\271f\237a\272\023:\353:\026\2617:\0321s\272\256\354\3359`\215t\272^)b\272\354\300]9\327\271g9\204#0:Ra^9]\240\260:\tr\251\271~\227\0039\355P+:\372\2254:\253%\342\271\267\370\237\271\rv\207\272\272\213t\271\005\223\3559\036\"\030:?\372\203\270\220\347\'\272.\217\201:\027\017<:\260\2353:\275\262z\272\227\003\2769\273*\3179\240\233\2259\033\013\217\2717\370\005\271\365y<\272j\202n\272t{\244\271\264D\026:\226>\214\271\236\341H\272\016\240,9\010)\212\270\177\214,:\220s\210:b\222\004\272\302z;:\244\230M\272\276\017\353\271\345_L:`)\307\271\017\326\2219\232\252\014\271M\023\327\271p2K\272r.\017:\375\206d\272\241\372\216\272\036\366\037\271hw\237\271\314\352\253\271\324\300\":R\37139\361j\2779\314\225\306\2715VR\272\234sr:\030\351\004\272\0214^9$\007\274:8\363\3619y\250x\272\223\033\3609:\225o:1\366\3019\362\367D\272>+\3729\032\007\010\272\274\244\223\267\262\200W:H\303\3009\013\n\n\2726\320):N\352\006\272\2603\250\270f|\":\364&\3517g\274\2409\343bP8\'\233\3559y*\3418\227\322<:\307\201\332\271\261\265n:=@#9g\r\001:\000\372\005\272\267A\273\272\3331@\272\273\211f:\312\372f\272)b\036:Sph\270S\3414:\270\322\3219\270\234\022\272\327\241o\271\225r\2136\341\254D\272/\262`\271C\217Y\272\322R/:\320RC\271\022\036\320:\031\220\3338;\231\3339\263\302\200\271\232~\243\270\367e]:\200\365\240\272@\246[9%\r$\272\006\350\2338\2569W\271^a!\271\324D\260\271\272u\020\272-e\204\271L#*\272#\3217:\275\302\177:2\236b\272\350w8\271v4x9\373Im:\270\202Z\272\342\230\3178?\237o9Jy\"\272\321\373\016:Tyh\270M\3448\271\265\313\":\032\355\365\271\240\256\003\272\217\325\203\271K]\220\272OG4\272b\036\2159jD\001:\333\272\303\270\037ZG:\367\361@9\037\323\222\271`\305%:l\034\301\2701\327S9pV\361\271k\'\2328\331E\301:\333\035\r:\034)\014\272\322\302\0338,\236\0319\273\362\006\272(\355[:\352\200\266\272{=\211\272\033\311+9b\307\326\271Od\023\271ju\013:\313q\024\272#\365R\272\252\377`:\316;~\270\346\323\305\271\014\004\3209\227\\w7g\tm:\237\272\007\272Fy\3218A\353\026::\004`\272\363ZR\271\231\026\014\272\354RL:\271\247\224\270k\261\236\271huS8\t\246\2319>$z\272 \324\r\272\347\327\2149\317B\223\271kw\0369_\347Z\272yU|\272\320\321*8W&v8\226\263\007:Z\326n\272\010V\273:\314\312\027:\250\270\3159K\255r9\277\364\t:\216[\334\271\303C3\2727e\271:\321\246C\272\350\236k\272j\306\327\271WY6:\205\361\003:\372\326\026\272w\241\3409\336\364r\271\037\372\250\270\343<\325\270\323\247\3359j\253A:u1\217\271[\303L:U\351\343\271\205l\2139a\276:\271R\006\354\271\227O\3148\362\305<\272a\365\026\271\321\373\2718\350}\2079\254\234,9M\014\'9|\237\2009\032\330`\272\302\266\375\271\325=B9 \313=\272\240\301\231\271\\\320>\272U\010\003\271r\243\3349\022\305\201\272\376\357\371\271\350\276\0359\3421\32692\375\032:\310\316\3358\265\271\025:\216\261\2469\033\276\n\272[\342\2179\346\350\3738\232\"\036\270~\250\001\272\352w\204\272\244\234\2379\235\255W\270\247\3708\272\030\213\014\271\206%\355\271$Hf9\335\027\2609\273\tx:\n\te9\233\332\002\270w`):Sn\2469{\016\0359\311*:\272\233\253\2349Y\025\206\272j\365\016\272\263\016\0038\213\301\2018A\237\021:\215k\023:\"\247\027\272\356\253\3509\005\374\266\271\246{\2749\241y\265\271\326h\3639\344y\3549H{\230:\365\\H:$\251K9*\350\3509,\271\2759`\'-\272b]\024\272\302\033\3509\265\367Y9:Q\317\270 +\001\272z:\1778p=\t\272-\316\240\271\343\310\2539r\014^9\203\031\201\271jV{6/\377L:\211\0213::\313\310\271G\254::h\374V\271<7\307:\"\330\2229\247\300\203\271\372\373\275\271\202\202\3368yl\005:\233\251\217\272{>\373\270\364\371\237\272\210\305\035\272uO\2637ma\226\271\306\340\243:l\177\035\267\254\023\222:Z\367\\\270\217_\3667\323\014D\270\222b\311\271\364\266>:\310\350\006\272f\317\2329\213\223=:\340d\323\271\216[\2347\221\253\2449\023\215B\271\"\213\2629\036J?\2721\207\031:\032\210.\272]\335\244:\343\316\303:\223\302\037\272\226\237F\272\230\r\025\267\177~\2418\227yG9]\350\3549\343\316{9r(@\272\215\312^\272\361\356q\272\206\214*:\333zN\2722\376\205\271`\334I:\334\310x:5]\213\271mq\222\272\270\236\0369\362\221\257\271\353_\267:AF\t:O\004\037:\261wU\271\253\214\275\271\317\032H9\271\216I\272{>\013:\243q\r9\263\033t8\027\266a:\261\341\3566\032\333\031:\374\030\2069\314a_:,d>\272\2646C\2722\275\2579I\354\3247<\2458\272\203/C9@H\2758\034l\214\271i;\010\272\252X\301\271W\2761\2726\275\2179\035#\252\271\336\370\335\265\006\217\023:\301\331\367\271\"\277\2518\276\005r\272G2.:E|:8\3359\0029\207 \032\272:\252l\272\323O\3779\302\342\232:t\263\014:\325N\3009\300\223\202\271\257\201\266\272_dB:\307\216`\272\206#\3148\031C\2269\333\205\2269e\327\225:\243\003\247\2714\313\316\266\345\200\270:\016\210R\272\334\330\306:;\344\347\270*\253L\272e\337?\270\272\351\312\271\2371\032:p\035\235\272s\3456\2725\027\000\271o \203\272J\335\330\272\301\275l9\233\326e\270\277t\n9\215\255\017\272\306\365\024\272+yF:\234\334b:\270\214\315\271\347\327`\271\253W\210:\243\215\006\272\024R\201:[2&8\004,\007:.\305\030:\254\267\000\272\016\345\027\2710\247j\2729\2721\272adL\272\022^19\304J\351\266\375\210i\271>x\2259h\272#9\344NS:\343\341$\272\311\020\262\271\252\304f\272\376\324\010\272g b\272@\202$:@\010g8\236\031\330\271\330\354h\271|,\271\271\232\252\2109*\033\265\267\262\306\244\272\003\243\2109>\030\2018\"\356\243:d\222\253\271\327u-\271\374K\230\270\324\206\303\270\276\201\177:in\2069w\236\023\2707\340\2429\275f-:^\261\0309Pr\0149\262\305\3338\212\023\n\272\336\344\034:\034%\317:\316fU:\322\220W\272+1\2039\232\006\216\272i6\3359fFW\272*\352s\2713U\2679\276\352\312\271I\313)\271C\272\222\271y\311\202\270\3377\237\270y\223:\270\243x\021\271\023\245\000\272\'\361C\271\207J\021\272F\363!:I{4:\014\251\363\270dw\313\271\376\266\"\272\310u\216\272\001\303\2149\210Z\333\271\257\353\2669[%S:Q\014)9Dh\272\271f\254\2158\342cE\272\020[\276\271\374t\236\270\261\355-\2704k49\250\232\026\270\325\307\321\271h\267\350\271\031K\274:\331O :\251\001M:\326\010a8{9I\272)P-:\201\262\2159\017\253C\271UV\242\271!.\005:u)\206\271\025\317\003:}\2146\272\0167E\272e\034\2249\025\024\250\271\214\261Y\271r[-\270\316\204 \271\201\030\3429\221\370\3718F\006\303\272\273K\031\272\274\377\003\272@\357R:+\021~9\3373N:\260\006.:\3309\3049\306X\363\271\242\307A\271\032\372\3659d\221\242\271I\356\2308\014*\2576\'\206\021\270\024\275x\271\344k\313\271g\256*9X\333\035:F&\245\272\377\377e\272\203\036(:q\245\016\272\2571\214:\34178:t\365\2659G\256o:\353\201\205:j\303-\272+\225\2119\346\233 \272\333\037\007\272\344\362\202\271\3002\360\270\366`\245\271\223\231\2346\255\374 :\371\2218:Ct}\272X^\034:\376\"\254\272}\273\003\272j\337\"\271\227\207\014\271\241yP\272\261\222\3509\363\357]\272:\232\273\271Z:Y:\262?\347\271\225\2217\271\371\241>9\362\266\202\267\311\231(:\327\263\2309\275?\262\271\226\303\2477f\224E\270\272\240\272\271\000\017\323\271o\320\007\271y\034):\225s2\272\363\204N\272\033\255\001:\301\243\3267U\206\332\271F\220\034\272e\347\304\271\242\365\377\267\210\300J:\204QK:\233\03709\351\236\202\272FXX9\306\2316:\343\017j\272\006\210^\272\n\302\237\271\013\362.\272~\242\0359i\221U\272g\333!\272\242\341*:\274B]:\343,\225\272X\275\2049\311\222R\271\331\023w9\n@\247\270\373\332\206\272\217W2\271\200\320\001:*\277\026\272\277\267\2008\2103\0378\322\373\2139\r\024\030\270\252\310&\271\336\26739<,\312\271\240\233(\272\332ED:o\356W\272yM\260\270{~U:u\372\3529\031\220\034\271\335dC9\212\241\210\271\032\365a\272\241!Y:\001\033t\271\250\316\203\272\373\035\014\272\336\004\3768\n\345\2419\316\310\3419\271\234\n\272\021\312s9L\244\212\272Y\275\274\271\'\3352:]\236\252\271\213\210\246\272\231\241\252\2715\005]\272T\364;\272\025$\330\271\006\323-:^N\0235\313\324\002:\312\254v\271\216\036\265\271:\003\311\271\272\333\2179z\004*:\311hq9t\177\000:~\006\013:T\241\224\271\241\276\272:\372\3449\272\243j\276\270\232T1:4_!\271k\270\3459c\364V\272h\371\2579U5\0378!\343\307:\370&\3619>\220\2659\332Vt:\230A\326\271\235\207\2739\266A\r9\013In7Ga\27077\332A:\357j\241\272\r\356\2279\325\263\021\272\001,\3249\013\346d\272\310m\3659\260\352P\271W\376\014\272{\364\"\272\n7@:\220rF8\232\0340\272\315o\2319\206\377\370:\020o\233:A\232\21792\330\026\272\315{\224:Rw\203\271\246IX:\274\021\235\270\230\025\':\237.\\\272\023\237\2538\202\230\232\271#%\250:\362\036\211\272\004\177\002\2724\210\313\271^\334w\271\020\014\366\270t(q:\222\232\2768\215\347\351\271\265\330P\272e\24389\205\216B\272\265\02619\254\"\r:@\234\264\270,Y\2709\005\302\232\272\242<\2579\021\245\3709Hp{\271}\362\3268\241\033\3268\251\205)9\217\013\007:\026\002\361\271\231\262Z:{\215\3519\0035\2329i;\3129_\204N\272h\254\3749\223\234\2518[N\236\2711\365\254:~\177\210\272&t\322\271K\325r\270\203\213\264\271Q\2309\272%R\2509#|\200:\330\205\035\272\014\033\2009,\223M:\016+\t:O\017\r:\237\314\252\270\n\362\260\270\276\034\213:N~%:ek\\\271L\341\3169`\351\013:s\316\2359\271N\034:\305)c\272\274/`\271!\254\266\267z\323\2309B\243\3179%\344\3159=8\32796K\2409@H\250\27163/\272\373\201\243\271\345\0045\272M\\\315\270\351\000\230:\213\022\340\271ss\3209N\303\271\271K\375\3208x\024\2149\201+J:\353\025?\271\305\330\2479\2774\\\270\361\\T:<7\361\271\320zl\272_\212\231:\316\330\2219\031NP\272\276)S9;\255\3669/\244\241\271\231\036=\272+\343\221\271S\273\233\270\024\365{\272I\'\257:X\315|:\222\237\347\271\013$\2669\244\230,\271/K\201:|\"z9\317\275:\2702\324\233\270N\230G9\331|M\272\271VX:\341\237%\272\231\257\0219\034*\357\272A\361|\272\212\366\2349!\303T\267@\031\267\270P\213\307\270\n\350\2019\355Fd9\341~\0369\353/\010\271\272y\0369L)\3258\237\265\244\271\2266\3069:\220\277\271\346S\247\271\240H\210\270\302\316\367\270u@\2548\206\2720\272\255\315R\271\332\"1\271\211x\2369\243\313\026:\325\005\220\272\306D\222\272^\021\3339\373\342<9\023d9\272\253\224\025\271\210\242\256\272\362F\3169\244\331\000:\177\215\003:D\353\3419\220]\034:\252\316&\272~$5\272\266d\3768\342n\025\272\021\t\013:\342\007-\272\361\345<\272\315\375\016\272\363\004\t9\211\031U\272\324\006\357\267\313\371\241:\374K\3409Wr::\334\025r:\301\035-:\206T\213\272\320z\235\271`\036\n\272\260b\237\2677\376\261\270\377U\242\270\304\177\215\2722\327M\272|\376\242:J\215\030:\233\355e\271\227\t\000:\303\253\3169}\001\263\272\312s\223:\265\220\0229\216\300\0209\3406\325\272\0138\250:7T4:4\366\260:\272D\024\270^e\26596\022[9\206*\3529\345P\227\271\354xj:\321\254\2009\365\222j:4\303\3049\036\236\23297}6\271>\177\3468g\326\2239:wf\270T7i\271\350\365\356\267\266\357\2359\324\333\2049\310V\0029\332\347\223\272\321\215\3679A\315/:\004\336\241\271\230T@:\035pW6\313\245\220\272\270\026\214:\256\310s\272\203\036\204\271B\000\205:<\031\337\271\231\004\2608\250\235\354\272R_\026:\017\024i\272~\020\346\271\346u1:\261\314\205\272H>S:H\260r\272\215\230\204\2726=\000:\3270\2229\245\344\273:\212\313\026\272\310D\3438\314|\000\272\332\254O9\270.6\271\215\031k\271%\t4:5\362&:j\215t9\201x\2249\363\354f\272\314G\262\271\227@\241\2710+\225\271j\261\204:.\000\2308fJ\3008\346\334\3109\007\315\2559n\205\':\001O\374\265\271\202\354\266\300\021d\271\"\001\3239$-\2269\031\372\010\272\354\253\3549\2640>\272\272\355N\272\277\257E\272HM\222\272\310\305\2749!\2067\272\346\177G\272\302\325\003\272\375#\3748\307\206e9\305\343\n\272?P-\272\214\010\2718<.!:\016~Z\272\322!\r:\331g\3609e`L\272\354\375\25492\277*\272\225\303\014\270\014`H\271\367\3620:\215\035\247\271\327t\320:\345\304\3469\336wv\272\312\223\034:\t,t\272\354\207\033\272\261\267\306:\356;l7v\206\226\272n:\3028`\326\'\271\222t\214\2711\312\226\271t\362\235\271\262\202\253\272W3Y\271\251e~9\353\236\331\271K\334\200\271\240&\222\270V\366q:C\234J9\311T\2127\253\264\033:\016\023\304\271\322\242\021\272\352\213\231:\317M\3628$\354\3038u\271\3109&\270\3628w\365\2179XF7\272\023\376\357\271e\276::LP{\271,\325\227\270B\353\237\272\251\374\0038\355\\,:2\241J\272\234T\317\272R\304V8l\312\365\271\235\372\2529\244\202\2339LrE\272\365\027\026:\262\256\000:\227\253\3559c\277\004:\263G\r:\331T\002:z`\346\266\214.\241\272\262\377,9\005N\010\272\327(E:\006\305O8\350&q:m\340\267\271\347\251\314\272\273\363\026\272\3459\2658\013\212\0009\215\321w\271\247`\277:\026\314\214:2\362z\271WC\2419_\333\0019\216:\253\272K3\3719\236\234\337:\326^D:\026\352g:96\2718\261\232I9\255O\226\271\333\007\t9D\206\214\270\267\246\032\270\342\010|9\310\361\2728\312\376\033:x\316\306\271\241\332E:Sl\210:p\322j\272\004z^:\373\306B:\341\314\226\272\370(s\271\273Z\3229\301\n\240\272\n\224\003\272\250\'\233:[s\347\267\224\022\2649\362\232\221\271J\000\2608s\330x:lU\001\272\325\367.\272\375@\30291\032\220\2713\247\023\270\016\250Q\272\356O^9I\347\207:\231\231\t\272\244\341\032\272\223\366\264\271\177\363\024\272\262!\035:\254\226\000:\374b\":\213\247\005:\026dZ\272J\252):\373\256\017\270\345\357\t9n\371\210\272\356\342\':\352\004\261\271w:\t\272J\342\3108DK\3259n#\342\271\213\364\2208\243\235L9\222\313c:\016\024\36796\353\201\270\336\352\024:Bb\240:E\375\316\272\365\211\003:3>\262:b\230\2729\225p\305\270\241l\301:\244<\376\271\255x::\242\213\037\271B\331\243\271\232l5\272I\232\3357\247\037\023:\004xG:\'\221L:m>\032\271\007nJ:yw=9\023\302;\272\332\267O\272\344\302\217:\266\253)\270@\006^\271\360\247#:\366\035\320\271\346\372\211\270\034DE\272\266\263\'\271IuM:Dp\352\272\320\\\0169\263\370\230\2714\272\364\271\336\230L\271\317\377\356\271$_\3648ms\025\272\326\345\224\272i\025+\271\327\307\221\2715\010\207\272\352\364\3028g\024\3159\002\334c\271\237d\3438\'\352\251\270\220\025\3379m\263M\272A\002f\271l\1777\271d\315\355:G\320\035\272u]\002\272U\377\2379<?\033:\336@\232\271\206\215\2718&\251\201:\245D\3159\033\031l\272\350J#9\236\357\253:\271f\3159\024\271\':P\253k\270\374kg\272\204\013v\272\277\016r:\005\362A\272U\217\2128\017D\2159\366S\3539\331C\211:^\261\227\272\325\033\016\272\320w\245\2711\330\224\270\252`\021\272@F\227:\215\277\006:\317Q\304\271n\024\3617d,\2719(G\320\272\365yJ:\207y\272\271D\n\2368A\251\212:\"59\272)a\027:>\353\205\272{\017\210:8\203\265\271\342\204\2018\033\245\3029+4,\272\021\243\214:\257>\313\271>\261\361\271\371G/9\0161<\270-\271\203\272\250\006\312\267TwU8v^\3066\020|\305:\315\351h\272,\334\226:4\357\032:\246\221\037\271\333\200#:P\363^9\'\ti\272ij\210\270\351I/\271\264\360g\271\346\262\210:c\316N\267\210\022\3119l\020\276\271cN\2219\306{\262\271k\344\2419S\245\2538\333a\r\271\346\276N9\036\376k\272\322+\21184\013\377\271]\201\2149\037ZD:\332\352\2779\230\221m\271l\337\301\271\000I\2569\336\243\301\2709G\353\271d5b:\000\346\200\271\251h\021:\345C8\271\360\253-9m\377\3679\005\004>:\234\244\225\267\326\036\202\272qI\007\272o\266\017\272$\377\3049$a\3509\275\205T\272\214\313\002\272\2714f\272\253\325t:\346\336\2128\374\000\033:\211\257\213\272>B\005:\313\325\031:d\222P9\335\004\345\271N\005P\2720\333\346\271 c\3018\003}\0319,\251a:\004\301):kG~9\276$\37298\371\r\270\267\341\':%UR8\241m\217:\020U\202\272\311^\260\270\266\357d9UdG:\332U\223\272.\r\277\272\004\223\236:\005\301\221\271-\352\2769\007\366\2049\\I\3459FH\177\271K \2159\017\3142\271e\013\314\270L\276F\271\212;\026\271L\273\0239\014\361L\272I.\2629rF\032\271\2032I\272\323\321\0168U\270\220\272vC\030\271i\364y\271\300\213N\271\377\371\206:\277kp\272VqG:P\265\3668\'\346\217\270\225\346\353\271\203i\2528\262\244\t\272\275\231\036\271\206}s\271\035i\316\271\020\366\003\272\242o\254\271,\031\264\267\377R\224\272P\277\206\271W\351N:\216\217\2619\031\033\360\270EbC\272\344\0251\272*r\376:\353\017\325\271!K$:\371[\335\271\'\275\'\2727\265P\272\326\t\027\272`\276\2349D\024\305\271\356.\217\267\233\367h8D\313\245\271x\254\3749\363y\3058z\034\3479e\235\014\271=-!\271\004\003\275\2716\004P\272~\357\3547\320:\2649\304+\217:\314\317\n\272mL\253\270\205\267\2029Dvl\272\311\332\\\271\t\20579\303\001\350\271W7\224\271\347p\3419&\327\362\2715\216e\272%\223h:\343u\331\270:\022q9\337yE:\234\312\2639B\307F:\265\370x9\006,\201\271Ym\0357\204j?9\372\236-\272\0065m\271\246+\3448\317\r\313\271\322hy9\314\207\3638G!\234\272\314\374\354\271\240\246\2458\213Y\260:\231\002\266\272\353|\340\271!\0279\271\266R\350\271\003v\310\271Ng\231\272\206 \241\2718\246\006\272]\3432\272)G\351\271{\347\004\2726\252\255\267\341\240\203\272\316\335O\272\263\374\216\272M_\2708W\241q9\364\326g:\2763\340\272\276\007\2129\241\350J9R\332\2329e\260\0169y\345\212:n\354C\271\013\301~:\311\264\275\2709\352\362\271\307\376q\272/r\3338\361^f\271\316\244\2327\311\024\003:hYh9\344\350\232\272!C\317\271\301\273\201\271\260\246\3739\230h\211\272\345^a:\t\2658:\327\205\036\271\306\211\213\271:\220\2629!\221I:\003\311\3729jI0\271\226L\2329\375\332\r\272F\02689.\357\2318\312\271\244\271!\225\001\272*\236\337\271\312P\221\272\372\033\3719\265\"W\272S\002_:\223\037_9\3137~:\202\2458\272]\233R\271P\n\2739sL\3709\214\342\243\272\250Mt\270\277=\033\272\351\r\211:\225\263.:[^d\272_b/:\r\313e\271ei\031:\\\315M\271#\242k8[n\016\271#\267n\272\232\020\3179] \2449X@\2129.\241/:\361K\277\271\272I\330\271~o8:Rg\r:\032}c:\311\352[\272G\330\0238\300\332\312\271\2000\254\272\266r\3219\253l9\272\222\177\246\271\247\3267:)\340\332\270\301f?:\315\342\362\271F+<:\221\343\007:1d!:\211\205I8o\2470:[\322\233\272\213\263z\272\352\252P:\251\330I\272\n\016\205\272\375\220\2608\273\203\307:i\351\355\271\271\252c\270\013\314V\271\210]\206\271\244\355I:(n\2518b\322^\272#\323\216\272\372+k:\200\000\243\271\\\327(\270\024g\2137\257t\0229\353M\000\272\016\216|\271.\004\006\272`\225\201\271X2a:\267^r:\346\003\211\272\272\261\317\270\373f\276\271\236#\207\271\242\306\217\272\2367\3538\030\032\3519H|0:w\004\0349-\335\r:\302\277\346\270:\302\3109i\351\215\271NZ\2429\203\273%9\302\214J\271\252W\027:J\336\2619\202~u\272\030%\031\272\350\313[:\231Jj9 \021\223:\231\343\3178(\032\304\271J}<\271\255\323\270\271&F\206\271[\'\211\271\245\342\204\271\007\362\235\270\230\213\341\270\246\226\3609\242a\3019\210\226`\272}\3426\272\316OM\271\301Rt\272M\375\2559g\254\3408]\n\344\270\375\027n\267\332.\007\271\207K\2358\234\233\0139\376\316/\272\275%-:\346\321\004\272\265tj\271\220R\2469\2166\2207\322\233\3569\362\010\3659b\237h9;\251\2048\236\023,\272\320\305\226:\261\261#\272F-O\270\304\023\2459X\n\021\272\3075\212:Gcv\270\323\222H\271!\377\2548b\002<9\377\346\020\271\377q\3068/\243\347\271\343v\234\270[\025\020\272\023\224\206\2713\2339\272\202g\3039\343\2456\266\234\271Q9\252\266\2529:!\254\272\302r\235\272\335\026\256:\003\365\375\270Mn\237\272\335\365\3479\027\230g:5\245D\270\013QX\271\3011\367\271\354\336\3127w\301@\272FlX9|\026\212\271\034p\204\271\221\361\033\272\355\206%7yx\r:\222\254\003\272\034:-\272\307\000\227\272\251\000\261\271\022\304\314\270C\360\240:;\325+\272\375 \213\272\177l_9%\347)\272nN\030:?x\022\272\314\224{\272^\232u9(#\212:\320\330\3339~\307\202\272\315M;\270>\357\232\272\006(<\272J\332z\271\205\321\236\271\027qE\272\000S\200\272(\331\310\271R\222w\272\202\006\002\270\351\214`9\306,\300\2718h\2649i\272\2749wX\021:\236\255\2449\315\237\361\271\235\244i:\t\333\2568@\303\204\271\340\303\241\272\322G\320\271\260\250\3579\005\272\315\271\357\210\0179n\314c9\235\027\026:\321\261\035\272\332\235\222\271\000\233 \272G\034A:=\247\233:\221\314\302\271A2U\272\226\"\304\271d\213\200\272+\334\302:8\023\307:u\254\361\270]>99\226-\231\271L{+8\300\344\243\272\007_\363\270\274\031\025:\000\236\251\271\266\\G:\342N\005\272\244\016R\272\222\253\260\270]\202\203\271K6\022\272\242\025\234\270\332\371g\272\262]\014\270\307\347\2319\3468Y:\014\000\\\272B\377::\017\350*:\240\355p:\177\217\2259\240_\2069\371<\026:*\235[\271l;\242\270\245\344|9\367\020\221\272*{]\265\020g\013\271u\261\2229e\363/\272y\271+\271\301\317\376\270\304XV\271\023\303t9^\255\3449\260\036\312\271I\204\032\272\314N\2769)\025=9?E\t\2675x\036\272\226A\037\272,\360\006:)\277\3758\357\371#\272P\304\356\271\211)\030:\316\2703\272\347P\224\271c\371\016:\355\207\0028_\230\3119\000A\375\270\270\234\2179\3420\367\271o\350,\271\275\264\036\272\014rH:\251\347\243\271 >\0339\205\312Z:Vn\27297G\374\267\210=\2618)<\255\271:\211?\272\334\312\006\272G\035\3718\366\310\340\271\256\221\010:\371\200L\271\3026\2459G\371}9\'\222\013:\231~\206:G\222\343\2673s\313\271\260\024 :;.\364\267\300\23779e}\342\271\302Tw\271\351>I:kM\3246\"z\220:\"\247\3229\233+\3116 I\3249\205\014\340\270\310\002\325:!\255\336\270f\023K\271\211\332\0258\373\215v9-r\3679oz`\270\256%\330\271\366\314\3318Q`P\272\2134\241:&\207S:0O\204:*\223\0178\257\"F\272@N\":\246\n\2428\366\251\n\272\277\276\2679\025\3638\270\027$B\271\373DC9\351\360\3449\312\261\3739=\315\232\271H2n\272D\364\230\272\207\232\3159\'[\3479\207\215i\272\352\266\0359&\016\235\271\257\306\005:;\rv:\\\354\211\272\373\026\013:E_\033\271f \31799v\0059\247\0037\272\327\236\273:\210\212j9J]u\272\035\356\250:\307\355\2419\1775\213\272\271,\273\270\305)\037:\327\240\314\271@\210\2238<\237-:\340\023\0068/\316\2129~B?\270.\301\234\271;\227\344\270g\200_9\tcd:\223K\345\271\177+\277:;\014\2309\216\357\2369\006\001L9\267\316\3429\204\326H9\300\224H\272\261\003\013\272\314\362\330\270\rb\3358\334\305\3759M(\317:d#\035:\225%\0068\254R\2669\302\301s\270\010H\3049\300\346P\272oA7\271\224\373\2009\265\313V:\270=\324\270V\245\3419\245\024\34393O(\271=Zm\271\276\372x\272pph\271\203\375\2058B\266\010;\340\276w\272.\335\2619d@\255\271\000\376T\272b!\2369(\243\327\271\202U\004:\251\346\252:\261\313\233\271\361x8\272\272X/\270\3361):\t.\254\271N\374\005\272\273\376b9!\303\004:?\023y:&\250\254:\244T\r:\'\333\023:c\356\342\270\277\262\3039g\2771:j\025!\272H\264u\271^\341\025\271\206\347/\2726\205^\2717\212\024:\342>%\270\276\254\256:h\364=9^\220\004:\251\202\247\271Y\212\3179\013\224\235\270R\'\373\271E*\2439\033\252\0359\250\305x\271\377\255\256\267@kp8\032\'>\272$\2159\267\035\234t\272\350\352\221\271\"\370\0019F\254 :\344\027\'\271\356\022\2229\365D!\270`4\023\272\001]\212\272\254\362.\272B[*9\366j\3119T\233`:\014\225\261\271\020\311\245\271$\256\3149W\3647\271\002\253\023:\204x\n\272\321z\3209\224Z79O\t\370\271\240X\t:\374\232\222\272\265\222\201:\010bH9\214\317\013\270\017\273\300\271=\275\260\272]\260z\272 \000\344\271upz\270q\005#\271\354\261\227:\371\354\3669\337\357Y\271\202k\203\272dlb\272\025\223\237\271=\247+:\013\225\257\271\272\256i:\2722\037\270\201\204\376\271g\033&:\321r\265\271\331\250\356\271\325\301\3049\260\223\2178\367\000V9\335B\034\267\252\311\2609\034\247\3658\231\235\2349\214wA8O\376@9\222]y\272\327*\211\267~?l\272\302\200A:\002\374g7=\322x\271C\026p:\354\003\340\270\231\263\025\272\315\304\317\270\333\217\253:\370@Y\271\326\300\216\270\276\233\271\271\225\202\\98\241\2509\211bW\272\317\230\016\270\221\202\211:\207\226\3629\347X\320\272\221\217\2039\272\354\203\272E/\021:\241o\225:?3\350\271\207\'\034:\362e\344\271QF\2519\313S\3129\314\304\3328bqj\272\204D\240\270\362\255u9\005&\363\271r\214\226\272\001\333`:Ch\211:L$\2329\270\"#\272\212V\2128\3621\036\272Q\374\310:\2048{:\201\014\023\272\327@\307\270?\237\022:\'\336\013\271#6J:\032|\n:\340\360\205\271k\306\3479\264\357\244\271\024$O9\235\370x:\371w\223:\033\332\032:\014\356\014:B\311\2569\305\347<:\236\333\2059\356\003I\272fK$:\212\213V\271\255ed9\240l<\272)\342\27692\330?:`\320]\272\026\221\201:\357M\020\272\225Y\2138\031\230\250:\010\014E9\323\337\024\272[+\024\270\3440?\272\014\236\241\271\262\026\221\271*@\200\272[\211U\271\222\230\2628gN]9l6\265:\010w<:#\366\3029\037\347\377\271[i\0238\003u\003\271\242\223\t:1,\0307\341\024&\271\243\\:\271rps\271\031P\250\2724\001\027\270\367\001]\272\203#\r\272\035Y\3479\2112\036\271]\267\0309\265\002\311\271\270\023\216\272\336\007E\272`hA9T\013=9\240\022\2319\005\330\004\2723!\315\271\204T\225\271\343\326\014\272\371\204\264\267\3778\2459\216\305\n:\355\334::cg\320\270\024j\3569\24614\272z\362*\272%n/\272\277=\366\271\224\236\2059_\367\3609h\326\343\271\344yQ\272H\336o9\224\314V99}Y9J\225k\271\235\302\003\272s\347.\272\003\023=\271^8\263\271z\020\371\267\311,\020\271#\264T9F\370\363\271Z\257\2349PR3:PN\2109\006r\342\270T\243\350\270\036\036B\272\263CO\271$\351\3769\356\215\206\271Q\307i:\351<g91\332\3029\303\212\2109\221N88\2420\2759\025\r\246\271\232S\354\2671\2127:\234\267\240\271\207}}\271\007a9\271\3378\3779\022\332\001:\0063\2549\343\350\377\270\034\204l\272\227\021\24594X\367\270\207}\230\271\336)J\272s\033\036:\270\363\010:7\324\325\271e\002\025:\256 d:\027\322\007:\313T\373\271V<\222\271\266\2347\267\003!\261\271x\267\031;>\260P:7\207\2719\365z\377\270x\333\241:\337\332\253:+\333/8\342\344\265\271\347c}\271dz\3109\275\034\3469O\277/\272\313\240\267:KR\005:K\032\010:p\266\252\272\233i\014\271\304j^9\255r\3068\023/=\272\014S\231\271h\223Q:Sm\245:\223\t\347\271\034\364\001\272j\266\2579-X\275\271\035\324\036\272\364\320\231:\227\022K\270\345\374\2268zI\211\271[\2048:\"\255 \270\314\t\0348g\357\256\272}R5\272\264\256*9\305.V\272ZD\3058\352\210\331\272]R\020\271P\277\2278\322\305e:\342(\340\271QK\350\271l\237^:[\020\3219u\301\322\270\360C\333\271B#!6|h\036:eu\236:@\213\0079\357 \024\271\222\252\3479\355\036\025\272m\372\305\2728\330\3739:\017\377\271\226b\242\271EP\031\266oh\210\272\3302\0139\027\022\001\272\275G\202\272J\202Z\272\201i\2779\256Pl:\365\270?9\373\365\3479\247\\\2329\017\373\231\2722199\352\010j\272!\327k\271\314\215F\272K\367\357\271\307h+:Y\374\000\272^\221.:\236t\373\271\237\010\2068\244<\3659\245\374\321\271\207\013N\272\276wz9\365Q}\271\356\300z9:h\3209\267r\261:\270\216H:rQ\204:\245\306!\270\364\022\0356x\323\231\271Y<\034\271\246\263\253\271h\016\3278L\225\275\272C`k\271\353\363\027\272I\211\032\272 \273.8\245\0355\271\"\212\2279\341\330%\272@/\203:\321\234\2169\374\036C:\024\t*7\233\000@\272!\301n9\027Q\027\267r@\2159@\353\2369\363-\2429*\207\2619\237\010\332\271X\255\237\271n\230\2079\035\265o\272@Q\261\272\033[\024:{\216\2129\222\342\214\267\271\220C:\361\213\3369\222\254\340:\376\240\341\271e\373\t:\324\213\322\272\272[u\272T\244\034\272\237\324\035\272FU~:\366\201\033\271\247,\335\271\240w-\272\263\2618\271\237d\244\270:\203A\2707\267\22192X\2239\273\000\2217\271Y\272\271#]T:\342\371\2559Dv\3528bo\'9\266\226\2609\245 \252\271\364\316\017:V\301y9\301\377\2578 y5:[\374\352\271\354\263b:Hqq\272u\204\2159\232\371\2449xRs8%e\'\271kl\355\271d\222\3639\014\314C:<\023\2669\223v\3459\357\265\333\270\034\371\204:wy/\272.\226\2719\357\023\204:\027\326\3608\007\030\3319mz\347:\353\232K\272\257\024\3759\022\014\251\271\365\203)\272\020tR\271^\215Y:\240\231\365\271\325\'v9\303\216&:\376\341\240:dv\221:G\200\2759\320@E:vt:::\002z:\350\237&9B\230\277\270?\344\375\270& g\272\010,\267\272\2634H\271\350\037W\271\"M\244:\366g\006\272\325{\316\271n\235m9~\035*:N\240\0069\356\375\3529k\234\177\2711\270\225\2715\252\0039\035\264\311:\236\324\207\272\254\243\022\271J\327\316\272\343\211\0348\205A\036\272\252\016N\271\243\264\202:\326\372\246\2725\200\n\272\327 \2179:jv9\330K^\272cl\021\272a9\375\267y\254$\272Y\367\'\271\342\214\303:\207\177\3578b\254\207:n\260\367\271\252\363\3049\264\351\252\272\257\026\375\270\376\203/:\035\214\257\271\'\361\227\271V\346\3059^]39\223&@\267M\027\022\272\225\376z:\300\304\332\271\214\201-:WP\2279\365 \010\272^w\3529\342\223\334\271\244\000\3769\035.\032\272R\3130:\312\345\201\270\202\220\376\271\242\301\3319E\370\231\272 \307\034\270\263\353\3669\276\214\314\270\033\341\2409\022$\2527\214\034\204:6PE:\277R\221\271*\0176\265n> :q\237$\272\330!28e\020\021\270\240\321\334\270|\261\221\271X{r\271\221\266,\272\322S\215\267\330\245)\271k($9\342\332\331\271h\037R\272\211\336\207\271]>l\272\375\355\225:\315z\230:\323\220\240\272-\302\354\271^X\235\270\366\023\3279\200\244\334\271*\202\210:\016\3619\272\0227\000\272\243\030\2049\222Q\027:\323\014=\271\t\267\023\265\277\342\346\270\033b\0319FH\037:\200;Q\272\'B\010\271\301\\\3438\3072\260\271oR\212:\340#\014\272\2302\2209\013\340\003\271\256\265|\272QT^8g\245\027:\335\3170\272\304\215\217:*\r\216\272\014\211>\271g!\031\271.W+:;\205\016\272q\364\300\271h\0332\272\350\312t9\306\227\202:#\364\3449\272\235\3329\241\215\370\270\353\374\201\272\023\201\034\270t\317\n:G|\236\271\361O\371\271\204\324\332\271l\004$\272\237\"C9\317P\031\272\361\006\2169\023Z\226\271\342S\264\271oW\203\271\024\307\215\267E\326\2279\226\315b\272\305y\002:b\304\3578\210^9\267%\337\214\271m\335\t:\325\312\225\272\032IX\271p\305\t:@\347\210\272\322\034\010\272\366/\0377\0015\302\272\217\253\225:\340\t\3079 \004\2168\017\306\2339*\375\3449\263d~\2717\030\343\2709` \272H\344-\272u\023\376\271\'\025\222\270\263{\2627\004\256\007:\2414\245\270&K\245\271\020c\235\272\212n\260\270R\360\3219\260\024,:\222\221K:\322\212\245\271U \360\267~T\3358\362\313\2737\037\351\3379j(\027\271!9\r\272\301`\213\271\230Y9\272*\363\217:]\000c\272\257\270\3106\245\202p\271;B\001\272\221\370\2029;D\010:\304\256\317\271\345\003&\272t,\2019\010\033j\272\342=\254:\227\307=9\335\375\3268]\364\3749\r\003\2429E\\\3348t\310Z8i|\034:8\206\377\271U\234\0079\226x\206\272\277\316\2728\267$Q8z&\006:\350x\010\272<\214\236\271_\24379O\2722:X\177\357\271\030\201\024\272\203o.\272C\tg:\2241\024\272{\230H\271\305\305s9/\236v9H\274\036\271\034]B9\321p\232\272*\274\216\271\nK^\272\307Y.:\212\256\0009\2049\"\271\377b\2459ev\210:\002\007J:\2131\0338*[\230\272!\206\276\271\250\301v:\201/\000\272\'N\207\271\177\357\016:\2736]:\035D}:\366\373\3158\037\224\365\270\331jS\272\305bQ9v\'Z\272\260\320\3029\261$\022\272.\336\r\271\262\247\2239\0066g\272\277\277H:\315\224\242:U\245*\272\277\037\236:%y5:U\334\005:\350Y\3569u\221\260\271\0369i\271m\275\"\271m;\256\267\020.\0079{5S\272\203X\214\272#\335\026\272~\252\3029\2419$\271\001[\001:\022q\2579\004\211\271\271o?\027\272\014\n\2669\003i\2249\372\353\223:\334R\2469\211\247\00090?:\267\322\242\0029=Z0\271Q\207\362\271\002\201w\272\253\366\2249\014\377\217\271p\323\374\272\214\032\0229m*\3519[\344\270\272\000]\201\272\342\035\247:whQ\271 \014\000:\303\377\3359\214\363\002\272\363\260\223\270\343r\3269\306$N:d\303\2547\260M1:z\263a:?v9:G2\320\271*\322;\272\200\r\226\272d\344K\271\004\031\231\271\3020\2608$\226\2116Lz\004:\257\014\005:\300\204#\271\266\267\005\272\223~M:\365\'\245\272q\316=:k\233#\272\243\304\2409u\304\2169j\373\213\2711\3153\272\265\200\214\272\343O\2579\272\336\027\272\2321K:\244\352\n8\350\013Z:v\252\214\270\010\251\367:7\362E\272\254\307::P9\301\271V\017\211\272\247\264\300:;\273}\270\373g\271\272&`^:\217\263$:\177L\335\271\177\315\006:\212\2254\272q\022\251\271\317\351e\271\364b\341\271\263\255I\272\032f1\272\360\372):\356\253\032\272RO\255\271+\356\035\272\021s\367\270\314\251\017\272\3109\3639\313:N8\021\327\210\272\243\017)8\324u\3239\255\355\2469\0170o\272\260\226\3069\3073\3528\200^T\272\230\0057\271?\'$\271\362\250f\271Xsm:}>\342\271`\377\247\271\276\304\213\270\334T\201\271/\345#87\024\026\272\274/\203:\236+\027\271\253\2076:/\246\3339w\0160:\304\214\237\272~\366\337:M\372\177:\336\265<:\233\331\3638\236m\\:\275\252\030:\276\006\236\270!\267C:L\021l9\205\252\245\272\'\214\2379\326\274\3439\376$\016:\317\371\003\272\305\007\233\270\244\223\331\271`\325t\270\367\352\241\271f\203\03680\276\220\271?\314\r:5\346\2158\004^\277:\316\277\032:]\360\25592g*\272\340\'\257\271\300}\3278\327\265V\271G|4:\374z>\272\302\312\315\271\271\353M:t\355\251\271!0\202\272\263\003\366\271\343x\3759\241\315\3149\347\213\222\271\263\251\224\272l\036\227\2712\360_\272+\211\2729\235}\2039A \006\272\276\362\2739\306?t:\233\374\330\270\320?\3529s=\2215.@\017\272:\212\260\271\t<\027:\005\020\001\271I\200\2239\371\273E\272\206\243\3269\001B\034\271H\325\2538q4k:w;\3216\353!z\272\270\375\206\271,o\2019\354s5:8}\200:DU\211:o\032\250:\332^\036\272!\230\006:\312W\3369\332\236\263:(\354\235\271Tt0:\014\223\030:\017\3651\272\347r)\272!\330\26391\310\217\272\326\302\'\267\020\321\000:\310\250_\271\265\355(\267\366\026\373\270\377\353X:}\240\007\272\361\007\0049g\211\213:\327~\274\271\267\336\312\272v\316\3229\323X\3619\216l\251\2729\305\322:q\376\3169\336\303N\271\241\001\230\271\316\2532\271\203\275\255\267R\035\3519\373\252\3379\326\344c\271\036\200\213\267\271\263\2379(\236U\272\301;\201\272\234v\3559\265\276z:~\255\3309\215]\2569\244-H:\376\257#:l`\253\2719\362\316\271\023\245\210:U\310g:/\331;:|5\2539\372\226_:rZ\2769\315\276+:\340J9\271\333\305\222\272\361\n\256:\3577\r8\362\371<7\310\300Z9PM\3568\363s\375\2702\275v\271\225@\341\271\260)\2339b\270\2569=^,\272o%}:\310*\325:W\335\352\271\227\355\2739\347\215\207:d7\204\270P\222a\272}\024\370\271_\223\034:\231V\253:8I2\272?\301\n\272-\355~\271\0378\000\271\233Z\203:\246\322\357\270+\r\243:[U]9\264Q\2519\020\346A:MC\3128\016\rT:h\214\2109h\214\360\272%\352C\272\317\240\246:.4&9\305\021+:6\355\206:\334\035W\272\236\377\036\272\004Vh:u\372N:\217a\331\271\273\364\3239\333\316Z9\354\263\013\267W\257\243\272\301r$:\270B\225\272\306\371\2169#)+:&\220(:\311n\246\271\232GQ9I\322I\272\375\362>\271\035\030w8g?\211\271\036\212\224\264\227\272O\271{ \235\2723\31629\357\336P\2728%\2348E:\031\272\257\317\3508\013\n\3218\001\323=:\250\377\021\272\"\334\3429\340\376\311\271\312H\000:o\375/\272${\3579z\370\3348\017\266\275\272C\225\2179W\240\3478\336s\2629\221\322\272\272\274\351\351\271\227\030\3769V\\\317\272w$\2069r\210\0058<\217\207\270\371\022\241\271\033\257A\270\274\265,\272\231\261W\272\035\241\2079\373c\3169\354s\0178\267{j:s\256\276\272\001\230\254\271\024\302\241:\025e\251:\371sE\266\177qX9d\364\256\272\354\337\201:\204\336\"\271\032\274P\272D\315Q\272}\212\224:\002\310\2539\242\267e:N\231y\270\263\324\3338C\377\316\270>\333)\272I\027\207\270tb\351\271\313\\*9\370\271\000\271\201\300(9_\365\2579\227\345\3419\201\214\233:\345\033\027: \221]9\375\344\3609U\324\247:\215\035\2346t\307\t\272\270\210\342\272\035\260\2269q\022d\271V\246\3249\010Y\3159\363\235K\271!\277\227\271u\005`:o,\260\271\270I\006\272\200w\270:\330\327y8T\037\017:\316I\22291\251)\272_\340I\272\242\325\014:0\240\205\267\023\375W:\366:\0339K\035#\272O\317\226:i\214K:\260\340\230:\354\343/:\035\245u9\014\345j\272@\366\3449\211\207\2158\314\2666:5\305\253\270\002O\016\271\"\221\266\271\201\302\3128\324\212.\271\201\020\207\272u\375\3079-m\252:\323U\262\271~we\272\363<a:\3461\241:\320\352\252\271J\271O\271\267\343\267\272^\352K\2715\256\233:@\262\352\270\302.k:4\340\3048\266`>\270\246\226i:b\376\2129W\330S\272xkx9\306\226T9\247\020):\010\220\227\272\367l\274:\215\235\240\272\365\026\250\271\r\331\3617\363\221@\272\261U\2259\377\325\372\265\020hF:\260!\247\272\336\361\3069\234.\203:\237O\031\272\354-7:>U\2679\313\332]\271l\211\024:;\221\275:p9\035:\216_\2649_\327\245\272\341+?\2728\274h8x\213\3548\252+\\\2721\263d\272\337\271\262:\3142o:\355\374\213\272\246\350o9_\277y:~J\224\272|\223\024:e\206\3468\037\371\212\272rw\345\271peO\271\370\177}\272\212049\252Et\272\257S\2419\327\201N9\373\004\3458w0\006:\315\331\212:\025\000.:\336\376d\272\336\300=:\341J\304\271\300\357q9\265\312!:\275|\213\272dR2\271\357d\2028*d$\271\204\360\':\034\244[:~\034u:\266\377\210:5\2053:\203\356\2008I\003\352\2719\344\333\271Z1\224:\261\205\207:AB\375\267\273\014\2019\361\233-\272\301x\0229\036p\237:\301\244\3329\203[\2079\363\245\273:+\221\004\272\203j\005:\256\237\2529;fA9\265\363\316\271\033\361\314\272\356\361\2349\\\373G88H\013:[U\336\271?\217>\272h\241+:\200\266b:\204X\021\270\026^\2109\213\323\200\271i)!\272/\3742:\206\214V:\263\373\211\272\013\003O:\241\255\200:\226\233\352:\274\314\233\271U\332\276\272\307\360\251\270x\277\2019\236a::e\353`\271c\\1:\206)99\373\236\2178\n\002t\2715\333\034:)X\033:L\201\036:W\005\000\272\0224\347\271\323\315\220:4\354(\271t\273A\271\300\375\376\270\263C\213\272i\246\376\271.xl9}\375\276\272\311\024)9W\234\334\270\327\330\3348\377\272n:\363\363\2379\313\302\027\272\205$\2357\351M\2359r\331\3258\023N\220\272K\007\2129\251<I\272\300\214G:h\322\3279\226\234\232:>uT:RV@\272\205\352\001:\014\334\2259\311\337\322\271d\263\0029\033%\024\2724\334E\272\014\315\2559\330\217\226\272\342R\312\271=\306+\271\\\250\3567bhG:5\365M8\361\313#\2724\322\227\271\010v\211:\021\2557\272\230.\010:\360\350\':x\252\314\270\035\006\377\270Wi(\272p\32429c=\013\272\273\320\007:j{\3709\262\315:\272\335\206\033\272\341v\3657&\027\'\271\245}\2578\312\370\0029m\010\3669\204\205X\272\201>\303\272F\213\213:v\223\2739N\256\004:\321\024\223\272\330\355@\270<\205\2468\"\322\375\271\317\275\3609\026\010m\272\353\007a:\266\241\013\271\'\330\245\271\244\0223\272)P\3609\306!\242\272\'\335\3628\313\316\234\272\3448\275\270?=\260:\304\340E\272\360\314\257:\227\221\202:[v\3439\337\013\336\267\305Ep9%\016y\271\240Sz:\271\3104\272\2100\255\270\367^\302\271\255\244\230\271UI+\272Ia\322\272\372\007B9U\032%:1\207c\272\335\214*\272\035,\307\271\315\237\224:\211\220\215\270\n\255\260\271\2209\263\271\352\227X\271@\332\3268\322\034\263\2716\230\273\271\342\350\360\270\347A\226\272\021T\2319\376\376\300:\261A\2759\001B\302\270\337\016v9\355 \\:\325\327\2449\3273\t\272E8\031\272Yp\201:\n\033\005\272JQ\365\271\304\366\2349[q\017\272\"Z\2537v\023\310\271\253\020\2019\2720\3359\200e9:\213\016\2007\250\215\327\270\317J\357\270\350\030\303\271V\367v\272i\200W:\333\251\3557\260\323\250\271\216\330C\272r\016\006:\272$\021\272\310\204\3509=\321\256\272\014\034$\271M\232B:\260Y\'\272sA\233\272)e\014:\316\313\0318\016\004\3519\244\036N\271\rr\2739\3549\331\271\334l\025\272o\245#:*\265(9\343\256\313\271l\021\234\272\\\254<\2722\312\035\272\264\307\266\271B \202\271\317J\205\271]r`:\254W!\272\232\334\242:\325\273\022\272f\330\2729\337\343y9\261\324\365:\262_\0277\021\303\274\272\213\030\026:\226\376;:\022\213\023:\331Q\023\271\320\206?:\360\272\344\2715=\226\270A:\306\271i;x\272`<\227:a\373\364\270\243\242\3529_\334s9\362m]:\336a\2378|7I\272\252\023w8\345\367\2069\217\201U:\323\340\0349\222\255\020:J\007\261\271\223\312f\272\311\363v\272\n \227:e\244\037\272\300\"\205:\357\222\000:\215\336\271\271\216\347\3459\302\377\2129\022\035\034\271\007\335\3569\373\216\2329\360\1776\272\311l\32494\201Q\272HE\2329\213\034\0059\203\342p\272\303\000\227:K\346\2238\331r\265\271\323\257\004:\330k\216\271\361(\207:,\347\34590\356\267\270\301Q\026\271\327O\213\272\177iD\272\203\307=\272\037\225\243\270\325(\215\270f\210%8\300.\0239{\206E:\337\370!:\356\311w\272\300\257\017:Y/\013:\032\272h90\215\017:\005\274\2369%\003\340\270\212\345\016:\2209\0168\r\014\2418%)7\272$(\254\271\202\331\23290\302\002\272}\214\3038\245\303l\267\233\273\245:31\306\2712\370<9\002\346.:S\345\253\271\370\311\203\271\251\233_:\331\351\007\272\037\266\025\272\010\307\203\272\250\300q7\251\036%:%=?\271\311I\332\2710\335g9\205\215\013\272]0\3178\376\302V\272\301\234\366\2718=\2039\333\033\003:|\362\020:l3^9\023\311\0039%\377\3049\230\037s\272\353\270V:&\275\334\270\266\363\005\272\247\275\236\271\263\262\230\271\t /\272\272\355\376\271p\215b\271W1\2479\0350\225:N\356\2179\326\364\261\270\331+f:\000\376\266\272\225\305\003:Ou\221\272 (\2007\034\272I9\250_b\271V\206\203\272\211\n^8\3551\267\271\006\231m:\030\364\341\271\272\315\227:\306\000\2169\326BJ9z\331\342\271\304\206\225:\367\354t\271e\344\003:\375d\272\2719\333g8k\213\017\2725\200,:Fx\2169\023\301\n:=@\3049D3)\272\270h\201:\343\317\225\272E\341\2019*%4\272j\033.:\271\206\3049\372\217M\272\247\377\016:2-\334:\031#W\271\207\025\263\271\210\214\210\271\271?-\271\264gd\272\352\376\014\272\331\212\005\272\375h>:\010\353\2019\202\220\3679\260\343\025\271W\366\2569\037\021\207:\223\225\'9\225V\261:\275g\2739\207!\203\271\342\204\004\272\266\007\306:\232\277\2027\005\000\331\270=\310\3709\275\317\3439d.\000\272\000\2149\272\0162\3418I\025\2679\227,\3616\334\307\2179\340\377\000\271\020\322Y\272\002\300\006:N\342\240\272\321\237\3749>*-9X!t9\252\221\020\266}7\212\271\351\323\005:s\345\2369\333f\333\271\'\274\205\271l\264?:\256\371\205:\307\204\3377\365M\237\270\307E\216\271\036\017M\271\340\341\020\272\301\250\000\272L\272\031\272w{\205\271zCA\272C\252D9\205%\323\271}\277\0059s5\236:z\212\036:2\357\223\272\"o\3139\331\002\230\271Q\373\350\271\2514\245\271+h\005:.Zm:\207f\202\271\016\367\226\271Dg~9+\357c:\341E\214\272\347|\230:\"k0\271\260j\321\267\316\300\032\272\336\217d\272(\265\r:\316O\3549\032+$\272\222\227\025\272J\203\214:\220\341\037\272\267cB:6\344z9\270s+\271\031\251j9\306\251\3738d\033\0049Vw\030\271\2569\215:\245\223=9\003\022=8\271[\005\2712tW:\006<\3269\341\24699y\233\3639\346\371-:#(\003\272\217I\020\272sJ\2359\234q\327\271\036\311\\8\267\031h9W\305\033\272\356\2557:\310\264\016:ik\205\267\320\252Y:\317\277d\271\271\303\254\271\314p\177\272ng\235\271\004\n\222\270f\306\353\270\2551i:\317b\031:\023-\217\272\353\250a\271\254\3453\271\217\326\025\271\251Y\022\271f\216\0269\221\025\3538v\320\262:(\251x\272/\317(\272\r\263S8\274R\215\271ph(8\300M\000\272\254?\333\270\246T79f\001\324\271\200\277\3719\271\304N9\002\255\3369a\325\311\270:\231\"\271\350G#:\223\356\0329y\255\221:r\330\2659\220\240S\272\342?\225:s/\226\271L\345\363\271\324>\213\271\277\315\266\271\331~\250\270\332\'\254\271\222Ce9\343~\200\272E\376\3769/\322\017\273\205U\3639\3748\n\272\372\255\202\272\000 \3579[M\':\004\314\2358\234\360\304\270c\341\315\271QwZ\272p4{:>\006\201\272\312[b:I\302\024:\330\223\002\272\336\375\233\272\005\367\306\267&?\033\272s\246G\272tH\026\272\266\243\3618Iw5:\014h\2717$\0058\271\372\272B:\rH\345\271\351\235f\271\202)]\2703HC\270\336-\"9d\244\256:\307#8\271\2041\0149\224\260`:q\330\36395Ge\272\271\344\263\271\253\247x\272\0140.9K\005\245\272\372^-\271\352\270(:\257t\3039\'> \272r{\2408\352\365\232:\236\325t:\201@.\272ZE\031:w\206\2179\034\340`9|\273i\270\003#\2419a\224p\271\023\013C9\n\374*:T\203\3269\025\325K:\'P\3239:\216V\272\020\365\220\272$\312\211\272\026\365k9\021Ie:\376E\031:\215\373\312:\307\377\005\272\tbm\272c\366\211\270\360)\263\271\342\336\032:\376g\225:\254|7:\364U\3108\352\013\342\271xq\2139H\340\3669\275\214\3329\245\037\245\271\r4\362\270\365\263\2239\006\311K9\263\033\225\272\376\273\225:\360\374\2638\360\242.:\220\373*:)\214\216\270V\033\022:\031\236>\272~\233\215\271\207\005\036:\377\324!9\\}\2139\206\333\255\272M\310\014\272\211b\315\271\367S\235:\237k\013\271h{\266\271\037\272\327\271d\236\0347\311\204\3369\330\201::3\264\237\270\\\246U\271\371\372\000:B\310\007\271{\241\035\272\033o`9YY\214:4<\2409\353\222x\272\033\372\033\271Bh\33491\335)\270\016,p\272\217A1\272p\273B\2720\177#\272\\]&\272\236s\0348\365cG\271 /_:cTk\271\264)\241\271r\332\24797\304]\272*k%:\204\335x9@n\305\271\341 \257\271fb\3438\377(\2778r\361\007:\013\233\331\271\033i\006\272\'\360_9~\221\3479o\014\003:\377\237T\27201q\272(>\256\267w\021\334\270\017\366\217:\357\311]:\367\003\030\270\232\0053\272\035(<\270K\327H:\201\016\2049\305\250d9\037D\3679\034\371S\272bC\351\270\256\010\277\271|m\2169\274\317\376\270^\254\204\272a\217\202\271z\313\260\272\335\246I:\245\307\032\272,\316\2468\320m)\272\340>\326\270 }J\271\216Nv\271O\033o6)\030\2549\265\234\3678\236\273\3048\203\347\213\271\220\020^\271\210\006?\272?N\330:\217\017(\272\204R9\270E\337\017:&q\317\271woy\270@\024\221\271K\247\250:\376\350g\272\'*\200\272\350za\272\237\326\331\271z\272\230:\212\360{\271\304i\351:\377\326U:\257%\3119.K\3009\370\310\'\271J\307\3137\000/0\272[J\301\271\312\334D8\342\271\350\271\205\305\0359\351\004\2669f]D:\016\362N\272\357?+\272\215\0334\272\t|\031:\346\240\3439,\312\220:2\250N\272_\212E\272\232\250N\272}$\276\2714\030\303:\235\377\27598:\300:s\\\221:\357-\024:\203\217\227\272\236@7\272\3110\2109!A\236:\2244 9]\264\003:\203\0276:\251\017?9\235\231\030:\017&\000:\212\306\3159\206\337\321\271\031j\253\272\021\t\200\270\306\256\366\267gJ\321:\023\027\271\271W\205)\270u\212-\272\371f\205:}\344\0109\207\331D\265?3\0029\303\357\327\271\215\007k:\267\212c9\004O\3109\375]W9\252\002\256\271\230\275\222\272\357\356=\272J\335\2579\246\223\233\272Q5\2509\303\200(\2671\023\034:w\320\207\2729\251f\272\275\327\271:\364vy\271 \010\2469\300*\2619\260\237\3049V\032\223:\351\226{8\302\t\323\271P#\200\272e\242\007:\263\363\034\272\305\255.\272M\022::\307\0258\271\267\247\2248\211\303\0248I\002\234:U\343\330\270=\224\203\272\005\254\2749\'\327\254\271\034\356N\271=e!\272,\230P\271\362{X\271!\311\n\271\367\262N\272*9\3629U\t\033\272\343\220\3349@\255\2659 \323\3429\275H^:\264\374R9\n\337\021\272U\256S:\020\333H\272\020\0222:\024\322\301\271\231c\331\271\025\002\246\271\302\004\234\272\262\354\3049\314,C:\227\333T:`\227e\272C)\220\271q\267I:\344\247v9j^|\272\374\312\2258#9F\2721\375v9\357[\007:pw-9\036\237\2338\251Y%8\3608\035\272\341\177\n:\345$\3358\356\200H8\262\272\014\271K&\005\271M\340\3157>9\016\272\305cy8\271\033V9j\026\353\271S\351\0209,\371[8\366B\312\271\325\213\2659\022\215)\2720\215\320\270\217\332p:[\347/\272\324S\204\272\316\0318:\177\220\0259=\233\235\271\02478\2721\335\206\272iR \272\333\214\212:\036z\2509\366#\307:>,\222:\024\267=\270\300\213,\270\032q\030\271\247\206u9l#\356\267\371w\322\271\177x\037:\343;\3718\243\207\3068[]\2428\256\312\263:\360\326\216\271\347\3667\272\361O\353\271|1\26490\254\n\271\346\311\256\271\372)7\272\315$j:\253\330\232\271\207lz9\025\331\017;\324rt\271Hm\3008o\214\205:g~^:\033\016.\272M~\351\270\200\313Y\2717{\024:\003\355_7\025\r\375\272\343r\2369\030\033\263:\313\275\004:\211\370k:eA\261\272\307\245\200\271{^\221\271c^\2539\240q :\022T\037:\342\0133\271\372\232\204\272:\317B:\277b\026\271\204>d\271RD\005:~yX:`\207\2229\305?~\272\347\014<\272\305\243\2549-\014\001:62\203:V#\2139\002i\026\272\222T\270\272A\375\2258cY\0079G\266\205\271j\361J:D\252\253\267!\235\307\271\\\260\3349\347\213\372\270\350n\3759\327\210\3259_G!\272\333\026\3419xu\220\271P\262\031:\\\210\013:\003\037\3019\205\222\307:\213\304\3349\016\001p:C\273Z\272_e96\300\017\2249\260P?:?_\203\272\366\373\3129\033\005\022\270j\332]9Bf\3149\257tx:}\316*\272O\302e\272Y\365\340\271\372\334\3418NWO:\361\342\203\265>-\330\271\327\013r9K\351\2239R\203\226\270\277\223C:\226?\225\271\255\320\213\270f\314E9K\215\3209Z\207\033:\237\313\017\272\2461\214:AR\217\271$%G9v\235\2359(u\370\2718\250\212\270\242\212\256\271,\013\036:Xr\321\271$-s9\304Ie\271\003|\203\271\241}\3339\322\037\n9\247\232\344\265;\356b:P\230\3279_\0074\272\022\024\327\271\272f\340\267\035i\004\272\332\336\2639\321U\3619\272E\242\272\3625q:[(H:\n[\026:\003Y\3129\321\367\3309\303\307\231\271mx\231\2719B\263\271GL;\272\227\226\232:;\371\362\271mT[:\027=W:7\247\24396\021\235:i\315K:\035w\223:\013\332\230\271.\353j\272\231l:\272\005\307\020:(\313\014\271c\276\254\270J\004\375\271 \266K9P\016\n9v\201\203:6#\3568Yd)9]1~\272\000\240\263\271\331]\321\272\233\037\3129\024\243/\272w\330\003;L~\307\271\313\267\237:u\"\260\271\030\332O\272|\3116:\260\n\3339\213\313\034\271w\244d:\303\266\010\271@\016\3649\331\304\3619\001\"\2019\200L\344\271ed(:\253L::T\263\301\271L\265\302\271\311\245\307\2710\344\2639\207O\256\271p\231\225\270k\002\202\272\306T,\272\277\307\221\271\374\0217\272\202F\0369\352ku:\222aY:\232\212\374\270q\334*\271\270F\235\271,\037,9~\367\237\271\375n\232\272{\262\300\272\256\313\215:)\360;\270\026\303\352\271\267t\3139\202\033\2149I\003\360\272y\000\035\272\252\177\370\271\243Wi:\366\346\2079/\242X8\240\271\225\270\266ib\272\356\365V:\311\353\212\272\274f\266\272\241\036b\272\214\313,:\256\232?9$C\021\272\233)\3069\357y\026:\202\346\3679y\232\013\272\374\363T\271\252\233\31584\177\2408\261\364d\271\222\302\263\271\242$\3259\237\325\2359r\333l\271\300R\260\271?au\271\02422\272\340\273\027\272\335\263\211\271e)\0249\251qF\272\214&\302\271h\357\022\271P\014\360\272DgQ\271\204\240L\271\262\022W:\272g\204:&\325`:L\277\321\271\231\027\031\271\016\244\3209O\23669v*\0279o\014\0047<f\2049eO\3269+\376\003\272X\325\030\272\027\347,:\336\'\031\272D\026%9ZmA:\312}\3559/\226\3519\227\237\2149\010\263P9E7\3029\225g[\270\214\341\205\272\265\232\2209\034\214T6[8w:\030\234\2409\000\375\3519\343\\\177\272\210_n\272\231\352\003\272\2508\2359V\376\2458\'Q\201\272\257t\034\271\244\324W:\237\02419\014\236\313\271\324\251\327\271\255\316\3449k\016\224\270\0227\202:2\362\2169)\325%\272cTP9|\330{:;\213[:\277\366\265:&\251\261\270?\213\035\272\267\3721\272\202\313m\271\237\244\255:\004M]\272\260,\223\271$\2768\272\225\217\207\271n}\2558P%*\271\201\235W9\231o\0259\345b\2309w\372\215:t\001U:\013G\0349\224\357\204:q\207\3528\364)=\270\300\020\023\272C\331\234\271\301\265t\272\273?2\2674\333\3449\217\245\2078\370h\3668\025\345|:\270D\3709{\230E\272];\327\271\240m\320\271B;\204\272\333\'\2259F\305\035:\372\263\014\272b\330M:\213\260\323:\332bN:\036f\2009\023\022]\272=\333\265\267\252\2368:\275\262\213\270B\227p\272F\032$:0\233J\271,\302>\271P\376>\272Y\177\232:!Q\2039\222\324\2009j\243\331\271\200-\2329\252\213.:\220L\246\271b\330C:;\"X9\221Z\3108\232\32349\321,%\272\202vL:vx\2769C\311\020\272\361\270\032\272\213R\035:&`W9@\2364:\241\347R\272\001\233\311\2728MJ6\362\034[\271Q\354f9\2604\222\271s\300p:\327\220\3768\352\217p\272\306wj9\257\250\377\271\237\314\2209Ma\033:11M\272\005T\3179\217\350\3779\343h`:d\315\3459\330\261\310\270N\352.\272P\214v\272!\244\3159\224\260\204\272L\211\212\272\032)\2469\007\271\252\271\355\225\264\272\016|\t9\006\344\0079\334\330\3268\017\320\336\271\303/d9\237\367.:\355&P9\2502\300\272\273\316\004\272F%\2219\231\362c\270\037\307\237\272Fw\227\272<\006\354\267\n\300I\272\207U\340\272a_\3208#\270\004\270\177\357B7\017\266\024:E\220k\271\2611\222:\251\204\2709\361\002\2649H\310\227\270w_\0018O \001\272\330\033\230:\006\tX:L\203M\270\276J.\270\313\026\235\271\177\223\305\270j{|:{\274*9\3113\320\270\n2\364\271=\312\200\271\372\274\327\267\223|m\272\372Dm8Y\367O\272\270j\210\271\254\237\030\272\375\375\345\271\3358\r:\217\0032:4x\247\272\223t&:\365\364:\272\250\221C9\032\n{9P0\204\271\177q8:d\251n:\310O\242\272J\302%\272u\346i\271\273H0\272\363\373\002\272\240\'\3579\363y\264:\355\024\2449~\033\2749\2458\375\271FX^:\272b\217\271\202~\361\271\346\005\377\271\030jQ9\025P2:\343\262\357\271\254f\033\272yQ\225\267piR7\334;?:\343\242\272\271\026\034\204\272\303\253\261\271%y@:\243\337\022\272\361\367\220\271\306#\214\272*\202\361\270\rF\003\272\002\233\215\271\307 \202\272\325\037\272\2712\t\321\271\230T\257\271Ykk7-\344\225\272+\230\021\272\250\334\350\271Z4\206:\372}\2269\320\r\234\270\311\210{9\330\007O9!\261\021:>\317\035:|Z\0339\027=C\272\021\217\202:IDH9\024s\356\270@i\0279\347\304\317:\211\345\277\271KC\0249,\305;:0\036\3329\006W?\271\205\353\316\271\301\004\3439\243ej\272\323~\251\271Xz\247\272\243w\2149\006\354\224\272\301\014\3358U\277\357\270\327/\31596%\001:\306\262/:<\276\2109p\224::\271\336\2239\376\364/\271M\030\3519\275\245\r:A\"D:\260\030\325\270G\316\034\271\t\336m:\375\221\2368,\251\033:\312\016i8\220\'\t:\277,]9\2733\2708Z\303b\271\366z\r\272\207\374\266:\021\333\2069\030\nG:w\363\\\271\003\037>\271Q\272\026\271\316\335:\272\261\257\3439^\026\3179\372\200Z\271\362\211\305\270H\274\264\270\231\032\371\270\375\364f\272 e\236:\304\234\341\271\302\325\3509\276\335\232\271\355\264\3169\337oS\272\222\035\312\272\031\267X\271\037\313\335\271Z\375\2729\334\241\3529?\342\2368:vG9f\037\253\270m\031|9[,\210\272\320Gv9I5\0339\355<[95\336R:\362\365\0068\223\006\2218\031\037z:\303\003\244\271\344\037\26793\2001\272\237\023R\271A\202J\271,\371\262\271\207An\272\036\366\230\272R%\034:}\310\024\272.T\2319\260\233\3209\274\3573:\303\354~8\301\367\205:\376\3316\271C\343&\272XXe\272\301M|9\373^v\272\205&\2658<.\2129\354]\2718\276i\0308\356\270::\005\264.6\203\331\005:V\337\2049\315{\005\271\271\200?:)i\303:w\211\240:q](:\371P\'\272\311\373\317\271:Q\201\272m\211\230:X%\2108\275\340\'\271\210l\n\272\371\271\2648\233u\263\271Z5\251:\001\230{:j\350\003:\204v\2759\001\266e:\233\302[\271\257o\2629\376\003\227:\311\266\002\272R\266\217\270k\340\2359\221\200\2439\223\275D:\207\340\017\271\231\354\322\271Hr>\272]o\322\270\367D\033\271\314>\3179$\036s\271G\243\361\271\257\336\204:E\205$\272\332\376\340\270\365g\334\272\314A\215\266\007\346e:\244M\030\272\021KU\272\200\362\254\271\265n\301\271\3653O8\023\304\367\270\324\260\031\272\220\2070\272\325Y\0279\\\365\026\2722\034\317\271e\216\262\271\361\330\260\2715\276y:u\213\016\272S\017\236\270\357,\347\271>T\0069\341\200\227:2#\234\272O\302\2238\350\021Q:.\331l\271[+{9/l\207:\320\240\031:\240\002\210:\320\255\265\2705y[\272M\267\327\272B\323$:\373w\223\271rI\002\272\301?v\271\353\351\205\271\005\374\2139r\021U96z\034\272\004\005J\272\005\266\3069\177\n\2349\336\265X\2721\210\013\271Q\322$\272\272\362\036:\300`\306\270\270\r\203\272\013\017\005:\"\027Q\272\251\31369\243cG\267=\035\0309\321\300e\2714\234.\272\342\014\3059:\370\2159\255\'\2058\312\306A\272p\214l8A\342\2238\005\330\372\271\354\242D:\260\034%\272\347\316\275\266,\300\023\271\214\214\203\270y\274\3539W\031\236\270\242=\371\271\353\017;\271\332\212\3529\022\235\2339\234\t\3039\220Q4\272TY\220:\252\270>9\002\017\3009\215\337>9j?\002:e\r\2048\016\320\241:\267\305d:X%\037\272K5\327\267\023\001X:\235\305U9\253R\243\271\255\031\244:\031\225&:\306b\2628L}\2509\246(M\270\233\010\304\271\275+\2579\375sL\272&\274\020\272\256\211\3178\t\244:\272\027eQ8@\261Q:\235\227=:\223\214\253\272RS%9T\252\031:\003\355\2669\240Wa\270Lj\3369S\262\341\270\030^\2728\274J^\272K%G\270\370\004\226:\203n\276\271\277\035\013\272:\005\225\272j+s9\013\225t9\017\334\241\271\246\355\014\270\356\032\263\271\034N\2357}\274;9\222\334\214:\032s:\272\026\247\270\271\013\262\346\270\240 \243:\272\262\3769[\250\2129\023\264t\272\232z\2359\337\214\2439\361\00689\214e\3439T!,:\335\2176\272\340\303\321\2717}\034:\206hV\270\013G\n:\265o\2679\365\340\031\271\323{*:-r\2159\251*=:h%\346\271\305\177\353:lR\2229C\021\322:\014!\3779\216\023\231\271J\224+:<Lc:%\270\2139$\262\367\271\023\351\204\272\254\253\324\271\177\223\2147,\027j\272b\345\005\272\333\261\3238\202\253\376\271\214\002F\271\242\213\023:\365\245/:\254\2166\272\336X\2578(\007\3119\304\021\3019r\022\"\272\246x\2039\007\253C9\ra89:L\024:\216\346b\272I\306\016\272i\323\301:\203\2656:\305\205x\271^\023\326\2679\226]\271\274\002\354\271*\373\005:p\262\213\272c\000M\271\367\006=\271\217\265\3049VX09\036\320\274\271\235B\177:\334\2409\272\350\244\2379\r\300\3709\311\323I\272\255)\231\270\365\014\331\271\330\361\3128f\200?8\357\315\010\272\354YW8\2247\032:e\215\237:y\352\026:\344s\2079ZEy\271?@\373\271\335A\036:\335Q\223\272\331~P\271\351\254\026\272y\037\024\272\367e`92&\032:S\376\013\272\006\324\246\272\017}\3439.\036E\272g=\235\271\007\252\3179-k\3649g1a\270\251\314\2019e\235>:\210\203\016\272a\017,9\347`\2349&\316\212:.\223\374\271\036Z\":\253\374\312\270A\037\0379\247\343\'9C\021\203\2713\016\200:\274\333f\271\026G\373\272\367y\":\372\027^\271:=\267\270$C\031\272\010\345\207:[\202\004:\"\344)\271DX\2149j]\2748F\037\325\270\342\232\231:\303T\304\271\005\262\0147\310\005\314\271\227u\3539\270\257\3059\232\322^\272\215\256%\272aO<\270sGA:\343\0213:\020w\2079\377wC9\267+{\272\224z\322\271\273\240\2219J\003w\271\020\037\2118\254\250~:!`\2739=sn\272R\256\024\272\234\316\3018\374\2509:\326t\354\267M\265\2068QgM\272\204F\2119\377A\2569\030\007\274:\350\355\013:\033\202D:\337Z\256\2714\216\340\271Q\267\375\270-\330\2068vZ,\272\033\343\212\271\237\226v:\327\345i:\245\025\3169=|~:]\344I\272\226\314\267\271\206\036-9\243\307\3339\323\350\225\270?u\2209\307\'\363\271\r\366\332\271\220\025T:C9\303\271\372\'\300\271\205\356\3459\346\225\276\271:\021\224\271\356\317\232\270\262r\244:U\033\2779\257[\221\272\344W\010\272\223\373\374\271\370\025\222\271>S\2739\341\275\3149\206\016\027\272\002a\017\272>\247\020\272\"Zk\266\210?;:\013z\3379\315\177n9\301R\220\271\303\253)\271=\037\0339!\026\231\271H\004p:t\242\\\272~\'\230\272,\025H:^8\362\271\003Fx9\016\265\265\271o\343\023\271\202\265\3469\356\3465:\033)}\272\021o\2659)\300\2039\255{=\2714\227=:\002\003+:#\215\3769\330\035\227\2711g\3469G\327\222\2716\251\220:\242\265X\271\336\216\2749^\316\r\272i\202\3229Wer:\031rE:l\323x:\274\241V:\303e\0069^\204h\272\036v\0068\026K~9z\264\302\271\313-\0209\004\265\3248_\3159\272s<A\272,\304\006:\373$\032\272\365\234\3418F\261\3729\313\271+\2708\367(:\027\335\365\272\352\235\3179\300\rD:!^\206\272\177\337\251\271}\030R9\342\020\026\271\261m\0209\263~\2119\324\341g:\352\313(\272=D\013\272\203\322\270\267v\305\330\271\360F+\272\211\252\2309\\\316\0229/\211}\267\316\317\206\271V\235\253\272\257| \272\251\367[\272\372579\370}\000\272J\357\3778\200~f\272(Q :R.,\272%$\212\271x\253\207\271\235\013\030:\232h\231:Z\324\'\272\247\332\035:\265>\322\271\000\331\322\270E\031o\271\301f#\270\351\327U\272\303,\2219\235L=\270\247\316\213\271\023\334\005:Pt\3118\001`\3309\363\035\211\270\317](9\263\206\201\272\364\276\2229\220\226*:/A{9Z\"\0179\227\227{\272\013\356\211\272\033c\020\272KX\014\271\304\220\027:W\346\2349\263\317\260\271\223\234\251:{y\205\271\004%o9\354\324t:\273\377\363\2720(\203\271X,\202:n\336\004:\200\037(:\027\204\021\267\362\234\314:\263\277_\272\371\363s9S^\235\272\267\372$\272?s\005:t\311Q9+~\230:Dc\204:\005\257P:f\017\027\272\231\340\020:\003\303\210\271\2475b\270\327\330`:\207\375\311\271\323\033a\271}\256\3018\236O\2059\266\030:\272jo\261\266\3578l\272V\237\3659\340\r\3019\0330\007\272\303^\2167|\307o\272\222\270\3559gn\021:=\251\223:\t\016\210\272\333 I\272\305\250\2319J3\356\271\323l\270\272\340\3613\272T\344\367\270=\257e\271\237\224;\272z\375\317\271E\037\2629\334\223\270\271\374\275\001:\337\274t\267\'\235Z:<2\231\271\034n5\272\344\243,\272\265o(9\274\344k\2721\216)9\241\250\200\272\302{\242\271\022\374Y9\202\260\006:Y\371r:\265\373\3279\322\225\3549\254\223\211\271\367D\0306\032\254L\271\334^x\271\322\010\037\272\366o4\271\333\311_\272\255\t\016\273\263\203\006\272\t\222.\271\n\037J9\246\246\3459,\2362\272\365N|\272\266\020;\272\374R\3347W=8\272\331^q\271\330\254-\272Z\373\365\272;\032\330\271J\303\300\271\210(#9\007\244V5b\316\213\270\252I\220\271Y\032R\272!\004\221\2729n\3079\022\357\2129\n\342\2238j\376g\271\334\212\024:\3750h\271\332\271\3767>i4\271\333\373!9\347\222&:]\204n:3\177V\2728\230.:c\237a\272e\373\367\271\271JB:L\312\251:\017\314\3409^\036\236:RQ\014\271\246\223v9\2264\322\271f\377\0229\351\305>:\024Q\001:\352#]\270\217\276\250\271\"\316\033:\371\025\366\270\274\257\314\271i\360\0359Q4\3349\350Y\221\271x\014\3549,8\236:}\371\3529\363\204\216\272\321\034-\272\014l\234:\260\035f:\341\317\'8\334\013\001\272+\305\037\272\t\233*:g\332\216\272\000\315\205:\357d\003\272\205\331\2629\327\201u\271\024\240,9C\306\3518.\213\036\272\262\362V9\rj7\272\033Vd\271\272\262\2539\013g\211:\315t\0319\235\\\224\271\017\311\304\271~\3771:\313]\002:\215?/:\201\301\0026\220h\22094rt9y\351\2049G*\272\271\262L\321\271\265^\337:\231\217>\271\250\264\2019\t\2163\272-\301\244\267\315\360\2079\215\312\246\272q=\357\271\216\007\r\272\013\376\005:\026F?\272\250\023Y8\207\2744\271(Vd\272|$\3609\270\236\2639@\366\3039B\377\315\270{\332\215:\204&\227\271P\037f\271u\224D:\320\024\025:\343r\216:\242u\'\271Q\353\307\272Q\266\031:\334\007\2668\227\004\2469\356\032H\272\002\213c\272\336\236\r\272\3762\3259\355\302\206\272\'\373n\2712\357\214\272\002.H:\"\377\207\272\006\223m\270\037\352E\271m\257\376\271}0,\271\301\304K9\335\331c\270\236\017\2319\376\223\337\271\001:\253\271\277\230\352\271\332;\231\272,<w\272\373z$5^>\n\272\345\006\2178w\272\300\271\227\270;\272M\241\3039\243s\3239\227_*\272\003\256\006\272\242\036)9\2749?\272\010@\2459\300\252\26099\364=:\0015m96\361\232\271\364|A:\242R\306\270\246`7\2721\202\216\271\356\026}:\257\271\007\272o\3149\272\022\347J\271\250\311=\272\334\n\0149.\302\265\272\233w\032\272\212\306{\272\2042*:\375[P:\347\030\232\271\222\037\270:CY0:\014\353\362\271J\377J\271|\376\236:\006\345|:\343\301\025\271ry\344\271\370gW\271\223\3147:\003\002D9\024Y\000:]\334\014:\3205d\272\322\241\2239\"#\0017;T*:v\323\3779x\265\327\271\"3#:\2005\255\272e?\265\271\341\307,:\270vv9\245\266\226\271\307\226\254\272~\345\3659|[@\271\211pH\272\325\346\2139xU\271\271|\312\t;8\032~:[\374\346\271\260\305\3739_\356\320:\344\241)\271-\270\241\270\031~\3759\253\t\277\267\010\177\005:!\361\3319\216sc9l\277\307\271\010F,9\312\206H:\267\266\204:\250\014\221\272\271vT\272\350\r\033\272\377\360\254\272\256]\021\272\250\310\3159qY\001\272\006R\r\271<;\022\272B\013\255\270\3563\004:\277B\310:\001\337\002\272\371(\035\272FU\3459f\214S\271Q\275\347\271\263\237\005:\016\210\347\271\225\016\003:\212\206v:\010,/\272 \004\352\271\313\025.\272\350\357/\272\033^\034:\017\255\276\271\031i<\271\037i \271\347e\271\272\3256\r:\265$\325\270E\002\2607\221}\2778\245,;9Z\337;\272v9\350\272+\025\2449\206\313\2239\261\275\272\271\276\221\002\273\354\\\241\271\230t{9\245\253!\272\311\376w\272H\021\n:\":\331\271!\233\254\267\217\343\0308Sa$:N\326U:\2710\3509\177\366\2129!\322V\271>[%\271\374R\007\272\007KQ:\346\254B\272v}\314\270\333\005\033\272Z\234\025\272\276N\031:\304-\344\271\211~\2649\024\\\2229\371\331O\271\216f\014\271\357\023o8\375-\013:\262\2453\272\317\316\013\272\257\325\353\270w\344$\272\212\350\304\270W-\3257\204+&\272\203Bl9\206\205n9k\245\010:J\324\027\272K\330\332\271\316\254\264\271?\275\3118\006hM\271\224g\3669\340\264\3009X\220W9\340\210\203\272*\337s\270M0\034:\246SQ9\317*\244\271\214my\271\2638p\272\205,\006\272\3058\265\270B2\305\272cr/:\202\235\002:\264\202\274\271\026\370\262\271\215\367/\272\204\340\2568K-5:vf89\032\320\022\271\204\357\3119\371\217\243\270K\261\303:\350t\211:\261\220\200\267n\321\341\267\276\372\001\271Qq\270\271E\323R\272\007\301\215\272\034\251\247\272\304\357u9Lr\251\270F\177j:\333\035\250\270\354\240\205\272\251|i:\343\360\3249/\323,\271r!\0229\352\377\003\271\014\223\344\271z\363/\270\347\224\2359\312;<\272\360a\023\272K\247\002:\333\326\27789\254\"\272X\370\362\271\276\222\330\271mp\3249&\254\355\270#\035\3029\332\254\022\272\357\261\207:\206\345[\2729\273\234\271f\034B\271uu\246:\212\313\235\271\267\234\267\271\021\316\3459`\313)\271\253\321\377\271\010\023u:9\013\306\270M#\217:\331\364\360\271\347\214^\272LF3\272\235\350\3479\260\302\037\272\330j\0269x6\23199\224N:\310&V\272\361?\330\272\"\t\0239\r\247\2109\245i\253\271\267\244\0019\3631\2679,=X\272\275\365\245:\337W\3627\203^a9P\276z\271\026q%:\3001\266\271\205\325\305\271\214\213\t\270\315m\305\271\253\311\231\271\rh\3779K\336\350\270P\266\321\271t\310\3559j\325N\272c\263\274\271\356\343\262\271\357=\3649\003\351\3559\017\263\216\272\360[\333\265y#.\2727\357\355\270\371\034d:\032\324\247:\250\346\264\271\232i\003:\220\353\2279w8,9#\nB9>g{\272\335\321b9b#\002\271}\277\364\272\263Z\007:4\275o\271\307\374\3428X\315\0378l\035|\271\241k\216\2721\'*\272\356\202\204\271\022\267\3118\261\'\357\271G/[\2729Ef9\r\331\377\270)\027(9f)\3506\262\277\206\270\014\211\251\271\210\345\002\271\000a\2758\213\230\257:)\021\021\272\321\376\004:\241\314\0339\001\367\':\244\324\236\272E#\r9\017\341\333\271U)\221\2728\374=\272o]\2229\277\272\343\271\013R\217\271\217\274\035\270\325\010\335\271x!,:\322\241\3017(\203\315\272\324.a90\363\003:&N\2159\257A\2206J\322\334\270\035?\245\271\227\235::\306\241\375\271\347G\330\271\254\307Y\272\266\234\3409\325^\0239\364et:?q\0059r)\213\271\276\345\3539F\346\266\272\017\307C\272\353q\2229\305< \2727\353\3059\341\374\3248\000>\3569W!\':kEC:\253\352\020\272\345P\214:\260\261\220\2718\266\236:\305Q\274\271\245\033\226:Z8\2539m\203\016:H\300\003\272n>(\271DY:97\036#\272y\034\271\271\361d\0059v\355\r\272\303\231\3176rbP:,\335\35696\276\265:I3\020\270\261w\323\271@\010\325\271i\204?7\316=[:\242?N\2715\302m\272{\006T\272\342\306B:?l\363\271\340V):\365)\3709r\'3:7\247\3039\006\036o\271\333\332b:\0065\361\271\256]\226\272\036 6:\271ZK9t\231\3139\203\023@\2722z,\271\037(\222\272R\313B\271I\207|5a\355h9\273\323\2759\371\202\251\271\r\252.\272\341!\2609\354N\2619G\t\253\272\346\317\026\272\312^\246\271s\312\2059\025d::\030\305\2649\227\274a\272{T\201\271\252w#:\250\007\212:\014\263\2139\206\204\020\2727\354p9O\361\253\272\332}\'\272\037\347W\272\357\342\375\271\275\371e9+\275c\272\224\276F8\302\231\024\270Jj\3069O\366\004:\364|\2029P\017\257\2718\270\034: N\350\271\232\315\3439\314\211{9/@\206\272k\307\247\271\220\026C\272#5J:}\001l8\000]\266\271\370\024F:\303\324]\272\234\364\010\272\365\316\004\272!X\352\271\332|}9\233=B:Tl \271\217\n\335\272V\216%:\375[~9\216ZJ9\'J\001\271g\037\265\270\245\025k\272\215\356\3257\025\216\014:\313\025\276\271\277\006V\2713\021\267:\235q\246\272f\252D:]>\203:l\255y9\010\310\014\272])\2349\311\366@\272\331Ia\271S\270\342\272\311v\017:T&09\363\217K\272D\273\247\271\216\302\036\267\2172\371\271\277\344&:\304\312\3628\323\034\020\270\222\375\212\271\246PT:=\352C\272\261\262F\271\007\257\035\271\232\335v8&]D\271 \262w:\245\237\014:\324#I9k\034\3359\373\2251\272\314\000\204\272\006\302\212\272rh\2477\023\306\310\271e\342\321\271\264{\355\270\252&\':\226\254\300:76%:W\36409];\002\272\263\252\221\272\351\330m:$!\0218\235\001X8\270\355\':\336#=:\362\341/:\302\255\025\271\367QZ:\0221,:\030G\3549\204\014\032\2702\330o\271B\373\323\271\0148\221\270\376\027\031:\203f\327\271{\344]:\316\354f\272\305\223F:3\007\222:\333\364\2159B\304\2379\313\377W9\263\246\205\272\315k&\271<Qi:=\037*\267n\321\235:\021j\250\271\353\260\205\272\236\036\26193\032c\272S\276\025\271\272\254\004:\317\310F9\3549\"\272\257FW8\316Pj9\255\323\276\271\375+\323\271\377K\344\271\356\025\3137\230^\034:\221\337\276:#@\321\271^i\3569)\355\t\272F*\037:\007\001m\271\360\333k\272\261\261\2449ao\004:\224\340\3018ke\032\272\337\334\200:\327(f\272\024\020e\272\210\304J9\310N%\272\3675\263\271\322\303\377\271\260\254g\272_2|\272\200zg90\365\0319\214\314\020\272\242\206%:k\025\217\271\210z\224\270//B\270\026\307O8\277\'\257\271\0263J:\247`\3549\3377\3109k\274\325\271f\324P\272D\270\376:Z\ro9\374\357\363\270\370\023\242\271\360p\3748\257\004\3009\276\303\276\270\276\366\313\270\346\313!\272\277\362P\270N\223\\\270\302\2669:S\007\2118\001\t\210\271*|\030:*[*9\3546\362\267\214\2257\271\203V\371\271\372\004\277\271\n4/\272\226C\211:)\202\202\271v\310\242\270q\333\2233?\357\000\272W\0245\271\251\"\t\272\376\314)\272\270?5:=h\313\271\316\220\350\271q\377\2649o\372\3439\326_\177\2716\007J\272\302[\3168\276\240\031\272\204\020?:\215\317\033\272A\3152:F\220\3549\023x\0207\0317\237\270\003tC:\230\327d9\320\376\2229\346k\013\272\342X4\272\253\005\265:\320\323\2247\001\021Y8+\307\242\272p\250H9\352\361\264\271\260\341=9\357\265F\272Q\315\231\272\265\237=\272\005\317\017\271x\232\2608O:Z8\236J\206\2719\363)8\201v\366\271\230^\240\2722\343\221\272\027w\236:\376wS9\025u\021:e\203F\272\212O\215:?7\2309\320\245}:\312\235^::\217\010:\343x\026:a\326\027\271\022q\3038xJ37\311\2504\272!=\255\272@\035\314\271H\362\022\272\273\23678\221\244\214\267\253H\324\271\332(!:]\222\240:)^k\272\337\367\257\272\347vF\272i\246\2569\347\215\204\272\254\000\r\272r\030\3239c\363\236\272\207\016\2009\213\0020:=}\014:\347\203\034\271eG<\270i{\3019=\342R\270\2621\031\272V7\362\271\347u\035\271\235$\3177UP\377\271\014\363\223\272\213k=:\373\023\323\271q\313\241\266\330\247\27399\255\2778\nA\2139\327k\2107\316\272g\271v\217S\2724\225\2419W\3426\271x\32158\255]\006:\257a\2519A\324T\271\304\273\2317n6\0239\330F\t\272\272m\3779q%\2309\234\024(\272p\251M\272\353Y\3119m\013\212:\237d\304\271K\tZ:\321\241$9\001\235W\271_\006\350\271\205z0\271mnS\270}\240\022\271\334\313]\272\376\225\3109#xT\272o\220X\271\330P\1779zf\273\270\353\321\2129\325\352n:\325\005\214\271\225o+\271\226\302\2539\266\317E\271\026\362\3549\352\320N\272\332\316Y:\334\331&\272`z9:h\263\202:\351V\034\272\374\223.\272Vf\3119\272:>:\332\242M:\254\017N\272\357\310\215\271\277\007 9 \300f:\277\200\310:\022\000\245\271\376\353f\270c\215\037\272\006\366\345\271\177\020\3069\362\316\024:\33421\271\330\003\341:{6F:(\327\23682\225/:\002\333\250\272\204\322@\272\177_C\272>H\017:\n\355\254\270\276\014|9Q\312\2717L^\331\271\360$\316\271\323q$9\246~\2259\305\256*\271R^\205\271\337\003\236\270$\351#\272* .8&P;\272\302[D\272otJ\271\264\014$\271D\336\022\272\347\010\3219\360\271\265:~\343\3509uF\327\270\231T%\271\325\222A9\342\365\t9\200\374\2159\255\222\237:\360\220\2758\000\322\352\2713D\323:\326Q\345\271\234F\256\271\315<\001;\0067\223\272\nH\204\272{\3129\272\033\021\353\271\364H\215:\273D\3049\364\344\236\271\345\330\007\272\267\000\251\271\247\230\221\270*H::\375\327\322\271.\237\036\2714\374k\272\201\360\017\272\036\361\004:\005\026,\2715Te:Z\243\257\272nk]:\353\322y\271\025\356\2629l\202\2329\332e\0068\321\341g9h\000\n\271\256\231j9\014?5\272;\257%\271:k\201:Z9\0169\352\347\361\271\273=V8\020\364a8\272\325\006\271\001\242\361\270W{\243\272\227\243\033:\377\367\0139\256\352\024\272E&\027:\365\353\302:\013\330\316\266n\245\3739\317\204\331\270\265\013v9\310\206\2439\033Wu\272&\263Z:T\233|9\203\363\3128sF\262\271;\334\303\271\336]p:@\336=:\302\202\202\272\2745\3409\344gD:\273n$\272\025\251`\272I1E\270\221dl:Z\020\2159\342\364\2219\032\313<8\333\373\n:\346g\331\271\205bM9D\037p\267\314\354\3609\201\326\255\271\244\014\247\272\252\367\307\271\033\355m\272\320y\027\272\236\273t:\375C\0379\323\223\3158\255\317~\271\201\256k:+\342N9T31:\'3\225\271\003i\253\272B,\3079\333\361M8\363\375\024:V)\260\271\221\027\210\272\007\203\320\271\353\302\3149W\327\024\272\353lG:E|u9\231\263A:\315\'7\272\007\027\3317\245\312\206\271txW9\353^^:^\347#9\313\324\245:\215U}9\370F1\272\326\211\247:8u<\271\321\354d\271nq\2569\341\257\020\271n\225/\271\023\006\256\271\213J\005:\211\360\016\272\353\352\003:a\302f\272Ps\336\271oH\2169Dy\"\272\207U\020:\231\250\301\271U\350\0068\367\231:\271\372e\232\271\267,a9\322_U:\271\240\222\270\343?\3338\206*\340\271zb)\271T\367\025\272\210\321\0069\347\377~\267\225\357\n\270\265]O9\3172\3139 \312\323\270\346^A\272/\231$\272c\022\3459O]\250\271\217<a\272\221p@:\32050:]g\035:\250\220%:Vt\023\272Y\305\324\2710\020u\272\322!\3079\217\273\3139\361\001-:\026\355\0079\272\177\t\272\316\244\250\271\0019\215\271i$\235\271H,\3377\260\210s\271\311\265u\270\221\363I:\200\376\014\272\353u\3359\3647\210:\374]M\2727\325\3219\216b\2229\340|\265\272\017\301\2639\226CA:\031\322\212\270\216\320W\272P\033\21285\366\211\272\351\232\016\272:\234\030:\321\267w9Si\371\270\010\301\006:A{R:e\026E:\322\342a:\027\000\3059M\\\233:\377\301\2129>\245,\271\231\377\350\271\207\261\213\271=f/9\361o\017\270g!\2039\324\275\247\271\354\244\334\271\263S\0109\345\250\2059\213\364/\272\232\245m\271a\201Y:\255B\200\271FfM\272A-\370\270\241\216y9<\236\036:G\325q:/i\211:k\377t:\2401\2079\244\'\2649\t<\276\271\336~h\272\314\243\3179Q\362H\272\253\365\2439\007\315\0359\353\024\213\271o\255\3679G;\3379\206~6:\3156\031:\237\265\271\271A\006\244: \253\3679x\037\027:lS\2719@f(:-\300\3659\224 v:\000\353L\272\030\307\204\271\375\224j\271\214\023=:\327\2351:?\023B\272\264\311L8JB\334\27030\211\271d\344\3029l\276\215:\032\315^9\321\300\027:i\250\241:\340\017u\272\034(\337\271\266x\246\272?y\"\272\350[\303\271\367\">\272\313\317\262\266\347\250Y\272\006\351\253\271O\237P\270\315w\211\271\307f\3359\374-\004:\305\020\262\270T\341#9;\231\221\270\031b\0269\355\340\022:!\351\200:\023\327\217\2726,e\272\2104\3449\013V#\272\274\354\3479B\032s9\2160\r:\342\031B\267.\311\t\272 \031\035:4\005\3219n\032\0269up\0049y\255\227:EF\016\272\342j;\272.a\2159\0025*\271M\002\021\272\270\215\231:\257\356c\271\210\030\020\271\224/\r\271\243\220A\271v\315s9\276\342{:\313U\2369\005\273\035:]\300\335\270p\306)\272\207\025F9\'\241\200:\235J\364\271\377\323\272\270\255yW:\037D\271\271z\003\001:\321\217\243\271\372Y\'\271\254\003\010:N\007\2139\243\371)\2716`*\272\265\022\237\271\026\227\022:\263\t\013:=\001\247\270\375\013p\270V\251u\272\272\t5:\037x\255:\326\262\3659BU\242\271J\036\035:\350x\266\272@\332\023\271\322\323\214\271[\377\2179\246\305\277\271\346\332N\272\263A\344\271\210\342x:\330\322\3709x\233\3648\001\232\020:\315Ct:\317\005\2439e\235\203\272\025}\0029(&.\272\342\376\266\267\342\037\3119}pQ:\004\256\242\271?\"\006\272es\330\271\036\030\037\272\'Z\357:%\020\222\271\220\336\n\272\351O\201:h\214\0319\263\177\321\271O\341\010\272\227&h\271\036{\37597\2411\272\207O\343\264\220\264\237\272\034\376\226\270\317\023\233\270!5\031:O\370\355\270l\365\363\271F\310\274\271\264\336\000\272\304\005):.o\3249\217\370\237\270\\\2138\272rh\206\271u\366\2369\270\261[\272\263_e:\226\315\017\270gw?\272\314\255\036\267\365kA9,Hl\272\036\362\003:\301.l:?A\0269\226FW9\037}\373\271\253\203\005:\357u%\2727A\272\272kXR\271\277\232H:\363\254\310\271\351\007\227:0\350\364\271x\254\3239\2367\2649\016Z\333\271\310\307\235\270\024\202\3429\203\022\022\272y\274&\272\320\242H\271\035\200\207:\010\302\363:\\\324\0008\330\263\274\270K\'N\272\026a\007\272\241\334\204\272\336\373C:K\033\0148[\320\3009|%g8\266\221\2459x8v:\240H\035:\025\365\22196\375%:\361\254\3679X\217-9\324\3061:>-t\267\005S\2749\246E\\\271\377\251\36592N\2036\343\365O9T\370E\272%\330\270:\336p\255\270\212\235\031:\036\005\02596\263\2279\316Q\203\267\245\305\233\271\247\321\"\272\230\356\276\271C\2306:ZPz\272H\371A:\014\211\311\272!\242\3209\262\273\r9\036#\217\271.L&\272%\303>93\232%\272\205\233\220\272\263Y\304:\274\345\315\271\247H\3309\246\235\223:L\005\300\271\036\241\2309\025$\034\272\214@2\271dM\277\271\366\251\356\271\251k\320\267\245&\365\271\"\003Q8\321\375\364\2709\027\243\272\325\275\003\272\343[\247:q\330+\272\267o\3209\350O\2379\004\332$\272~\357\260\272{Q\2079\344\255v8\214\007\357\271e\300\224\271`4\2628\001\356N:\337\354\237:\356\335\031\272\243\000\2367\253\223\027\272\024\371W9$y\245\271\270\361\020:9B\305\271ia\225:\320E\331\271\313\204\341\271\342\\(:=A\017\271gNB\272s3\23793\214K\272\341[\223\271%\312\020:&\276\016\272r^\3229\2723?\272\\\377\256\271\322\351\2359\221v\256:\326\236\024\271\305&\324\271\263A\216:H\007J9\027\340\2179\372\321h\271\010\342\254\270\004\302\0379\303\224\231\271\263\355\004:\347\272L\271\223\360\340\271O\024\007\272\3007\322\271ZR9\272Z\346\033\271\216\027\036\271\354\016\345:8\271\3569-\375\031:(\2542:\324@g\271\344\201:9\366j\023:Y\236\334\271\373\225\2179\000\221\3729w\3325:\313\234\253:[\026_9^\270\022:M\021\224:q \2739,#\021:\262{\200:\327n\026\271\'\331\356\270P\267\206\271\334K48\240\022\253\271\244\002\022\272\227W}:\023%h\271@q\234\271\345k\350\270\372E:\272\\\203\2379\326\364h:\262El9\003RF:\375\033\2739J\246\2338\362\311O\270\233\224\3539\324\023$:\244\014i9<\030\010\272\261\357\n:\363\304\202\272\230Eh\272\000Pq:\006\376\0379!1\2249\324{\007\272\t\000\217:\346\266\2479]Q\2659\245X\006\270\n\020\214:O\267\233\271\264\346\003\272\024\235\353\271W\207p:\231e99\017-\3349.\204R7\235\217\2149\346\246\3638\260\230&92\242\2439\353\2440:\016\247\2657\276y\033\272\342\360\0379\005\234\220\271\204\343v:\221\342Y:`\327&:\263\323k:\372\234\305\271fV,:\271\374\2219\313UY\272\214:\3319b\250U9t\364d\272\342\032\243:\235^\332\271\n\242E\272H\364.95\020\260\272\000\203\001:\227&\220:\212\255G:\242\327\2639@\216\0269\242x\272\271O\374\0009N\301\335\271\326\006 \272c\314\3429\333~\2079t\353\026:\304\272\004\271\224j\211\271!\347r9\236\360\254\270\227\013i9\343\340\006:\200F\201\272\222?\2559\310\037\2279\313\335\3428\265f!\272O\271\023\272\325\032Z7B\267\337\270<\316\362\271\017#\023\271\n\325\325\271Nc\326\267\271\022\324:^\351\354\271\002|{\272D\325\3309$=t\271q\271\216:l?\2748\030\351\223\271t\356\244:\026\266v:\307\337\2419\271\005r8\350\314\322\271\334\340=\270\3553\202\272\nH;7\242\335(\272\246(\035\272\340\350\2019\304\205`9\317\225\332\271\253\250i\272~J\352\271`A\201:Y\357\212\271\321\317\030\270\025W\001:\2318\0269\262\321c7\241\033n\270\223\214\2069\005\331\002:\211\325\2139\344m\326\271\277N,\271\204\344\3556\213F\2707\275>\025\270\311\354\205\271}\254c\272S\340)\272\235\376\032:i\374\265\271/\254\232\27132\2339\360\256\275:\003\342#:\206[\2338\304:!:\325\250\2149S*\000\273\224^\3608\016\353?\272\274\272\246\271\231J\031\272\337\327\023\272\335@\2579\231g\010:\230i;\272\255_[:O\\)\271lN\226:\355->\272\252F~\271\353\344\021\271\353\221\006:\211\252\005\2721\250j\271yC\033:\332M\003\272\006\347\222:3\260\3269_\230\3757C\223\303\271i\033N\272\2354\002\272\307E\336\271\276\266\036:\205\253\\\271\323\017\230\271J\230\236\272\217\222\327\271\317\365\206\272cs\022\272>\002\010\272 [\3028\331\315-9\257\031g\271\325^9\272\3572&\272;\344U\271\224}\203:\362\225\364\271\000\3001\272\275%/9b\322d8kx\206\272\004\026\345\267\032>\306\270\273\323\2409\273\234\272\272/\303\2529\262\367<\272L\303\355\271\235<\347\271\303\376\205\272\272\254\242:#-8:\245\206D\270cN\320\271\2252j\2719\225~9\226)\3468\263\205\021\271N\202.94B\345\270o\007l:/\244\215\272\t\342\021:M\020\237:\374\365\352\271\246&\215\272\342+2:r1H8a\275\'\271:\006\222\272R\373\3038o\257&\271|;\2129\355\220\330\271\263\036\0249\177!\0058\246$\374\271\032q\232:B\347T:\350g59C\236 \272\336:\265\271o?u\272\020dY9\177\226\351\271\016\304\231\271\264.\373\271\t\372\000:\034\266H8\303W\025\272\034\2157\272\007\321\2178\205\371_:%\206\251\270%T\3449vA\376\271^\351;:5\\3\272\276\221\342\271w\300\202:\206\035\253:\301d\2679\"\313>9\276\256\2659\026\001*\270x\027(\270\315\212\2739\202\0370\271\344\212]9)\025\374\267}\327!\2714\354o:57J\271#\223!:\213\322>:\266\312\001\272}\231K\272\341\327\017:x\365\260\271\006z\364\270\211\213\2777\364<W9xO\027\271\"\333\237:\331bB\272\201\231\224\271\257@k\271\013\353\221\270\233\033\2129\277J=\272\263[d\271\n\372\3719S\330\327\271^\212\0169\374=\3429v\006\'8\246\200\204\271W\036\t7o\363 7o\372\n\272T8\354\271\244\364{:C/\021\272\216\0019:\337W\016:\333\211Y: p\251:\354\233\332\270\371\214\'\272\316-\31781\0163\266\025A\205:\237\277\3109D\225\027:\345\350R9\325\177\300\271 US:?\223\030:\207\317U\272\225\022<:^\333\3469i\302\335\271\207\202]9\351\031~\272cG&:\305\263_:\320\367\3769\327O?\272\3608?\272\222Z\002\272G\363\302\272c\340\234:\336\26117c*\025:Q\002=\272i\036\3629Afw\271k\206\032\270AYV\271\216\td\272s\2036\272}58:f\007\2209\r`\332\2708PC\272\330\214M9\311\245w\270)8\262:\t\347\311\272\337\304<9=I\3778\027\266\214\271-\331\23283\361\002\271\237\273\033:\365\000e:\214\267k\271S\037B\271Y\245\212:\321\374l:\347*\034:\034\2402\271~%\336\270\304\322\033\271\235\372\251\267\312-s:xi2:\267y5:_\354\037:\211s\025\272Z\341l\270\245\250\177\272a\277\335\271\377\316\2119\242@$\270\247\366\315\270\223\266\2529\230\324\2229\317\311\2479\0306\257:-\346K\272^\234_\272\275\267}9\0337h\271\024\222\203\271\357`\246\272\331g\314\271\007\260\266:\203\t\222:\240,\t\272\262\031\2349\256\247\376\270\211\264\031\272q\336\370\271H\201_\271 \220\201:k\356\2559\253M\353\271&\201\024;\"\2476\272\360g\220\271xg{9\226\342J\270\014\323\2638\026dT:\262\002\275\270\355\341#\272\270\320<:C\314%9\322\327\027:{\334W\272\307\313\315\271\2573Q:E\333\232\270\222\370\2629=P\2178y\354]\272uW\263\271\314\021\3529\213]*\271N>\033:\"/\352\271\226_\323\271\306\202\2279\363_\3279\261\261\263:)\200\024:\340u\203\272\032\253\3737\241h\211\271`]\3438\2113}\272\'t\2158\362J\200\272NZ\3679\272\370\003\271y9\340\271\224\275~\271\273>\247:\341+7:n\300R9\270\223\001\272o\336\331\271\177\025\2548\347\3220\272\357\"_8yb\2547i\344\310\272F\363\226\272\356W\354\271yLE\272 \364\361\271\227\217\203:\236\313\3578\301\036\003\272\016q\366\266\335:\034\272\326\334_:\324\360p9\210\014?:\010\262\343\271E\351\024:\305\035S:\032\212X9\341a5\272\335\016B\270\226\265\3539\365\t\337\271\317r\317\270\377\0246:{\002\r9\221\003\2138\332\014\005:!\224H7\005\361\2559wgo:0\254\2529\177b\3608\377\366:96\241g\272\344\2569\272p\t\366\270t\002\3408M\024\220:\357D\210\272\233\223Z:\254\212\036\267\342Lz\271\014\211\037\271\357\332\3136\2737\265\2718\252\356\271\261\336M\272\221\034<:\320j\2719\246~\0169\200Ce\271K\221\2009\025@\214\271\257-\2409\263Aj\272-\r>\271{/c\272\353\336|:\017\023\212\271\253\314A9\247\327\3058\017\351B:\324sq8\376\r\251:\337\022\033\272u\010\200\272\353)\0318\243hc:|\353\220:mR-:X\333e:\275\311z9|\231\233:^\027\214\271\"Hv:\230 )\271\303`\1779n\335Q\272j\317[8\177\024i:\'g\023\271{I\313:\235~1:G\000\237\272\332{\2379\301H\021\272\366=3\272\211\377\026:\317X\301\271\254\273C\271\271`\252\271\372t\356\271\230YX:\031\203\3418[\305^:s\232\303\270\276\257P\272\212n\351\271<\223\263\271S\021\206\271|\013\3539>\367\2308\002BE:\006\366\371\270\006Z\r\270[\343\2039.:~\272\375\207\321\271\243\32539\2029\034:,\260\225\2711-\2558\035/a9^[\t:o.\3139L\356\227\267\220\\\373\270\001\344{8\340\332\213:#n\3129\213{J:\343T]\2721\245y9a\232\257\272>\270B\272\245\237\3179 \023\274\271\322\271\210\271]\217\306\271\221\025\206:\323A\2678\326\334\005\271\')\301\272\363\277):\216\0002:\301A\3279>\300\270\270\324\360\205:\272\223\221:\000\276\3579\371\226\231\271\205km\272\200\307\236\271\320\265\r\271F\331\352\271{\364\303\271f\245\"9\024\307\207\272\374\374/\270\362\212\234\271\241*\007\272\254\303\2779\232>\211:\207C\000:d\274\215\272\022\357\000:\232\335\35789l\006\270\360\r8\272\340%\027:q\202\024\270y\277\335\271U\326W\271\253_\002\272\255x\037\272T\375\r9\374\2769\272k0\2359\365\202\316\270\367\001D:\363\223\3069\201o\0339\225C\2059\262\200.\271\204~\3349\333u\377\270x\247\3129\336.\341\270\274\204|\2715L\333\267@\237\211:h:\265:f\314.\272\252\365\022\271\000\202\027\272\242\3447\272\242\272\213\272\255\277u:\314#\013:$\255R\272\265cz9h\350T:\244Oo:%,\020\272\301\350O:\227\255\206\272\325\010?:\257\202\3609{\tR\272\203r\214\271\356\255\214\272\226\220\267\271\330\226f\270\037\365\0329\003\266\311\271\302!u\271\301\332\3029E\350X:\340\007\202:_\205~\272\311\343\204:\231B\235\272&d\254:k\300\341\271\353F\2079\221\026\262\271\026\343\0309xA(\272\273v\234\271\267\300\t:\250;\2228\013\275\3059\255\333\0379\375\3638:\243\246\2059c{\3659:\250\n\272\275\t\305\270`O\3258W\357\017\271\037\002\004\272(g\3249TU\2729\375<\326\271\021#\230\2727\262H:\021l\270:\0329\2119I\336\274\271d-\257\270\267\356\004\272\252Z\220\271N\016E9rZ4:h4\330\270\201\227P\271W\237\006:\205\0262\270iM\177:Q\214~:{z\005:\330R\227\271\347\203A8\237o\247\267\222\206\25696\352e:\260K\2059n{\014\271q\252\204\272\243\235\202:\022c\337\270\362\255w\272\014\351$:\274\321\3459D\006\0319\032g\033\271UM9\271\251\250\237\266\207\007[:r*\222\272\016\203\240\271e\326L\272q3T\271\331\375\2729\212\247\021\271\222 m\272_\337\3258\022\214\253\272\355\r{9}}>\272\013O\2349\211!\200\271S\'\347\271\336\330_\272\\\310\3479J\022\373\271k\363\254\270\313\030\010:\334\242g9K\"\032\272 \r\014:e\356\3129\200\016G:\274\306B\272\345\351\024\2729\036\263\271I\225\t:\"+\317\270\325\236\016\272yh\366\271\236\335\343\271\325\n!9(\000\r7\332d9:\025\222D:k7\025\271\325<\344\271\231C,\271\266\000\3449?\3535:\254\222C:eY\013:\314\3233:$\343\'\272\301\364\363\271_r\271:AeS:X\217\2678E\211D\271\0041\013:\337V\3269Hk-:\243\263=\271\2025Q:\224\331\037\272\310\221\004:\t\302w9\003\302\212\271\325t!\272i\273\214\272&\25439\325t\033:1\035}\270/\217<\272\0220|\272\254a\0179\352\367\250:\032\312\022:y\036 \272\313\263C:\210?\363\270o\262~\271\013\035u9\367\313\032:<\243\2379!ca9B\333\3279\350\032\2557\206\242\2009V\217\021:s\322\364\271j8\232\271\235+\2649\253\306\3459/\277\3749\332?\356\271\004A\002\2711(\202\272\352<\363\271\035m\000\272\257\232F\272\303\2454\272\323\007\n\272I\340\235\272\247a\232:\312S~:\235\024C7f8\207\271\242y]\272\266\371\232\272\241\313\2539\364X\2169>\347^:L\221\2159\000\264\331\271\277T\3028\035\001$9\313\362\3659%\241\240\271n\244+\271\360\242\005\271K\344\3179\n\250\3258\034*f\272\270\t2\272\022\rZ:\336\317\2349\002l\221\270\336;\0329\377\275\215\272\215\224\r9\344\261\323\271\031\207\3369\214\357\005\272\300\250\252\271pP\256\271\315\202\2539\267\'\0208\177\307\367\271{V\2449I\323\303\271X8\314\2705,f\272\360@V\271\\\264\030:\032\241\246\272\010\223S:0\003\244\272\270vU\272\035\210A:S9\3408i\207/\272\222M\2559b\225[\272\336\216\275\272J=\330\2702\234\222\272\306\017\2109\241\320K:pL\345:\230\322\003:`X/\2711\376\3679\016KU\2723\216p:Hc\231\272\241\217(\272\355k\346\271[\020\3049\014S\203:\002\265\271\272\3553@\272\303O\314\271qI\004:\037\254\2349\010\314\206\271\301\220\2039!\373\031\271\311\n\3029%j\261\272\301U\'\272,rY\272)\373\217\271WX7\267,\030\312\271a\214\221\272\211\237\r\272ph\211:a\302\3009\353c{\272\014\245\261\271i7\005\271\312\367S\272_\233\002\272\342\235\333\267DOi\271\313A\024\272\230\n\205\272\237\321\25589e@9\3512\2129\270\227\246:\3367\326\272\3558\216\272i\265\3729\230\177\3028O\325\2168m\020\211\270Qo}\270\355RK\271\345mt:\377t\274\271\021\303O::\247&\272D\014\2639\353!1:\267\241!\272n9n8\272\317\2179\037\340\3128\212\361\3118\361A\271\271\305\322\003\272\217dh9:7\3309\276\343\243\272u\007f\272)\2455\271\024\325G:O`\2018\342L\225\271n\373\330\271{3]:r\277\246:k\325\2059f\260\3077\031U,\271\211\005\254\271\000\247\204:^\361(:V\362\0219\224\022\205:\254\333\016:\225\205\2359G\325\256\272\202\034\2019\233\365s6\014\216\r\272Nq\202\271\264d\224\270\336j\224\272`*#:\211\014x\270\301\271\3737(\017C\271\335\303\224\271,\352\003\272\246N1:F\037\201:\n\"J8\322\034\210\272H\014\235\271\356\341X9\343\377`\272}\211K\272\001{\210\271\300\370L\272F\n19\351\313[91\226\266\271\233/$:\213\264M\272\020}>\272\362\206B\272\232\240\306\2722\013\202:\020>\\\271v\213\2309^q\242\272&\267a\270!\004\310\271\204z0\271\215\223.:q\246}:\262\203A\272\266u\376\265\307\241\317:\177\211\2239j\312\230:\332\264\210\272\221\232S7\\\375\360\270\177\310s\272\276\023\243\2719}\004:\'\241/\272\034x\013\273\272#\026\272\206X\211:o\301l\270\330\204\214:t\265\27195\212\n9\367n\2149\034\3457\270\205\317<\271\350\017,9\233\t\3539\025\006\3239\220\2369:v\351\212\272R\023+\271\377\266\231:\215J\305\271\005-\3319\233\273\252:B\213\2269\337z#\272\305\034h:\230\313\3029\350F\3029UJZ\271&\35399$\022\204\2724\347\202:\255\3045:\031\214\200\271\343]M\272\302\375Q9}\333\231\272\363oJ:\241\232@:\200\303h:\222\356\266\271B\2725:\274/!\271v\200c\272\302\001N:\337L@\270\362\241\3739\254\326!\267Vg\2449\0055\0049\n7\302\271\307\014\357\271\204\205\244:\335\220\3268(\354\3349\264\'^9\007\222\204\271\207\322\211\272\303\034\2509\345\275\0179\323(\034\2727^\223\271\316\001\344\271&Q\332\271\215W\257\264\003\0173\272\343\213\277\271\273\353d:e\310\254:\321\016\245\271y\355\272:5\005h\270\014\211\0149J\022\020\272\212c\207\272\247\340\265:\206u\226\272\355\304\255\272\3007\2418\2004;\272\'\256\223\272[\2503\272\344=(9t\010W9\253VK8\027\034n:V\027\260\271D\325\217\271\372\232\t9\311\315d\271\333H\3308\027\375\026\272\014I\303\271- |9@\276\235:K\310\373\270\272;\013\272\215\212\267\271\217\261\372\271\001$\262:y7H\270\333\261!:\344\344\324\271\363\355o\271c\311\031\272\272\261j\271\273\'7\272\275\224\242\272\302M~7\215\013\224\272e\217\3257m\237\203\272\234p_\271\277\235\212\271\255\271\3278\222\352\0338uQb:\255\271\014:\255\376U:\235\226;\271\313\206\023:l_\007\272\241\345\026\271\201\250{:\332,\036\271\354\2111\272\342\305\3269v\'\271:\375\t\0039@\247\234:\307^-;\316\375\206\272 \377\212\272Q^;\271\010TT:\302\324j:q\"\r\2710\336\204\272,!\3647\366\322\2229\202+\322\271\267V{9\214\366\212\271%\225\035\271\3748N9\304\272\222\271\241\334\3009#\335\2519\026Oq9Q\222\3478\320#\2126\347\327\032\271\227\3311\272\335,#\272\330 \001\267|f\':_\245T:\355G\2357\363V\277:1\245\3518\370\373Q\272:T\007\272\321\333I9\351\315\036\272\371\232\003:\214~\246\270t\377\240:\230\230[\271q\204\224\270\225up8B\364\225\271>\035\270\270\010\313t:\351b\332\271\317\371,9\261\301S\271\376\217a9\370\225\3239D\343=\272\027\261 \272%\335x:\334\320\226\271\022\375\3479\243\245\0049C3\266\271\t(\360\271\n\376\3529mp\t\272\215\272*9\244\263\3149XB\267\271\375\035H9\3343 :C\225h\272(\212\3359G\207\002:cL\004:\007r\2078\365.\2369\233\250\244\272\213\027\206\272xb-\272\030V \272v\023L\272\315U\222:\253\005\021:\361\307\02499\346!\266\376\021\233:\360\263a9d\361\022\271(k\276\270\346S\222\271\277u?:\2434\340\272\364d`\272\323\206\010\272\200l!9\312\271\0239\022\3459\270\334?\2769\221\023:\272\362F\272\270\335\363;8\262\345\223:\033e\346\267Vu\014\272\010\200\225\270Py3:\316\342Q:\2257\002\270\016\210W9\360\313\330\271\276\305A\272\033\241\322\271\016\016 9X\216\037\271\312\002\217\271\375\336~9\002\321\233\271\245\341.9\353\022r\272\255\352\030:\002oJ9I\277b8\274\375s\272P\233\002\272C\2213:>n\0219\301\323\n:\355\336\313\271:#L9\304\3600\272\276\231699\221\205:\254\305,:\364\030\316\271\367\037\3109\206\235\010\272\306\351E:\363\350B9?\005\2008\311\007m\272\033\362V8\321\245y\272D\332\037\272\336rz\271t\256\026\272\323\013\347\271\331y$:\036\'\3049\\x]\272?0\321\270\020\t4\272\037\016;\271\362\273\214\272\261\314\3109\322L\2639\030>\032:x7\0027JN\3648\'\245\201\2677\347\035:__\t9\277\351l\272jD\205\267\270\306\366\271\210\313\250\272;\364\261\271\225\233\3729\371G\334\271\352\027\016\272\307z\376\270oI\2279\254\356\r:Y\301\227\271\2159G:\205\027\n\272\026\305\3579\232\236\2479\317\202B:\210_\232\272\364\370\234\271\313q\267\272\312\300Y93`d:\253\032\026\272\213\236\0018^\212\265:\335s\023\270\207\266\260\271dG\0258\203\r\3209\232\346\270\271o\314\3219\325\255^:[\215\320\270M\022\366\270\022\371\034\271M\264\212:i\033D8\267;5:e\' :\317\350\025:\031e\3008:d\035\272Otf\2723.c\272\316\3413\272\210\352\3169\010\252Z::$\3559\243\\\202\270\373\032\266\272\007\312\2579\343\346\n\272\005\243\032\267\266\257\213\271\220\313-:\312\0272\271Pp\306\271\341\007\027\272\333\\\007:CIF:\031\373\2239\327\010\213\271\013A\223:\366i09\244\336\3359\331\237\r:d\263S9\226\277\255\272\275\'\24397\306\2009\376\311\004:\210/\024\272D\331\031\272\241g\'\271J\211\025:\025\030\2139T\322o\271\237\314\0309_\333\301:/^\2759\365\252J\2721\327\2538}\273\263\272\273NW\271\330h\2709\213\304\2129fa^\272\236\374\223:\010\030\221\270\276\037\225:Sp\224:W\034\216\271\000\223\3419hs`\271<z\344\271Q\032\335\271)\314\246\272.`\3268\274h\004\272T\020=:\010-\002:{7\233:\330F\3669E\3735\2719\372*:\224>a:\322\025y9\334\372\300\271\220\213\243:\363\266\3649\246#\2559r\206\2179\254:\263\272\317T#\271\232G\033\272\353\271\303\271\304D\337\271\2638\0109\306\034\3609\233\264\3278\r\257\2459\366Q\"\272}$*\272}pb:\215\255\3549O\371G:\245\032\210\2722s\025\271\022\353\2209\331\024\n;\327\254/:\016Q\001\271\234\027\02281\"N\271\357M\010\272\307\030\3649\330w\356\271\377X\3519\205+^\272-\375\3238^X5:\005J\231:\307\241\3709h\242\t:{\3003\272\253\374,:13!9h}h9\374K\3439\222\022\n\2715\022\3779W\212\210\272wt\0109]\352\024\270\262\033\3639.\345\2348\311\014=:\353\344A\270\235\354\016:\\\224\327\272P\2764:I\323\210\271\201\320\227\270\252\003\3029l+(\272\326\225\006:\376b\351\266\300\024\331\271W\322\263\272\200-\2079\2527\037:!\035\224\271p\207\2449\306\205\31091\021\177\271|\231\2438\016\243P\271b\\-\271A+m\270\372\345\0379\223\335\254\270\024a\3058:3&:fVK:b\332\300\271\001\024\312\271?\244\3558\371\316\0169\243\241\244:\264\374)\271(\263\3049v?\210:\350\332^\272\361\347*\272\345\003;9=I\315\270\332\207\2459\014\321\3679\302\007\2447\345\034\303\270\262G\005\272\214<a\267\014\356\205\272\312n/9\0060\3409\3738\237\272\327?\276\271\\\346::A\302o:\305\2168\271\276lK\272\323\024\2479@&&\271\222m\275:B.$:\327\336q9\347!5:\210?d98\317\215\271g\346\207\271WD$:\235\370\3629e\302\341\271`\343\353\271p\004\376\271\366\337\027:\372\314(\272\005\350\2179u8\010:e\302\2109\031\305\220\270\013\2350:\354\244\3449\000\357\306\271\345~\223\271\001Z&9\334\267-\272S#\3019u\370\r9\224\225\230:\303\305\215\271\310\030M9\346NK9P<\221\271\370\362d9<4\n\272h\335Y\272\016\267\027\271a\377\2658qoJ\271;\243\2779\214Wq\272\022H\3577\031\326\2278\215\351a\270p;\224\271O\356\200\270\037\021\264\272\321\2108:\215\243\2769\341O\226:liF\272Sw+9k\211\013\270\236L\0239\227\324\027:rS:\271\266\313\203:L\237\236\271\301\000(\271\227\231X\271\334|\r\272\326gg\271\013\262\325\271\371e\016\272\023\362\202: Pe\272\"m\222\272\r\250\257\272\014\361y\272U\260A:h\216\266:5\311&\272\'\223\250\271\0161\020:\000\267\037\272\277\273$\272#\200\236\272\260&\016:*\2727:R+19.H\3458\251n4\272\260r 9 \035p9\321L\316\271M\026\2067\215H\213\272\262\357\274\267\350kP:\226\335\300\271\217\332=\272\ri+7z\202\3009Xm!9\236/\2369b\246\2169%\326\341\271\241\206i9}\034\023\272\213\223\256:)\247\21790\264\013\271j\211<:v?H\272\353\3005:i\026\007\270\033\373;\2728\022)\2725\266F\2708\352-\271\226\226(7\2040h9\032\344:\271\330D\272:\365\210q9\222\256\213\272\206p\214:\210\003\025\272\242\324!\272L\026\t\271\311-P:\343\341=7\263Sm:\"j\273\271\302T\3627\363\353M8!\200\000:\371`\301\271$\251\21770J\206:\023#A9a\177\0239\311\017\3419,\221\001\271\256\270\r:\032\2449:(P\231\272M\2012\271S\201\267\271-\343\2219sZ\323\271\326\376@\272\247\303\345\271J\017\003\272\306\033\3639\361\302\2259U\231p:\302FG9\001\365.9jd\n:d\222\0209O\250\325\272J\246\206:F\362&9Ho\230\272;\3202:l=\27391@8\271o\354s\272bO199u!\272z\020\211\272\361~J:\201\352^9v\317X\2729C\036:$f\2528w\021\013:\004\273z9\236\217p\267\241x*9\325bm\272-h\2639\325\313`\272c\016\0329\037q\3368v\337\271\271\244\025\017\271\263)\3157\225\224t:$\361u\271\245\261,:r5\361\270\236\365\210\271\345\377\2369%\266\222\270L\333:\271 \r\2719\342A@:V\240\3029CW\3779l\205\266\270\237\2206\271\276\243N\272H\337\220:\335z\2609f\270\355\271(\204&:\216;!\272v\363\262:\264\250\034:\226\022B:\227dA:\212\032\206\270\023\373T\271\201\2378\272\300hu9g+\247\272\363i\n\271o\341\010:\324\361\204\272uj\3517\246x\0229\230\326X\272o\006\304:\033\301\222\270r\2723:\222=m9 ?W:\210e\300\271TO/\272\273vE\272z$\222\2715\030\0259&\375\27682q\"\271\336\215j\272\320\371\r\272L\260z:\370\010\010\272X\226\366\271\021\220u:7\235\226\271\356wz\272\257\005C:q\036\3739\331\2575\272\232\3338\272\267/(\271\332\360p\271\215{}\271 \340\006:l\200]\271\274\023\207\272\356IC\272\330\024\215\271\316T[\272\266\274J\272\334\252\2405D* :\320\233\245\271\367N\367:Hpa9\346\003\372\271\234\t\223\271N\013\3269\241%%\272\022R\206\272\343>\210\272\235l\024\272CA\3227L\231.\272.\363%:\342\325\2619\223\313(\272\257o\3769v\276n:\303\244\2559\371\365\3669P\307\261\270\361B\3559\3346\026\271\366\027g8\222\005\231\272\316\025\2158\037\002\251:\237\034c:\314 t\271?\302U\272\000\034Z\270\035dD\267\326\214\000\272\026\002<:W\r\n9\265\367\246\266j\212`:xb\t:\234\371\317\271\003\310\010\2723\3225:&\2672\272\300\304k\272|<A:\021\362\2359pU\2578\314\024\225\270\214\257#:\240\201\3169\312:J9xj\026:m,\2047\301\023\206\272_\007%:\312\224z\271qbQ:\300mg\272\336\276Z\272\030\244\0349\004\330\2478\342 \261\272\':\333\271\240\247\2559M.+:l\241\226\270\2706+\271\\\232\200\272\177\200\201\272\307B\273\271\362JH7^\310\313\271j9\347\271\375t6\270\034\273\3247{.\2178\306\276\002\272\306\223~\271+8\254\266\216*\r\271\357\333I\272\034[\226\271\305\275\036:\013\007B:\031\324x9-<\205\272\035v\377\271e\227\3459\252\351\36093)?:\334\205k\271J\214\3417\236\356\273\271\177\345\":|R\017:\362\262z:\216/\230\271\371\224\234\272\366Q\'\270<>\3159\361;3\271HN*9U\251\3549\"z\226:\350\036V\272\215q\014\272\025\247\2148\004=2\272\r\236\344\2716\353\344\270\306\222\002:O\003Y9\n\346\025\271U+&\272\306a\2038\240,<9\333v.\271\312\272\246\271\005\311u\270\001\233\314\271\362\301\2239R\260`:\250\320X\2723\305\006:\251\217\3319!\nQ\271\240\354\316\271\320\273\n\271E\345\2376\014u\306\272\261\335G9*s\3338\375\366S\271\247\315h:\013\301\347\267\321qE\272\200\254\335\271=.\007\272\034\377\326\271\373\347\2658d\217\251\2723V\345\271B\236\252\272AGl\272\261\036G:\032\217\200\271Me\277\271\354\231\n6\316p18\361\205\374\271\2401\3279\017\234\010\272=o\253\271)\377(8\254\340\3068n\031\3728\345\035}\272\002t\271\271\326\217\035:\033\277u\270\224\n \272A\240\001:\016\235\312\271\303\301\260\272\303\001\2249\217\337\3479<\327U\272~\366\2649\3105.:\2412x\271\244YV:|\230[7,\311\241\272\013s\211:\375\254\231\267D\237j\271\201\327\360\270t\276\3029\304%K\272/\rv8:\362\030:\221\226\010\272\275\242U:\351o\213\272\367<\013\272\242\354\213:\332\337\032:\260\031a9|\205%:\251\233\306\271:c\240\270G\303\2168\304\244\3469[\254\2369\223@Y\271\272\336\352\270^\364Z\272\371w%:rB\2219`X\224\271\313d\310\271\217\227A:a\030\033:h\266:\271\252G\2559a\247\013\271\024\244\2519\363h\3209\020\203\005\272\232O\350\270\225\277^\271\241?\376\271\265\217\2429\303\223\3779\332\"\201\271%\320\030:\226\335&\272_\301\005:\337\313H:\003\317\231:\356\233\236\267e>\031\2723\027\001\272\315\323\2048VWE:\356\031\224\270\374\376f\272\216C\317\271h\316\362\271\277\250\017\272\250-Y:\301\r\207\272<0<:1\237\020\272\243\360 8\027c6:\256\363*:~Z\034\272\226\313\022\271Sc\007:.H\t\272R\030\3668\345l8\270\376M4: cn\272\021\3203\272\267\375\2269\016i\233:\3036\007\272 \214\2549ch\2239B\303\0309\275;\3067V\264@\271Y\377\340\271n\352\3468W2\2139\205\2562:T\201J\272\260\251\220\271\310vE\271\351\306\247\272\377\252\3649f\373?\271\205\271\316\270\352\241\n9!\216\3249?\276o\271CQ\261\271\237\207\3528\330W\332\270\020\005\276:\345\031M9\246yu:\321\221\2259\177\032\202\272\262,\243\271\325\340\367\271>\357\2009\304\016\013\271\2763\265\271.(]\270%\007n:\2633\210\272b\222\241\272y\261\237\271\306\005\366\270\351\326\302:4\021\274\272Ng\3439\254a\236\272M\301\202\271\2449A:5v\224:\366\362\0058\006%C\272\277M\2309:\032\205\272\252\360C\271\207Z\2169CL\274\271\226_8\272\317\275\3669PPR\271\300\211e9d\364n\271\334\331\031\271\365tP\271\\94\272%\007\262:i?\253\270\232ZK\271x\314\2419\362\305\026\272p\317\2049\\\350\241\272\006\331O:\\\271\007\271q\"a9\341\322\013:-G\000:\351\233\2049\324\232w:\212\346v8\273i?:\275\300G\272\210>\025\272\371\312U\272\350.:\272H\243\215\272.\300\373\271\014\311\303\270\236\016f\266`f\221:uD\271\272\316\200\037:\220\025\276\270\325#d\272\313%\263\270\204\212!:\306\213\222\272\252\n\2629\253\260v9\310\277\347\267\324\306\2118K\357b\272\265/{\272]\347[7\010*S83\006\306\271\363\234\0277\371\031h9y=%\272\3333\3729\243,\206:\307u\016\271\353EE:\312.\004\272<\362B\271\347\232\003\270\347\220\374\271S\257V7\351\334\2638[<&\272\251\342\"\270\350\005\325\271[\306k:\321z\311\272\301\264\215:\373\256\266\272l\321\205\272,\327!:\343\352\005\270S\n\2729\364\336)9\032\362\215\272\353\014\2629\"\027_:\016r(8V\341\0268 o\226\272\006\215q:\032\216\3329\350\237:9\356\336S:\005\227s\271d \323\271\227s\245\271\344;w9hb\347\270\337w\266\271F\027\264\271\325\344\225:\004o\002:1\371\241\272\341\376\014:\322\371\004:QMH:\271Y.\272#\354\222:D\344K:*\232\211\272E\'\3729\251\303\261\271N.\020\272dx9\271\221\201}\272:\331S\272\014\330\013\272\240\205\0309\035 \007:Kl\2249\261\017/\272\002\216P\271\230\273\272\271s\351z\271\177\273\305\272\207$\2749\003*\036\271\357\354\323\270\347y#\272\204%A:\355\337\010:p\177;9\205\245L:_\014\0039\341\355\3338\257\325\002\271[;\2319w\272\3439\331\3275:\205\220\004\272[50\271\303\247^:\364?E9\001\325\244\271\223C\2279F?K\272FI\021:3\030\316\271\353\365#\272\342?.:\317\321\270:\303\314\027\267\330\330|7\213f\032\272\241m\006;6};\272\314\243]9\017\203}\272\020\343\"\272\010\374\2579\200\020\300\271\307\32389\241q\2739\243\261\r:\260\331\037\272z\003\2109\376O\227:\354\351G:\377\376\207\272\0346\003\272\327\263*\272\245R\2169\374c\363\271\r\214\200\272\317\223(\272\346\332\3559\244d4:\224\230\3159\036\252}\271K\264\2269\252\376\245\272\345R\271:\013Zn:\204\375O9\265!\317\271V?\031\271\310\312\372\271\370\332\033:>\324\003\272Vk\036\272\253\016\3209TTT8/\217\000\271GaD9\305\201\265:\361\375E\271\334\023\202\272\276\27598~\350O\272\337\ng9\270|\034:\004\3204:\350\327::\250\342\2139\nQq8\227\373!\272\320v\023\272>\314\335\272\2521\016\271y)\247\271\332\224!:u\336\032\272\330\366\010\271~\355\2339\267\014q8\316\023\"\272\005\256\254:\033\276}:{W1\267oh\213\272\351W\030:t\367\246\272\324\231\3059F\267:9\225^\2379\253\312#9HB\016:\376?~\271\207\207\021\272\205)\3735\240\211\341\271d\302\2558N\005>:\244P\227\272yK?\272\375\362\3509xV\335:\334\303\030\270|\217T9\310\233|9j\177\3518\335\301\3239\2229\202:~\024Q\272\'\016K\272\231\213W:\257\206h9\255\373\2269XT@\272=\006G:|\343\3068\263\215\3059i\343\"8g\310&\271\323\332Z\271\261\341\2709\027\222\002:\367\\\302\270\217\006r9\234V\257:Y\236\256\271!\220\375\2678\261\241\271#\005*:q\216\212:Y\355i\272D\002\222\271\231j\2559\226M\215:\031\332Y\271\341\353\3737;E\2079\356 \273\2725.=\266!#\244:\335;$\272 \227v\272\220\346\033\272\n\303\021\271[h\3548CT\236\271_\326\036:\344wQ9\313{J:\346\352\000\2721\304w\272\264m 9\032\334\2418\324\3143\272y\010\301:\272\316\323\271\334N,:\335\307.9|\3174:\004\216\3349?Z\333\271\311 \025:UZ\031\272\207T\3259&\347\2669\207\224\327\272L\330\346:\237[$:(\026\3479\324y\3249\372\036m\272\263%\3469rM\006\272;\020\275\271Q8\256\267\244c\375\271\213?\277\272`\276\2239\014C\227\270\357N\031\272 \344\203\270\344&\236\271\316)\361\271\027\234\250\272\352W]8\335=\2509\247*F:!M\204\271=t\3229 \373f:\022\311\350:\214\350\201\272\206g\2179\252\351J\272O\221\032:\373\241\207\272\256\377#:\312\214\302\271\313[\244\271{\017\023:n{\3009\273\203\366\271\317\265V\272`\234\207:\206\343W\271\241{\2009F\357L\271P9r:\265\2077:\320\322\025:\313\026\376\271m\232\n:\0376\215:\262\360{\2713^ 9\334t\2629\247;7\272! \216\270\364\'\0358\324e\2439\236\233\024\271A(\235\271\032\3750:\377\310!\272`\262\207\270\000\\Y9\324\337\227:\223\367\2718\363y\200\271\277n\r\272\024o\2319p\257\004\272\271j\2709a\250\232\271\275\260\354\2716\345\001\272\210E\377\271N\362=8\210\232\0349\332\233V\271\316\267Q:\231\333#:\263T\206:\030o\2479u\030\2148\301\023!:\370\216\323\270\370\353\333\271v\347\2569\267<\260:1c%8\003sR\272\230\321(:\r\375\326\270~?r:\207j\2379\302\223\307\271\230\204\3439\317m~9\247s\t:\361m\377\271\177P\212\271\273\224\000:\363\355j:\217\342\035\272\365+ \272]\366t:\260\300\240\271>\t\265:*\257\3138^\351\2629k\242\n\272*\320\3268=\224k8\032]\017\272\207\3354\272Qu\3008\372\255\320\271\024\224\276\272\321\244/:Sn\3549z\350)\272s\202\3339\327\204O\272\254\3636:\343:\340\266\270?N:\006}\355\270\303\340\347\270\2228L\272uuV\272\236f\265\271\031\326%:\031\376\001\271$}\205\2717\375\241\272\020\340@\271\255\013\36291^\356\270P\201\004\272\344\332\317\272\315\2653\272\220d\":\371s\343\271\205 \307:\363\004I:h\320\005\272\342\240\004\272mp\203\271lZ\213:\316\221\024:S\371\3649\276B\337\271\265f\335\271f\230\204:\377\177\214\271\327\370\0369N\330\2429Z\307\021\265I\031\274\271\370\006\314\271n\313\272\271n\255\226:}\342N:\236 ,\271\354\251\2119\247\201\016\272\274<]:\244\277\315\271\207\317\200\270/w\013\272\210\350a\272\213\277\2159\\\217\2109\306\007\032\271o\325g:\337\014r\272\263,\2568E\263\256\2726)K\272\200\304\17798\027\0359dE\215:\233\352\014\2723\300\2749KU\2609\023\333\243:\370\310\244\271\335\325\010\272d\255\322\271Vq\225\271}\t\224\270\036;\2417i&!:{\021\3259\013%j\272b:\226\271T\2727:\'\306\032:D\'e\272\244\340\212\272\346\336\024:iZ\2348\221o\006\272\340tq\271)\356p9\350[_\271\302%9\271\345\246U\271\336\364\254:\364V\374\271\333D$:\202\334\031\272C\235\243\271\243N\3769MV\003\272~.%:\311:\':\334(\017\272MB#\271TsJ:9\245\3408\324\274R\272\227.Y\271\341-y\271\271\251Y\272\371\275{9\374_\2429\374\214\n\272s$\031\272\223\263?8$e\021\2722\315\255:\373\313\201:0\340[\272\232\362\352\271-~\215\272\003g\3119\210fU\272\324M\233\271\177\221\277\272\366q\363\2705\217(\271!\311\211\271y\034~9J\276\250\270\244\334M\272\366\260;9u<^:t\3409\2711^P:\275,\322\270\342l\201\271kf\34655\276\203\2718\0348:\354?\2049\230\304\223\271\r?\246\270\277\032\005:\032bE\271r\227d98r27\301W\342\271\336\000\035\272v\242h\272\233\222\2459\342\266J:BGC9\226\335i\271,RQ\271\021\365\2479d\205\025\272\270\26119\316\203\n\272\270Ab9\032\232\000:\006\365\212\272\0330(:\212p\026:\030m\232\272\255\267\023:\202\321\231:$Q}\270\246\273\"\272_Xu:[\350\006:\245\352\343\271\350\321T\272\364\341\034\270,E\205\272\030Vb\272:\024)\265\3200!:\020Q!\272!\263\2629\376a\241\271\353\352\220\271*\"):\261\261\225\271\246\344O:\214\263\2759=\230b\272\234\224\2409\215\004\007:\017\202\366\271/{T\272^7\240\271R\345\033\271[-J9\304\242\2429\307\205\3479\221\345\323:\001\004\024:i\252Q:\354+u9\000\2037:h\361\201\271\340\252\210\270\201v\2349\326\341%\272\373\373\2659\3341*:\377q\231\272tP\271\270\246I\037:\030\234F\270\320>\t:\320#\203\272\241\345\013:\014T6:\\\272\037:P\357\t9\254(!:\031\326\2739\3255R\272\233\3467\271\236\247\r\271\014\274\'\272.\315*\272G\305):\0079z\272\357@E\272\332T\2679\017\024Q\271\237-\334\271\226#\326\271\321\223\016\271g\204\002:\200\235\244\272\255R\231\270k\224\344\271\010\327\3249\305+\334\267P\366*\270f\232.\271\204f\327\271n\276\226\271OgH9E+e\271\253\222Y\271\352%\001:x\201\203:5\207y\2724\"\2714r\177\254\271\240\230\234\271\3535\373\271\243WZ9\371?m\272I`\2779\320\036\0339\351r4\272Ccg9AN\3059c(\365\272\036\352\3717\240o\r9:,\2019t\334R:\355\272\032:Y\226{8u\223p:\360\034\2539\034Gh9\203\013\3269\351dd9\326\363\0179v2F\272\237\215\r9\240\264\216\2704\231\032:\214\2103\271\276\'\237:\240\233\2037\241\360\301\271\350\303\3529r\r\201\271\'\337\2209\2515i\272\003l+\2710\246a:\310\274\000:b\337\027\272\355v\2229XV\r8\n*\2219[\244#:[\2732\272\216\324)\272_t\2069\206C\025\272>\026q:&G\215\272\332\252A9\216=B\272\020{49\334\332\0339\273\303 \272>5 \272z)o\270\004\223\320\271H\303\2159g\221\221:\226R\300\271\231-\t:\373\030B\272}\016\3379\362\003\2549$\200\035:%$!:\227\234\247\271\032$\271:\n\n\232\271\177\333\'\272m\252\201\272\334^\273:z\351\2738\272z\335\271`\204\356\271\264j}:#\"\301\271\302\363\200\272\363\201\313\272\303M\242\272\304\n\021\272\202\342F\271\262\242\224\271\224\317\2269\004\002\257\272K\304\246\271,\205\350\271pip\270\310\031|\271\351\325\027:\205\230\022\272f\363\275\271\033]\334\272\365\325\221\271\322\251\216\2720\371\014:x\002h\272\316\262\205\272B\352\r9\376\2558:\006\005\000\272\033fE8\207pG9{\355>9\272\235\204\272\245\334\037\272\241\205\205:W\257\207:\314[\246\271\213\204\227:%r\262:8\346%\271\323~w7:W\242\271\254E8\272\365\365\240:\265*\246:)\301D:\027P\3529\001\317\034\271ING9\017<\0278\300\373b\270\210\355\2508\221\025\277\271\375Z#9e\377\r\271\262\326\014:$\312\2349\333(W:\277\014R:\305\321L\270\230\264\2479\274\324Z\270\367D\002\271\013\220\033\271\227\030\2249l\314\002\271#\036\332\271\300\210y:\330\3623\272\354\206\0149O\274\':;\252\021\270&87\272\356D\036:\314v3\272\014[\2529u\320\330\271\244V\224:\234Hc\272\336yR\272\247\244\2079\270\277\3339\036\240\2329\227\240\202\267\263q\246\266W\000\025\272~\346B:$\371\004\271\334\321\2768\371\303a\272\235\n\000\272Yd\033\271%\324(9=\367f9B(w8\205\201\204\271h\350\250:\262\217 :\356\277K9\314k\336\270\373\322\2179W\tA9\204\212\201\271\231\035\023:\343A\325\2713>}\271M\037\220:;\302V\272\307\001\002:\216\356\2619\006\306\202\272e\371\3268\301w*9}\305z:\313\271\201\271\233\244\001\272\372\205\3377\227\233\n\272\334K\201\266\023j\207\272\212\361\2029\250\014\3639$o\r:\211U\031\270\277\343\210\272n^#\272\275\235\206\272H\225\203:\021\253::\274\237\001\272\353w\024\271~\222k\272L\203U9{Pw\271\232\rK\272\337@&\272O)\2749t&S:\271\375\316\271\251a\207\272u\313\0369_j\2348\200\260\010:\331\021x:xe\342\271\330\252f:G\223\010\272m\030\3168~u\266\2710\372\212\272\323t!:\026\222l\271\200q\033:g\252t\271\302\274\216\272\246\377\216:\304G}\2717\013\2569\262\021b\271\317\240\241\270i\315\025:\234\027\201\271c\270\3659gx\006:\320\320+99\206\270\271\333\325\34696\272z:\210\243Z8B>\204\270\217+k\271\331\304\332\271\200\252\020\273\031\333\202:cWF:\006A:9\"\2432\272=\203\":\232\266\034\270\275\'\204\271\023\304\363\272\3262\035:\2346\241:\337)[9\361\027\304\271\263<\3119\226\330C:!\370w:,w\\:\364\004\356\271R\310\2709\335\343Z8\356\232\3349>Mn:\013l\360\271\302j\023\272\333\004\325\271o\002\271\270?\331\001:G\2214:{\232M\271a8\026\271\236]\304:\374:\353\271s%1:\273\270\310\272*\327P\271\020s\313\267\267\303\3369\235\214O\272\333\3418\272 ?\225\270\351\260\245\270S\016\201:\350\274b9S\322\206\271\326RR\271\256\304\3109\014\326D\272\216X\226:\335\261\2268\350+\207\271E\263\235:\204\352\3537\376\273G\271\375\2454:\276x\237\266m\307X\272\240\\\3779\004\263\2268R\022W9RWl\272\275>\3449\312/\302:\215j\237:\016\347\316\270\3043D\272\352\303\245:\336&\243:m\274\344\271\033\247\2009<.u\271QW\274\271\257\0100\270[S\006\271iJ\n8\n\255]\2712\026\322\266\244\265\2549l#\337\271>\364c:\002\\\020\272)I\000:>|\014\272ll\0239\322\354\t;\266\333!\27252h\267\n\242-:\343\266\214:\376V\3037\372\037\3279\333\226Z\270\275\303\266\272?\353R9sun:\250\3546\272\251\370\2549;9]\272$\323e:\013\213\2359\311\263\002\271\256-\3638\2022\017:i2\265\270\235\220X\272eaA\271\321bW:Z\017c\272\350\327\032\272\374\367\232\271\310_.\271\345\234\023:\\\266q\272\t\217K\270v\271\2069\032\371C:\023\013t\271Z=\"\272+\317\201\270\014\345\362\271\206\331C\271\302j\243\271C\357\340\272\234\247B\271\365\340\230\271S+\005\272\027\362\016:Q>e8\232\340\2537\216\357\352\271\202+s:\222\024\303\271\270{\0209\377HE:\266\344\214\272\254\215\3269\013\365\013\271{N\3219\371\004_\272\243\217\375\271\314\324\220:>\341\031:\353\351N\272\242\323\2029\0359\267\271\037\274\202:\t\224i:Q\271\207\271[\370\2029+\305B8\323\016\025:ovP\272\256\025\2709\313I\340\271\327\316\216\272\312AP9\205\203\367:\035\\\2559p\342\317\267\364\251k\272tf\205:\010d\220:++\'\272\275O.9\224W\205\272Dx\304\271\316#k:\353\003\320\272X\223\245\270\001J\030:\005s\2379P\310\223:\344u\021:\'\367\367\265\225g\245\271\214\273\2307=\361\225\272\356Z\2378\2212\270\272I\304\016\272?\'1\272\376\251\364\271\351\214\351\2710L\002:\236\331>\272\217\326\2429\211\344\3229z`\2059\202\351\210\272\372\325\t\272|8:\272\362\363\207\272_\370A8\357\263\2727\260\266\215\271\320L\031\270\253(8:\335\355\2009\302\226\3449N\027\2549\335s\356\266\276\232\216\271\224\255s\272\251L\2748\331\20338\310\205\201\271\353\005\006:1\250n\271\265\206\341\271W7::\261\216\2669jm#:\252\036\304\2715Nc\271\350\232u:3E*:\271R\033:6\033\3519\236p\344\271k\357\2739\215\010\332\271\231\024::4\034b\271\200\034\3559\223jI\272\000]\227\2720\003f9\265F\204\267:\267r:\321U\031\272}\321\317\271\251\227\262\270D\220C\272\224\327\3469Z\211\036:\241q\3419\340\034\003:q+29cg39\363\r\213\272\020F\236\272ep\342\270p\356,:\026IE:\277\353L\272\352=\3548\006\220\267\272l\227r\271\030\n\020:\367\312\343\271\306Y\2736%=!\272z\207\235\271x\246\264:\031\320\222\272u>W\271\371\361m\272\300\212\2129\2747\225\272\375\177\2669\333\240\3418\257\214v\272\034L\340\271\361\307x\271o`\204:\251tN\272\264\215i9\310g\001\2677\306\033\272\363 \2259\031_\3038\311~Z\272\231\3466\272\002$\016\272\352\261\023:\326>{\271^\325-9z\211l9\313nL\272\377\365\024:j\255o\271\234*l9\026r4:\342\226\254\271\215\375w:\t{$\271\266\200\2019d\236\347\271\341}O\271{;#:\375\023\006\272\243\036\320\271!\231\302\271t\014\2079\243t\3509\335* \272\231\225\3508M1\246\272%\tC:pN\2469\322^\323\271\036\\A\271\220\325w\272\226,3\271\030\301\356\270,\364[6\004\035\331\267\204`$\272{K\010\271\244\3670\271\256T\032\272\231[|\272\347\277\320\271\215\237\004:`=\227\271\036\322E9\360Ai\272\002\020\375\271\"\313[\272D\303\006\272\317\017\320\271\332S\217\272vh\t:\223\3720\272\314/\341\271\205\0366:{\224.\272\322\365\2328\374\251\2239\304LV:?6\221:7\215\356\271\000,\2539|D\316\271\307\272*:\035\232\034:pU\3208\326\264&9\367V\0359T\321[:\327\210\201\271\277\307d7\320\241\007\2725\360\3107\271fZ\272\260\025\3659\026\352\3279\226ov9\327+\337\271\022\351\213\272\257\363X9\0136d\267=>(\272b\316f\267\326;}\271y\024\3179\272(\002:\003\217b9\021\016\266\271\307\364\240:\333m\n\272\004\234h\271M\362\207\271\335 i:%\220\2359\020F/:\256\250\257\267\354{\352\2711\005\221\271w\317M9\026\337\2119\207\373\2678*\314>:\244\352_\272n\250\021:JuI\272\010\310m9\007\301v9\231\351\225\271\274\220\207:\336w\221:\006\221\2149\363\036\201\271\254\337\340\270<2\202\272o)\3147B\007q9\306\354\001:?\360\203\272\303\316\277\266\211$\2569\335\203K\272\230\205\030:\227e\223\270\001\203\2539\314(j8\377;}91c\3429\245,\221\271+\272\3718\374\250/9lUr\272\241\226\2468\033KX\271p:\311:\313\003_\2722\010l\271\347j\267\271\264\020j\272\377Li\272\235\n\2718\265\374\322\270\215z\014\271T\"\3679\177o\213\271b\300\"\272x\212\254:d\372\273\271\247\235\2109\243\320u:\246\360t\271\212\202\n:\253\232\220:7\013e:\232\r\323\271/G\226:m\017,:Q\005y\270\217~\177:9\210@:\360\\y:\353\177\3759\336\20176\236\202R:\314\375\36096yF9\201\337\335\271\333#\0109qdf\271)7j:\366*\226\2710\034\211\272\374Y\201\272\325\267\2439\354(\2119\221\020\2668\376_q:v\033%\272\344\205\3609\002\302\274:\005\234\322\271\351\257\214\272\256c\2529\270\306\227\271-\261e9\302\005}\271\210`\207\271vyQ\272(\376\033\272\240VF\272\361\374\017\267\324\311\2219\250z\207\272\254H\234\272\362\214f\272F\331\3369A-\355\271\257Vj\272v\242\220\272A\202N\266\334}\222\271\325\227\3369\317\033\t:T\010F\271\216\000\205:\014\256q9\217\343\374\271>Q^\272Xxf:\221\270\345\266\371\337\200\272\266\303\3118\027\366\245:fT\214\272u\306\317\270\332\177\2278\224\006?\272\346pr\272\343\351\237\271\241\204\217\271b\201\234:*k<:\235\002Q\271\014\340\2369p\007\017\272\374\020\327\271W\267\216\2708\245\005:\337o\213\271\003g!9l\311\004:\214\"e9\331\t\2538~\264.\272}\305\367\271\214\322#:0A\3326\023\3176:\325\335J:\025\177\2419\0204\024:\300\230\205\271\263{I\272\234\375\2239\233\227\2269Xq\3519\273\204L:f\362\2619q28:\247\232E\272n]\0259\360\207%\272\202$\3638\257\217Y\272\024\233-\272_\017*\272\3134\2349wi)9?\327\001\271\227VS\267~\r\0326l`\2469O|X\270\0056\006\272\247\227\2279\372\337\3319\016L:\271Z\247P\272^\373f:\300\025\004\272\344\302E:vt\032:\376\370 9\240t\0039\207~\271\271ia\023::\023\317\271\350;r9\230\245\221\271L\30269D\n\260\271\r\253_\272u\246B9\350a\3077\256\353y:\324B\276:\267\001\237\271F\303\2209!HA\272\"\250q\271\203Q\0279\273s\254:\346\252&\271\032\221 \271\002\230\214\272T\025\265\272\231\376\3329\377k\372\271,\202\233\272\310.8\272\035zK\272k\233\3519\233\227\016\272\357\305\027\272\346FT8\302\306\026:\245\336=8\033\222%:\nc\273\271\255\034\207\272\222\211\344\271\377\t\231\267V\350a\272d3\001:{\221\340\267\334\357\034:\314[5:D\373\223\271q\t\014\272\035Sm\272/\016\2668>\306 9e\027\267\271Mj\2469\377Z\r\272\346W\225:\255\262!:\333\r\240\270mA\\:\353\321\214\272\021\202\2539\257ZO\271\265\2154:H\356\3369\222H\230\271B\177\021\272.\352\2419\301A\343\271B\34719W\235\273\271\300\014\":\250\243K: P\025\272\231\353\014\272\2456\032\271\203\252\234\272s\320\245\270\227\027V\271\230\265\322\271\251[\026:\3576.:\003\253\304\271\344\374\3309m\317\2079\201\355\2459;\237L\272\224\337\t\271\214\375\r\271:\240U\270}/\035:\3706\3029i\262R\271\306\3729:\335\333*:\325y\255\271U\214\021\272n &\2724{\226\2709\35159\003n\':9w\212:X\314\006:M\007\n\272\256\31159\225\256\026:\306\2560\272\306\277\027\272A\303\372\270.\262\023:\342\342\214:\263\237\004\272U\356!:\212\320|:\374\307\242\271\253\313^\272\362\277#\272\021\'\3439\373\344\014\272|\341e\272\265\362\262\271\201F\314\267\360\241a\271\221\340\021\267\333\240\3419\202\377\231\271\006\300V:;\'>\272\342\325:\271\001n\253\2708~\232\270\221\233\273:\340\271N:@\205\027:\366\3767:^]\237\271\207\021b:\014\350\305\271\332\314\002\272\277sv\272<\221\t:\377\233?:\266Rn:\031:O:Yx\021\272\376_\\:\211\375\007\272\271d\2379\235C\3369\032\317\362\271\005*\003:\202\304\234\271\263\017K8\211\362\2149\306\245$:\333\305\251:\342?p9\326>\323:\357V\256\272\321\250\037\272|Z\3019\332\346Y\272O\210C:\363?\0039\266\210t\271\243$)\272\000\377\342\271\3538\367\271O4\2039\343\206L:\265f\30199\207\3029\334X,9\363+\247\270\022\207H\272\037_\0279d\330\257\271\274\023\212\267\246\377\004\272\347\017\3339\312\207\2469L\201\343\270\370\236\2279\2229n\271^\025\2039\210\214\2179\034\271H:\275\025J\270\327\302k9\267\364\025:\323\231L\272\325\273\0348p`n\270\377\01009\014)\263\265P\225\237\2714\306\3409Q\232\007:\3015\320\271\001\201\311\271\350\222\021\271\270\200\334\271\313\241\037\272 \001\001\271\271\003^:\034\206\227:\255\257i:\327;\3379\364\201V6\240\322\024:\0352\2719\306\221\263\271\264\200\016\2720\037p\271\206TG\2721:f7\220\346\3169 \010-7\350\033r\271=\271b9u\027$:\246\276\334\270\326\202g:E{\037\271\\\214l\271\212=5\272\354\230\367\271\261\022z\271\375\273\217:\342`0\272\304p\223\272\374\014\201\271\206M\034\272\350\350r9\001\244^\271\235?c7\366\334`:\350Q\3428\220\365W9;p\3049c\311\013:O\343\177:\231-\177\272\314\032\2349\260\002\314\2713\223\332:y^\224:>\246\245\272\321\004\301\271v% \272\030\033\2117\353i\312\271l0\2109\331z5:B\225\237\272\232\261$\271>\257\2459J\343\211\271\3035j7\376\353v\272\036\0335\271\034\006\3019\305e\035:\027^\217:,\200\2158\003\242\3229.?=\271W\273\203\272(\376y\270\237\007\0139\372R\005:\003\000\376\271E\001\205\271\3368\375\271$\365\337\272n\"\2039\352t\342\271\254<\n:aJ\030\272!\323\377\272\3074\242\271\306\2655:\257\270\245\271yM\2609\010\260\2029t\037\3639,$\262\271$_\2229\031\361X9.5\2239\302\247\272\271\267\033\31297[19\314\200\236:\'.k\272G\370\r:\344\345\t\271\004\013\005\272\344\030\034\271\277\265\235\270\370\345\235\272\303\217\323\270Q\325\3678%l{7\0013\346\271\200\034x\270K12\272 \247S:*_c\270\250\317+\272\317_\037\271\337\231:\271\231m\013:\340\336\3269\364\245\':\263x\035\2722\334.\272\241\2034:?V\223\271\365\005\365\271\201\213b:\2275\003:\342\267\214:\016\257o:\016\346H9N.\020:\227\246\245\271\362\213\335\271\326\344\374\271\345\344}\271a\342\236\271\252^\3229\010<\240:\330\214\027\271\262\316\3649*\366\005:W\356\262\271\376\266M\271\230!\314\270<\216\27298\203\r\272#\205\032:\273\010Z:C_\260\271\320\273\020\272\323\222\2045?W\3725\224\274\314\271q\367e:uAD\272\336io\271Al\377\267\303\230\035\2701,\2629\346kO9\350\260\2138\312\355\0169x\367\016\272N\207\274:\1778{:Te\017:\313\241\240\271\226c\2679\237\236\356\271\257\017\265\271t\223\3059L\306\2419\'\005\375\271%F\0318<L78\324\016\2429.|E\272\346\264\3739\001\332\n\271\3769`:W\351\0019}\227\204:\345\031N9\303\345p:\"M\274\271-\376Q\272j\r\005:\345\"\0165\354#\371\2716\255\204\271\315+\244\265\254\232\253\272z\200\200:\267y\250:\233 \3639\236\004\026:\0102\365\271$\207\314\270\263\313{\272\214\2334:m\310\032:\203\"\210\272\244G|\271u\211\010:\327\23579N\337\037\272\250\226\3759\256D\316\270fB)9\032C\360\270U:\307\271\227\000\222\271\352n1:$\303\301\271\367\261\347\271\334xw:\276\374\2269\3527\005\272\235G\'9V\272e9\000%P\272\013f\026:\242\233\3418\202y\n\272VA\026\270Z\0171\271\263\324:\270n\262X\272*\243H\272$\036*\272w?;:M\003\2249\222\304\213\267\330~\205:k>\3019\375\003\2209)\003\221\272\263z\2079\000\237\025\265\025\352\223\272\327\275\307\272\206&*\272\251YE\272\237\357\212:P\242\2147\267Q+8h\207x\271\247\240\311:\313,\3008\230\362\001:4\366\3729xY\2419[\311\031\272$\2027:[\022\274\272O\245\021:\006`\231\271\020v\032\272\177\326\030\272\351\3758\270H\2412:\304}\002\272eX\2207\373\226:\272PBV\272p\365\204:\220\033n\271 Aq\2724\347n9\"\220\314\271\232-\2279\335\300\3469\345\"O\271\252\023\347\271\021\t\033\272\242\231I9\341e\234\267\344\205\2079H):\271\001b\200:\033$p\272\304\236\214\272q\300i\271Z\201\3259\253F-\271\306d\3629~z\005:\331s|\271|\312\31699[\300\271\265\245A8\276\276\3159)\272\207\272\200T%\272ig\235\272\365\300\314\271\023dI\271\362\355v9!\3412\272r\257%\272\364\036\343\271(6W\270\005\363k9H\300M9\013\343\004:\263\225\017:Y!\032\270h\310\2549\3411\316\271\313\351\0079\220\"\034:\256\276\3119\375\034\r\271\305\242\033\272\\n\333\270Q\311G9\273C\364\271\027\222\216\271]\231\230:HT(\272\344\321\206\270m\272\0218\353\3139:\314/\n:\2623\023\272Q\363\260\272J\r\2109\361\205u\271<\262\2328>\027\2728\357\221 \271mrA:\347\340U\271\223\006x:O)\336\267\253\331\026\272\025J?\272O\353\205:\004\267\213:\235.h\272\036\351\343\271G\251\010\272\000\354\3437\361\324\n:n\n\2129\022\367\2109exH:\233Q\2509\212\271.:\025Z\221\271\366\317s\272\027\361\2519\356H;\271\242\353Y\272\216\202T:w\317B\271&]\236:os!\271\006W\370\271\374WD\271Sn\220\272\247x19\"\251n\271\201\273\3658X\324\267\270\021\312\320\271K~\014\272\200\343\241\272o\014\003:\341\355\211\272\177\260f\272\027\002\210:\317\340\004:\334-,:\327\320S7\331\227\2039\232\202\037:ii\3658T\252\3779>\275W:d\350\262:W\235\025\272\331p,\272\003\n-\272k)\262\271\257G=\2718J\256\271\211\303\2319\323D\277\271\276\220\013:S\307\2109x\225G:m\373R:]\240\223:l \231\272\254\0162:\234\365/\272\244|y9\233l\2779\250\224\220\272\305I\21651H\007\272\357\222\2719\2731\3168\335|\240:\010\264 :z\205\2349\250\2266:\304\347\002\272\366\265M:\350\351\246:\333p\211\272\210\\\025\272\245^+\272\026\312\214\271j\207[:\274<\300\271y\325\345\271^}\005\272\036\324\006:\362\237\274\271R92\271\321K\264\2726\t1:d\352\':\257\203\313\271\312.h9%\016\251\271\270B\267\2717\025\032:\206R\35791\315w\272\315\014\3729\376\253\025\267\017\232~\272u)\233\272\244\t9\267\307|#\272\2139 \272\322\023\255\272c[\004:\317\250\255:\037\27259\\\305[::3\2169\036\t\026:\000\362i\272\200\021\244\272vJC\272y\251\310\271k\303\2149\017\373e:r\372\020\272\273\306\237:&?\2349KS\3559\341\250\2419\213\274c\272\377\002\206:\025!1\271\223K\311\270\336\033\313\2714\205F\271H8z9\265\251O\272h~J\2723\267\\:Q\010u\271Pw\":[v\3079}2\2519qe\3069P\246R\272\355;\216\272T\240\2657\016\271\347\267\214s{9\375@\212\267`\363\263\271\347B\001:\270\036\002\272-I\353\271\275i\222:\224C\331\271y3\022\272\031@U:\332\370\2629\255\366.\271\000e\014\270#\001p\272)f\2329We\207:\232*z8\244\251\234\271\313\214\r:?\325 8j\3071:\350\342x:\007\215\3709\336\2206\272Y\236\243:\302\200+:x4\014:\307K\325\271#\037\010\272\323\352\005\270L\332J:\322\007\351\271#\225z\272\332\332\2279\374^\003\271n\257d\271\334\220\033:\370\r\031\270w\rE9\347\034\373\271\037\020\"\271z\317p\271\304<D\272\266\030?\272\300\213\3379\277\201\034:\272\330\026:\375\311\3729\326\323\t\272Y\213\2419rF\2779\237*\372\271l\357Q\272\366\035\251:\240\017^\272\247\022\2479\346\000\002:\366\023#:\t\256W\267\336o+\272\341\344o:\203i\240\271\'f9\272\362\366\221\271\t\273V\272y\261\210:c\257\020:\210+\327\271\215J\3129\273\351R:\243\216\024\272\356\302\0009\363I\0209\233\222\214\271\273\213\3269\232y\222:8\302\2719\373c\2439d\347\226\272.\014\306\271\353\200\3109WU\303:|\341\2479\247\310X9\343d\340\271n?\250\272\235\237\215:\356\231P\272\203y\2019\263\247\006\272[\025r\271J\300\033\271\212Lz\271\000\313N\272\023\346\230\271?\316\3648\003\315\275\271\372\273\002\271\304\3031\272\036bN\272A\236$\271]=\001:\335\017\2748\210:O9b\252\236\272\310jm\272\327K\3659\211\232?:(\304A:\331;79\265\026\214\272\3301\021:\357\364w\272\326D\002\272\330\301\014:\220=F:\230\0140\272\376\353{\271KT\227\270\306\252\3448\n\t\244\271\356\203\257\271G\330$\271\355\230\213\271f\235\262:\261\245\3479\204&\2039\020\322\027\272\r\254\231:Vw\3279\177\023\033:#m\3619\017J\3149$\370q9\"EC9\252c\210:\374&\236:\343\211\313\270\324Y*:\241\321\362\271\363\013\333\270\265\320\274\270\1776\232\271\340]!\271\022\304\232:$\254\355\271\230\270\013\272(42\272\264\365\3738\361\242+\272\362\275v\2719)\3118\207\301[\272\323\2164:{i\346\271\257Q\320\271\306\036\005:\023\033\3039\272\265\2229M\336.\272\247\2252:\342\236\r:\275^\2749\000\205\240\271\350\212c\272\245u\222\271\242}\225\272RD48\2408-9\3327\000\272Z|\3249a\221+\272\271\363\370\2676\347\014\272\323Tx\270\237\342s\272\2010\3279\267\332\2329\227\005B9\037I\311\272h\336\0349\215%V9\360\201,9[\375\2029e]\020\2718\252\3628T\255F\271{\272\27697\200\017\272\270j\353\271\200K\013\272\030A\3029)\\T\272\220\304:9C\005C\271\254\262\3669\374\320\003:(\005\227\271\362:m\272\2106\225:\2444\2449\341\230\224\272\223}\235\272\222\255~:\201\337D\272\302P`\272\377\216\0169d(\033\272\t\213\250\271\317\006\031\270M\035D9=jg:%\257\222\272\313\263G\272\334\361\364\271\366\326\n\272\014\213,\272ZO\262\271`\261 :\005\270|9\222>\257\271\230.\214:6\246S\272\246\r :6W$:}G\0039\256w\3479\267\227H:\247\250=:\\%*\270Ug\233:F\270\2428\306<\234\271\337\365\031\2714^\237:9\265\3138\3408i:\312\334<9\261M&\272\207\\a:\257\320\262\270\310\305\006\272\026\300\006:n\016\314\271\000$v\272\366\247\177:\274XU9\202F\0038\354\250\030:\t\300-93\322\0378]\\\250\271Bi_:\344\257\001:\346\016\2608\367\322M\272p<\030\272\212\270\366:\033/\024\272\'\302Q:\241\376e\271d\330\02192U\2739F\177\2249\201\013\322\271\276)\322\270\311{\036\271\363\362\206:>\"Q\271\3510\344\271\276\033c:\354\342\034\272jB\3048\223b\3529z\240\3169\253\271o:mv\252\266R\302\016\271\206\327\0069\020\254\2229\305\276\212:\367\377\270:_\233\004\270\336\264\20390\322\3659\234FK\272\023\353\2329\270$i\270d,\2759\251?\033\272\210\203\3459\225\202]9,\025\3749\336\023 :~\273o:\026\273*\272&\254\003:1B\2648\031\374#:}$\023:`\321A9\237&\022:\252h7\272(g\305:7n\035:\355\275\3315E0\3019\263U\363\271\305\207\030\270\253\326\271\271\202\321\205\272\327\335\2058\216\366\2079z-\027:\017\014\241\272\262\202\2228\254\256\236\270z\321N\272\022Y[\270\311qE:\242\003\311\270;\216\305\2708\253\274\271\027\245\2517l3\337\271\351P\326\271}\000i\272\031\351\276\270\236\023O\271\204\254?9mN\3018UG\002:\030\025\030:\234x\300:j\270\2149\\\350L\271ZGV:\364c\203\270%\327\351\271\225hG:\016-W\271\002&\032:\375`N9\005i\2618\250\354\234\270\270\233\305\271\236|\004:\354\233)\272\350\276n\270a\034\3509\364\345\3059\203\333\026:\342\202P\272Z\271\3479\362b\327\271F\212\320\271|]e\272\352\376z:\000$\205\272\346\206\2709\001oA\272\346\257\003:\327\256\2218\361\201\202\271\345\016\271:6Q\225\270m\347\006\270[B\343\271V\200\2449\357H\273:`\177\273\271S\350\235\271\010\337\3329\264\231\t\271[\306\244:\247D\337\270\006y\203\271\007\211\252\271\246<\2539\030\324\244\271\376\006:9\335\363b\272\003\306\231:\352\356\244\271\004\365n:\2227s\271\211\005(9\023*\227\270\346\215-:`\237\2418\365\243\360\271p\236\3626~\234\323:a\221\3279\307\362\010\272\271\331\024:\r\202v\272\311<\2609C\211\217\272\375/\3519\271\326h\272\256\373\031\271\246\347\3069\244\326\207\272|\222u\271\274\227\256\272\304\027\014:\265\004M:`N\356\271\246\006\2179z;f9y(\3509P\243\2429\205\205\304\271\026\377F:\240\177$9#\360\357\271\215\275\3138A\\\":\333s\2729\270u\220:\0373[\272\306!\0078O\322\221\271\023)\2469\\\236>\272\200k\2439\022$\t\272\000\375j\272\266\316\n:n\205\302\271\337\022v:\326\216c\272\364\332\210\272X\025\014\272\371\323\323\271\326J\2519\025%W\270\363}\033\272\2419\014\272\236mm\270\324\224\2759\032\321\030\272c*\335\272[K\231\272\t\367\203:\215T\323\271\233\230c\272\n$\330\271\3736^9\366\265-\272\340|\366\271C\362\334\270\345\355\332\270_$R9yt\212:oj\205:O-\37294(\310\271\242?\":d\241\007\272\200x\027\272\177\346\\\271k\022\206:7m\2009\031\260\214:jC\3159\220\360G\271\231#\220\271\231+\3068]\215\221\272\260\323\334\271\316\265\343\271o\216\241\271gD\333\271\225\212\2738\005\334\221:`\255 \272~\345\2216>PC:\347jl\271\277Nk:-\257\261\272\323D\252\271Y\235\2719\006\276!:_\374\2058\256\362x9S\034\005\272aJ=:\343&\016:aJ\3449\211\206\254\272\004\214\0058\332\317~8m$%\272^VF\272\204\242\036\271y\210\3279\245\321\324\272g\365\007\2724\013\2668\271\014\245\271Gy|\271Fr\204\272\371\317Q8\026\341o\271\313\213\356\271\206\314Q9\316R\3339-\251:\272\342H\005\271\005\241\025:\007\211\2108`\245\202:K\003\3009Q\3433\272\233\326\026\272e\205\207\271\223\343m\271#&\017\271\207\233\22096\345\005\272\361\372\016\272\266\242\021\272\304\022\26389\347\245\271H\226\0169\261B!\271B\377795}i\272\320\227\3358\303}\3428\311W\3368\252\261u\271\211\016\240\270\211\336\010:\205\304\224\272\313c\3309\027\023a:\351\354\2179\220\233\214\271\315\360\2119A\265\035:M\310\2519AK\372\271\373\t\2057\337\r\2718o\026\3229+\337\251:\031\014\225:0p\340\2715\021\3569\374\306!\272\271\205\267\267\336\257q\272\322\201{\272\270\304l\272D\213\374\272\200\326k\272\272\353\215\271\364 \005\271>\274\0168Kf\231\2715\204\202\272g\346q\272cn\2048\357\007\213\270\374\311n\272\2500t:\326f|\272\376\257\3376L\227\2779\203\002b\272\220@\2618p]\037\271*,}\2707\336=\272\245\004\214\271F`\216:\213\230\2709[@\212\271f\245\004:\255\206\3139\246\340g\272\355^\3579c \3069K\203(\272\"b\2469\345UF9\010\233\347\272=\010,\272s\315A8:Q8\272(}\2739\020{\263\271\2067\222\272\211\347a\270\312\360\270\271xP\344\271\005\367.:+\204(:\217\220|\271\353\340\036:j\312O\272=\241\3138\371\2365:\010\365)\271\366\013\2738\251\035\215\2715gI\272\n\241\223\272R!\3719Ao\216\272\344\017\2028\033^\351\271\tSR77\020\0368<+\256::\221d:\'\264\213\270\371\203\321:f\3164\270\034v\2369\366\217\002;\2574q:<(\r:\0018@:\317By\272\271\006E\271\356`\3208\205PQ9p\031\3738\326\360\3739\214_c\272\275r\2678\235\324\243\271XC\2629\207\242B\272\331\036^9\213`\267:\257\010\023:\3165\3029O,B9c\202&8vi\006\272n\260\2619\345\2718\272o\203[9M&%\2661{\231:\217\371\232\272\310\203\2629\337\223]:\"0\002:K\361\1777 \003\n9\010>\2318}\357\336\271\033Ny9\372\004F\271\216y\2109h\204\n\272\274em\272\030\307\253\271@$\210:\261\225}\272\256\203\2609#]\250\270g0q\265\017i;9llv:\327\366<\272\3354\225\271\264}\t\273<T\2529\254\226\321\271(\227\3149\221\276\3379\330\310\2069\250\365\227\271Q9\351\271\035h\013\272Y\215\217\271+_\306\271\332\322\2349\360\250=\272\314\226R9\'\033\025\271\311)\366\271l\246P9\341wC9\177\205\3769\360l::\017\3000:\243\010\3248\'\002\242\271@v\217:\321\3252:~kj9\032\255B\270\332d\0009|\261\017\267\321\356\332\271E_\210:\271\'S9\005\365P:\tX(\270\357\235\3048\200\337\357\271\001\213O\271\246\331\000:\362\240\3109\366\245\233\271I=\230:\271\201r\27296\245\271\014\005(9\3712v8\034\247\241\271\251\366\020:\201\0132:\370b;\267\225\215j:\304\3635:\301U\2049\352\216l\271\206\002O\272\313\267\2019/\353\230:\210\320\232:^H\274\271}b.\272)\016\2439{\320\230\272Jh\002:\326\227s\272\035b^:\211\027\352\271J4 \271=D9\272$\004K:${e\272\355\036!\272x\240<9\2322\2448y,\211:{\205+8$N\2628\331Y\217\272\341\331M8qa\266\271\016\230\3407`\013\216\271\"\230\3718:\227\r\272\204&\307\271\367\350\2677\320\225r\272\323\235\3039\323e0\270\023\000%8\373\342\210\270\376v\2039[\346\231\271\320\317\2747\313\246\2138\360\031S\271\022m+:\267\377\t9\353\2747\270\213\r\251\270\231\205\322\271\254=3:[!\022\272\325\025\226:\035\016\2229M\007\353\271\231\223\367\271\370\354\010:\033\347\3759\2749o\272Y\315i9\343\307-:N+=:e\207\237\272\355r\2359\367;\000\272\n\361\214:>/\213\272v\307\2679h\205\205:\350\320\204\271f\217\027\271M\177\275:\031rl8\245\347\036\271T\211\2669\271\033\302\270j\242%\272\020\023\t:\225\270\2209\343\226M8\314p\n\272\n\234N\272>\312\214\272\351\353\3469\216Y\223\272\375\301D:E\212@:q\333M:\207\204+\272\251\3126\272\322K%:q\026\006\271\303\376+\272\177\342\2538\3472v\271\357\270\364\271f\373\2149\254\034\356\271\331a\247\270\367\344\2108\304S\202\272\275\030\205\271I\241\2579\275\225\220:6\361?7\t\016\004\272\005\234U\272\201\252h\271\'\004\3779$C\2458\256l\2347\276U\017\272\3736\0077\374;\352\271f\334\034\271\3061$\272`<\177\271M\265\030:-\303\320\270ehy\271\005\275\2279\235\3232:\251%;\272r\355\032:\233\207\212:\207\0325\272\311\'\20598\356J\271=\245V\272\243]\223\272y\346\253\267R\355\370\271^m\014:\006]\200\272\336\260\032:\237\005\2318\0021\003\272\230vt8\213\"\036\271\302\315\210\272 \246\021:\020`\217\270\242\345$\272\306(-\271\261\236\213\271\313\034\0229t\031\014\271\035\366\035: ^\2039\313\313\014:\001\267\017\272\022u\204\271z\332>:\3210\261:\221\271\\95s\3459{\334\r\272\234\n}\272)\321\037\271\310u\327\270\030\300\3379\0034=\271F\340\200:\316y\034\272\\\212<\272\223v\202\271\016\220>\272\322\233\2339\326\234)\2704}\357\271\016R\2227\024\313<9m\230\331\272\352\326\'8)z:\271\024&\2619\227\004\271\270\246\250\3139a\365?9j\203<\271\251j\335\267\353\261\253\272z\017\347\272Xs99Uc;:\305\220\245\271\307\365\001:\342\3022:\272s\350\271\32190\272\27765:!\257\250\271I\324\255\271\266\256\217\272L\372\"\271*r\035\271\262\336P\2721\361\214\271A\254\200\2724}\022:\351\266\2579\233\326\016\271QX\210\270\376\360\345\271\316\375\0007\347\261p\271R)\260\272]\256\211\270\245)\2418\367\003\212\270\312i\3139\217\364\343\271W+\3439\216f\212:\341\235\202\272PX\2659`~\\\271(<\2379\344\310\256\271\355\313\3049_\340\237\271\305\203\026:z\24129\266\237\001\271\020\037\245:\245k\005\271\365y\2439\2175\021\272\315\030/\272\320n;\272\372\312\3259Y\360C\272@\305\272\267FC\2027t\205q:\315\031U\271\025\027\267\271\037W\021\272s+\245\272\'\274_\272\024\"8\272\030\255\2259L5\3477_\t\241\271Tc\010:(*\242\267\2106y9dN\301\271U\252\300\271\345&,9\357\203\212\272\001)\323\271\207\0038:\3473\213:y\013I\272\3009\3446\034W\3069i\001<:\257]\316\271\336)\3159BS\3379\005+\"7\244=\245:5\214\220\272)\303!\272v\273p\272\331\032\272\271\211\216D\271,%\343\271\314\266f9"
      }
    }
  }
}
node {
  name: "local/pc_dense//w"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_dense//w/Assign"
  op: "Assign"
  input: "local/pc_dense//w"
  input: "local/pc_dense//w/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_dense//w/read"
  op: "Identity"
  input: "local/pc_dense//w"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_dense//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/pc_dense//b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_dense//b/Assign"
  op: "Assign"
  input: "local/pc_dense//b"
  input: "local/pc_dense//b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_dense//b/read"
  op: "Identity"
  input: "local/pc_dense//b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_4"
  op: "MatMul"
  input: "local/Reshape_8"
  input: "local/pc_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_4"
  op: "Add"
  input: "local/MatMul_4"
  input: "local/pc_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_8"
  op: "Elu"
  input: "local/add_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_10/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\006\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/Reshape_10"
  op: "Reshape"
  input: "local/Elu_8"
  input: "local/Reshape_10/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/Shape"
  op: "Shape"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/pc_advantage/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/pc_advantage/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_advantage/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_advantage/strided_slice"
  op: "StridedSlice"
  input: "local/pc_advantage/Shape"
  input: "local/pc_advantage/strided_slice/stack"
  input: "local/pc_advantage/strided_slice/stack_1"
  input: "local/pc_advantage/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/pc_advantage/stack/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "local/pc_advantage/stack/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_advantage/stack/3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "local/pc_advantage/stack"
  op: "Pack"
  input: "local/pc_advantage/strided_slice"
  input: "local/pc_advantage/stack/1"
  input: "local/pc_advantage/stack/2"
  input: "local/pc_advantage/stack/3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\004\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20412415266036987
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20412415266036987
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1341
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/max"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/RandomUniform"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Initializer/random_uniform"
  op: "Add"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/mul"
  input: "local/pc_advantage/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_advantage/d_W/Assign"
  op: "Assign"
  input: "local/pc_advantage/d_W"
  input: "local/pc_advantage/d_W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_advantage/d_W/read"
  op: "Identity"
  input: "local/pc_advantage/d_W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/pc_advantage/d_b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_advantage/d_b/Assign"
  op: "Assign"
  input: "local/pc_advantage/d_b"
  input: "local/pc_advantage/d_b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_advantage/d_b/read"
  op: "Identity"
  input: "local/pc_advantage/d_b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_advantage/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "local/pc_advantage/stack"
  input: "local/pc_advantage/d_W/read"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_advantage/add"
  op: "Add"
  input: "local/pc_advantage/conv2d_transpose"
  input: "local/pc_advantage/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/Shape"
  op: "Shape"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "local/pc_value_fn/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "local/pc_value_fn/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_value_fn/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_value_fn/strided_slice"
  op: "StridedSlice"
  input: "local/pc_value_fn/Shape"
  input: "local/pc_value_fn/strided_slice/stack"
  input: "local/pc_value_fn/strided_slice/stack_1"
  input: "local/pc_value_fn/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "local/pc_value_fn/stack/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "local/pc_value_fn/stack/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_value_fn/stack/3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "local/pc_value_fn/stack"
  op: "Pack"
  input: "local/pc_value_fn/strided_slice"
  input: "local/pc_value_fn/stack/1"
  input: "local/pc_value_fn/stack/2"
  input: "local/pc_value_fn/stack/3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21320071816444397
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21320071816444397
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 398764591
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1366
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/sub"
  op: "Sub"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/max"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform/mul"
  op: "Mul"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/RandomUniform"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Initializer/random_uniform"
  op: "Add"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/mul"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_W"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/Assign"
  op: "Assign"
  input: "local/pc_value_fn/d_W"
  input: "local/pc_value_fn/d_W/Initializer/random_uniform"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_value_fn/d_W/read"
  op: "Identity"
  input: "local/pc_value_fn/d_W"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/pc_value_fn/d_b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/pc_value_fn/d_b/Assign"
  op: "Assign"
  input: "local/pc_value_fn/d_b"
  input: "local/pc_value_fn/d_b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_value_fn/d_b/read"
  op: "Identity"
  input: "local/pc_value_fn/d_b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/pc_value_fn/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "local/pc_value_fn/stack"
  input: "local/pc_value_fn/d_W/read"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/pc_value_fn/add"
  op: "Add"
  input: "local/pc_value_fn/conv2d_transpose"
  input: "local/pc_value_fn/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "local/Mean_1/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "local/Mean_1"
  op: "Mean"
  input: "local/pc_advantage/add"
  input: "local/Mean_1/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "local/add_5"
  op: "Add"
  input: "local/pc_value_fn/add"
  input: "local/pc_advantage/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/sub_2"
  op: "Sub"
  input: "local/add_5"
  input: "local/Mean_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "local/rp_batch_size"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "local/conv2d_1_2/Conv2D"
  op: "Conv2D"
  input: "local/rp_state_in_external_pl"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_1_2/add"
  op: "Add"
  input: "local/conv2d_1_2/Conv2D"
  input: "local/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_9"
  op: "Elu"
  input: "local/conv2d_1_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_2_2/Conv2D"
  op: "Conv2D"
  input: "local/Elu_9"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_2_2/add"
  op: "Add"
  input: "local/conv2d_2_2/Conv2D"
  input: "local/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_10"
  op: "Elu"
  input: "local/conv2d_2_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_3_2/Conv2D"
  op: "Conv2D"
  input: "local/Elu_10"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_3_2/add"
  op: "Add"
  input: "local/conv2d_3_2/Conv2D"
  input: "local/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_11"
  op: "Elu"
  input: "local/conv2d_3_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/conv2d_4_2/Conv2D"
  op: "Conv2D"
  input: "local/Elu_11"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "local/conv2d_4_2/add"
  op: "Add"
  input: "local/conv2d_4_2/Conv2D"
  input: "local/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_12"
  op: "Elu"
  input: "local/conv2d_4_2/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "local/Reshape_11/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "local/Reshape_11/shape"
  op: "Pack"
  input: "local/rp_batch_size"
  input: "local/Reshape_11/shape/1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "local/Reshape_11"
  op: "Reshape"
  input: "local/Elu_12"
  input: "local/Reshape_11/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "local/rp_dense//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\245\232n\272|\351^:\271\264p:\372=Y9[\241R:\272V9:\367La\272\360\3132\271\256\205\010\266S\224\023\272\370\351S\272\201\241\202:\016H\2549\000Q\247\271K\3670\271\300\227\3137\031\017\\9\356\251\033\272\016@{:\302\204_9\225\335\006\272\233\260\240\272\206O\022\272P\2112\272\342\336r9\336|3\272$K\275\270\276\210\025:\352\266a:\006R\313\271\234m\273:\277\342\236\271\n\245\371\271z~\033:5\241\3239C\223V9E2::\216\255%\272\235\220\343\271\345bA:\334y\361:,>\024\2720L\263\272\334x\27595i\3009d\317\3419v\037-:\r\250\3729\374\027\357\272LQ\252:\204\250/\272/C\254\271=\320\217:\'<_\265\001A\265\272\336\372\351\271\304P\237\272\\\316Z\272\247m\235\270\264f\251\271\233\216\2749\325\312R\272\325\302k9\324L\027:\t\333\026:\0223u\271\263O\3139#Y-7\300R\227\272\343\003L\271r\224\n\272MB\310:\257\374\244:~^\014\271\256\267\3149\347\277\222\272=\'\3719K\005\273\272W\377\0379h\022b9\037\017\262\271S\000\2439\001\360d\271;&\3249\3557u9n\24058~,\177\272\273H%\272f\352e:g\306\257:TZq:\t\212\207\272&\3505:\315\240N:w\276\241\271|\376\031:\016p\262\271B\275#\272\037\n\":\002\316\037\272\311\217@\272Tw\33195\341&:\230\310A:T\360\267\271\'\332\2439\202\201\252\272\326q\302:\206p#\272\245\215\300\272y\302\306\271f\215\371\271h\317\315\271\210\025\303:\353Z\3529\317\323\222\272x/\2728\252\200\177\272/F\203:$+1:\205\016\214\272\366\214\300\271\237\275\2179\231T\243\272\271\016\0329a$(9\004\363\246\272\214p\0259\213\262\0018\231\372i\271TD\021:O\031\3169\344V\234\272@C\310\272\341P\216\272+J\256\272\370\255\322:\234\306\3229\327K\213\271(&R\271x\225\005\272\023\352\0269\177\t\202:\226\232\361\271\316K\365\271w5\":\360\1770\272\3037\3538h\227\305\271\303\265\3079\002\256%\271\016\032\0269\365|\2749\0167\2549{{O\272\377\373r8.\234\2279\375\254\2729J\371Y\272\344\177\321\272#~Z:\310\373m\272\004\302\366\270\2556\3138J\364\203\270\006\266^\272Ci\226\2710\343\207\272\375\265h:\210\302\3069\2568\3708\035\374\270:c\246\3139\244\213\217\271\3048\227\271\234\024\314\271\002\n-\271\301)H:\356\301\3719\354\243\2569\223:\315\271\354?\302:jL\227\271\351\"4\2719\252\302\271\t\357\021\272\344|\246:\212\033\n\2721\310\3678\3104\023\272H\273`\270\330\314\2049TKB\272\207\014\2729\302}V:\376\323I\2725\356y:\334j\3659\211\'\013\272\022r\323\271\245\331\007\272|`Z:~\347L9\272\335\2009\370Ht\272\376\340\027:S\302\2618\036\326u9\322p\2579z/\2159\272a\330\272}\277\260\270&\215\205\271\227\206\317\271\'\326\203\272\313,\2549/\266\2466\353\322\242\271\000\271\232\272&\260.\272p\357\276\271G\230#:\201\310\211:<h\330\270\010\\\240\271bo\370\271M\307\3539PS%\272b\324E\272\372N\312\270\353<c9\227\274\260\271\360\t\260\271\224\300\201\271FH\022\272s\206A:,\202}\272\'4\334\271\265f\304\271\377J\267\270\002\232\254\272\223\014\263\272\210\257=:bh\252\272\257\002\206\272S\036-:\346\370\030\272\313+\3609\026\243c\272q!4\272\347\016\204:y\205c8\032\351)\272\330f\227\272\2576\325\271\362w\303\271\027\nQ\270\302\361\030:Z\243\325\272\033\211%8\203.\225\27241\321\2703XH:\346\2264\272\024\2166:Z\200j\272a\210\360\270Z.\026\272\301\275.\272\262\216]\270U\261\2318\216)\2779p\323J\272n\036G:\2505\3039\037O\311\271\356g\0019\332v{\272J\215\201:\201\214\220\272\374\003~9{C\3679\363\323\314:|\274y\272Dk\227:5\364x:\265\343\3079\265\350S\272K\230\023\272;\252\2639z\223\274\271\237\333\245\272\343\022\032:\275\033=:\314\224\"\272S\243\003\272a\341\3279\351\006\227:Z\367\2159\004^\207:=\252w99$\3079\261\372R7\3348O\272v\222\3759`\035\':Nf}:\332#H9\236\3016\271\306m\3679\214\325B9&4D:\320mc\272\257\004\374\270<\262\355\271\016\367\2219\304\315\265\271N\354}9Z\354\220:\213\277.\272Z\020\275:?Xq\271\324;s\272\227Q\211\272a\361S\270\266\007\230\271\353\217x\272\274\327\252:W\266\004;\025\360\022:\r5?\272\252\233\3749\177\002^8oy\3669\352+m\271\"\370\202:?\'\347\271?&\3149\2269\331:\014\262\3729\264\342{\272\026E\322\272\200yW\272\0350\0219V\205\3269\r\275=\271F\314\026:ezM\271\033FK9wg\360\271\017d15\366\202\031\27122\376\271gf1:\035\247\3779\236\253\003\273\305\214\032\271\340\006\320:!\330U\2726\330\006\272 \247\273\272\276\303A\270pD\230\272\2536\254\271P\342\027:\0176\355:I\334\257:B\231p:T4\3629\324\\\342\271\377r\310\271\355\352\3709\226W~\271\0201\2648KF\353\270\\S\2368iS\252\271\t\\\3069\226\034\0228\225\375::\024\r\1779X-\3759\251D\311\272L\233\3248\347\214\3079\\p\304:\235~:\272yk\2618Qw6\272t\222\250\271i3z:\270z\"\272Y\274\254\270\301}\227:\027\336o:\332\322\316\270\346F\243\271Kg\255\272\021\222\211\272\001\254G9RT\2548^\236 \272\031:\032\272\206\276\022:\022\371\336\270^\217):\304\274\0248\372?7\272?L>:\317\365\213:\264\363\3548#\214\206\272\020\334+7\262\362I\272\3179\240\270q\366\205\271\315\265\3578\2257K\272\\\353\365\271\320\261\3549-o\036:/\244\352\270\234] \272w`J:G\265\233:7\233e7\202\231\037\272\324\001Y:\244G\213\272b\247\2479G\013\315:~t*\272:\034y\272\345c\334\2703\240\312\271V\276\2019\273EY\272\367\220\273\2712\360G8lO\213\272<\205\354\270\007\303\315\271\366\3612\272\tGj\272\274\21578\007\241\341\271\340b\034;xx\250\272\364\371\210\272\010\367\235\271\366R3\272\266T%\272\305\023\2559\334%y9R\261P9/\275\2549\345\271k:\376\362\311\272\237=\212:\327\345\2559~\365%9\351\222V\272\021\016\365\270K\022Y\272sLR\272M\034\0359\312M\r\272{qI:\373T\362\270\253\307\300\272`R\257:\275G\024\272\362\276\001\271\316x2\270\231\212\364\270,x\206:\303~Y\271&\3732:\350^\250\272\201m\"\272\372\n\201\272\244\237\204\272\332\276\2127\317\214E:(\315\301\271{\034\2039\017\2255:\327\206\366\272\207\2375:\327\362\0259\222 \2379\342\323\3537d\255\200\271\274\013\200\272?\223\\:\321\000\355\271\377\310&:\340\033\006\273x.\273:Y>\3619\343\307\3259\253\272\363\271\034\326\201:Q-\342\270\211\336\246:wt\350\270\263\221\022:J\033\034\272\261,\233\272\0348\335\271\262\232\2359\345X\307:\345\207\2039\345\022\234:\342\024\033:\335\200-7d\0001\271\010\2440\272*e\356\271RX\3349\nS\200:\r\237\357\270\006zz\272-\257\207:\t\351L:\022\311\016\273\017\301\3047\330\244\314\271\272\277J:!fv\271 w\366\271\257\337v\271\030\240\207:\356l\272\272N\334\345\271\331\265\224\272\024\371\211\272-\2117:1\205\2079;\032\231:\326\354]\272\212L\0238\303g\2359u\273]\272\320\315\211:Q\004O\272\352\244\2109\002\rK:cn\262:\350\241\307\272\025LY\272Yh\3749\361di\272\001\200\031:\036PW:\35225\271\006\302\204\272ri\242\272Nh\213:\227\351\274\271Q\177\0368\016w\375:\016\017\333\271\222\263Z9\032\323\301\271\032\212\325:\236\000\267\267\324C\2179\004(\271\271p\n\033:\216\214\022\272(\331\216:x\3149\270\240\375\312\272\023j\2038\2707b\272\026\310\024\272W\273\r:\331\200\031:4\314\3259\000\3035:\357\332\":\\\302\3569\030\263\2209gF\003\272t8f\270eG\261:\320\010T\272\252H\26197p\327:p=B:D\312.\271\217\307\2227\312\021\013\272\000\203\310:\276\327\2519o\360\022\271\344E\2639Gz\0239K\022\260\2720\321e8\t!\2128\311b\207:I\313\215\271E\246\265\271\020PP83q\3348\250\270\3639\302\325\234\271ms=:\342\205\014:\301\212_8l\024\201\272\306\206\023\272\301\277`\270\200j\2378\327}\036\272\241\200\2679\234h\0267#u\2738B\372\346\271\361r9\272)\216d:d)\212:\236\020D:\330\377x\2712\314\246\271r\237\223\272\277q\216\272\023\010\363\270es\37576\t\014\271c\345S\272\"\320\350\271V\030>\272\325)\267\271t4\351\271\212W\006:}x\2709DJY7\345kL9[+\273\272C\031\030:\222\376\020:\321\262\224\271\212\201\r:FL\010\272t\270\"\272\217\007%9\260\266d\271\"\210\351\272\253\234X9\277\221\203\272\275TO\272\032\222\226\272\254,\272\272<\256\0329i\234\n:\370\327\332\271\301.u\271T\010^:\353\016y\272\016\024\3619[$^\272\207\301\0319\355\n+:\270\376\265\271\307kk\272\326\001V\272\231B\243\270F\031\311:\303U\006\271\233\313\240:\325\344m:,K\213:s\332\\\271\027%\343\270\322\311{\271?FR:\013DO:\366\257\"\272\211\374\262\272Xov:\216\0144\270\'\230B\272\023\327X:d\240O\271\304\001\031\271_\004\236:\211\274\222:\004\037\334\270\250\003\2748\221\273\r9\010\337\357\271\311\007-9\177D\036:z)\203\267\\\037\227\272J0\":50\2659\363\023(\272#\030.:\272hB\272J\302\220\272\354\332\022:\203\323B:g2/\272A\362i9\305P\260:\314W\245:q\343h8 \372\324\271\031\235\3677Wc\202\272y{)9\031\223I:&\217\302:k\31529V\273S\272\260^$9\314\350$\272\254\335\016:\314\377\2158Z\243:\272\245\206U:\307\223\2779k\205=\272\275\277\001\272;\335o\272\312Z\363\271Td\001\272>%\017:j\021\262:\003\352\215\272\215Y\212:\221\337\266:\272\214@:\250\207Y9xo\312:\266\226\2059\320\343e\271\033 \3439\2176\021:K\335\343:\"@\013:,\317\2756\206\177\2549\317\274\016\272\026\000*\271Ia\3249(\262\3479\351\335\322\271\202\271D:{\325W\272*I^\271\363\020y9\376J\320\271\337\231\3079\367\267L\271\341\355\1779\3671v\272T\212%:9\253s:\025\244Z:re\010\271:\376\275\270\306A\346\271\275\010~\272\342&\010\272`\210\005\272\342~\253\271\376H\234\270\033Q\026:\3253\210:\370)\243\272\002\034\306\272\356\200R:\242\360\363\271\343\320=\271\311\037W\272\251\3164:\2515*\271\371\342\37080\300~\272+W\2219s.\374\271t\t\307:\247T[\272\216\364\2679\333\207\007\273\346d\225\271l\377\222\271\360\302\312\271\020\340\013\2701C5\271@\024T\271\334\242\235\271\350\344\2179\270\371\335:\332\003Y\272\004\327\266:\213\333\2618\237\365\221\272\246\227>\272x\301\27590\305F9\240%M9#\014\272:e\377\234\272\374A\001:\333\352\2179\347\304\214\271\035\314\022\272g\374&\272g\215\024:\242\230\271\271uuk:\301\325\003\272\251:\213:\030|\"8\311\350\3379\256\376\341\271\270\354\000\272Q\316{9\233\261i:\377\223\274\271\305K)\271\314\312[\271\326\022\225\271&\357\273:\202\221i9\334\344\233\272\\\375}\272\354B%\272\213\361\204:\224\344l\271NCC:H@\267\271Am\0249\361\250\275:8\336\246:\346\244)\272\365\217p:\026\006%\272&\017\2218s\334/:-\320\221:\253\335\337\270\315\361\2749\234\260i\271f\263\252:\007z\036:\274\014\342\271\320\007\007:\301&\201:\214\016]:\211\007\3319\212<\225\272Pc\3319&\325\267\271\2234f:p\264\2679\023c\233\272\247^\007\272\r_\2478\037\240l\272\2238\3048\211\312\032:\254\225\2079!j\2319\235\370#\272\310x\354:4\275\203\272\225\347z\272\264r$:-M\0359\370\014S\272\\\364\307\272I\227A:5>\354:cg\2509\234&\321\271\273J\3779\372k\315\270\364\013B:\273\033\271\271\256?\3349d\231\261\271F x\272\022|\255\272~\341\204:${\2249\2375U9\271]\225\2701\317\257\271\347\376z\272yj\302\272\244K\253\271\370\225\272\266\242V\200\271\275M\201\272N-\243\272!E\2449\n\014\331\2711\352\3519e\251\341\265r-R\272\247\177\277\271:\005\250\272\347\327\\\271\377\0308:\345Y:9\005\221\220\272Z\025\3439\350o\241\2710\303\227\272\016\037\2549\324\342\2719T\211R\272A7%\272\3107\335\271F\013E\272 \266\223\271\270\315y:=\021z\270?\313\000\272i\313\':\310\216\003:\255\334\3079<\254\316\271e\010\3459;L\033:\3109\003\271(\016\2169\311wm\272\254\357\3428\303=\211\272\271f\307:\214\030::\215\341\007\272Z\003\277\270\377In\272\331\257\2339\302\377\030:\"\241\2319\357q\271\271\313h\3358Y\037\\\272|Q\345\271\203\266\226:\325.q:\333\222)\272K\266J\272(\027)9\217\351\304\270\323l\026\272\256\333\3718)9H:\247\307\213:P$v\272\3609.\273\253\257\2768Z\275H\272\356E\266\271\210\353\215\272\022&\3318\230\333::u\270\376\271\364,L:V\231\263:)\261[\271\326\370\34293\214\254\271\227sq\271\002<\t\271S\320\r\272\315k\252\270\205\315=\272\203\t\301\270\014\230=\272-\327\320\271\221~\030:\272\366 8\350-\204\270\361\212\3209\n\245\026\273A\274\256\271R\t\260\270S\314v\272\217\341\270\272\215i\3009\237\202T\272\016Hy\272\200;l\2728rS:\274\362\307\271f\021[\272\036\024\307\272\242p\202:pX\010\273\251L\3629;\361\2009u}\2379\027\214\357\271\020\243\2429\024F\367\271\310\233@\272\262\272\":\330b\025\271\341q\3578\300\331\027\272@\322\2159\016\353K:\215\nP\271\273 D:\330te\272s\n\304:\212*\262\271L\365\326\272ji+:m\277\3279\355\204\177:\316/\205:\263\275\222\271}\207\310\2718\243~:\345\t\324\271>\315\0239\241\n\014\272=\232\0019J1s9h\354\2259p\343\2219\020%@\272\3174\224\267\326\030\014\272\231\323\211\271\331\\v\272R\027\241:4\023Q\270\010\323G\271\035\003\036:\346\320}\267S\336\216\2724\265\374\271I\203\37290R@:\314!\264\272\361\307\024;\007\002m6\230\226\035\272\330\200\206\272\300\253s:\270\317\245:Qr\244:\347\237\352:\317\2760:/F\0319Q\014\361\271G\211\2028o\374d:0E4:\177uD\272yK\3559xJ\301:\373\364\2269y\232\261\271\344Q\2059\301$\010:\333$\0277\225\341\232\271>\225\202:\356\300\217\271\303\242\3059\332\"\212:\373\242\23093E:\272\372?\225:\322\340\251\272\223\242{\272\237_\006:\241~\304\271\\\320\230:Q\022R\271\200h\0239I-j\271J*(:\336\224\3164(\361 :\344\323\274\272\341\272\'\2723\307*\272s\337v\271\177\2144:\'\365L9\033\375\245\272+H\025\272\240\232\2659lo\2617|f\3729U\n\2319\305*\277\271\307\353u\272G|\3179S/-\272G\217\3058\35366\271\361\277\203\271\335VO:.g\315\271A\250D\272\033z\0369\300\3254:\002\236 :\205\33619\3179\002;r\027\207\272\232\314\021\272\331\260\006:\255\304\006\272\3007r\272cy\027\272\037\364\321\270\033p\216\272\205\306?:\247\320\027\272\211\255\201\271\244\036\021\272\253\250F9\320^\3248\370e\204\270,\035\2519\327\266\023\271@\367c:\266\325A:\364g\021;\363\032\305\270-W\002\272\277G\214\272\331\207\036\272\213\322J\272\336\005\215\266\234n\2019\363\270\3319\347\371\3509\024\242\021\272\234\313\203\2722y\2049i\342\3069\202\033\205\272\372\263\267:\331\312\217:m\036\206\271\021\325\036:\nv\217:!\256?\272\247=\221\267\251\202\306\271\217\2763:\026\236\2069C\226\2079\034QH:D\251\365:\221Lu\272\310.\002:\217\226\037:\333e\0109\270\321\3568\234\300\3069-\231\2439\207\\\025:j\200\0269\251\213K9\341\301\350\271)C\320\272\272v\3239\215\305\225\271z\317Z:\203r\311\270\210\230\3576$\363297&\005\272\211o\014\272\366A{:w\263\006\272\374\351e8`\366\2179\350\311\215:\020\217\2229\3743\004\271\036(\013:fu\2049\032\200\251\272\037\361\230\271\017\271\26299L\3309q)\037:\344\260\226\272\031\003n\267f.N9\311\017\3479\263a`:\200\325\240:\202i\274\2719\273\253\272\014\032\230:\013/\0328x\277\372:\306Q\251\271\"\\\2048\246\371\224\2702\"+:\302\226\2229\244\032\336\271{\361n\271\177\372M:\242\322\000\272\3144\033\272\264\352\300\271SDo9\327\242\037\272\315\357\315:\343\353\0239\300\324.:>\273\213:&\"\242\272\251\016\2538\261\223x9X\217[\272\233\320\2169\346S}\271\0178\201\271 \237\230\271\305o\236: \221\2048\001r\024\272o\205\024\272\275\213\2108\367\234G9\206r\256:\270\300v9\020\257\036:\333\0344\271\237\333\356\271\340}\007:p\320\3019\223\205=\2716#\2628\321\336\2339%\202F9\317\200\235:\2616\225:a\360\2678\275?\2449)\324\006\271\001\023\2268g\343\3057\037\240\3468\003\214\337\271\313\014}\271\230\220*\272\034\243\363\272\340\"7:\027\037\2729~\016\364\2713\334\034\272\214\226\3759\223\341+\270\232\20248z\n\234\272\256\215p9O\314r9\344\221W\2712\021\305\271\trP\271\001n.\271\263f\231:\250\245z:\n\363\356\270\340\236\032\2720F*9:\231\203\272-\370\2429\255,;:5\374|\267H\036w:c\340\211\270Y;z9\250\336v\272\243\026\2159]\222\341\271\211_G\2725-\025\272\271\0046:\000@/\272\037L)\272P\336\"9\'\361\226\271\360\337\263:\351z\2329\206@\230\272\3052`:\212Y\"\272 8J\272\326v\3738!\241\31192\021q\272\001\314\n\273\351\304\010:\314\332\257\272B\231\343\271\022\305M:)\'\3439V\305M:m\247+\272XG;\272&\244\272\270\370Q\250\271\235-r\271\031\232P:\021j\2279\272?0:\351\027T:Q\3663:\277\323\026:\364\014\2219pt4:\303+h:\314O\2069 \342K\272Y\202\010\272\252\320a\267\343\366\265\272V\363\r\271\024\227\3629r\036M\272\367\023\0248]\225\2729Dk\001:\335\264\240\271\205\227y8B\377\3218w?o\272\352\344\320\271\360\331\203:\222\276M\271\206R\"\272\302\346\230:\000A\3338\245q\2639\245\357\r\271\016\r\006\273\034\222\325\271\316\355\345\271\325Z\215:\211F\331\272H\241[\271\022\032\213\272\312k\3049g\271z9\330>#\272\013\353\365\270@\002\005\271\314\205\t:\245/=:;\375\017\272\237\323\201\272\010\261\2429s)}:\361\240\311\267\256\341\234\272+so:\347\204\355\270\216\353\361\272\201rE\272\227\244I\271\177\234\3149*\326\207\270\256\214g:\340L\n\272w\261\3119\037_\270\272\260\326\334\271\027\234[\271\\;d9A\005\2369\264\n\301\271i\000I:B\350\203\272\017n\222\270\364\032\034:\223k\230:\3049{\272N\234>\272\032aL\272\306\023u\271W\017\376\267\003F\270\270>@\006\271\361\232\372\270-N\3278\320\301\3539\351;\265\271\213\237\t\272\261U\367\271,cb\272\242\205\227\271\265\033\3276\247\231M\272mx\204\271g\027\250:\025\261~:L \n\2727;\2169\027\346_:\346!\201:\252le98;\206:4\014\013:\266^Z\271\265\333o:\223\2070:\027\030\207\272c8\334\271\230\324Q\271\271\277\222\272\023c\2229\353\007\214:h\275[:\t\'\277\272\0350Q\272\252\320!\272\255\322>:03\225:\324\247(\272p\366j\270\267\310T:E\024\2329\335\361\215\270hH8\271\027\246K9\365<\307\271N\246\2479\r\370\330:\273\032\254\272\264\366\325\271@\332/\271\237\272e\270|\245\202\270~.%\272\336\005P:M\023\004\272n\266\37086*Q:^\236\201\272\n \3439\264\201\006\272l\332\3048\336\3424\271xx\224\271\325\371\254:\235\272\225\271\'\277\341\271\206\030\0069\273H\371\270\r\315\2138qa\226\272\030\2223\272Ch\2108\324\251I\272\240\336\275\271\035\320:9\342\243/\272lga\271\320\0245\271\223E1\272\225od\267\363\332\265:\223F\242:c<\014:Q\360\025:4:\353\271\2319H:\254\234*\272\270\214\3029\263\334;\272Z!S9\224\230i\272\345\315\031:*\264\3048\212h\336\270 \220\2507Ci!\272\201\203\243:\017n&\272;\216\3057;\214\304\270\300\224\3509\357\367\264\272\002\262\2009\016$\014:%\214\2728\327\032L:\361NB\272\226\334\032\272\266B\303\271\255\354(9\341\342\0309S\257\2169RC\0249\014\274\274\272\177\213/\272\301\363Q:W&\002:\243\361\204:\2723\242:\256\0030\2708\\\3169W\207\260:\313\004A\271\372\315\234\272\264P\322:\024\'\236\272\331\n0:\362\203\331:\352\202N:\037\022\t:Gu\223\271\r\322\266\2706\3659\272\022\232\3469\251`\006\272\226\266\261\272\246\232\2737\264\t\305:\211\352W\267\200\322\266\271H\251i9\246{)\272\007[\224\271>\243.\272\346\304f:;u\005\272\037I\2139\'\306\3218\341\0107\272\350\243 :e\306\3247\321\236,:/\342\3429pw\032\272\257\304\024\272B\262(\271Ya\221\271\253N\3749\221\344i\271\256H\352\271\351\246\2309\347\342,\272\213\177G\2714\225\353\267\372\341\366\271\240\224\322\270a\014\244\271G]{\270\376\367\0169\324\260\227\272\232G\247\271\263\336\3349\202\347\2649\247c\013:\211P+\272\001\276\222\271\345T|\270\237\354\017\272Of \271\214-\225\271X\250\255\272\365\002=:\230\'9\272E\220\3078\014o\373\271\013\032\311\271\002*\2109\017\270$:\374)\005:\\F\337\271\205\026D\271\233\365U9g\366b:\257\261\022\271H\304\222:O9\3119}\334W9\220\251\035\272k&\301:\220\031\2179\217\021\326\272tE\333:\367\007\2629\227l\207\271\331\252\320\272\365\234\275\271^\311)9\272\235@96\357\300:P\006\330\272\202\354\304\270\356h}\271\232\263\321\272I\210\341\271\340x\273:[\365r:\230\244\342\2713\357\206:\035\236\315:3\267-\271\337\237s\271\311\364\226\271\220\006v\272\005\0228:\354E3:\307<#:\024/\2729\030N\275:Kp\353\272If5\272\273^\367:\234\210\204\2726z\212:?\206\027\271\252\345\241:K\337b\271 \307\0049\302c\211:\010\250\256:c/\031:\037\255\3579\215\274\2429GV\270:\253\034\0079\247A6\271$\220s:\216e9\272k3\225\272\265q49\363\207f:5\254\3069\324L^:\035\021\234:a\372o\271\364\353\307\271\004\361\007\272\377!\027\271\277l\021\272\272x\2249\230\020a9\014\362:\272\205\347@:[\020/8\216\230\203:\321QX:\342$N:\037\254\322\272\345\223s\272I\223#:C\344h:T\3144\271\375hA\271W&L9\343\017\311\271E\243\0209G?\376:F\013\243\271fA\305\271\003Fi9W\314\227\272\340vq\271\026\321\027:.u\2338\254\276\357\271\377\230\230\272,&\2578\314\tY95\253H\272@dK\270XF\0329\377oV\271\334y\2678\301+|\271)\242\217:\264XW:\377\006g:\212\260\3029_\351/:H\226l9\t\361\031:\214*\3417\371}`:Z\365\036\272\237\203\222\271\200\305\213\272j(Y\272\270\215\344:\315\0257:l,\200:\305;\223\272\372\334\2279u\271G;\350\217%\271\256\251\2019R\331+9\243$\3359\000\r\2107\377z\376\270bl\265\272\371\257\361\271\370ML9r\000G\272\231n\2709\362\000<:\377\207\214\272Uj\036:S\'\007\272\027U@\272F\250\223\271\331\311=9\026\3312:\241w\337\271c\304#\272,\377\3339t4\010\272\324`\2239\314\344\324:\346\226a9A\371y9\232\002-:8\026N\271\330\337\3659\t%)\272\215\n\204\272!\356T:\333\251M\271Y\341\244:\230\335\006\272\257\341\3159\013<\3479\221g\206\272F\344\2056\240\344@\272\251Z\000:c\213\\:\334dV:\213\276z:\230\316\376\270\367\221*:\367\327\220:\263\270P:TS5:\037$\212\2725\"Y8&s\202:u\372\214:\"\304\3127\323\001\010\272?\017\250:\246\346\207:3\270\244\270\353;\226:\006\330\240\272=H\315\271!\230\303\271\217\033\2579\353\363\220\272\330a(:\336\350\\:\332\265\214\272\305\260b\270E\205\034\272E\270\362\270\344\nP68\200\030:2\240\037:W&\317\271_\215\2669Vi\34185\2347:s\270\2349\221l!9\372Y\2139\271C\3368\246\307\2019\020&T:\256&\242\271BZ09=5Z8\204(@\271\230\201\200\272<<\3059f\347\206:f\374\004:E\324\260:\242\264\241\271O\017\227:\344\353\3159.U\2529\017e\303:H\253\213\272\010\033-:9=\357\267\027T\3439\220\245\215\272\200\340\n;\376\210U:\303\365\321\271\036\354\3157\032Sq:\014oi9i\333-\271\026\210\250:\246\rj\271\366\257\342\271\023\251\3409\323\002\326\271\t\360-\270(M\200\271\226z\3579\233\207\2159C)\265\270\033\310W:3\334D\272zv\2469\355\217\302\271\261<\020\272:v\275\271\276\344\327\271\217\252\':2\375D\271\375\371\331\271\244\224\2409\372l`\266\024\027e\272\306\353\037:&9\235\272R6\304:\233\024#:?\236}9\273l\017:\0370\3507\325\362z:Ej\177\272Y:\363\271\000#\3649\177\366\2719\316\006\324\267\333\333\3637;\233\231\271\213\303\303\270l3\2628\333\316\341\270F&,:\t\217F\271|\212\3078|\\\3079\244R5\271\200\376f9\td\014\272\371lx\272\257b\253\270\362\363\0259T)\036\271)\261\006\272\323/\302:\330v-\272\246\206@\272+t\2539\034P\\:H\207d8\216\'j:\200\332\004\272eW\006\272(\\\240\271\364\276\310:\360\205\210\272\217h\250\272.\333\036\272\364\365\032:\032\302Z\272\024\311v:\220\252\263\272 ZK\272\266\363\347\271\243\'$9\370_V9\033\206G\272O\377\2319\004+\0229\361L?:\315\036#:m\213\033:-\361\213\272\265\377\3768\245?\3669K\204\023:\347\024\247\272\373\320>:\334\257\025:|S=\2729O\017\272L\273\315\272\004{:\270\351kX\272\017-\375\271\360\215W\272\241\323B\2710E\031\270\014\276\333\271\003b\222\272\266P\242\272\245\275\230\267\254fQ:\207\267\361\271e\316\235\272\376\022M\272)\014\026\272\317\220I:r\n\177:Z\3030:\220\275\212:\351vY:\203jr:d\256n9]\265\241\272\256\002!9\321\352g\270W6\3618\027\016y:)\230\3539\026\261\214\272d\335\3429\3002.\272\313\362\217\271?*\276\272\265\377N:My\225:Z\327\2159\244\375N9UCY:\240\227;9&aY:\364$\232:Ti\262\272\024\323@\272\222\240\':\361\034\3368\025\262\2269\266\323\001\272p46:\023\363x\272\234\307B\271\277\226\277:^\016\3569\353\300u\272\343\n\3439\246\234\000\271$\226\3629\370B\3429\004u\251\271\016\337\003:\026\005\2669\342\250\007:\231\226\300:\320\201\177\271\223\243\36078\332\241\272\335:\210\271\n\344\272\271\251\345\0039\031\246\022:\334\326i\270\372(\301:0\265\000:6\033\313\271M\235x9y\316\027\272c\220\\\272\325\004\253:\017\316\2568*\t\334:R\022\247\272\013.,\272\000\367\010:\337\262M\272p\330\220:\353\360j:~\373\267\271_\021;\272gnA9\260\264\352:\223.8:q\001\3209\000K\361\271]\214\363\270\317\030l\2728\013H9w\332\2558\321\264\231\271\353!\234\271\326\004\2229kF\r:\233\320\010:u\272P\272\225\352\205\271\235&\022\2725s9:\305N\3678h\032\2669\217w\211\272\372\237\0309\177\370B\271%\\!\271\"\010#\272\226\216\242\271{\213F\272\200\n\326:\343\241\2568\211k\203:\272{\'9\032s\250\2721\351\237\270\353U\2748\017\256\366\270\344\244=:\304m\025:\247_>9S\220\313\2717\346n:*Kv:\224\2657:\303%N\272izv\271\202D\270\270\264HM\272y\235`9}\023\1779\203\236\2739\031\205\337:{\275\246:~?\027:t0\3749\357Nu:\026\323\2509\362:B\272\210-\3469\370i\311:\021\210\331\271P\375\345\271W!\333\271\301]\225\272\263:\220\272\244\024\002:\301\240-:\221#2\272\246F\017\272aB\n:\2652m:\326\321\022:\225\323\3059\251\347\313\271\274\233\002:g01:!\017\271\2711\361\2558\224X\372\271\003\255Z\271\025;\244:\352qa99b\3079SVf:l\365L\272\370\036\305\271\322\300\222:aM\035:\270`F:\266\256\2117\0051\3528\222\247\365\270\022\330\3248\256}\214\271\340\233\3438O\345\306:e\326Y\271\311\035i:\370j\214:22\302\272\'\216\324\271\004\266r\272wl\036:r\334;9\322\221\243:ylf9X7(\272\277Y\356:\246\250F\272hu\200:\372\262\345\270\232\206\303\271\005\265\251\266\n\004\006\272\336\n\2309\337`\301:!M\365\271^\365\233\272\000B>\271\332\306(\272\3537\3618\232<\023\271\r\345G:\247\331,95\362\2139\025h\365\270\204\212F\272\023x\206\271\376\010N\271B\346c\2715e\256\272]H-\272B\234\2709\374 \266\271%\000f\272\014\337{:\207p\224\270[778\007\206\225:\256\377\177\2726G\320\271\227\305\273\271b\203&\272(R\206\272#\272c:~\305k\2727\341\375\267\213P\210\271\317\017B:\346=\327::\363]\271\237\221\374\271\376{\3659P$\3359\265\325\230:\245x\177\272\013\333\336\271\031\241\255\272x\320b\272\211;=9 \206\3558\002\236\2479vbT:\256\326\227\271I\3241\2727\333\3249\020\222\3519\324*\272\267\277\313\207:\362\'\230\271.m\022\271\372u\240\271 V\3028\203:z\272@Y\177:\333\241}9\241b\256\272M\260\2377_\004\006\272\r\031\345\272\375,_:u\005\23597\234\360\2714(1\271\2251\265\271\333\235\006\272\032q\250\271Z=\2119\3405\2529=\322\266\2705\016\317:W\311;9&\372\001\272\276\273d\272JJ\262\271B}\035\272\305\223\346\270i\362\2029\321HK\271\033\236\220:\236\335\215:\243\231\023\272\235\224\263\271O3\343\271\371 \275\272\313\372\3036\221\261\324::\272\003:\343\316&\271\362\257\316\271\310\264s\271\032\323u9\222\270B9\237\276G\272\365\\\3319\374\017\27294\337\321\271\367d&\272`\360\314\272\241\374;:l\341\0039\250\210\n\2726R\3609\267n\266\272\322\202>948\217:\253\242?\272/v\212:\023&\202\272\337L\353:]\347Z:\021\024b:o\234\240:\261\303[:\213(\334\272,\341a:\370Ck:\037t\254:\356\324\3306\375\322Q\271T\342\223\270\246z>\272\217\032-:\200\034\023:i[%9\022\356\227\272\341\025g\2720\367|:\206s\250\270!\0370\270\020\025\3079c`\n:M\362\315\271K\333N\272}\341\372:6S\267\271N#_\272\243H\035:$\031m\2715\216\245\271jS\024:\031\274\206\272\335\2443\272|\325\3509\264S\257:\356\364=:\324\223`:\223\252^\272\206\177\030\272\177\332\r;\305\225$\272\241\306\2119\021\232\274\271q\243N:\307\022&\267\222\036b:qF`:\035\204\014:V/\310\271\366T-:\243G\355\270\346\346.\272lo?:R\324\312\271F\245\035\272\006q\211\272K:\032:\267e\301:\314\277H\272\257\350\3419L\215\215\267\276\372\210\271n\334>\272\244\32209 \311\2368\202\'\264:\255\337 :[\210d:DG\000\273]\000\245\267\313\201\237\272\371\304\327:v\311\3379-)9\272\331\263(\271h\234\261\266\002\263\224:Q~\215\272\255\214\207\271\022\376\256\272\275\321\036\271\273\250\304\267c\302\206\270\366\245\376\271\"\352\242:>\020f9\207\000h:\2026j:\323\236\017\272pDv\272%\320J\272\370V\227\271\304\363\332:&\377j:\216\260<:\320;w:\027\264\2727,\374E\272\177\314\\7\301$;:)Iu:\230\201\0069\235\215\035\272\321sR\272\377\3374\272\032\222\006;5d\0039\035\030K6\262Ag8\267}I\271\243\tE:%HX:V0\217\272/\325\257\271\345N\214\271\251\303\320\272}\355\025\272\336<\007:\374i\007\272\037\353\3139\247\274\242\272Q6\265\272\263\225\234\271\316\037\312\2710+\3348\323\366Y:\313\204*:\255p\3279\345\254\034\271\010\017\234\272\303n\3519zmg9\313TX\272=\372\2579\241\206\021\272\212\023\2538\322\335\214\272\350\227\2138tsD\270\370J\037\272D$\213\272\236\255\2339N\3567:t\236\325\271\'\322\2709\304X\r;su\353\271\001r,:v_\235\271G\323G\272uw\304\271\017\213\024:z}B\272\237-\n\272\335\306R:\351+\017:\2270\3758\260\246F6\203\"\3069\263\257=9\264\031\033:7\202\2159\235\304\010\271W\235\022:\343\202\3319$\253=\272\317\312\3157\314Y\352\271\363\255{8I\336\362\271\362v>\272\372FG9hW\3039+e\0319\330\375\305\270/\343\221:\"y%\2715\247!\272\213\274\2019,\337S\272\004\275\242:g\"\3118\304\364e\270\353\276#7\177\340\014\271DT\200:\006\360\3739\306\360\233:\324\334x:(\312d\272d\207\376\271\204u\205:\242\233\355\271\304\nK\272\345P5\272\241\340\274\271+\270\273:\3444\250:\177Q\030\272z\377?\272e }\272\013\317\234\271\210\267\023:\373\242\312\271LwI\272w\274u\272r\025\373\271u\324W\271\013`\3759\256$\3369L\201\004\272\3274\273:%\2331\272QFz\272\200fF\2718\rS\272\016go:\340\352\305\270\255\312\360\270\304\363\215:\340\335\\\272\250\367\230\271\223\312\223\271cB\024\272o\255\3269U\371\236\271U\207j\272\311\254\246\272\340qV\271b\263\3719\251\322\200:\276\335\2469\334\355\2459y\373\215\272V\207\2469Y\341\0229\366\265\2539>\255\2649\240\350\221:\262s_\272\312\244P\271\257o\221\272\351\331\2459\213;\345\2700\016N\272b\303c9\310}\225\271\002\3038:\2715\2359\336i\351\271H\263\244:\263\341O\272e\177W\270;\212\232\271 \317^\272a-\031:\300]\232\270k=N\270P\364\274\271Tq49t\352\2459\340\245<\272u\231\351\271\327CH\271N\365\2469\313u\370\271k\310\347\270\353\014\006\271\376\005\345\271\362Y\251:\367\030\002\270\277\017\006:4\214\366\271\314\231\035\272 \346.9G;)8\366Q\306\272\353:B\272\366\267\3329.v\3139h\027l\271\272t\252\270\350Q\2139H\252\221:%\374\2439\311\025,:\317\357\216\272\342\202k:\263\337*\271\035;<:T\364\037\272\261\013\345:s0\026:\007g\322\272\017\301D\265o\303X:\213\rv\272\243-\275\27268\247\272-\264\021\272{\254\205\272|\331\217\272v\245\264\271d\345\026\272-\203\307\271\347\014Y9\262\274\224:\377-9\272\246\267\005:h\310L9:\037\206\272\035\rU:L\311j\271\344\021F:\376\343\3527\013\316\0379Fp6:\0149\212:\223\026\231\271\002\337\207\270\341\372r\272\224W\3559\363\337\2748*\362\005\272\021~l\271\t\212z\271\373P):\377n\0239\245\016\007\271\347_/:\313\r(\272\344_*9\331\246\0239\026\351\370\270:\203\31095\232C:\237+\212:\022`\243\272\332\353=\272E\032\t:\020\342N8S\273U\271\306\264\216\271\376\357\236\271\367\233\317\271l\363\312\265\313@Y\272\215bE\271g\027\360\271\005\177\3458\315a\3229*\004y:\214:y\272\2774\214:\235<P\272I<\2549\007Pe\270k\326^\271\336\307\254:\204\t\302\271\327\335\3469\026\031:\272\001\377h9}\313\013\271\"\257o6J\010y9j8+\272\240\3169\272i\365\365\271\235\307\2569\rn\304\2716r.\272\345D\2449G\216\0109\240\262\014:c@\3179\276M\277:\200X\30696m\371\271\242\331\026\272\2011/\271s\006\254\271\227\027z\271@\305\242\272J\2443\2719\001}\2728\221\2109>W\322\270\"\364\3518\212\356\300:\017\216J9?6&7\021|\003:Y\356\225\272\237\023\\\271\303\304\001:\212\010\246\271\303\002\r:\030\304\261\271\0170\r\272Vr\2519T\216e\272\276\376I:\260\034\001\272s\301\332\270!\363\357\27147\3749\315\376<\272\332\335\3549\353\377\254\271\253=\021\272ct\014\272st08g\\\251\271\202&a\272\332\374>\272\320\245\3638k\032o9-\306:\2712\300Z\272\257\t\n\272e,\236\271Ao\0249[K\254\272\321\206\036:\005`\253\272\356kW\270\271D\242:\001\325u:CD\227\271l\331\0139\342\342\241\272\222\335\211\2719\370\231\272j\302\3579)\314m\272\355\233\3539\t\035\352\271\3305\016:y\330B:\346\247\016\271\030\365M9ny\202:\357\311C:\"\026\3308]\314\2239\335\223\005:M\311\207\271Br\t\272\273\216*:\034g\363\271\204\276j:V\334\202\272\354\343*8\305H\205:\372\245>\272\031\004a9\373\037\0108.\205\006\272\331L\013:T\304\3659\2732\317:\004Vt:\242\311\2558%g\3019Bh{:\356\352\2169H\33479\026{o\272\262\333\000\272\201\345m9r?;\2729\016\200\272\345\246\312\271zD{\271\246;\210\270\311d\375\271\236\261>:\033\257\034\272\207\375\341\272\242\376\0258P\213\2159\373=\240:\333N\271\271W\246m:\272$\205\272\210s\2717 \342r\267\354\\\333\271\310*\021:\203\245\337\271wcC9\327e\303:[@\264\272\303UA9\231M\2439?Y\213\2712M\002:\314[\226\270\007\262\002\272\352\tO\271[\360\327\271\257\010\035\272\000\274<\272\331\237\2029\215\340\3709\257\352\004:\235\266\241\270\267\371b\272\001d\217:\243o37\036C\274\272?\215\232\271\311\322\272:\344\214h:x\355\243\271V]k\271\023\253\3019o\310:\271\271\004\2569\262J\3078\215\275\020\272-\305k9\204)\322\272\377\363\2709\274N\2759%\353D9\352\035\365\270\275y\3258\314\255\274\267 6%\272\374bU:\0143P:\360*L\272:N\0309\344g\214\270\235\335 \272\364g\0309#S\353\271\3308\246:tN \272Ryw9z\257`:\036\003i9\017\010;:\035\315\356:\273@\034\272?v-:z\222\021:\"\353\3417}\256\260\271\230\251,\2720\3242\271\257P\2278\207\303\201\272\336\223\r:\351f\"\271\310\267\000\272\351\334\3658|\355?\272\227\363\332\267M \2357\302\326\027:\217@\304\272;\327\243\270\253\263\212\272\326\027\005;)\270*:\311Cy:\003\224\3208Fy\273\271!\365\271\272[\000\3347\334kg:\202.=9\276\222\276\272\312\213~\271\325eO8\311\333\200\272\372\207\3347\245\261\"\272>\311\255\272\305g\2329\376\241\214\271\325\224\314\2713\225\243\272&\237\0029\374s\345\271\265\330\026:\273\254\2339\245I\273:X\306\263\271V\220):\266,\025\270\"\322\3419O\3761\271t\211\002\272\001c\271:\212B\033:\007\272\250\271\3375!9p}%\272\'\375\252:T\000\225:\327:k\271\264\252\3609\025\0318\271Ah\2049&\324\364\271\300\036X\270I\265R:!h\210:\254\243H\271\346\207\310\270\264@\026\272]\333D:\001\037\3218~\311\203\270\224<\3479\223\2638\270\212\003w\271\343\273\212:\257\205]:Q#y:\352\360\026\271\251\361\3739H\326*:TCb\272\273\242 :I\035\0219\211O\205\272\220\016\206\272z5\200\272\223\265\006:qiO\272\242\001\331\271LJ\227\271\263eM:\301\375\321\271\204\271\2779q\370~:\346\005\2468U\3027\271`3\025:\275\357\030\272D!\3527\3326\004;\261\224\224:6\344p9\324\330\362\271\355 %\271\371\304\242\271\256\227p\272t\241\"9\177\020G:Tf\2569\230G@:\251\025(9\007\235\232\272\224.\210\271\2603\242\272K\27769\013\3203:\022zl\272\277(\336:\300\\\264\272|c\037\272W8\356\270r[\17793\200\036:\336-\204\271B2\220:\2452\232:(D*\271\214\017c:\207\303\303\271\223N\2149\355\367\002\2720\252=:\033\206H:M\325Y\2714\327\330\271{\375\013:Eo9\272?\320\335\271_IQ\272S\321\3149\020\023A:_\363\274\272\353\330\367\271\224J\336:\273\024\r:\020FO\271\270j\232\271\0255\216:\002\023\2669\250\000\250\271%\342l:\243\237\340\271\207\242\200\270\274\311X\2726s=\272\024\244\377:\210\232?\272\300\233\332\272\303\243\030\272\370\201\3678\237\324\202\271\242l\177:\242|\2179\330XU9b\331\3339\010#\2248y\2646\272\336[\0229\377\243\177\272=k\026:\370 \004:9{\":\335\317\30099\254\360\270\320\0007\271\370He\272\017\357\311:On6\272=2g\272\002\213n\272\252\035_:\222\033\2229t\363\007\272D7\3279\326\340\346\2710\002\241\271\014\311\3467E\355Z\272+\207%\272\307+\364\271D\270\017:\335V\002\272\235*\256\270D\217\3559\351\234[\272\312A\263\272Q\253\355\271\363\371\030\272\274_\n:\002\376\3338>\247\2509x\035x:\013\366`\272\037`\0219~\215\22598\343\024\272,+4\272s\224\203\272DGQ:_\032\2139\230\213\035\271\267~\260\271@$\2759F\242\340\267\214\224>:s\206\262\270c\'\0379\036<)\272\364\227\212:\221r~\272rT\245:y\344\031\271\315\3433\272\201\200\032:\021IG\271\263\357s\272\\?\2259\350\201\3437,\237x9(\314\2779\2715\232\271\330\032\n:\263\362\206:\207\323\361\271\214T<:\317z\3529R\277\236\271\265\347\227\272\355N\234:#\004L9c\337o6\316\244\010:\232\360-:\357\202\275\271\265\211\204:\'\301L:$\357\003:\017\017(9$fG\272\260\335\026:T\2246:V\3623\272\236}\021\272\263\374\0179\227Ge:\226\273\t\272jy\2408\2508g\271\022\300\':sj\251:,6i\271w\010\202\272\202]\0029\254\225\3069[\010\220\271Z\320_:\344f\024\270\277\2750\270\2217\002\272-XR:\000\017\217:\210\226<\272\220\334\3356\245!\301\271\233l\016:a\234@9O\3563:\231{\":(\020\254:\0079Z\271\374\231s\272\020\312u:\004\200\003:\322\240K\271\315V\212:L\242\273\272\031\022\023\272\244\003\271\270\267|^:p*\210:g\005::.y\222\272\017\246\266\272d\276\022:s\250\034\272\330\214\3219\326*\206\272\330\017\3068$\016l\272\343b\337\271\232Y\007\272\252\252\342\267\243(\270\272\360Q\006\273\244\310\231\272\026\274)\272\316\225/:\"\344\203\270Z\242n:\307\341\'\272v\377\232\272\251d\241813\t\272\t\005\244\271\246\005\":\367\362\373\271\263\252B\272\216\021\263\272\034\372>\271,g\\8\364\264\004\271\220[\217:\370\272o\271\016\363\2549\n\3446\272\337T\254\272)\265\2469\343t\2029]*g\2711\321\'\272\262\265y:\036wt\272\212\235\215:\323I\2639\350\210\2559i\n_9\330\236N9\224\2702\271\305F\034\272!]\226\272Y\224\2129\321t\264\271\010I\310\271\203\351\2429\367C\347\271\003\255I:\267\250\031\270k,@:\366S\234\266\210\275\227\271\013\247\006\272\277_\240\272\355E\221:\001\305<9\207\262B9v\004\3259\2676\331\270\363\376\224:\010\326\245\271\372\204\224:\017\300M8~{\273:\353\344\001\271e\371\341\272&\312L\270(\220 \270\370\313\r\272\274\232\2308\243\325x9\334!\204\272\317\257N9aE\005\272\366Q\223\272`\362#:z\003\013:\255\305D\272\212\331\222\272\026\333\354\271\343\371\017:@\340\2169J\243\356\267\234C\326:\360\214&9D\306\004\272jnu9O\222\207\271%\326\004\271\3044y:\371M\235:5AE\272\207\202H\270I*E9\354\272\2429\2513\034\271(~^\272\276z\222\272\353\020H:\372F)7\212\233\202\271\226K9\272\016\253?\272\002\"\251:\010`\211:m\005\320\272\317\235\3418\246\261\2009\031\363\300\271\253\326\2659\214sl:\364\213\236\272\027cE:\377\370\006\270,\222&90\265\247\270\243\251\240:y~\335\271\270v\355\272\324\010\r\272$P\212\271&U\006:\316\343&:\366\274\2709\236X\20394u\212:H\300X:\344\222\324\271+\242~\271\321#9\272\271\224_\271\300o\236\271\323\006\367\270\266I<:4\251C\271\235\371I\270\035\222*\2714\215\3559\023\004L\271i\320\n:\3532\2179\021\230\2318\355\022\202\271<o_9\324\307\221\272\177\240p\272\232\220\361\271\363\276\312\272\003\254E:a$K\272\371\235\3219\003}\273:\033\tH\271\226\366\2119\3528\252\272+\'\0149<_y8\270!U:\343G\2639\362z%\272\013\375\256\271\2775\355\271\032*!8\217\337\3379\352\305\272\272(\236\017\272>?\2458\016\034\002\272lO\212\272\262\315\217\266\257\250\34297\210\3079\246\267\006:M<P:\317\200\2149\253\346\3676\310\254\326\271\217\235\3678\231\213\200:\243n\032\272-\247\245\272\300f\226\271\240\3421\272\026\363\3259\362\212(9=|\3229\247p\020\270\023\275C:\306\036\n\272(T{\271E\000\362\271\312\'\t\272\014\226\343\271\350c3\272\374\224\34799\002\216\271\322\260;\271o\252 :\037E\013:\177\347[\272(r\214:^\352\3378\337S7:;\325l\272i\362O\272\302\263\025;\341\"\326\271\360)#:\265\353Z:\230\211\237\272t?\031\270\357?\323\271\357\347\254\272\262&\0049\336W\2628\021\004\217\2727l\3769<\022*;\3569I:\376q\241:\260\301T:6=\023:)\255\00289\377\020\272\031\343\322\272\355\177\240\271d\303y:-\274w\272H\246\224:x\005\255:\001\022\024:o\240\203\271\276\234\021\271\207\221\034\271\033UT\272i\003T\272\230\347\2729\n?\232\272\031\257\3277\276\235::Z\212Y:\317\250O\271\350\314\331\271B\300\367\271|\030\311:\374 \r\270\350\247\3359\224\332\226:\374#x\271\336\3707:\251m\3109C\216L\2714j\3069\333\222\323\271%\347:\272\017z&:\013e\2569a\024\0369\370[\247:KI\364\271?\r_9i{p9\3638\212\270\2275\20282\301\265\271\332%\332\272\321v\007\271A\263\203:\2458z7e\265\226\272\022R6:]i\214\272\357\306\r9\200\364::u\312C9\003\277\3057T\203\203:s\311V:Q\200\243\272e\360\3759[\225\3479m\232.\270\014\322C9\323+\2379\027\261\"\271p\341L9[*X\272E\242\34692\2312:\217\002\323\271\363\271b\271\342\226B8\201\326\216:\277\206\2628Q5\0279L$\335\270\213\255b\272\036\017X:\203\333a\271\340\n\270\272\246?\237\270\025(\221:\013\205\246\271~\"\016:\313;\361\271\251\317=\272\t\314N\272\343\330*7f\343\221\272{\335L\271b\320=:cb\0229\260y\035:\000\356\223:\014sa\272\034\243\3609@\357\2119J_\3478\223\033`9]4\3579;1\233:a\312\241:Z{\245\271{l\270\271\234\356\0349r\331\340\270\020X\307:\303\213\252\272\2508\316\271\252\227I9\217\031\211\272i\002&:wA\3539;\220F:\022b\002\272X\241\215\272)t\316\272h\200E\271Z\323\265\271\254rE\271D\312\241\272Z\275\221:1C\310\270>\320\366\271g\027\321\271\317=\3359\300\273\2369\235Q\2629\226\270\2779!\251\3738Jf\214:\315\"#\271U\200\2158\243~M\272Q\0225\271\260\216\0209v\212`9\375Z\231:5ul\272\236\355\010\271\206=m\272\251\305R\271\tz\027\2722\330\205:\277\261;:\225[!:[\014\355\271\372+f9\224\221\3328\276\326\034\272\357\322M\272\026H?\2722R\2559f\21018l\244\333\272\342o\217\272\354\274\226:\262\240\202\270z\227\3179\341\213e\271\332\315\3708\207\031\\8\003\220\267\272w\347W\272\323\t\262:`\213i\271\266\244\017\271&\271\205\271;\'\2469V\356\3159\000\207\3569>i\2337v>\205:\325\024\032\272M\217?:\313\1774:\260\236\300\271+\223}\271\036\032\354\271\353\270\3039M\261\246:\356}\305:\\\n\346\271\214\274\323:\227j\201\272\2458\202:\261\312\025\273\377\n\367\271\031T\034:9\2609\272\026Z\244\2716O\30593rE:d@\271\271<\316\226:\277xd:\371G8:\372\257\0229\231\257\376:#J\':\025\273N\271\372\265`7\275>.8K\3433\272yrQ\271\216\347\37492\250\0229O\371\2659\253f\262\272\365\006\210:x_\276\271\227a\333:\221\017#:C?<9\304h\"\272\357l\027\272\233wB:\200\'\372\270\017\266\027\272P\350l:Q\035\277\271\3406\211:\024Gp\272@d\000\272\203+\033\272\355\231W\272\025\004N\271>\r\326\272]\033\2249\205\254#\272\227{N:\262c\310\271\305\r\3119p;\344:\016,\244:\334d\301:\'\2601\272\002\216\211\271\356\035\3659\331\360\321\271\355\34717\036\202\247\271\306\305r:\332\321\224\270\327\342\2719D-\2619\314\25479{`\271\271a\235E:c\316\246\272\243\017R9/\363\003:2W\2029\213\313\2048y\010l:fg\250\272\0250\200\272\363\360d\272\350#\017:\214y\243\272\006.B9p\233\2469\\\235@\272\305SG:\330\363\3579ID.\272\320\210\223\272\250\216\202:\302\256~9:\'\2079\310\034\037;\214\2749\272\351\n|\271\026\204\2559\001\373\023:%\325\231:\331\002d:\3253P\272\361\345\3268d\372\232:\203\204]:V\351X9&\t\255\2716sY:Z \365\267(\214b\272\240\256!\272%\332\0349\362\354[\272\203d\217\272$\240q\270\354\016X\272\361_\263\271*z,:9\350\336\270\220\t\2259V\034\2229G\020\2119((\200\272\255-\3739\255?\2439\244<\003\271[\377\3019\013y\355\271@L\2379\307U\3677\022\360\3609-1X9\274\2529:\233\207\026:\005\331!\272\251;\252\272\264~\027\272\227\240\334:\237=a9{M\345\271V~\342\272YMv9\000v\206\2729U\3178\203\245V9\371\336\r9\266+y9\201Xm:\373\003\225\272\261\336\232:\232N\010:\016{\3359\307\036\201\272\276\276\344\272\245\0243\271.\336\037:\"U\3649\232\320\r:\002\"m9\371\005\361\271Xag:-\242\036\272A\336\2645\305\374\0109\360&\r\272\240A/\272\304\021\217\271y\027O\2729\212\000\271L\246Z\271\367\364\355\272\177k\0377?Q\226\272\350u\3259\210\036V\272C\\\\\271\n\365`:\347;U\272,\232\r\272\022\201j:\013\205\2348\330I*\271\257\346\244\272L8\034\272\325\365\2078\024A\035\272\323\244s8\360\313\352\271S\317\316:\214\206\2738\222//\271/\215\2439\273\201\2209\303\243\305\271_<\003\2721\270\2359/\277\260\272\213\260u9$\232\3238y\255B\272\265\361\004:/\365h:K\327\003\272\334\341\2729\010\ni\270\307e\0229Dy\3508sQ\031:U\03129\372\324\252\270:\263\032:\344\201\2629m\027q:\271|A:\"\027\206\272\340\353\326\271\217T09\000\260S9(,\245:*\200\247\270\214\307\340\270\364N\2349M\"\223\271R\264e\272\207\361f\271\"\347\3129\344Q]:bF\003:\333z/\271\263\277\3329/\344\3429^\034\345\271&G8:\304\362R\271\013\336\250:\347\303\376\272\312\225O:\336\364K9\270\343\017:\357\350\264\272\032\361\2029\356z39D\026,:\275\334\033\271\275\325\260:\010\272R\270\313\347\216\272#\347\3279\230i\2719BB\2019\226&\2519F5\242:Nf\2578L\264\3469\200i;\272\347\245O:\337\013a:\253\341q\272Bq\234\271\000\322\272\267\001\002\35397\373\3518\207\010\240:\346a\334\271\324\231\t7\344V\3739\013\017\23592\352\037:s\252\020\272.\216\";\t(89\'\337\010:\364\340\243:\336\'\005\265t\336m\271\371o\2519\244\214\3019q\303\'\271\206\016\3667.gF:\010\375\022:\266\341Z:MY\2619\213\232\0339O\252\2309\221\032\00297\364S\270\273b\203:>8\262\272\372\002\224:N\217<:\332\216\226\270\031\257\034\272\036\025\032\272\007w\3218\216Py:5\216\2669\010\270{\271\341\372W9a{P\272N\304\261\272XZ\355\271#jd\271\017]<\272\360\320\004:\363\017\2019\005\351\325\271\301\222\020:\035\244$\272s\013\301\271\\\364\215\270\321\37089\326]\002\272\316\232q:\204\277\023:\255\310+\272Fw\302\271\266#\000\273\236\230\256\272\3067\3609\376\216\3207=<\3547V\356B:\222\006<\272\033\203n\272\255p\355\270\346\264o\272\223^\372\271L\320m\272_\0219\272\251\2255\272\013\201\205:\177P\005\272\317\235\373\271U\026\356\271\037\261\231\271E\216\034\273|\004?\272\336E\231:\3365n\271\331\226\300\2713\347h\272\003\370l\272\377\370\213:Q\361\227\272l\234?:\351\301\267\2719\322\245\267\204\177@\272{\252{812\t\272\326]\221\271\273\364G\271\325+x\272\272\306S\272\333\302\3549\325K\323:\025C\306\271=QP:C\343\355\271\372\nT\271-\252-\272c\242*:\376)\273:x\3426:5\201\312\270(\212\225\271\327\'*\2672\246\300\271*\244\226\271\030\020\205\272\363\221\017\272\355{\2577\337|\3169\021\024::\336>E\271\204\253\0279\311\330\2358\337\265\215\271\313\0351:z\375j\272[b\t\271\313\002\3279\203\016\326\271\020L\3569J\350\220:\350\275\n:\276p=:\347R\206:\225\014\\\272\315E\1779\254\203`\272\317vD\270\225V\205\272\374 j9\001\261\210:e\253\360\270\317\323\220\271\016\342\3269\212\300\017:5lg9\255\'\314\271\"\031\334\271\363Vw8\265\025\013\271/\361\010\272+\326\221:\026B\202\272-\\\237\272uj\227\271\004*\030:\362u\323\272\214\223\3129\270G@:\357!;\272,v\005\272*s\2577F\334\2609e\327\005\272\230\332\25199K\252\272Eli\270\225\033\351\270#\234F:\025QH\271\227Am\272\204\360\2738\177\024\210\271\3143r\270\003\323\303\272 \315\340\271\354\311e9e\235M\272\231\256\02092\236\257\271\326\333@\272%\032\2349_I\3048)\347\3229\027u\270\270\013\271\3209c\006\216\271\207\"\2218\366\356\010\272\016u\2239\312\336\2127Q\241W\272N\332\275\271.^c:\371\214\212:\013\\L:\267l\374\271\254\002\320\271\373\310n\272\330s5:\003u\226:\274\363\330:\310\004p\271\227\372\2608\031\rI\2724\264\250:\363\027\323:(9\251:\014\255\237\272!\004\302\271\310\n\222\267\201\355\247:\031~\334\271\034\302\\\272N[^\271\346\237\302\271\235\373Z\272R{\024:\252\033\3459\355\257\205\270\204\316\210:N\253\346\271(\253 \272z5C\272\002\346T\272X=\2449_\252\206\272\036\372\216\270\265\035S:X\201\"\272a\027\2738\303\034{9\330+\256955\2759wY\3048\236\010\31290\210\204\271X\257\034\272_+4:m\014\0339\n\223\0059\375F\3079\225\255\016\2729\231\231:g\303\031\271\376Kf\272\243\322p\272\367UA\271\221\006\3169,\335C:\372\245\0139\372\030h\271)`\207:\0036\222\272\272\376\"\272\326\007\2039\302O\354\271\221\306\201\271~\367\2638\342\022\2739\000H\3317\242\024&:\010$\3509\250\3538\272;\376\3309\'\220\354\271\350\251\207\270v\241p\272\242r\214:\227\232\224:k\235\0319\352\276S\270\237\307\000\272\321\036}\272\225\306G\272}\327\3729\247\305\"\272\351.\2379 \013~:\226\203\3138\331i\"\272+h\260:\353\005\232:\000\235\307\271\023\266\261\271\326d)9\217\357n\271\266\321\241\271\315\336\313\272>\024E\272\302|\3579d\203\323\272\006\323\2429\364\025\036\272\350H\t\272\3266\246\2714\276\212\2711\251C:\357m\002:\360=\364\270\235\354\3158e\351y7R~ :\361j+9\310\334\0179;\313\224\272\227\252\241\271\320\255)\272\205\351\007\272\330?\002\272\262\177\215\271Q\250@\271\200F\020\272\327\203\001:\302\365\204\272\356\260\030\272\004TT9\213B\2769\246\\\235:\025x\216:\347O\177\272f\333\371:\345\265\200\272\344\251\270\267~\201b9\365\220\316\271c\225&\272\316k\001;\221U\247:\304%\211:\274\004\251\272\265T<\272\341\000X:\000\346\306\271\304\260\3778\360\\\261\271W5\0008Ab\3359\270\335.\270M\322\20797\232\226:\264\324\236\271\030\316\2679 -\250\272T\215\2019\n]@\272\362\356\313\2719P\206:\244\234\376\272xK\220:\217\306\201\272\207\033\0339\201(\\:\330\235\3049hx\306:\356\311\2359(VY\272\033\023\377:\244}B9\326\\\226:a\377&\272\355\321\217\272[\032\205:b;\3429\320\345\213:\014\241U:\213F\021\272\022e*\272\000\035\2139Ar):i\266\251\270\036T\2539\nR\3549\306\236\303\270\350<\226:?\"\320\271\270\231\3059\360\324\253\271\237#\2239\245\326\366\271}/\245\271\200\203\316\270\250~\2029\207VX8\206\\V\271!\203\3619B3\n:\230yu\271F\020t\272tSi\271T\312\033:\222Q\270\271\371\n\33197\350\235: 7,\271\260 \3249\321+\2509\211W\001\271l\035\3118\001L\355:W\032k\272\247n\032\272\325\246\032:5E\032:h\313\3609\315\277\2079_\372J9>\320\222\271Ih\354:\027\226\326\271\305\334\002\272N\"\2609\013\334\033:\3052\204:\334\r\233\272W\315\314:\340m\2209\233\203D\272\014s\3559\335Z\2209\313F\326\271\274\026\010\272\325<\264\2710\351\222::\311K:\323\314\2279\373Y1\272\031\023-\272\2576Q:Q\316=9\002\000M:\340Ck9|X]\271*#l\272\273\264\215\2723:\352\271\370\006>:V\016C\272\200\'E\2714\207\372\271k\010\":!&\350\271\325>C:\215\306\r:\362\021\0349A\331\357\271-\206W:eu\353\272\207\022\230:\376E\2579\360\234\\\272\030\331`:_\257\2019e\035=\272\220=\\9\234rK\271g\243\265\270\341g\256:p\333\302\271%\357W:\335\377\'\272\320,\2159\r\035\202\272\240\324\3519\317O2\272\003\225\032:\001\300B\272\307\345\2378#S;\272\017\244\030\272]\330Z\272)\233\347\271\307\002\n\272\363\307\2408@@\244\272\261\220\016\271\033\272\257:\304\345\2706\362As9\351P\311\271\2436\024:\335c\361\267\331\030g:\375%\007:\007~\223\272,\216V9\212LF:LJ\205\272%\267\215\271\212&7\272\317\361\007\272\227.0:\321_\261:\373?\303\272j\2522:\200n\003:\037\253\2009\223\330H8\025\233\211: M::\020\231\361\272r\220v9\215\256+\272\3426\33281S\2439\373\234\350\271F\024\021\272\3640T\272cJ\034\271\233e\0307\314\217\3658\376C8\272y\307=:#\321>9|\336\2439\205\354y76L\216:\335\327]\271\r#\251:.\350\365\271B\215\220\2719\026\200\272V\37229b\223\"\272\033M\323\2712\212\0068\333\304\240\272E/\027\272z\217f\271\363\205\037\272\364+%:\\\347\3419\026T\264\271h+\2528\220~\0109\360n\301\272\371\370\007\273\356\355\265\271m$\322:NP\333\272\033\022\000:\213E3\272g\204)\272h~\271\271\322\020\2309\0027\216\272:\331\3269{\273c\271p\303m9\356-\036\272F\023\230:\357\271\2069\270\354\336:\204(\035\272\361\323\237\270\211\232\361\271\332Ti9\234\217/:)\001Y9\312\036\3369\331h\35580\242;:\353B\223\272\376&\352\272G$\3138\n\241u:s\211H:\363c\214\2702\324\344\270\271B\255\2710{\":y\314\004\2723y\024:\351\372\323\271\321X\225\270=\311$:\206\177$\272i%-;]\303\033:\037\2379\272u\300\3438V\\ \272i}\200:\245\273&9\3221I:i&j:\244\355\023\2712/\300:\230\253&\272\035 U\272\367\341\337:\304\377\034\272e\276\247\272\263s\2039\212\231\203\271;us9\225@\352\271*\257\020\272W\032\006:\374\326\\\271*\034\221\272`\230\2429>\304V\272\364\374\3649\t\277\3759\013?^\272\014\373\001:9(\020\272\317V\227:\030\357\216\2713\033\212:z\362\0169\345w\3209\376\002\312\2711\273\207:\252\031\3448\0300v8;\257P:L\375\232\272Ya\n\272\026\026/\271PQ\001:\2051e\272\234A\26495\210\332\271\324\300\303\271\'C\3567,\360\202\272M\250E\271S(\262\272O\202\3049\207\341\3029\231\327\231\272\373\244.94G\212\272\236k\r\2725A\357\272P\370s\271\\\222\003:!\25029\202R\017:\002\324\2769\001\'\021\272\267K\351\271T\323E\271()\024:\001ml8L2\230\272\301\0233\272\332\3223:\235\320\2429_\375#\272\037\271*\271G\312\'\271(t\020\271\365\337S\2712$\3548\300-J9\247q\237:\244\033\220:\344\232\016\271\344\202\3709)\262\200\271\226K\235\272TY9:*O.:J\247\3019\020t\356\271<\246\3578P6\024:\306\322\001:!\223\350\272M\250\250:\353\263d\2709c\360\271\275\334\3059_\330}:\\Y\237:\2606\r:\323\363\2019XY&\271\320\224\315\271d\211u9R\320\201\270\'h\260:2\237\3118\203\350N\271h\266\260\271\373`x\272\204\372\207:\230\3355\2723\273<\272\303e\231\272\007@\t:L\334\2059,b\0349\n\000A\272]\360\221\272\014\314_9\376L\233:\276\376\2379$\353\370:\217VE\271\323\315\024:\370\356[\271\320\343\375\271^L\2519q6\337\271\236\037\300\271C\222\235\271\307+i\272,\306\024\272}U\0279br\3419\302/\233:\001\232\346\271\251%\207\2728!\360\271FN\200\271\236\365\263:M\375\221:__\2738\036I\235\271\3121\271\271\316\274[:=\317\3349\345D\256:\021\315\250\271~\364\322\271\334\255\230:0\366\177\272\246\010\3369\337\335\3249E\203\225:-\027\01793\334\245:\026\330\030:L\252!\272o\365Q\272\342,\253:\033\004K\272\026\337y8\224K\2269\211Qh\2720\314\255\271>\376\r:}\310\232\272\204@\001\272\255\030h9\035\267\036\272\211@\212:\223\211\'\272\326\356\215:\233Q\227\272\213\334\27673a\315\271\334\362\3029\221\210t:~\'\237\272U\232_8\0144\251:Pz\032\271E!\350:\360\276v\272\262\036\2419\327\306\315\271\031\237\254\272\361\305\024:b\nW\272;+\212\270\244n\214\272\014\221O:\313\315\3509C\226\230\272Y\366\321\272\222?\2119\372d\000:\213\376G:\3038\2219\277\022\323\272\350K\250\271\025\223\033\271\232w\n:\024\255\216:\310\027\257\2719vu\271h\237\377\271\313\365\"\272Cv\273\271V\036{8\336\26338W\356\2119 n\n\273\031\022\3179|g\032\272\230\303\217:\357\177t\272Oi\367:\240\003\030\271\235o\344:\242\334\016\272OO9\271\300\033 \272\371\270|\271-\341\2038\360\267490\236M\272y\037C:S\222\274\272@\321\026:\327\267\2179AU\n:\364\306\223\270%s\266\271~\037\224\271\341\333\243:V\216\016:\373\311\2478U\342\374\271\323\373\316\271\3027\3469\225\031r\272\364\375\r:\310\257\0079\346\rj9\324/x\271\333}\':@\020E:\216\270s8[?\2069\265\013\032:\346\254\215\271\006\0364:\007\267\357\270\225\0364:\357\342q\272\317\364\\:?\037&:\315X\034\273\370\032a9\335\337w9\0352\270\272\217\307e\271X\315\3616\027\020\n:\025\264\331\271\2350h\2716\026\303\271\364\256,9\345I\0049\234(^9\033\251\251\271\350\250\276\271\360\276\030:B\365\"\272\334F\240:\034\263\2209\274\375k\272g)\335\271ndQ:\323Qo\272\260pE:\2049\305\271\214\262\321\272\'\014\3458\336z~:Ir\224\272U]p:%*\267:\r\332\210\271\2524\005:\t\251\3679\034g\035\272 _\2469\nW\2729\r\247\3017\326\273&9\001\260\232\271\'\000\277\271\255\323\353\271K\205\3778\3049\2469o\271F:\276\256r\272W\266.:\3044\3408m\202\3239\236\201\2559\3700S\272\241I\236\271\032\n\2459\262*\r:\274a_\271n\003\034:\010\026\3769\347\016\016\272\247\031\211:\207\365\177\271\003|\340\270\330m\341\271\030\2111\272l`0:\003\350\356\271g\013\317:\232\206\2069\200\225\276\271\'\240\241\271\327\335\2529\330\375-:e<^8\240\273\240:\3035\3349\030\306\023:#A\3379<\332i\272\334\300\2539\236\252G8\035\017H7\013wF:\235\262\274:\356#\306\272\273;l\2716~.8\363\350\001:\334\250\3049tA\2509r\246\347:\2253\353\271O\230\321\270@\276\006:F\306\276\272\022:\203\272\246\231\3759A\346^\2724w\257\271\234\245\356\270\333\341B9\234q\033\272\207\271\2749K\306\220\272\355\000\223:P\226\343\270>\035\033:\314\344\3449\266Q+\272k\036\2178\3338\010:\205\335a\271N\027P\271\230M\2179t\373\204:\022\331q\272\324\212\244\271\345\257\216\272Y\335\275\270n\330\205:\315\213\000\272\250}l\271w\334\215:2f\235\271\"\226\006\272>$\211:\376\2123\272\326\004d\272C\"\220\271\024WL:f\036\203:m\336\204\271\216p\220\271Q\225\221:\332\323\2028z\274\226\272\000\243\231\270B\223\213\272H\300B:\240\325a\272\214\r\2029\303\323\213\272\302\224\031\272\225(\016\2716\021\253\271$#\016\272-\370k:3\237\n\272\307\372o\272\352u\370\271\216\236\245\271\201\224\353\271\250\344-:\024*\034\272\247\242/9D\270\005\272@;\220:d\236\313\271S45:\362o\2079c\203\2269\263\353\3478\365\254\221:\230\340\206\272\271\177r\270\345\275\264\271!\326\264\272\033\267R\272\267!\311\272\3243\315\272\355t\0369\022X8:^^\022:\rQ[\271\375\337i:\323\203Y:\370\244\221\272\312o\201:\036\022\201\272.M\200:\031\005\3129r\217)9\204!\330\270\236\305\030\271\036\375\217:C(\205:\344y\211\272>k\2179\343g\3739\251\272\311\2721\027\3279\013\254\222:\003\323\235:\276\235\26593\243\217\272BQ\2709\241\216\233\271\245\360r\271\375\271\2349\274\0167:\216\243\2138\025\004H:\037\343\031:\361\332\2139(\241\002\273\372t\372\271\t\342\2477 @)\271\243\324\2219\340N\271\271SA\243:t~\2769\326\262\3069\307q\t9\346\021\233\272\265\030\034\272zh#:f[\2319*\324\315\271\017\234]\272\370\022a:\345\351C\272-!\t:\331\276\003\267\233_\314\271\266U4\270K\241\0359\005\016\026\272\356\241\2607\334\342\0079\302\002\2159C/\311:i\177\3447\017*\3229\'\254w9\214\010\010\272\373F\241:\361\314\3158\216\374\273\272z\360\2238\370\332\t\272\205\0317\272\027\027\202\271X?\271:\366i\'\271IA\227\272h\026k\271\236ZA\2728\224\3779\001\325\t9B\236\311\271\227\267\217:\007-\033\270\340\247\356:\242\353\030:\017\034\222\271\033\003\':\347\351t\272\374\202\3039\316\323\222:\241\346\221\272\344\272\0249\270\271\206\2711\325\240\272\334\363\3269\017SH\272y7}\272oJ_:\305 !:f\275p\271\206\376d9z\004\r9\020+Y\272#\222\3119%\010V\271\"\217\323\271\322\024\022\270\326\301\323\270\005pz\271\264H\26696\262\3549\n\227\n:\203\265\316:\304\206\3609/g\2279\034\270n9\337\250+\271\327$\2159\200\367\261\270\201q\244\270B\266j:\222\327,\270Z\356\2279a\373\227:#\220\3379a\337\\:\r\267\000:\370\r\'7\237\330 :J^\2739\244:\31296\220G\272\312\202\357\270\272\343\025:9p\306\270u\304`\2721\317]:\n\242\300\270*<\276\272\024j\341:\014\327-9\236+3\271E\345\3039\327\001\274\270\302\\\247\271\340l\314:\030\212\2408@\023\036\271\036\377\010:S\201\024\272\342\033w:\272\310;:\263\310#99\024N\271\nl\3629\326\371!\272t\354\262\272\006\255h\272G\352E:%\000\305\271u\211\3508\365\330\3469\223E\037:[\266\230\272\244\326\222\270|\"\r\271\353\270\227\271\232\322\010\272T\352\017\272\315Jw9\347\352B9L\202t\271y2\251\270\276H\243\272\211\215\302\272#\3713:P|2\267\240\026?:K\031\223\2712\340\0079jD\20095K\262:\345\231\036:\353\341\246:\251?[\272\t\203\3079S[\256\272\023\0179\271\223\326\206:\344\226\214:p_\231:0\327\303\271\271\307\2519\212\037:\271\366;\325\271sT\314:\\\305R\271\001\227v\271\357ui\271?\313$:\222\215,\27261\235\272+m\0208\r\347Z:\364\003\3618\372BD\272Q\331\222\272\265\275\371\271q\274-9h8\266:\343\272\2719&\\\027\272g\234\213\272\374\300\200\2723hJ\271\016\312\255: 2 :\365\033\251\271e\232\220:W\327\311\270a\317\250\271\\$\213\272\202%\3339\033s\010:\251q\007\272Q}\365\270\213wQ\272\007\260\004\271\251\306\2379u=\2749K\317\32798[4\272o\325(\272\222\354\322\271\216n\220\272\277\000[9;\264=:\3433\303\272\245\332E\272\032\177L\270\\q\224\272w>#\272\010*\301\271\201\277\344\271\002\367*:_\014\3079\027M\2679-d\022\271TM\32395\202\n\271_\017W\271C\321%:\216Q\2449\2323.\271\253Tp8\017C\3259\357\247;\272T\3538\272\370\237):\202\376\2469d\317>:\374o\t79Y\026\272.\222h9K\244X\272\27558\272\342vr\272\2618\177\272\212!\313\271J\307\'\272\205\020\026\272\336\033\315\270\234\342p\271hO\2039\004\306\016:0\026H\272\364\3221\272\366@_:l\r\206\270\332\200C:\330*j\272\370\242g\272\214\372\002:\325$u8\320\221c\272\213\213-:\327\001a\272\211,~\270\023\371\350\266\234\251\201:\206\263\220\270\217R\223:QU*:\360\216\273\271\005\307S:\311Y\230\272k\356-\271@\321~8n\261,\272\0219\227:\345\341I\271\223\233\n:\004#|\272\216\004\3547\2226\2759\312i\364\270\376t#:\255\351\246\271n.j\272%%(\271Xo\252\271\023%\275\272\223\311\260\271\3518\267\272\2375`\272\267\300\271\271~\010{:\352\252!\272\016\331R\272\270W\313\271\354=\311\272\207\363\0029\023{\253\271\210\036\210\270C\000\014\272Q\263\305\272X\276\244\272n\000\3139\241\224\3429\236\250\3009\210\366\205\272#FW:\334(%:+\377i9Dy$\272`\235\215\271k\355\2449!{X:\210~6:Qnu:\200p\3059\342;\335\272T\2742:_(\271:\004X\2029c\030\\\270\023\225\202:P@\310\271$.f\272c?9:\365\016\201\272\334\200\3779\310h\371\271s\223b\270\355\246P9\310\205f\270\265\202\3728x\241g:\304yE9xh\200\272\004\271\270:\036\210\313\272\340_\2009\243\236\005\272\366\033\2179\235\245y\272$z\033:\244\374E:,\0310:\336\363\177\272\212\007\3349f\342-:H\352\2108::0\272\371\335:8\r}\3209\007T\215:\031@\2029\3560\253\271\245\336\030\2722w\331\271\310^!\271+\2451\272w\200]\272\t1\273:\272&\025:Y\016\255\271\305c\230\272\3154-:\025\350\316\271\340\366/\272\"\200&:\372\203\033:\216\007[:k\241\227:\220\337\254:}L#:\327\357;\272\037 \0328\272s \272A$c\270_\235\235\271\271\374\262\272N`\3629\271\335{9\320e\021:n\367)9\256j\3519)L1:)\026\3038\03758\272D\317\032:\327\372\242\272\263U\237\270\211e\316:*$\2329*\335\325\271\310\244\342\271f\225\257\272\345\271\264\270\351\261\352\270$ \2009\266\266\2767d\005\246:\201\367\3148)\232I\272\'\360\022:\254\204\207:\366\216;\270\030zR9o#\2749YK\305\271\272\312\020:f\026\3659\330?=\272\362\311N\272\226\372\351\271_}\3108\017\004:9\233K.:\2143\t\272pP\365\270,\000Q\270\2358\337\272\332\006\240:\230\200i:\025Xj:#&\231\272G\030\032\271\034\351\352\271\327[;\271\rg\340\272f7\0349\240\354(\271\3730\2449)\221\n:\016}\300\270\243tk\271Rd7:W\251\2359`\273\225\270\325=\207:\000h\304:U\261\3139\377S)\271eK\342\271TP\242\271\261\323$\272\024^!\272U\314\204:c\301\266\272\n\322\3649lV{\272\373\226\026\270)w\021:K\036\212:\302\347D\272ZT\3568\220\'\2519Q-\2379\256w\365\271\313t\2629\317\0227\272\\Br\272\225\025K\271\305\030\247:\315\245U\271\014\272\\\272\372\223L\272vxu\272\021\244\215:\271h\3069}\323\236\271Hlc:?Q\272\271\321\253\3207\304\213+\271\213\376\3458\305\265f:\251\305|\272\212\244\037\272)kN\270Kn\3139\351\212+\271\245M\3219\272\260\253\2719\347R\271\274E\024:\302\256\3409\265\344\3759\224\373U:\313\004~8\213\266\017:\204g\3069\261O\254\272H-\0059\010\334?:9\341\3539\250.e:a y:\nf\227\272X\241<\270\210\365\2579\232\307+\272W\021U8\006^Q\272=\334\3639,O\2229s\262d9}a\177\272\341\205F\272\316\315I\272p\336\232:\320h\3319\310tt9;@9:\3115{9\226\301\3769\220\323N\272\362\345\2639\337\261V9b\207\2629\203\224I:\306\003\266:T\301\2149\313\334\3119y\031 :\005k\314\271\327\371\227\271\221\345z9\354a+:\217\350b:\240l\2429p&n:P\227\034\272L\213T:.Rk8\222\202\302:\010yK\271\277\213\346\271\235\210\010\271\250b\034\2725\\;\272\203\r^:S\341\005\272I\237\206:q\301\3159\225\241?:O<^\272-\372\0279\342\323\204:ZI\024:2\3677\272o\020\252\271\201\004\27363\223\3079\206\224\2449Z\240\':\022P\204\271\222`\374\271d2i:\267\327\245\271\203\362h\271\002\\z\272\3232\3549\271\224\300\271\245\333\3569\010b\207:\020\313\206\272V\r\0239\214\r\277\271%\274\216\271\304\323\0218#\345\243\272u8\027\272\025L\242\272|\232\027\272zH\3039\nE\305\272l\352\312:\034vC:\235$\3529\266\263F:\327p\007\272\254\301\365\271]\320\224:\316\362K\272{I\2559\005Y!\272\200\247\216:\235w\006:^\311\014\272\010\351a:\271\374\233\272\333\367\250\271v\321S\272\001\264p\2721b[:\204\350\232\270n\337\3449\035\024\2219\326\360\202:s\325\203\271\356\307\274\272\215\031\237\271\013\'\313\270\376\372\"8\023\237\247\271\377.\274\272*Y\026:\220\003\034:\035\375\3629zb\3259$\353\203:`\245\365\271p\301.7b\212f\271\316K\033\272\204\23549\024\021\304\272\332\253\250\266\rP\253\271~\321\3528\260\367\373\271\026;\353:.\267\273\271i\035\3729\000\3531:\334@\343\270\032g\2759\265\275i:\317Y@8D\210\327\271\"7\3109/\262_9\264\300\211:S\351T:\350\227\002:&S=\2729L\217\271\"\320Q9\236\252\2309v\264\031:K%\031\272\203\023\026:\022\257\330\271j+\205:\210\366\210:\206\274h\271\324\337\023:\337\037\036\2722\204a:\303\300\236\272\021f\207\272~tz\270\\D0:<\237\032:\256X\3547,M\032:\356\361\375\270u\027E\272o\360\220:\353\232\234\2705\3312\271\216\271\266\272\373\"\223:\314\365\2459\226\274\033\272]\375\370\271\377\031a\272\234\356\026:\303\346J9\275\353\2159\343g&:U<,:q\351]:w\223\377\271)\311)9P\006+5!\2674\272\370\267\2149\234L\\\271\277E\005:\324\030l\270\336\362\2339bLM9\216\226V\272\240\\\340:<B\007\272\203\306\326:JpB:\356y\323\270\320\336\2318\301sU:(\226\251:Iz}\271\322\007\305\272}\205\25091\214\3149!ng:Z\332\324\270\021+\0209\334l\0109\256\346\227\270\266\315}8\357\331{9j\273\000\273\334\260\211:g\2573:lY\317\270C$\3029_\220|\272\234\236\222:\333%\2757R\310\3039\357\"I\271\365\301?:\322\320K8\237\272q8\302H\264\271\260\243\3308L\327K9\342\035\2539\304\204\203:\271\242\3559c\210\200\270\235\277\212\272\2508\235\272\302&::\030T\2349bF\311\267\026#\232\272\336\307\2279\346\013X\271p\267:\272\200SV\272^\023\344\271P\242\t\272X\361\373\271{\357*:(\230\3439\273\006s\271pQ\3618S<\241\271\361\305\032:\231\262\3129yKX\270\017G\t\271\216\371\216:5\010\211\272=\213\233:n?J\271R?\022:\324\214\2578\340f\225\272\tt\2109p\301\365\271\347\017\341\271\026\335*:\263\037\230\270\352\276\346\271\3509\2209@&.9\211\r\342:\301\231>:\264\311\261\271V:Z\272\330\2174\272\020\310\247\271\026\273\3139#A\2069\300k\2756\266\325\3479\316\211\013\272\334*o\272x\314\212\271\312\273\242:\224\377B:\310\362\033:\360@0\271\025a\265\271\264\250\217\271\006\374E:W\264\314:\215\215\230:\014\307\343\271\237j]\272\223\230\205\271\226iJ\272D\203\346\271l\260\3679Op\346\271\027~\2228=\006j:=\230\202:\342\034x\272\312Z\3469 \353\252:\021~\0229[\244l:Q\253m:\"\240::\241\326<9i\215\\:0\366e:^ 571z\313\270\325\376\020\272\005\177\024:,\2335:\017p\3227\0147\023\273\000\245f9\345\272$8\370\263\202\2723\036o:\372\002>\272\351\207|:6%\2518R|\307:\373Ud\272;\353\357\267I\332k:M\3405\272ne\2208\203\000\271\271\235\253\214\267.\034\317\271\014\206\357\271\371\332`9\350\024\357\271\331\006h:\344\026\"\272\3004\002\272\013}\205\272w\365\020\273@\336Z\272Q/X\271^\3240:\002r\255\271\277\257\014\272\363Fp\272\310\242\267\272\n\255^9\320\332\2249# v:\\\2550:<\177k\272\320R\306\272\010M\001:2\252;:S\226\022\272\264\247\367\271l\333\2759\231\331\353:SE\331:\206\336\342:V\336\232\272\374\370\24698Yf\272|\3074\267\354\372\r\271k\000<:\265\211\207:\320}\256\271el]:\266\201\232\272.\231\2366\367\270@:W\237\0079@?f\271\353\364\271:+\022r\271-\240\300\270(\036\340\271:\"\377\271\260\343\316\267\2115\024\272\264]5\272\246e\2509w\321\324:\264\\\205\272\215m\0029;Sk:\273^\254:\321\\\373:\261\203\264\272\246\236,\271\013d\234:\'H`9\344\002%\272\274\020\0138\221\321\002:K|U\267\364~\216\272\002\241\2319\347\353\032;?TQ9e\367\254\272\301_\033\271[\216\2008B\32179\241/\037\271\300\374/:\010\344\233\272\321\"\321:\202C\230\271\213\374\270:\377\336x\272T\377\354\267\305\245\021\272\r,\233\272\022\361\305\271t\177\371\270\253\2106\271\3560\315\271A\377y8\013\231\017\270\333\224\340\266\300n\251\272\375\231\021:\034\031\241\271\232\2602\271\225\212\3549i-%:A&\320\271}\251\331\272\334,\033\272\237*=\272q\311\245\272\300\326\3459\035m&:\203\205x:\3667j9\266\234t\272y\277\261\272{\034\001:\244\211\2059\243QB9.\252\212:bu\020:wq\035;\216\206\270\272F\307\310\272\037A\253\272\355I\032\271On\215:1I\226\272\010!\027:`M\246:\347\022\023\272\257Z\020\272\233b\3339E\306h\271b\222\032:\013\243\302\271\247\3012:\352w\'\272\267y\222\271\311\325\3459 8\345\271r\237\270\271>\260\177:\276\330o9\007Y\2369\245R\3069Z\326:\272-\274\361\271\277\035K\272\004N\272:\232\213`\272i\366\220\272#R\356\271\332\246\2639F\342\261\2713#79\311Q\2508*\237\330\2719]k9LE\3509\004\202\\\272\247\231A:\233\303\0169\316Gy\271\207\327\007\272\305\223\307\272\020H\r\272W\363\2569e\177\237:\216\315\0329\264\253\200\272\341z\332:v\303\0148\345\336r:\245\232\006:\206B\255:v\037\031\272\346\236Q\272b)U\272\345\024T\272\0272\t\273\341d\002:8v\334:\334\242\006\272\263<\0079\350\203\331\271#\215\246\2723\353\3729\014$y\271\303YM:\"\"\3469\204j&9\000&\200\270?\000\221:L\035\001:\036`\264\272\367B\3279\2635b\271\274 t\270\001\352\202\272[H69\307\374\3149\370\261i\272\230\037@9x\226B9\304\\\024:n\002B9\231+j:-\"\30495\243\3629\377\203\242\27165\020::\002\006\272\266\246a\272\271\376\357\270\301\365\003\272\034\215\3009q\301\2749ZG\326:1gB8\322N\325\270\223\270\2709w\271\354\2713\340\002\272\277z\303\272\252\251\205\272\343+\037\272\253]\035\273\330\340\357\270^\315:\272\026\003B9\002\001\217\270!\352?\272\034\362(9[\202\354\2713V\337\271\321\030\322\271\260\247Z\271\364\242B\272\333\206\332\272|4\034\271Q\024K:T|\0309vB\346\270\rh\342:\000N\2019\032\345\323\271\334\304]:\005\2570\272n\316\22192r]9#$I\271\'\033T\271 \203\026\271\256\343\226:\302\271g:\271\032\3507\350\371\3558\356\017B:_\277\320\270\244\266Z\271\343\242\2729\326\332\0179\234\021@:%@\200\272\000iD\272\037M\220:\037ag\2701\371{9\343%\t:\351\240a\272x\341t\272%\306\301\271w\271\037\270\006):9f\367\200:\270x\321\272\363\253\220\272\263SH:\223\221\r:$\363/:\351\030\234\271\030mP\270\3449):\021\222\2709\201\264\274:\253\312\3079\252\236\2208Jt8\272X\207\212\271\0047\221\270\'!9\272\031\332\002:c\322~\271\311\250\2149\235\311\213\272>\013T:n\370\3728\221\353\3768\253\333\230\270%\200\241:\"\016=:R^\214\272\200@$: c\306\271\200_\3309I}N\267\275\\\227\271&\331\215\272\310\211\247\272Z\033(:A1\210\271\034C\036:\030R\2559\220\235q:\014\321~\272\221\251M\271\250\013\210\270\326m\337:\002 Q:\205\304\177\272\305\250r:\312\317,:f\377\373\271\236\332\232\272\342\260\033\272M|\251\271\t_\2369hE\250\271EA`\272\026o\217\272\r\270\3039\370\245\n;\361\236\246\272\324\010\221\272e-g9H\302#9ZaZ\272\225\213>:\260\334\2678}A\2019\034%\3779\354gG\272\321\215\2379*\355\0039\r\027/\271\211\216\355:\245\355\207\271\0323\211:\235\016\344\271\000v\266\271\225K\":\025\271\246\272y\277\0249\027\203\312\271\345r\267\272l\376\227:asb:Fl\025:\021R\3229\250\340\035\271j\010\3019(r\003\271\255\347\331\270w\314\0209\'\275\026:\273\036\303\271\376\200\251\272\267\240\225\271<#C8\221P8:\212\035F\271 \200\253\272\327w\0079S\323\025:\206\026:\272s\014\220\271\033\344\365\272\355\032-:\355\004o:\372\030\017\270K\243\224\271\031\375U\272\203-\263\272j\216\315\271\26559\272>\334\2329\341\342\254:\217|1\272Y\223\3709\245\017\204\270bW\020\272$\327g:W+\036\272\330\347\001\272\\g\202:\000y\254:\231bM:\021\370\031\272@B\023:\336\\.\270Z\033$\271\035\231\221\272+\037\244\271z\221\3179\001\357\212:\222\312$:\262Bh\272O1+:\257I\3079t\000o\271\333_>:\276yr\271l\376d:\016\312+:VNK\272?\376\300\271}\203W\272yd}\272\334)\237\271\340\367-\272T\2635\272\351&\257\270X\0008\272lY\007\272]\177\273\271%\211e\272M\210\3029\022\215J9\037&\3019\343\243@\272b\377I\271\306\275\020\272,\357\2047\366o\211\272:\336?:\342\220\256:\215|E\272)\245\326\271o\260\234\271\320>\031\272/ \002\272\n\374:\272-\202\033:@\355<\272\240\037d:\017*B\272\255\302\2079\341\331\2049\273p\2438\023\363\252\2714\220s\272\322\261\2249zN`9I\221\2008\335n\317\272\005h\030:f)\355\271\276[N9+\0024:\234\225\2738Qf3\272G P\272\224\270!\271\323=E\271L\002\235\272\232\317W\272\367;\3369\253\032\344\266a\r\2578\275>\240:L\026\3108ms\2358\353S\2609*\024l\272\205\327\3339M\302\212\2728X\204:\217P\020:\256E\314:\\\260R\272\'f\2119\276\0213:\320\t::\373B\003\272\343)\234:\007\014b\272\323\001\2579\242!\0268\277d\2149}\235\260\270X?d\272\234\004]\272\004\260u\271\275\366\2449\304\224\217:\327\330\213\272\215\276O9\376\"\003:\201)1:f\330\350\271(\231\n:Q\'\035\272\2457\3769~i\2709\320\206\2048+\365\0149\357\250\3009\332|\212\270\352O\177\272\331T\221\272\013\265\3008~L\2729\222r\331\271O\352w8U\333\211\270\341\254H:i=\222\272\022Dc:-)\210\271\347\347\001\272\330\346)\272\314\246\031:\244\361%\272\003\312k\2723,H9\307\253\031\270\177\017\\9\256\006S9\310\364\36595\014\021:j\343i\272f\343\352\270\026\014\034\271\231\006\215\272\225\333\037\272\034\027P:\rH\014\270\005+\3029d}\003:\322x.:\334\242\002\272\\\273\303\272\246\242\361: b\323\271\302\370|\271Ie\025:\265\020n:4\362/:\274\"\330\266\216\2452:\236G~9\304\300\257:\021E\2209\224\332\221:F\n\2069\223\377I:\314\360P9\264K\305\272\300\200\275:\005\243-:_\363T\267xD\2419e\260\225\270\255\26099n\254\026\272\367\347c9S\026\010\272\3312\2739\272\320\024\271?}\325\271o\345[\272?h\206:SW;\272\242D\334\271\262\352\320\271w\243\203\271\325\014\2129D\006\033\271\216q-:*\005\2529)6\037\271\312\357l\271\236\nl\272\211\213\001\272u\232\t\272\322\362{:S\033C9\213\232\t:\177\312\3349\207 A\271\260\206<\271\2330[\271D\3640\272\233[T:\375\324\222\270y\320\t8\267xy:8h\003\271\215\364\337\271/ka:\032\375\313:\213\304\0069\222WQ\272\202\232\224\2712\341\233\272\220\371U9\310\017\234:\372\232\2629\327?:\272y\037\206\2726\354_\272\241x\3158\245O\217\2701)\235:\243\325B8-\370\213\271\265\302\001\272\376\274|99TG7\337TN9F\372\034:t\374B9 \373\001\272\314\214\3749\236aB:^\375\220\270\223\320\223\272\324=2:\212Za\271|\355D\272\322(\2348\257\212\225\272{K\0279Z\313\333:\221\016u\267\'\3421\267?\327\327\271\030P\246\270e\':\271\276\253\335\271*\256\242\272\177\'\267\270.\362\2548\202{\236\272\242\252\2468\r\177\t\271\376\001\233\271\276\216\3379)\234\225:\316\213\':v*\036\272j\372\2538\034K\3379]\224d:P\37769\273\352\312\272\016\007\342\271\036)P\272\231d\334\272\336{6:\230,\345\271\023\021\304\272\240\363\202\271\355)A8\304\213\2428(\035\342\271\243yQ\272@\324E:8\246Z\272\370eN:\310\367u:\306\240h8`\23779)\302{\272\305@%:\023\362\215\272E>\2109\226\253\3669\370-`9f\253\256\272\355,\202\272-`\014\272I8\210:\264\'@8~\001\\\271:\362b9\250=$\272\327QV\271\373\216p\272\030s\203\272u\3444\272\250Z\323\272\006\343\2138\232\362\312\271HU\261\271\331I\366\272`\270\2019\026T\014;4\243\275:\220\003w\2726X\0109\307\350o\272\nj\222\272\002\241\343:Pu\177:Z?f:\316\373r:\304\254\332\270\272\230\2328\305\0310\2728\247/:\374\234\017\2725\244\216:\303\334\347\271hi\\\272j\177\326\271\265\263\264\272\317\032V:\022\320.:\030\034\360\270\316\350\233\270\314\255\2629+Jk:\301>/:23k\272\240\026\260\272\255Z[:Vi\202\272\031\227\017\272\240o\252:\220&?9\202\265\t\272\236\255\026:\332)\014\272\'\337!9\325\257\206:beI:\260\254\2129\013\366\3769\365\341\202\272\252W\2049\377)\252:\335\010\201\272\271\355\205\272\366&\2467\264\335}\271\357\236\002\272K9\3159\344\304\2249\001\346\213\271]\r\274\271\236\351\236\266\253\365\237:\230\312p:n\275\365\271fo\2019>\243\207\272\022n\\\270\245\261\021:z\331\'\272\331\023\327\271r\3503\272Ls\231\272\325\306v\272\247b)9\363C\2308\212\336\3079u^\367\270\307\354\205:B\215\230:r\235\350\271\355\207s\270\246\373\207\272\267h\270\2706\314x\272\032TE\272\356\22319\251S\2758DC\000\272\001\256\3718\376f\366:\352x\255\272\244\317\3706\014e\033:Y\305K:y\243\3619I\343\240:\27560:XZ\276\266\305n\005\272\377\260\3509\t!\0169\233D\036\272\264\013\3078\371\266\236\272\203!\2679\332\327L:\022\234\3448\006\013\024\273\262\000\3478O;\260\272\3058\256\272#\262\270\272\345WT:8i&:\273\350\362\271\016\237\210:\314 \272\270\225M\221\271\2236\331:\267p\327\271\356\245\213\272n\201\360\271\234\311\2468\304\0230\272\277\357M\272-U(:5?\365\270\241\037\031:\330\205\036\272#_\206\2727\3614\271\025\366\210:5\344\213:\n\235x\271\034O\3509\246\312l9y\365\316:\354\013w\271A\223\35682\317\326\272\221}\343\271\nqh\272n\266\2658R0\030:h\243\205:\006N\336\271\305\257i8\250\303I\271u\201F9w\342\005\273\307<\367\271^:\3169E\342\2029\203\264\364\271\025\270\201\2723\204\222\271\207Vy\271\324\337\016\272P.\265:@(\0229\271)\2428\207\244o\271\370\344\0369\341Y\260\272= \3269\260se:\324\372\247\272\031@b9\304\026&\272rh\206\272\343\2278\272M\307\034\272\337%\305\271\373\357\203\271c\200\035:\351\0009:)\237\2268F\010\316\272\'>\3439b\361\001\272\207%H9r5\212:\231vl9\243\021h\272\035\'A:\3146*8\315\375\3709\345\333\347\270\215\314\3429\352\217\003\273\223T[\272\0069\315\271\216 \247:m\233\3168\313\001\3269OR\2128\353\275:\272O\035\3749\315CR:\240\355\003\272bxO\2723\004a\272\025\305\202\272OX}93\332\215:v\234Z:\216?\232\266\206\256\3278\207\333::?\330#8 O\032:\204\322^\2727\n\210:l\t2:\323^_9}\211\261\271Ef\022\272\303@\255\270\245\030\2039\n\211L\272\357b\202\271;*N\270\362\3158\272P\216\242\270\321\353\3119\037\272\0209S\017\3509\222Jg\271{7\214:\235:\207\271J\260\215\271D\254z9UM\177\271\001V\234\272\037B\2039\244\341\201:G\026\323\272%\373l\270\247\232\225\2713\212I:\340\337\037\272\373\336\321\271\313\262T82\355\214\2722\3041\272\276\202\0319\203\342\373\271iL\251\272\201!\022:\216\n\355\271/p>:\255gi9\177\036L\272\363c\366\271Exl\272\300\213\240\272\317e\2069\005y\361\271H\303\3778\237\356\262\271\n\223\374:\275\033\0249\'\273\t:y1\3457\230\026\221\272\253\213\3659\315\266\202:\005\3228\272K\342\277\271v!c\272\311\362\262\271O\271\014:\252i]\272-\333d\272\216\261B\272\305a\335\271\010x\244\272S*\234\271\207\'\005\271q\021\016;n\024\0278\327\030J\272\376(\252\271\002\337\2128a\220\352\271^\201\'\272\330\245T:\375\340\204:] ;\272N\356\2079\320\017\212\272\312w\222:\005\262k\272\r-A:\217\265\007\271\352S\033\271\324\313(9\016\227\3319(p;\271\304\003\327\271\214\332\376\271eI\0039\354\317e\271\247\240\273:Q\232\267\272\001~\310:\345I\020\272\343\312\366\271\211\021\031\272\3409s\272\032y\3749n:\234\272M\264\204\272\036v\004\272W?J\272}s\006\272l\367\203\272\300\343\020:\324\"\34696!m\272\020\037\"\272\231m\252:o\262x\272\317\323\1779(\\\236:I\370x:\2269\215\272\243d\3149\214\000\'8\225\026m:DlC:\212\025\233\272\003\"\246\272\036w\214:zX\032\271\336Z\244\271\224\311\014\272\302_\3039\223Q\002\273/24:\244k\2469\242[\320:\337\014\006\272\365\020\320\271\030\3717:\341\022\2319\355]\3159\227v\3259\246\256\'\271\3770H:\334[\214:\001[\235\271\356\303d:*\374\277\272\243\006t:v\360\3149\373\273\223\270\rQ\2109\262.e\270k\031[9\276Mp\272\337\374\313\272\2257\3168\t#\262\271\027\032\"\271\305\241\324\270j8\337\271\177]\260:\"\1779\271\364\325(:o\304`8\345\324>:\023\316\235\272\252\343\210\272\343\020[:\261}\237\271n\275\024::s\3348_E\2169\315\361\315\271\372\320\252\270I\271p\272j@-:\265\251X\271E\23698\201A\200:\304H]\272\003M\2479\207-\3338\022O\2628)\325(:\007\265\222:f\263\3709\235E0:\032\24349\372b\3419\201\036\357\271\035\237\025\271O%Y9\rQ\257\271\tN\0359Y\207\r9\306\221L9\246\274I:k\004\226:k\036s\272\215\365\211:\207\312\355\271\261\227\244\271\3331O9\342\253\001:\244\253\275\270\322d\215\272`\346\003\271\323N\255:J\\4:mg\03383\341\2749e\323v\271P\"S9\205\213\232\271\223hR\272~_\207:z\306$\272V\177\3739\354\353<91S@\272\346\246\271\271\006\240\1779q\006\233\272Jb\0029\236\275\377\270\301\243g:,:X:\013\237\270\270V\371\006:\225\222}:\234\317}\271\234}\223\270`:6\271\\\244_5z\276\374\271\005W\253\272\200\212\325\271\225\2055\272\004\311Z\272\343\021?\271\3519\210\271\263\340\231\272%\270\3178\332\234(\272\023\021?\271\003h\"\272\351\006\201\266>\233\2009\207<(9\314\326\3759\222\013U\272\263p\2019e\302\\\272\2714\004:\370g5\272\'\342\020\270\216\022\t:!l\223:W\323\3409s\271\350\272\233\267\217:\204\'\375\272\207\004\3129D\031\2229UX\370\270\177\235\272:Y\250M\271[\344\240:\t\363)\272\267l#\271\234\020\000\272C\253\2529&\030\2348>\242\246\271/R\243\271\270\377\'\272E\234r\271\216>\204\271\356\226J\272\3319\230\272\001\303Y:\3012P9h\007O:\252\"\2508\177\243R9\236\370\246\272\364W\306:\274\023\'\271\236\224\2678\020\251\2338{\250\323:j{\331\267}q\363\271~;\304\272\210\221\2529myP\271\317\023s\272G\341\326\271\203n9\271\305w\367\271\216\033+\272\321\374o\272\216/\3739\351\321\036:\030\'$:\316\026R\271\302\260\355\272\007z\224\272\306\373h\271\236D\027\272\244\215z:\3245\320\271\373h>\272\2267\216\272\002\'/:\214@\353\270\013,f9\312#\263:W\034\2509\306>\255\271M|.8\315\373E\272\365H\007:\304\202+\271\346`\206\272*\311\321:}\352\341\271\014\227I9\037\207{\272\016Sc\271,\021Q9\n\024\2019\371Sf\272\270\327f\272\255\206\177\272?\346\007\272w\035J\272 \373\306\270\257!1\272>\215\200\271\302$\33798\231\177\271y\325k:\363\003\301\270\260\213 9D\254V9\216\347\251\271\235\270\031:\021\004\007\272\327\002\252\270\233\356\3658\316\206\365\270\304\234\3079\033\177\000\272E\277h9\243\026\005:\312\254\222\271\372T\2729\361-\301\271\363F&:\335\335\225:\245\346Z\272\013\010*\271\010n\211\271\350\371\220\271K\234\351\271\203\277\265:\020\261\273\271\247\262\010:%*\367\271a\377\222\271\023X\033\272\004\255\3009D\344g\272ls\225\272)\270\032:\013\256\275\272\353\241F:\027t\021\272j\211\256\272\356\007\316:\277q\236:)\351Y:\216\341M9\022;J\272\271\331\0049\025E\3609\017g\237\272+\207\211\272+<\020\272\0001$\272^\311\256\271\276\341\263\272\203\177\331\271\310_\314\266\303\223\2318wu\351\272.+\026\271m\224\224:\276s\305\271\025\223\000:\016.t\271`\370!\272\273a\2517\345\357\3179\300\000|\270\277\203\217::\300\300\272)\004\241\272\005\323\030\272E\277\352\271\252\210\331\272\360\027\267\272\"L\230\272C7\006\272\'F\223\272Wr\357\271p\355\2179\353\270\375\270\357\t*\272\3413\363:\3074y\271d\365\243\272\010\213\035:E\360!8xq\014\272:\206\2079\027\263D:\266\357`\272\263r9:\351j\2519\005\017\250\272\341\035|\270\310\243J\272\357:\231\272\214n\014\271.h\r:\320E\006:2\007\357\272{YJ:>6\3449E\001+\272\336\033\2259\323\221\277\271\343w\213\270\216\256\213\271\2638e\272#\037D:\330\375\356:y6d\266b\237\371\271p\343\3359\276\341\2709\376\017\010:\307\306\2339\367nB\271\002\234\330:\201\240\250:\271\221\230\272\351_M9\355\307|\272\034\270\264\271s\203|95\244\':_i\3249\374\233\016\272\236\262K\272\352,\"9\336_\251\272\322m\201\271Q\243\2157\35286:{\244\2239C\223\033:\021E\302\271\003\311x\271\210\277\331\271<$\027\272\356\254o:o@0\271\265\"\256\270\333\375N7\200D0:\014s`\271\247{Y\272\225\254\312\2713`\265\272n\203E\272S():\0051-\272#y\0109\033\\y:a\006c\272\256\257\211:\006(\2638i\335o:\275\312\'\271\rzu\267\300\277\025:w\207\212:)\276M9\265`\027\270L\371\232\272\257\226|\272&\225\233\270\371\031}\270\'\344(\272?\307w:\330\367)\267$v<:J\207]:k-\217:E\214\310\271\223&W:\0340\032:=M\311\271\352\226/:\025\301H\272g\232\024\272$\372Y:\210Km\2700\264@\272\376w\021:\335\004\306\272\313O\\\270C\252+9z\0239\272\304\311\245\272\374\201\223\272\3772\3127&\023\321\271\360\211H\271\242P\3339\253/\002:\355U\202\270A\345\377\271m\267I:2`%:f|\3209U\324_:\324\035\021\272G1u\272\320\322\2769\252D\0209\\[\013\272_8\2178[H,\272:d\007:7b\2156\2720\000\272\n\331\2457\363\317\3077\326\210\237\271\343=^\272^,\235\270\371J7\267:\244\234:\025\301\323\271\037\356\221\272\336\226!9\222\206\3259\221g\361\270\3753\022\272\255\300\0369gK\3159\372\240\032:6\214\3579q\177\236\271\026\n\272:&)\251\271\336\315\241\271[dQ:\322\271?\271\305\202\237\272l\345\003\273r\354\t\271$\305h:\347\275@:\212\356\320\270\007<\321\271\314\242u:\303k\3028\230\347\2577G_\233\271\227#K:\335\027\355\271\265\206\377\271\224\314i9?;\3128]\254\247\271\033R\3679\003\231\370\266\217\003\216:;\242\277:\025\363~:C]\253\272+1\3569\'\325\234:\254\201\252\271\r\254\210\267\326\334\350\267<\332\006\272b\311d\272\254\"_\272)Y\263\271\264\241d9\253\\\343\271\334TM:/\323\016:\374\346\312\272\036x\005\272\2035~\272\214\014\260\272*|&\272\272I\333\271\345\336\3509\025\036O:A\211\2559&8%\272E\037\305\271\324\224\003:\220\251m9\3368R\272\0166l\270|\354\"\272\033\264\224\271C\367\2149G\305\302\270ncB:b\031\207:\023\237(\271\005\337h:C\335>\272;\362\242:\2117#:\003\304n9m\214\201:t\311\262\267\321\020\3239\246\350V:j\'\\9\231s6\272\334\233\3208\303\225Q:\245\264P:(\333\3068.\354\205\272\227W\236:\003\344\2164\271[\2029\320\265m\272O,\013\272\021}\213:\003\255\257\271Bl\023\272`\357\214:\324Et9\3243\316\271\234\305\353\271\205\223\216\272\235\250\3709i\032\315\271[\211\3449\034\006.\272g8\200:\351\2115\272Y\"\010\272\362=\255\272\017u\351\270Q*\226\272\273d\3619\201\215n8\275\022\241\271\355\243\3278\226\261\306\271\261AL\271b\343X\272\340\371\3238\2605\002;\364\231(:~\324u:\2309\3409\370\367x\271 \344\354\270]\247\206\270\361&\334\270\203O\351:\347A\261\272\366\256f9\360\347\0168\020\341\217\271\202\0066:5Y\237:\014N\1779\366uD\272g\270\023:\017\t\342\2723q\025:|o\t\272v>\274:\267a\022:V\333\3019\242\344\027\272\212\243K\266V\360\001:\031,\354:\240\000\201:\226\035\2117\305\323q\271\026\231\031:\006\212\035\272u\013\225:\361\325]\271\nD\273:XmW:\373\370\355:ji\020:0#\200\271\250\014\2679\037\254\201\272\341\010\226\272\346c\215\271\032\017\006\272J\374\336:\202\325\023\2728t\2409\352\240\330\270\263tV\271\254k\022\272k\362\0169\214\024\304\270o[8:\247gF:\232\230\216\271\004\366p:-\246\252:R\216\024\272\235\335\2129\255*\2619\271\331u\2727\014\3079\251\342\3059\n\215w\271^\316\003:92\226:\273\256\3279\276[\33496\274I\272\266\202\2239^:\265\271u\354\000;S/\3567\265\340d\271\026\302\242\270d{\204\272\277$\262\271B\214w\271\327=\226\271\220\224\017\272\251\272\000\272\266\00639\264\320\3339\3120\0207\310\354\220\270y\355\t\272,\370\3108e\263\3409)\363\202:\335y]:\267\235A:&\377\231\267\247\014\362\271\023\002O\270\347\215\222\271\252n\232:\"\364\370:\343\374 :xm\31495\343\350\271\304\221\267\267\001\237N\272y}$9\207\233\2129@\232\254:\234/a:\260\235\r8^\3561\272\264\276+\272\0133\3419:\312\367\271\3008\245:\366\322\252\270\223\247x\272N\236\000:\222\224f9]K\371\271?\335\2358rS\0039\365\r\3029\036\261\335\271\232Bj:FF\2379\341\344\253\270\226\346?\272H\362o\272\223\346\016\267\310\3674\272\3435(9\240\256\2078<c\3239\332\001\036\271\242\"\r\272U\335\244\271\316\311G:\232\207\230:\217s\240\271\202\310\3649j\274!9\234W\3079I\370\014\271\005\026T:\354\\\267\271-\021A\267\376\t1\272\276I\344\271\332\024)\270T\255C\272\327\265w\272\014\022\2717vZ\227\272\310\024\35794\263*\272\2422@\271\256\032\320\271g\'\325\270\313\335\2538uZe\271p \300\272]\263\3309a?{\272l\224\226:\236\213\3539\376\033\231\271\321|^\272\247\201[:k\356\033:\206V\226\271\250\252\242\271\220\213=\272o\344[\272t\235\3509j\001\0019\377V\3519\017\t\245:\263O\370:\366\365\032:\335G5\272\327\330\325\271\017$\016\272p\336\206:\003\031\345\271\3145\372\270s\340\0338\360!\017\272\246>\313:,\276\201\271\016D\336: T\340\271\212A\244\272-\337r\272+\254y9$;\322\272\270\202h\271,\310@\272\300\357G\271\177\332\001\271\n\\\036:n$C:`\005B:}\022\206\271L\316r:\363\244i\271al\202\272\357#\3779\230\354j\270\267\301\335\271\370\236\365:a\253\035:\332\021\004:i\243\262\272\0043\2667<w\0019Z/\214:)\306D\270\302w\277:\341^c8\026\267S\272`*\254:\360k\265\271:z\3739l\357{9\376\\\2758]\r\357\271\241\247Y8\273\003):\240\"\204:v\235\2668V\307\3329\263\252\2049\355\203\222\272\307i\270:\332\361-:Q\2735\272\234uW:J\334S:\024\201\314:\022f\237\272\327QL\272<\007H\271\034G\227\272ju\302\270\200k\003;\r\317\2558\353\360\324\271kX\007\271\247\327\037:\243!\037:\330\002\022:\321\241\2629\001\266\201\271\354\210@\272\361\313d7\345\210\303\272j!8\272+\302\2549\264\333\3559 f\235\271\360+\2009\0307\246:\277\326\322\271yR\205\272\241\2609\270\330 \202:\367|\325\270\013\245)\272\345Sp:b\236\2559w\320;\271\224\\\3778\027\365\0059\240,\202:\236\247\3039\324v\024:\263r\3109\255\342u\272\336:h:X\214\3377\233]x9\276\007\322\272zn\240\272\002\255\r:x7\2419\277\255\026\272\250\252\320:\327\272\2479&\251\370\271\254,\204\272G\2062:\223\016]\272 |\026:\035\223.:\004\337\23490\216\3169\232\027\2079\212\232\3379\364\324\003:\223Ff:\236\217-:\342\r-:\264\263>\272s\0028:B\264%\272\023\226\310\272\231\346\331\271\202\342\236\267\242\327\2678P\n\2059\032\321\024:\344\216&\272\037f\2249\224\2062:\317\331v9\215k\216:\226<\217\271\305\206\262\2728T\3409q\310v\270\271\0323:\334\220W\271B\r::?Z\223\271i\346\221:\202F\223\272\341\252\256:3\336\230\271\026\200\024\271x\305\007:\344\344\'\272_\272\27492\007;:\307O\237\271\252\013\220\272Ots\271&KK\272\247&\014:|*\353\272\233bX\271\253$\320\271D\2478\272\254\311\001\271C\242@:\271!H6\206\006\n:\3507\230\272Aj|\271\360!\234\270\314\242\231\267+aD\271@\315\227\272\323\214\2549i\333+\271\224|\221:\016\241\031:\321+\244\272\023G\031\272q\350 :U\306\204\272%\375\026\271\233f\205:(\'M:SY\263\266r\203\233\272pPL\271\246\254\3459\034\272\3438\315\326T8z\320\210:\252\321>\272\325T/\272\235\032\005:\251\327V\272Fmn9V\013\2418\261\231;\272\222\312\030\272\326\331P:\016%\336\270\330AT\272S\331\\8Le{\272\332K8:\215\372)\272\273\303@\2728hb\271\273CD9\270\332\270\271G\005\025:\340\225\3209\345\3247\271}\343\225:\016d\0259\301B\232\271\257\007\200\272\342\20779\364\250\3708\356x\021\272P\026d\272\220V\245\272\276\024\225\271b\233\200:\354\320\217\270\2132o:\360}@\272F\377\2069\177\250\235\2724%\032:\253\343\300\272\353\355\304\271\352\355I:\323\276,\272K\262\263\27176\2619o\315w:9\002\013:\221[\002:\317[\332:\177\266m:\025\217\3229O\233\241\272yl\2659\342\03259\261X\t\272M}\2719jW\t\2725\331*\271\213z\2739\214\256C:.W\2359\364\217?:g\222\265\271p\231`\272Jg\030\272W!\371\271\234\304\217\270\207\265\222\272\247\335\0059\211\020\3609[\264}:\214F]:\307\020\202\272\256\303\3648\014]U\270\265\323\2679B\373\201\271\373w\327\271$,\000\272<\027\002:\t)::t\210r\272\306y\323\271\337\017C9\331\215\000:\345M\2449\310\nB99\265\341\270G\306\2619\0139x9\325L\221\272\2572\2658=\276\016:\251\356\355:f\303\2339\333o%\271@\275A:\330\036\277\271\242b\203\267\306X\235:U\317\237\272\215\363G:\231ry\272*f\024:\377Cy\272\256rx8\323\016\204:\305x\370\271\366&\371\271\242CQ:\265Y#:\276!\215\270\330m\0149v4\017\27109\3259\031=\2339<<\266\271\237\014e\266{\255\3509x?\372\271\025\n\211\271\243\0207:\002x\3709w\321\026:\246:\013:\215r\2119\266\260\217\271v\007\010\272~um9l\375#:\235I\2749\306\335+:\322\305.\272B\245\3549EY\006\271\372\330\216:7\033\2308\363b\331\270\020\03139\343\370\2539,\033\3729D\tz\272\215\364r:\2709\311\271\026\225\211\272+v\227:\010\220\333:\356\253\254\271\232C\0229\200l\036:\020\244\027:\013\377\3319\313B\252\272aT\t\272k\033\030\272.7\217\272\330\316d\272G\013\202\271\342#\206:D\206I9)\0343:\351B\031:\365\r\007\272\267\3036\272\2412\315\2710\341\2769\367\307\277\272\356\021K\272(\303+\272\300\236\340\271=\036^\272F\302\021:\345\225\3348]+?\271\007\351\2219B96\272\313\314\033\272\203\2740\270\377\326\3608\344\373\235:\367\372\021:\345O\355\271\377\031\210\271>\036\2259\'\330M\272P\003~:\272\236}\272BT\203:\247hq\272*5\n:\265\250D\272\302X}:\337\375}\272\021\307\030:\255Z6:FAm\272~\332\324\271\300:\207:\036{\216\271\347\024o\271^\216\r\272\030\006\000\272\312\310\3769S\365K\272\332\267\2359\202\231\302\272\235\207\022:mjj\271\344N\030:\223\237\336\271\276\025\276\271\006`\324\271\274\037\3739/\014\2319\205\224c9\203\377p\272\346\262X:b\212P\272E|_\271\n\022V\272\306\361\025\272w\362\376\271A\243\002\272\364\300\2569\305\353\2459\t2\261\271p\252\374\271\362\220\315:h\202\247\272\014\006\013\271\317\t/\272\365\374^:X\352B\271/][\271\374.\323\271;b\002\272\322\010Z\272\243\2251:\331]\323\272\301\234\234:\270;\255\271\003-g\271\324\005 \271\245&5:\t\235t8\326)\210:C7A\272*\213\3479\223\242\r\272o\356\232:\311\216\3159\016@#\272\032\342z\272!c\225:\013\243V\271\2674V\272\222\366y9\234\351z:H\352\304\271\201\332\3759\356==\272\251Ep\271W\240\367\271)\374\3619\336E\214:w\274\027\272\027\253\0369\366\365\n\272?=\247\270O\247\':\0146M\272U\210\3049[\016\2649^\303\213\271\022\304\273\271\241\231\2049kWg8]\322{\267*9\2078\212\256i\272\361\307\022:\336\240\000\272B\323\307:\305B\202\271\357s\014:0\330\3618Fm\301\271\223\207c:\341Q\207\271\016\356*9\365\317%\272\221\226\222:\213\323N9\t>M:,\277\021\272\030m\n\272\364T\207:\346}\336\271Oz\276\272\235`O:\342t\267\270\273o\033;8\312\002\272\303|,:\362\347\217\271h\204\263\271\326\250\013:\226Q\027:\036\265\246\271cC&\272X\335\004:\333i\3018cU\205:\243f\n:\367EU8\214\230\3559\304x\013\271\223a\317\270\322\210\213\272PP\2529\263\344\2668>\r\2469\263\3039\271G\274\2729\224\310\2139\304\\%\271\353\264\270\271\014\277:9Z4Z9$\t\010\272oT]\272C\003\2279(8j8\010)A\272\342q :O\310\235\271_\2127:\306-\0009\334\265\2259\275\342 \272\316\020\2578\366\323\3439d\325\242\267n=99s<\3446\3706\3009un\302\272\236Z\0059c\366r\272\244\223\254\270pU\311:XMB\270\273W\226:\364\352-9\331~\330\271[W\243\272\352_\221\272\266<^\2722i9\2726\024Q:i\264\227:\351\221\215\271\220x\365\271\241/\366\271\221\346\3229\031D\374\271%$O8\254\r\267\271.P0\272\260Q\177\271\207\275\373\271\232\217\223\271u\323K\272\025\006\0279\231\203\270\272k\343\215:\010cy9\243\276\177\267&T\3339\205\372\303\271\026)\375:2\206\\:\371h\245\272\362c\201:\352\023\3458\375\303\3429&\235\240\272\337(\236\270Ux\\:\007`\250\271t\360Q\272\373\345\371\271Zg\0349 \325\2349\013.\0059Z\347D\272\373\325\3719\247\303\013:el\2109j\220\033\2729\313)\267\313\334\002:\334\306\001\273\200c}\272\216\274\215\271\241\266\2748\203\260\020:\375\332\2429\205\313,:&\331\360:\362\314c\272\257\352w\271\275\270\025\272y\351\205\271\024T.\272\3510\237\272r\241\035\271\326\347\273\267\371\354_8|\224\221:\276J\203\266w\341\2449\036Z\250\272\273\343T\267!s&:\237\022%\272sc\2058B\222\0349ep\3169\237\225\205\272^\3361\272\215x\2477\353\023\3319$\276\2479\021\367\271:_\356\031\270\177!\335:\005u\002\273\336\313\3349\263F\n:\315\214\010\272\017\003\002:N\332*\272!Q9:\347\306b\271\352Z\237\2725\261\371:WS\377\271\2526\\\272aKR:\330Q\303\271\245\213\373\270]\251\272\272r\035#:^\013\3538\007\016\241\271\315\311W\270\3459\0139~V&:\361\035\016:\313%\3049\037\n\261\271\202\333J\272+\240\372\270\317\351\3728\274\254\240\272_\374\\\2711\370+:h+t:E{\274\270\372\177\335\270\225\266\3478\263/\2758\212\007C\272\353(\373\272\243\\\017\272A5\017:v\005@\272i\235K\272a\\\234:\241\004M\2728\355\205:\004\025\241:?<\357\272\214\034M9\204\331>:\"\352\3249\251\003T\272\366X\306\272}\"H:\207(\301:\226\\\030\272ko\26794\240):\377\333h\271\251\325\226:\002!\"\272\204\355\2349N\036B\271\022\235\035\272r[09`q-\272\307\235*:m\235=\271kQ\270\271\317gs\272h\333\223\271W\265\207\272\207\302\2659t$39j,[\270e\"&:\006\262\204\272\241\301\3279+c\2369\312\215\252:Q\265>\271\355\334\314\270\'\327o:\277\333\3228\311\333J:\355\231z9H\241\200\272\303XM:\263D\336\270\243\264\314\267\037\024\3358\331\207\305\271\277\237\225:\241\177[9G&\201\272<\224I\272;\372\000\272\224\256\276:\004\266\203\271\346;\260\271\002C4\272\260\211\267\265b\256\377\271-\312Q\270\276\301y9}\304\330:I\242\252\271C\333\030\272\025\260\2209)LS8\370Eh\271i\321A\272\2570p:\350\240A\270\n_M\272i\313\206:\272\002}:\350\017\220\272*\305\032\272\032r\023\271\207G\311:\224;\006\272\371W\232\272\020\010\2179\373\363\300\271\\\337T82\302t\272\356\030,9&5\271\272\201_\3039/\000\3338T\"\212\271\216O\260\271\352\013Y\272\242.M\272*\371\352:\010\232\201\272k\002S:\034X\252:x7\212\271\236\271c89\014i\270\325= \272\2330\3719\"\274\222\272n\312\003\272\232UX:>\030\0329d%\261\271\311\240\247\272\336^)\272\035\267&:J\377R\272\371f\3579\373-x:\271\036a\271+F\237\271\333\222\3139O\0356\272\353\344\213:p\361\3069\2250u\272\200d\3229,\310\030:\031M\25258\014\3349+\216\233:*\322\351\270\327\335c\270\267($\272\344\360\2148{\244\2129=\306\224:\263k3\272D\023N8\332\324\005\272\376\236\275\271\3035x\267\375\321\233:\334M\306\271\000\241\262\272N0\363\270{\202\220\272S\027\257:A\013\2069\317\236\252\271\327\027Y:\241\233E8\330kN\272\314\031M9\225Qy\272k3\317\271\322\345\036:\013\317;:\230h\256\272\005\340t\271\254\355t\272X\265\0019=K,9\356\207~\272\254\366\2119\272A\2368:\342b\272\322*9:\205\244\342:\357c\007\272\'u\240\272\025\264\014:Y\275(:Cz\027\267,\036\221\271\231\240\233\271\313]\372\271\036\337\215:L\346\030\271\334\217\231\272\025\264\203:o\026\032:\376\220\343\271;\240\323\271\254\256N9\017a\005:\325\231\351\267L\017\2469\273J\023\272!I\213\272\234F]9l\343\3558v<n:\004\315<\271\206\215l\270\321\003\336\271\222z\364\271\372\262\312:\006\322\036\272\'\366,:\323P\256\270\254\263\025\272E\343\2427d{B\272 Z\210:\340\377b\272M\305I\272z`\271:\264\341\351\270\252H\3119\204\207?8\214E\3639\"\2047\271h\260\340\270\233\024\3438\343\232b7y\353\013\271(n\224:d\367v:pgD8\313W\311:4E\035\272\270\221 :\367\037\311\271\007\230\271\271\353\343\227\272u\373\326\270Z\021x9\366Ab:E\314\022:\373\037\326\270\201\025M:\373\354\3029\335\345n:\300\204\3758\244sC:\333\273\205\272f7$9\262\276@\272\017\317i8\322\211~:\312\331\036:\332\352\2639\223\305\331\271fW\0069\013-O:\266\002\3109\231\266\272\271\315\201u:\212\224<8$\263\341\271C\307\007:\346\035\3279\370:\320\271`2\000\270\212\211\2058\220\351\026\270a\000d\271\324\316#:\313\225\r\272\315e,\272\361\300(\271Sj\3249u\"\017\272P#8:NG\030:\265\351\247:\243\002K:\353,)\271Sa\231\270\331\363\217:1\201\335\271\334\031\206\272\025\032\013\272\306\007S:A\303\340\272\250\370\002:\007\274\236:\337x\333\271GV\021\272\214Z\r:k\201\003\272~\210\3569\205C\2668i5\363\270\201\030\017:\t\217C\272sf\322:\336c.9\t%\304:\225\270I\272sj\357\271\2354\3577a\232\003:\262\017\3038_1G:\330y\231\271\t\264\n:\242V+8\034\310\022:I\374\2308\354\230M\271\377\210\0029\305\366K:u\252\201:6\226\207:M\204\177\271\204H>:\365J\3569k\240\267:\321n_\272+\230\2719^A\":b\335\222:]\361\370\270l;\203:j\207j\271\232Z\0319e\020!:\310\031\324\271{\227l\271\362\357k:Y\027E:\200@u:\203\265\326\270\t/\225\272Q\364\304\267\301\245\026\272s\340\000\272\336\035Z8.\177O\271\000\005O8P\027\267\270R\231\3119\201d\230\271~\227\2109K\036t\271]\315\371\271\312\006\2319\353.\2169\251\377\3538\375\202%8\200u\023\271\000\231`:^\266\2218\253\267\003:3\014\3759YW[\272\"T\334\270\333\202\270\271\235C\231\272\353\203\223\271s\020\2639\217\263\271:\013\220\241\272\206\345^\270\311<\2139\262.p:\220dd\272~F\315\271U\3635:x\237\231:\245\334Z\272W=\032\273\300MS9\305n\\:\332u\030\272\002\332\3039c\341\265\271=\026\t\273r5\3309\351\34529\230.\334\271\322\374\2069P,Q\272\262{\211\271+\307\r\271\242\273\013\2724\220\252\271D\251/9\325\242\001\272=\326\204\272\375\221-\272E\370]\272N\301\363\271\327{J8\343\347f\267T\335\r:\362\005\335\271\322\030\033\271\275\234=\267(\203\231\272\372\307\035\271\370L\2439\275n\375\271\331\257F\271u*<\272\026b\271\271\300\224\027:\242-@:X)\3129\313\217h9\314\027\214:\262o\300:1\215\303\270\2351\3368)\264E\272Xh\261\272\037\035\3549\316H\3238\024\313\374\271\243\333^9\233\035\3369kp\262\271\022\261\266\2715\224D\271\007\206\271\272h\315g\272K\255A9/\036C:T~\001\272\325\220d9\377q\312\267ZMe\272\204&\3048\354\342-:\244*\264\270\315\001\333\270\217\350\370:\025Q\007\272|\250\020\271\355p\024:\312\355\200\270\341\304\374\271n`\265:\243\026&\272vr/:\274\351\3269.P\3409\310\037\2379\365BF:n\322\324\272\376k\236\271;\347\2049\206\006\002\272/6\354\271\ru0\271&j\345\272\226\257\2309\371>\246\271rmB\272\0062\200\271\337\034\362\271`\240\007\272\275\321D\272v\000\311\271\353Z\\9\364\026e:\024\246>8\343\314\3709\370\250g\271^\010\2679N\251\251\271 \311\3579\372)\"\272\036\"\212:\3015\376\271\027\035{\272Y\035H\272\024\216\033\272\240\225\3729o\354\3109\020l :&\243\002\272{\005\233:\356vY:dv\223\272\2239\321\272\031\'\234\272\323\342\016\273\251$V:\345\273\2369\231\005\211\270\245\214\3777>\234S9j\177\3019\305&\244\271\356\001}9\234\361R\272(e\0059\223A\224:C`\330\271\231\001\026:\327\177\2379\233\270E:L\367\231\270\330]\244\271\214\034+\267\017Cg\271slm\272\374\270\225\272)\177u:\303#\322\271\377\212\237:F\205\3338\351\215A9\014\374\037\271\224Pz\271\306\365m:\026k\316\271\035\360\205:\032\256\360\270\370O\250\271\213\327\2719\226\027\267\270a\364o\272\316\034O:\264TI8M\227y9\315g\226:\341Gs:?\007!\272\332\252\3759\245\266g\271mV\2319\342\277>\272\376\r\274:\371\216\253\270)\263\2629\223D\203\272|\3375\272\351^\2519\307\245\345\271\007\212B:6L\217\272 \372\342:i\016(\272\345\365\2528-\333\2429M\360z:\006\267\002\271\253\02509\001\344\001\272\276\320z9\261k\027:[\324\024\272m\307\223\271\344\245\n8\214\307\023\272\266\033D90rA:\276\036\254\271A\275\372\271k6h:\033\031A\272\3226&:\024\"g:\254\233z\271\307\010\374\271U\275\2358RY\205:\250\021\203:\373\320E8J\366\246:\320/ \272W\'\003\271\277z\357\271\021\370\32599\364P:EH\371\271\377h\2709\351\177\013\2710|L9\'\332\0048dZ\263\271\343\2355\272\222G\202\270+v\3519\363\236\345\271\324\250\3619\003,\021\2672R\2709\362\237\3049\320rU:\337\017a:\341|\242\272\014A\331\272A\351\270:u\341\n:-/\037:\21117\272\355L\210\271\242\345\3068xq\207:K\262\032\272\360\255\330:\376q\326\272\036Aa\272nFD:\025\276$:\224\343\3308\022V.8\'F\n\271\315\361\357\272\262pS\272\221\233\225:\352\020\323\272\362\264E\271\3179\225\271\303A\2308\300\247\235:7([:\303\353\261:6\234L\272\321\253z9\271\024\024\272;\033\3609\277\025\3249\0031W\272\321\312\013\272 \371^\271\027\344\340\272R\371\235\267m\002L\272\022V$\270\033U)\272\346=\276\272$~%\272\240\373\000:\377T\3349H\'\240\272\264\352\000\272\033\205(\272\000\317\254:\227\243\005\271\nY\3328#{\335\271\224\217\005\273\315h^::\265a:\202\221w:<\217\203:9|\313:k\372\2018>\310\024\272\316\260~9\332\263J\272\302e@\271\254C\007:\363q\276:\020\220\333\270)\203\2349\365\257\240\271v@C\271\314O\254\272\206\001E\272\251{\213\272\260\025\321\271\372\347z9b8\212\272?J\3679\256\000\2559\234N\2509\"\255a:\302F\034:\210\305\220\271\327\013\216\272R\350\034\272Iq\3479f\210\340\271\037\232\302\271#\263\350\271\"\221a\272\3078\3579\251n\303\272Kp\272:\365\300\17773Xs\271\262|m\272\004\354\2619a;\020:6\275\227\272F\237~\2726\270\027\271\331\244?:\212\237\262\270\327\301\202:\000\034\200:@;\214\272\362\231h9pp0:.9\223\271\'\014\003\271|\251\030\272\346\343\0068\375\352\3159\262\272v\272\221\304\247:81\315\272?\334F\2721R{9\310\347\230:\\\312\332\272R\242 8Am\252\271\234S\263\272\314$,\271a\214\001:\325\276\216:1=Z9\004,\377\272uP\2329\256\262\274:^\207n\272\2242e9\275\331\270:c%\310:)k\256\270\344\235S\272\256J\026\272w)\022:\034t\252\270\202\030\026\272z\20749\201\024\001:\200\256\236:\346\274r\272\014\352\025\2728\320\3169ff\265:\337\215~\272\230\272\3529@\236\200\272\260\205\2469:n\013\272}\237\3717$\361\325\270\313\017\3559\356\247\023\272~[\267\271o\312\376\270Q?\222:\343\335F\272\006`C:\307)\014\272gpr:d\277\204\272\344\331\006:\375\2616\272\230\005\2759\356\367/\272-\301\343\271\267T\016\270\022\361c\271\225M\266\270/V\240\271\367\r\261\271\250\317!\271\013\254c87\336b9\346\032(\272N\021\346\2717\342\262\271T\250\2139:9\353\271\247\304\2229a\373\3149SG\232\271\371\336\355\272\210\312\360\271x\273\226:\004\177\016:\323\347\\\272\370\370\2459y\216\027:\251\014\2639m\002\313\272\353R\022:n{3\271\207a^9\033\375\2238l\270\"\271\247\313\326\271\317\025\004\272}D$9\275\366\362\271\217\367\251\272&@\2347D\247\3119}\224\245\271\361G@:\314=\2319\231\242\2059\2303\303\271\312z\200\271\366{\371\271\313\032I9\021\351\3739\254h\327\271Y\223\032\272\312\032J:\377\373\n\272\365\226\t\271\361^t\271\275\245\030:\267\r\262:\266\342\2329\201\007\2557D\374\320\271%+U9\345\004\2029\335\n\003\272\250A8\272\217\304\0069\255\365q9\355\230\004:\353\035`9\377ld\272\320\264\3179Bo\2069PkM\272\323\027\242\272\211\324v:\276\261\3569\224-\204\271\264\301\3009\341\022\2728=\000\013\265g\235\"\272\177\36138\035\214d\272\347\035\037\272\300\034C\272\231\247\333\2709\205D\270\366\t\234:\376J\3579\225\334\360\271>\033p\270\307\036\3528\255<\2379\353n_\272XHe9\336O\3768\326\211\031\272\241\003\224\270X\3212\272\265\324\3638\201\222&9#^\013\271\336\332\376\271\244\005\205:\006\214\004:\032(d\270\'\267\226\272\315%%:U\373\252\272=\331C\272\326\034\2279\340\354I\271fC\232\271\337\355&:\252i~:^\000\250\271\351\352\023\271\220a\272\2674\302\034:\017*S\272e\213\002\272\360\021\202\271#\246\213\271m\242\212\271,\243\0079\027\030\217\270\277\224\263\272\240Td9\017\336\3008\375\341\010\272z\r\302:z\315s\272@$\360\271w\251\304\270\307\334\014\272\275\023#:\243\357*\272\033\202\273:C\327\213\271\327\310a:\017\373;:\215K\0278\263H\0049uv\2139\"\216\306\271\005\n\3559\337\261\3449P\227e9\020>\204\272\203\257\2509\342O\020:\024\233\213\271a\016\023:\250\376\371\272\275\033\3728\301V\324\271\212\344\034\270\347\005d9\321\303\240\2728S\223:j\226\036:\215\376\037:qs\201:\303\376\222\272s\326\2228\232\022\221:\031\312Y\272m\007\221\271j\031\201:\034\246\2069\311\342|\271\374R\014:\232\210*\271\362Bq\272\327;9\272r\003\006:\035b\22798\212\005\267\221\206\201:\301\005\322\271\027i\255:\234\246\013\272\270\244\227\271b\374\370:\232\025<\271\356\235\026;\262\243X\267\370\247`\271\0213\206:\235\"\3129\230*e9*E\371\271\211\365W\272\233\226H:\347\211\3129\241T\335\271C( :x\243\022:\371\267\226:\320\313\26483\304\006\272)ZU\271y\366\0359B7\224\272\300\231\3169\265\341\221:\324\214\342\267\310\005^\272\005?\006:Y\214o:\245\271t98\326\341\267B\231I:a\240H:\302\356\2419%\370\0039uKf:\377ZB9\026\221\2558\306LN9\372\256\024\272fPm\272u\372\234:~<\327\267x\277\023:\304\231=\272\000\304\2119\210Yy\272\271(a:@\354k\272\370|t\272Z\255;\272\247p\000:\'\206\3038#\372,\271([M9\233\354*:\313\366t9\210\245\2629\204\000j\272\356\326\235:na5:k\214\202:n\304\215\270\3501\231:w|\032:K\333\215\272\010X\3046\237\206f\272\021\346\3209A\263\333:e\210\27698\000\3249T\354\220\271\236\374\252\271\371u\023\272\247\245\3368\321\225\317\271[\346 \271\022\202\3619\036\240\2038\013\303\324\271\016\376\337\271t#\215\271@\036\3209\343iA:|\324\322\270||99\352]N\272U6\020\2720c\014\272+W\275:\332\235\035\273\377\306\2459\366\034\370\270K\'\314\272\343\220-9\374~\251\271\352i\027:\220\r\313\270\307mh\271<\310n:\216\377\021:=\371\3309\256o\340\2712\333\275\270&B39\r\371g\271gH39\245\231\3328\264\315\024\272K|\034\272@Y\336\271\357\256b\271\240\363\221\272\253a;\271\214=\210:\247\366\220\272\313Sp\271\344\360\257\2705\330\n\272\347\316\210:\261\363\234:b\225\331:-\r\231\270\347\235\312\270=`\3139m\260\216\272\230\300\3709\261d\365\271:\367\037\271ux\034\270M\231\3349\022\272\2749\264C\205:\006\2759\271\321\262\2649U\001\3549\014M\033\270\2477\2019\024\201B:\341V\337\271}p\232\272;\254\237:c\321V:\006k\r\2718\312+9\177\230\021\270h\363\013\272\200h\272\272}\357\227:@\027h\271d\334\001\273\320X\211: \212\341\271\215\261\306\271D\2600\272Wr\3009\344\234\205\272p\336\221\271B\241\3219N\033\0258tJ\'9\023\372H:\213\375\2339\242|\237\267u\354\2369Gp\3308\203\030\2369\200\361\036\272i+\204:\010\300\201:\240P\036\272}\355\3409\374@\263\271Dy\2609\325\240\372\272=\240\233\270k2!\272\344o\317\267\313\223m\272\325<\247\272\357\305\202:\003\203\333\271\010\210v\271\202\007\201:\260\355\374\271\242\332\002:E\222\2639\005?\215:\033\2724:\034\376\225\271\377|\214\272\340+{\270-\243\027\272\240lm\272\020\024\031\272\307\230\2429A\035\":\375\361(:\327\225\226\271\302\206\2759\267\346\26497R\3359\303\25639U\343|\272\017\265\211\272 ?v:m\354\2619\206\035\343\272N\001\2659\354\3449\272\036\242\256:\271\362\'\272w\372\355\271\177\216\2509\337#|\271\272O\345:\013\305\274:\266\211b\272HU\2519D\236\037\271r\253\3469\000Zr\272\250a\277\272=\212\2317\252\034\2129z\374a:\303\246\341\271\261\rL:\354wO8\001\223\n:\216V\004\272m1\2558\310\374=\271%v\212\272\256\252\323\271\372\237\232\272\376Q\237:\006\310*:-\214\247\271\277m\223\272R\2613\272\332\250#\272\225%\t\272\246\236\3439\250\234\211:\301|\000\272ql\3509\340D\222:\260\361\0219\273\376\225\271\221-\201\272\326\021\345\271@\251\371\271\314\233\303\271N\006O\267\202\313\312\272\221\344\305\272\235\310U\271!\222n\271\"P\256:3\030\3528\275Z\2219\251\013\275:\372r\320\271\273t\233\271\364s\2049\301A\204\271e\373\020:O\253\303\271\314\217^:\205\362\223\272\232\035\266\271\260\252\254\272\004\177X\271s\211\261:d\334S\272}9\315\271\346n\3549\242\262\267\271.W\2449<+\251:\332\254\274\272I\300\306:\317Y5:l\217\357\272\006\220h\271\2358z\272:\2046\271\241\r\247:\006\230\211:\014\036%9\277\007\2249\251O8:n\336>:\020:\246\272u\016\3659\200\022\260\271\016\016w\272\213\'\220\272|\000&:\255\210*\272\207O\262\270\367\227\324\271d\374k:?\273j9\241n\201\2723\306\232\271\212\007\2339L\375\"82fy\272\302 k\271j\022b\271\235\345<9\316\"\035:\001\272\345\267\010P\003:\267\205\021:\312\255\27492\342\215:\274\274Q8\342u\304\271\257\374x:\202\255\036:\313\304\025:5\216r9c\233\303\271\003\257\213\272\3559\207\271\203a\0179t\324\253\271\016\23079BOS\271\333\0056\270\225\372z:8\230o:y\372\2449\022a\n:\366hC:\036\216\257\272\030\005l9\340QE:\330\361\223\271\201Y\201\271\212B\031\272\315\275\3339w\325\255\272p\245C:\312wc:\216\275\336\272\016\006\':u\225:\272~:\202:\363\006\0309\025\374\005:\211\366\360:C\3204\270c5\025\272g\035\247\2728\252\2519\203\306\201:Gj\2659\365\374\347\271\221\204\313\271K\313\336:\314\356\204\271\372\233\020:wu6:1\256m:\371\271\223\272\360\225\21492\235\027\271\3751\235\271!\241\t;\332\022\2449\226C\3419\004]v9\033\327\213\272\250\301\354\271P\363L\271\273\250\007\272\254\226\201\272\331\001=\272m\307\210\270\202^!9\326\265y:\\!\3629\212\255j:\336\236/\272i(\311\272\236c\2629\302\364\342\271\301\177M\272\3455e:\2670w\271\216\220\3509\230\344\356\271\003W\007:\013\313\334\271\252\005\013\273\252\375\3379\351y\2309|e\227\270(\024v9A\362>\272\217T\242\270sv\3449 \r\254\272p\353\2409\235\331\3127k(y\271\345N\275:I\221,8&\217\010:\310\"Y\272\254\023W\272\336<7\27298\214:\023\356O\272\243\304\202\2725\325\225:ziA5\230\217F:\367\337\276\271\360\260\320\272{/\301\272\261\341\246\267H\354\207\271N\005\2069&\207\2426\333i\034\271d\006(:\203\227!\272+2\252:\261y\2149%\314\0149\\y#:\030uM\272\030\364\245\271d\364O\272\3173\223:\357\3339:Y\267n\272\000\312\024\272\312\312\3329\275\223_\272\225x\035\271I\326D:\214\000\2106Bi\360\271\300\352\3137\037[\362\271v\022\3149\340;\3117a\240\036\272\364^]:\344\2260\267^\2521\271\021\020\215:\331\230\2449,%_\272\367\223q\272G\356\2138E\016\342\270\276\344\016\271\031\2756\272\024\276\373\271\322|#\272hC\266\271\366-c: \350\001\272\233V\242\271\211Y\2717O#\022\272\376\227\213\270\233\037\0359\274\350(\272\376\272i:\276x\223:J\374\377\271P\264\220\272a\364\261\270\251\371\373\271\334\307U\271\275^\273\270;b\3778\'qS\272\340\306\325\272r\027\3529^\374!\271\341k\3179\212y\261\272\340\206;\272\353\350\2519`\224\177:\347\311v:T\23308\313\363\222\272\372\317\333\271:\271A\272\r{\247\267\263sk\272S\246\201\271,9\2019\215\024o:\232\333\203:O\032\007\272\211F\\\272\336\207\340\272xn:9\2027\3559\337\327\236\271J\031\2609\004d\306\271z\207\376\270q^\2369r%\\\272\333\253\377\271n\202n:\305\325\206\271\250A\0318\022!\203\272\210\307U\272\235\352\"\272\235\242\347\272\036\237<:k\013F\272}\202*\272(\344x:5\272\22780\371=\272mj\245\272\242\261\035\270\356\001\035:\026\025\000\273K2\216:\006Z\3049\263\213n:v\002u:0\001k\272\216`\006:\252g\0318j\031\3439\215\023\3438\247g\247\272\017a\021\272#,\t7h0\001\272-\2622\2704\215b\271so+:w\002\020::`Y\272$;\200::a\272:\276\334+\272h\246\2649\3151R\271\023\t\213\271;\025\3479\236O\326\267\245\000?\271/\270\226\271q\333N\272k\"\2569\311<\267\271\300\213/\272b7\3468\023\240\2219\216\331\3509\243\231\353\271\305y[:\233\303\332\271\226;\2429\203\002\2519_\211[\272Wk\220\271a\362\0237?\354;:\372\203%\272\217H\3709\301LI:\247\256~\272F\371\014\271\371\020\321\271yu\2549\2759r\272\352\025\204\272\262a\007\271\347\276\\\272\266Z^9\236\010-\272\250zO\272\211\375a9\273f\227\267_\366\227:\270\016(:\034\"\243\272G}E:\025%V9\234\'\001\2679\007\2019\344218\356\000e\272-\007\001:\221\250{\272\317\366\300\271\034iM\2717\023\244:_\273d9\037\2760:\201+V:\274f\352\267\244\371-\272\022#\337\272\n\232\246\270\3270\261\271\023#]\272+\343\206\271\364\326\024:\272\037\010:Ys^:\321\010\344\271\365\376s\272\005G\032\272\237\322\002\2711\304@:\"\252\320\271\202\361\t:\216l\350:=7\306\271\212\240\2219n\307\017\272\356\361\3639\330\337Y:A\267\217\271T(\277:\001}\313:Sm\250\272\360\245<9\335\004\022\272i\177\023\272I\177\212:\n\346\313\272\036\233\252\272\013\260\005;c\207\022\272\\F\3569\024\223\363\271\365H\241:.\001\3539\337)\n\271\265\312^8-\371\270\271\211c\255\270\300\232L\272\240`f\271\006%\336\271k\202.\272\315\252\351:]\310\215\271\355\r\023:,U|\272\307\232\2078/+f\272@\017\27594\2661\272\321\257\222\272V/S:\305\224\3446d\177\0269\\C\207:\371\227#\272\236Q3:\216Q#\272R|\r\272\314\352(:C\205\024;\005hG\272w\344\2008\0027\321\271a\2500\271\265n\203\272\340\025\315:\226\333v\271\224ad\272=K\3309b%\3227b\366M:V\236u\272\006\2651\272\206\033g\271\016A\3139\351Rb\272\210\240\236\272t\266d\270\247\337\2449\216^&\271\263v-\271\226\262\006\271+\266\365\270\026\267\025:\323\024W\272\273\254X9\235\036\2529:\316\313:n\010k\2727X\2449\364)\20091D\3209(A\3469\207\226O\272\270\316\211\271J\031D:\234\033{7)\004\201\271H\234o\271\361\230\n\272\247e\363\272nn\314\271\025\316\'\272HSb:`\264\204\272\273\266\303\272\331z\0049\035\261A:a\376\316\271\354\020x\272Q\300e:\212+-:\013\364\2249\216Gf\272t@\013\272\307\304\275\2716\312\225\271\010\260\351:A\177\0238n\254\257\270\032\371*\272iCn:s4\217\271\231m\201:\352\300\021\272\321\357\233:\213\210\036\272\372\224U\272\235\371#\272\026r\256\270+\034\211\271Q\220\007:_=\0208\017t\2409\315O\":_\260\2708\204\223\232:\3329\0039\340\306_:\322\242\r\272g\302\2159\216\\\230: \031\377\271\177\311\"\271\302\007\322\270\"\356}\272Uq\037\271w\"\014\270\230\335\001\271\253W\3059\366Q\031\270\275G\350:\322\354B\271\206.\034\271&\363\010\270_\370T\270\001\361E\272q}z7\246\024#\272{9t:}x\3209\n\020\222:m5\200\270\2665P9\201_\2009\214\312\215\271\014\277\026\272 T\2477\014L\210\271\3540\0248\327\351;:\r^\204:ml\240: \277\252\271\366\337+\272\332f`8\242\204\271\271\020?\210\271\310\031\206\272l\301\004\272\020\324<\272\207\t=:\227\277\361\271G\3504:<\343?9\361\307T9F\005p\272\340\241\200\272\275\316l\272E\261\307\271\252\313\0059%\027\020\271\317\327\252\271\r\307\000:\257{e\272?/Y:bZ\221\271q\036Z\272\315\rN:\347\245S\272\006\334_\270\275\257Z\271}\023R:M\333\3429\216\324v\271\024\277M9u\312\2579\322[\3569c\'f\272d\350\3419U\377>:P9#\272\227\032\317\271r\261i:\275\333\2079\224g\326:\344\270+\272\267\024\3328\306\307\t\272\002x\217\271\t\3330\266e`\336\272o\001,\272\351\307\000:oB$\272\366\010T:\236v\252\266Y\223;9>\021a\272\253\\\3638*t\2639\003\037x\272T\t$\272%}y\271\321\212u9\3561\005\272>\371\3239\333\232\204\271O\255\2479\3202R9\267\236n\272i\033\214\271\214\235\021:\371C\001\272\351Z\2329\260\0240:\305\t\207\272\271\332+7(\234\030:\002\341\205\271\242\245\2468n\313\2369\205E\3559P\322\212\272L\032\241:ey\241\271\220R%\272\355\336\3038\217j\0319rv\216:\003\377~\271\343@V\2710\337\207:\350\3338\270\330 j:\301\341\0249G\207J9\367\363\271:\237\327_:\214\322`\272j\260\205\271\3079\2119\307\334\263\270\223A\3738\321r\0179~B\244\272\n\302\350\271\277\325\002\272\207lP\272\021X\3339y\034x\271\231\225C\272hx\035:\006\367y9\323S$9\306\013\225\270m\376a:D\230\0259\220\201\225\271~x\3529A\332\213\272\357:\314\271\362\344\210:\244ig\272\260\362I\272\270)\377\272>\237\310:_}\234\272\327\344\010:\254\024>\2722\027\2029\376\201\2509\241\017\022;\026\007D\272\300\316A\2722\354\3109\211y\242\272\006\310\230:0\007\025\272\227\010g:\335\375\266:w\316\220:\272\237\2429\007\212\0228\204V\232\2700\250\207\272H\324\215:\236\210F\271\257\025\36594\3372\272\316\214\317\272\226``\271X\360\0248\361\217\237:C\324\335\267\014\361\3309\2279\3239i\272+\272\346.\354:\374^08\372\314r9O\226\316:\306\006\'\272:\301h\272\203\261\035:\363\033\224\271\302n\200\272bS8\272\367D\210\270\333jY98^\006\273|\263\0248\300\235\212:\226Ff9&J\314\271jk\0039I\301\252\271b\006\300\267d\366\2209<w\207\272\306(x\271\035\251\300\271\2748>:s\001\0019\223>V\271\r\317~9\347T\0079\025\216\211\270\326\375\216\271\261\\\376\271\002*G\272\333\214\3539\004\262\3149\200*\000\271\343\300T\272\245W99\013\220\3679\026\377\035:>J\372\267\243\367.:\265\013P:\377A(:\262\301Y\271FwR9\373I0:+P_\271}\305Q\272\340\212\251\270\207,l\271\274R\246\270\247\363\221\271M\330C\271\317\224\2209\211\010\017:\000\017\2049\207\"e:o\354\200\2727\365\330\271\220\005\377\271\0010\3169\'\2364\271 )\013:\2569(:\266\245#9\310\206\2369Avi\272$\033\235\272\017!c9\373W\3619\240\374\2408|\203\363\270\035N\000\272 p\217\271\345\313\001\272#\024\321\271 P18\002\244x\271D,\225\270\016\233\3739hv\014\270\255\247\222\272\272\305\305\271\357Z\211\272\017\006\333\271\026\212Z\2720\022\307:j\221\2359\373\374\035\271\270\366\3259\331\275\245\271\005\037W\272v\024\275\266\357\350\t:\316|\231\272\357\235\306\271\263\312\240\271R\217z\272\002d\007:\275l,8m&f\272|\027,9a\326\323\272\255\2134\271\260\226 :8\324k\2724q\013:\207\240\3558\271d\3769Ry\241:<\365\r\272\325u9:Yz/\271c\021L\272P\202\253\271\330\250698\327\003\272\234\364\2629(\234\262\272[= \272>F\34694\213\3229\245\320\265\271WWn9w\203\016:\353\2514\272\036\023\350\272\336\313\205:k\3744:\036\324\2748Y\306\257\272\261\240A\272\247\304\3139\316B\231\266\000X%:@\346\'\272Z\343\037\272\332k\233\271\001+\024:f\033\3259\0103\3578\342/\247:Bo\035\272\202I\253\271\002\246\031\271p\\\321\271g\201v8\306n\034:\334\34679\321\211P\271\364\014*:v\031\3549\223r\007\273xoB\272%\357\227\271\377\267R\272,\322\237\272zN\242\271\214K 9\371\206\024:\352\321\257\272\017*29W\213\271\271\307\000\330\271Z\237\235\272\221\236P\272M\316\223\270\001\301F\272z\345\370\271\202\024\2518\210N\":\020\335\2318\346\003\3718\274\033 \272\327W!\273:\306 9g\003\304:\1774\2738\264\267\035\272\334=\210:\020\206\214\271o\375\213\272\217Zi9B\3250:\206\330\3719I\024\237\2726\027\2129^\240\022\272\325\367\2349\245\346\320\271\373X&\272\027kv7F\215\013\272\020+\222\272\266\270\250\270\366\277\34393\300O\272\215\024w\272\014j\3648~\350\354:\252~\361\271;\000\3649\362\005\2029\177\204\205\271\242\010\030\272-r\2648\032\210%9\371l\2079\000\016#\272Y\016\331\270\037\210\325:\341\317\023\272N\362\2269[:\274:u\336\253\272S\336\205\271cud\271\250)\2658\023\313K\271\332M2:\027\304c9\313\306_\272 \005f\272\352\362\272\272\206\n\351\270\230d\215\271\346\013\004\272\372c\017\271\023\265\242\270vG\326\272\307\270\266\271\245;\031\270\027\303\236:\224\355I:\343\304\202\2726&\2578F\301M:\270\260\241\270@\245\2219Z\004V:@\347|\272H\025\000\270\203\202F:>\374\':\372\332\260\272\244R$:\'6\3269FUV\272-\221L:mD`:X)\352\271Rm\275\272+\345\2049\353\323\2059\036\255E\272`\307\003:\344\323\026\272\007yI9\212gd\272-l\005\272\031\264\334\270w\371\r:\275+\261:\201\331\n:]\000\322\272\230\231d:7\304\2209\377\311t9&\332x:zE\3178\261\247>9\037\033\3109\240-\203:j3(\272\206&[\271\372&\3749\033<\211\272V8<\272\363U\024\272\027\351\":\030\177\037:7\317\305\271\361\233\2019\305\037\273\271\327\362\230\272w\n]:J\001\000:y9V:y;\032\273\337\213\204\272aT\0369\3208\177:C\013\257\271iS\020\272a\334\235\272\327+\265\272\347V\242\272\027>\241\267\216Z\255\271|\177V:\021A_9d,\3639h\324\203\270W\372\256\272\1777\222\272\031{=\271\3028;\272 +\020:\376i\260\272 M\260\270\362A\320\271\235_^\272s\343Y\272Juc\272\013:6\270\014\034:\271\221w\210\272\243\330\317:\202>\212:?\267\345\270m\\\225\271\356W\020:P3\3439WoS\271\361C\336\271E\3347\272\345\3161\272\344\263=:\253\225\2659\227\305\3269um\3039\207\337y:\366\366\3149\371\032\3739X-\3509\026z\035\272\304]^:0\305\3047\353\203\3679\037e\033:<\276}\270\371A\347\271=\221\377\271V\234l\271}\253i\272x\234\300\271\204\364\207:\315\252\372\271h\031\34291\023\313\2704g\270:{\205\215\272\310X\3009\352\235\213\272`\300Y94g\022:\330\300a:\307\322A9\211\036\013\273\032\000x:\364H\"\272>\310\226\271\353G\346:\277EG\271]\371<\272\026\204\3219`\225\306:\376\"?9U\357\030:\275A\t\272\177\324Q9\017oB7\346\256\307\272\241\222\311\272od\t\271\nmQ9\250\\\2077\357\236W:\325\277\203\271{|\34598\377f:\261\027\364\271\225\020Z\272\025%\271\271\347\373 \270\344\274O\270\314\277-\272\223B\205\272\025[\316\271\n\340\2119}\215\007:\320X48\200v\212\272\025\224\312\271\021\222\2169<GF8\200b\217\271.\206x\272T\314\225:7\335\3528\266\013\3709W\217\272:\262z<:\216\302\243:\321;\346\271\234\237\2718\356\375\2419\235\354\r\272\264\265g9\337\377v\272\323\2064:\320-\357:\202\365\002\273\275\244\2759\026\0344\272\214-\n9{\365\2009\245B\3119\243\310\255:0\010\273\2716\222\305\270\2735\2079O\364O\272\326\344\353\271bs\335:\243\332\0149\362\337\2479[W\326\271\312\372\325\270\3058\001\272<\006]:\251\367\2419ry\277\271\251\344\314\270T\017\r\272~V\203\271\022\246\303\271\032\267\010:\031\355\230\272\315\350\227\270\326\261\244\271\272\234\020:\266\024J:\333H\266\271\227\236\033:\232\346\206:Ay~:\006xp\272\014\331-\271\343\215\247\272\270\024\013\271\317\"\353\270\220\2055:\3451V8\301\343O\271\020\314#:\035\307\234\270\002\257_\2724\223%\272\031\316):\010\324\323:\032\262\0379\007\247B9\037e\r\271\000\206\3509S\233O:\034\343\3439\322\301\n:v\t\000\272\\\344a\272\345\234\244\270\355\023\023\272R !\271\022\344\2709N\271\2069\230\312Z9\245\310\r\270\335\207\206:!\205\221\271\355\354\326\271E,\2229\016e\n\273\263\027R93\275\023\272\001);\267\316\360\206:]\2310:tv[9\024\33048$\234\2409\021\311\024\272G\371t\271\023\016\2269\013\365\246\272%l\025\271\355\311~\272\374f\000:\334\32599\347g\2547\332\277\'8\006\235q:g\245v\272;\366Y:\"\202\3109\243l\014:\340(M9)?\325\271\201a\2709\271nb\2724/\000:\031\371\":\027d\271\272\010\312\032\272Nh\211\271\023n\220\272\362x\2438\223e^:\240\225q6\342\314\025\272}m]:i\366\235:\254\223\t:E\237 \270LK\025\273\340\017c9*FN8\004.\215\2712\3028:\321\007\224\272\204Yg:\224l\3719&\355p\272MY\26792\210\2029R}\2159\343!\3629\240x\363\271\265N\200\272^[o:\237Hp\271\004A\240\271U\256\341\271\205\216\034\272\265\200F:\023\270T:\241\007\3378({2\271\212\206(\272A\002\220\272#Eb:\253\300S\272\252x\225\271\266\306\203\272Y\360\0169\036\\\361\271\353^\366\270\267@\340\272]\363\217\271\350\212\034\272\214\332\354\271\036\356\003:\321}4:\375\033\024\271\035{\010\271 Y\2078\235\247\213\272\022\202\351\271\005\023\255:_\326\213\272\311\272F9\266]\2169~4m\272\216|\317\267\0224z8qf\000\271\304>\342\270\212L?:0\3012:\326-\276\271\030\235\3629\277\265\211\271\236\034\363\271\300\253\201\272\232d[\272*r\3138u&B\272\316\r\016\271\225N\335\272\261\341\010:\0322\230\272E\320)9\272\276\201:\241I\275\271\026\002\252:\205w\006\273n\345J:K\251\020:\200\030K\271{7e\272\221\213\0249\215*\326\271w \244:\234\240\343\271\030(X\272\007\370.\271\212I\007\271\341\017\204\272\353\340V:z\342E:\356\211\3339G\177\325\270?^E\272\310I\2308k\225\3119[e\3059Y\014\230\271\024\263\3779}i=\272G3T8\271\004\222\271\252\362\2429\300\3346\271>\220\2759\307\321\327\267A\200\2469!q%\272\352\201\225\272\270\010\2068M?\233\271v\332%8\240oO\272\240\217\3709\342\210\024\271P\327\212\270\2742N\272\357=\3029\316|S\272\366Q|9\326\335>:\013B\206\270\245$\212:\035\202\225\272@\315\305\270k\367\0139-!\017:\300;\0038\236\310\002\272_\227}\271]\376\245\270\355\024K9\363\276=:\373<Y:\366N\246:\207\034O\271\027\2408:\031\207\214\272\303\312\312:\257\212@:\355\030z\272R\311?\272Bw\2628\332\002$\272J\245\332:\222J\2128\031\200\2519Q\230\0019\005\344\253\271\007\252\332\271.\325\3459k\324\224:\343VA:b\304\214\270\300\225\024:\355x\3359(\362\350\271\325\375\261\270\020\244\254\272\014\240\244\271\000\370\206:\362\266\207\271\310\207m:\315\3301\272\025\246%:\324\020p\2727q\255:\210H\022\271\317\336\027:m\306\3549\003M\336\271dr\025:j\214g\272\001\216\033\272\206CD9\335\342\210:\024R\350\271i\273\0268jn\266\271\013k\265\271\017^\177\271\200\367\233:\n\362\2569\004\315\3729p\220Z\272\274Y\377\271\301k\245\271\317\32519Of\245:\220\036\'\272\210$\02592\300q8e\340~\267\355u1:\246GS:81-:\355\312\257:\037V\317\271\265\225.9\213\361\036\272M\360):,\366\2239\372\314=\272\247\376\2609$\362y\272\235y\007:a1J\272\033L\240:\276\305\300\271/\237|:\3270\261\272\023\214\2479)\323\245\271\251sk\272\"G%\271\252\372\013:\034\213\201\271\323\257!\272\351\370\220\272L\237\314\267Wj\213:\235\333\375\270\207\311\1778\270*\342\267\244#?\272N\205\2149\253\240b9\201\274g\271\022\301s8\374\334\2039z\001\3259(\014\n\2724<\227:\230\234\006\273xjA\272\240\037\001:2!\22797j\243\272\334\022:9v\340\325\2715\324\021\272P\242\315\272\255\246\021:b\324!:\325\01689\013+\n\272.\233\t:y\376\3569\252,\243\272\251U\232:H\343\2119\335\345\220:\224@R:\325zq\271+\220\316\270\022\002\357\271>g?\272Cw\\\270\241\013\r\271\270\323\357\271:\265\2169\245\250k\2720\212f9?>\313\267>Q\024:\000\2058:}ni7/\306S\271\217M\3059\345\n\005\272L\360Q:\303\037q:\374u;\272Vg\200:\251`9\272\016\367\231\272\036\211\035:R\036z\272a}.\272\256\225d\272\3561\253\271\320\250\341\272\254b\2209\357u\0208\236\nJ:?;\036\272p\010R\271\363nr9\215\227\2339\227\252\311\271\337\327\3679\270\255\024\271`O\325\271\032M\3749\036:N\272\005[i9\332{B8\232\242\340\271\273\271\24492\013)\272q\256\'\272\364\033\3339\226\027s:\237\031\3558\215\231\r\272\2648\261\271 \365E:\261S0\270\010\037\261\272\352\262\0179sfB9\307K\2548\204\352Z9\255\316\003\272\037%\323\272\n\3067:!\313\021\272.C\t\270\003\334\313\272\3674\007:)\347J\271\0029\226\270\222n\354\2715\362y:\371G_\272d\324P\272\376\361\200:\252\267\275\271\303h\207:\025gB:3\20039 ?\0318\235f\215\272\005\014q\272\267l\227\272\2677\230\271\344-\3138\336\226\2438`I\234\271k`\234:\256`\2307h\020\033:\033\352\016\272u\261\3659\352\266\253\271\023I\275\272\331\333\307\271\231\353*\272%V\302\271\273\263%\271\013\336-9uy\3018\323%\014:\261\326\210\272\021>8\272{\311\267\271g\331\3178\377!\3238\215\020.\272\200\312\2169=q\204:\250\0304:\211*\006\271\"\370\342:\027\017\2609\r\212\2569\003\017i9\333\"\024\271o\026(\271\362\341\230:-\270N:\264\303\212\272\373\211\304\271\231\245\234\271^\021\257:=&\3666\251\353\3769\312\351\242\272\256\336\007\272\244\237\275\271\006\251q\272b\253K:K\350\307:k\334\234\272\355\262\030:\265\234\275:\254\377\004:\334\207\203:\200\215\264\2711#\226\271Jb\263\272\233\342\360\271\367Y;:\276*\023\272\353\261^\272R\326\3228\177u\024\271@\351^\272\214|7\272\333g\177:\341\260*\2679K\3519\031\201?\272\371\211\033:\201\247S\272\357i\2679\277\310\231:\210z\030\271\371\204K\272\325\200\3629\214\315\026\271x\371\313\270\252\004\322\270\341\315\2619S\033c9\030\010\r8\303\352\2229\255\002\037\272\340M\233\271%\323c\270\030_G:\202t\032\272\021\345`\272\362:\247\272N$\250\271\241\342\235\270\357\356<\272Z\233\2509\314\215K:\021\334\371\270\014\375\325\271\275{\266:Z\005]9\331?\016:y-I:\006\204u\272\271C&:\3041\010\272i-k8\273\000H:\216\355\3439g\330@9&\375\336:\272\221v:\205\373\013\272\020\005\260\270\252f\216:\r\2111\270\203%h\271\224aI:\361\227!\271-\212\0008.d\3049$qS:\224\255>9\211\260\231\271\343_\373\270\314\025a\271\266\361t\271N\333\254\272\245)\204\271)\243\3759\025\301=9o\301b8\256f\364:/\251\r;\233P\247\265\3018\3008v\202\020:\0251\241\272\370\321\305\272\000\025_:K\234i9\3143\031\273\275\37789\272\243>\272,\322\3709\362\267\3039\243J\n\272*8\2559\357\376\216:\227\0365:u\335\3519x\240:\271\260F\33488\243a\270\r9\0229{I\340\271\037\355\024;\215\374L:f\\\3439\241_\224\271?\237\374\271Rd=\272\244\376\3239~\252\213:\317t\260\272\007\350\035:\302n\30082r\010:bp\'9h%\3259\314@W\271~8\"\272\025K\010\272\320\264\025\267&O\351:\330K\3779-\336~\272\004\203\2348\241\216\222::\274\016:5ah\272&\313\2209\330\260G:\356\252\217\272\313\t\231\271\231\254\022\272\311\203{\272\303\270\001:\364\347~9\335\003\355\271>/4\272+\3179:\216\003C:Pc\2278dw\225\272Q\210\014:\317\247\2469\374y\004\273\315v\352\272\225\276\006\271\347\001\2044\237\344\":$\366\r\272}1\"\272\300\014\225\272\034Z \272Er27J\275\243\270\213\'h:\001Y\3719r\276\2259\332\317p\2728K\224\271<\300\3259V\224\3507\036s\2507\r{\277:\307\005\2117\216\336.:\363\025\354\2714\313x\272\306|\245:\037[\036\271\3722\212\272\235y\255\267\025\025\324\271]~`\272\000G\002:~\203\3449\202\357S:$g\005\272\031`%:\371o\0338,`K:\345\234m:29=\272\311\301\312:\242\367\031\271\321\206):\037\223}\271\367aC\271\272\010a\272\307\230\3239\237{\013\272\360\nf:\333y\225::\332]9\027\243\216:L\0241:\3349r\272<\307\324\271d3&:\313l\324\266\31103\272d\317\n:\017\322a\271db\2529\213\027\r:wr\307\267e\2618\272\2434\330\271\3276c\270\261\226\3508\224($9V\034\022\272\004\010i\271\270\275C\271\223\324\337\271\254\326\007:\361\033\225\267\004Z4\272\351\014\3239\360\360A:\007\241`\272\342\273P\271\356*\335\271\304\261\0179Ck\332\271O\307\2529PNe\271?\334)\272\323#R:\356\264\354\271\016.\2178\317\234+\272\202r\2218\242\272\3459\217[\2648\260\032\t\272\371H\022\270j\336D:!:!\267\2231\334:R\320\3469\362\252t\272=$\263\271\003\n\312:\005\311\343\271\312\013U:\210d\207:2\360\177\272\256\362\00692\033\321:Q\221\300:N\321r\272\310\020\325\271L\223\0209\261\377\270\272\271\370\'9\274\264\n:\273\224\206:\217\"\222\272*\372\2008\253J!\272\341\310!7\360t\233\271\316\265\342\270\273\234#:\0255\":\300\023j:\223\341*:13\3649`\3473:\247;Q7\355h\267\271:\004\2038\315\323u\272s\346\205\272\342\037,\272&E\014:\355\250\2107\024\311\2339d\332\2569\261\316\311\267xCl\271\316\3511\272\233\376\3478\221\342,\272\307\340\340\271\364\277W\272\247\002\000:\334_\312\271YK\323\271\306\032\321\271\227\216=\270a\312~: \233S:$\231\022\272\236\353\315\270r\304\232\271\247\353\342\267*\2418\272w\376(\271\301\305!9\023|L:\376\254\2419B\253\n8\361\245\213\272\363\375\273\271\340\351/:\331\320\275\272\nx\2318\275\343\037:Q]\2469~\307Y\271\213\330\347\270r\031\3339\3202\25296\265\2439\373-\366\271b\223\334\272\342m\202\271GF\241\271\266F\226:\306\275\242\271\017\013\276\271\010:\024:0\276>9\235\206F\271\001I#\272\033\242\325:\345\320\212\271\333\003\2269IM\234:\017t<8\3452\002\273\316\270\360:\016\334)\272\003(N\271\006\217\214:\261\2351: ~c\272\213\266&\272by*:\334\306\203\270R\010\r:P\261\253\2712\350\314\272\260\013\363\271^\233\215\272\221L\232:kT\236\270\364\017]\270\360\tJ\272\316e}:@\327\363\271\2517\221\272#\315\242\270\261\023\361\270\223\234\3279\302{m9bV-9\200W\204\271\250\3744\272\300\022(:\002%$7(]P:\212\254D9\271\230\0019\233m\356\271\371\212\304\271q\370\304\270\340\343\3239\320\304\303\271\274\365\024:\325N\210\271\263\325\005\271u\355\225\271\217\373K:\246\2235\271B\202@:\027\376@\272\rv#:\271\231\231\272\'\214\034\267\317\276\2129\216\214,\272(\034\332\270\r\236\033\272\022\316\3419\352\306q9<\230\3428\333\010\2759s\351X9\205\215\027:\254\350A9\217m\022\272.\235\356\271\206\376\3639\014\301#\272\307?\316\272\373\236N9\244%\337\272YX\3349\020e\200\272\266\2507:\263&l:\252\262\2028\035\270Q9\275\237;\272\024\275\031:d\277\2278\225c\205:\377=\215:\2178\340:(\373J\272,\272\016:\271\000\3529~\245\355\271 \022_\2711\376,\270\005F`\272\355)\0079\t\233*\272\240\217 9\237$\353\271mb\276\272\247\340\207:U\300C\271rWZ:\340\247\267:\307F8:\2665 :?c\2449n\005\312\271\301\331\304:\\w\3739[\344h:-\240#:\232\306<92>.\272\177\242#8\022p\201\272\271[/\272\224L=:\323h\0319\3031\213:q\020\002\271Z:\007\272u%5\271\254g,:\331\216\375\271!\303/\272bS\2037\313\3246:P5\2759CH\2729\3155\2108pA\2569\351M\3349B\307\333:sj\203\271e\357\265\27256\3709!7z:\364\276\2739\277\261o:\315\2540:US\237\271\316\352\232\272\376\263\244\272\266/\3009\304Pj7c4[\270\377\251~:\302\t\2409\252\210\035\271-v\\\272\335k#\272\311rF:\201\260\014:\253\303>9\250x\344\270\030\215\373\271\025h\204:\353\241\2779\252\257\236: \253\3669 v\215\272k\266\\:\001|\300\271h\337\020:\3529\272\272\232\250\267:\207}\230\271\250\036\213:\266\2716:W\277\231:e\314L:\200+\207\270@f:\272\240\306\221:a\205\2109\373K\215\271\007\323\3258\211\277\200\272\246\235\036\271%\031=9g\027\3629<9\2059J\026R\271\245\230\203\272`l\265\271\025M\222\271\244\261\0208\261\014\247:P\027Y\272l\"\t:\245N\217\272\350Y2\272\341\324\220:\274=\220\271c\271\t:<}O\272\225\207\023\2726\331Y9\302\334\312\270\205V\025:M&\0259da\366\265\"\370\271\271h<\326\270\216\377Z\272\325\030\303\271\254\367M:\226#S\272\237\213x\272\323\242\2009\347\242\3269\276\232\264\272]\330\372\271&r\254\271\241Xj\271\022/\027:\2621}8NL\n\271\3165\375\270Fr\2459h\305j7\340\334\021:\006\006\276\272J(\025:RN\245:u|\203\272\r\276\232:\037\34337\'\323\0279@\'\312\271\001\014\2269\210\270#\272\027\300\327\272+\3320\272lb\007;\2048\217\272\025L\026\272d}Y9\216\204\2329\000\226N:{\252\330\271\333\022\0136_P\2359H\265;\271U{\215:\001!\247\271\360\235]\272\203\207\202\272\304\236C9\336\312\216\2671\023\016\270dx%\272,e\215\272\270O\246\272x\344\262:\034^V9L\037/:\233\216R:1z\231\271\223\230\230\272vX8\272\270{\252\272\345\216V\267\367\316\254:\306pQ\272t\325\3228\'\205\024:\007\2256:\'\013;:\304\334i:;\303Y\270\0213#\272\304H\227\272\225\235P:mi\351\271\244\245\242:N\310\245\270\205\272\3559 \220\3779F\030R\271\214d\2179M\206\021\271?\02649\303(\300:\334*\355\270o\334j\272\013C\262\272\220\341\006:\036\n\3549\003:\235\271\2613\307:@4\372\271`T\312\271\025\177\205:\247\342\205\271\300p\206:Ct,\267\307\342\2449\342 \2129\022\204\251\272\342\3016\272\273\000\222:\257Gr9\243\311G\272\376\000z76f+:\357\254\014\272\000uJ8\2227,\272\300Mq:\300\017\324\272\003\037\342:6\202\372\271\rb\222:\267k\241\272\255\244\3039\277:\212\271\331\332\37194\213\014:s\376\030\267\001\'\2339\263H\374\271\302\000\345\271\303\tD8p+\2068\342\317\032\272|\023\021\272\242\363\303\272d\004N\272\334\244\354\272A0?\272\256\371\201\267\303\2001:f5\3239\313\360Z\271\0108-:\344\003\2249\361A\022\272\276\030\020\272\315\264S:B\345P\271\315\327\3419e\3359\271\220\273\217:\212\276\2229\372\206\252\271\030\177n\270\253\017\235\272G\341\2109x\000\217\272\304c\221\272in\211\271[\3412:\273\264\372\270\355\023\2237H\356\010\272X\347\3728\264\330\276\271i\364\277\272\203/d:*;q\272\03681\272X\310\226\272w\335\2109\210\022\2269\327@V:u\254\231:l\255m9\323\340\000\271\313\230\217:a\226&:\333\251\3749t\177X\272S.>9\254\316z\272mD&:y<\351\272\237\r1:\342&\036:\376\017\201\272\253\347`\271\033;_8p\026 :r\362\0078t\265Q:\361\215\372\270\331\353;:\370Xr:\347\031q\272f\352\253:\t7\2418M)\3029Bn\023\272\330\202\301\272\276\365\252\271\322Z\222\272\210.\220:R\363F\272>]\3379\273\264\3409o\3051\272$2d9F\365\270\272\270\320\272\270\002]\025\272\252/V9\336\230\037:N\203K:.\025\222\272W\207\2228@\343G:\363\350\2459\227\227#:\230A\3208\270z\026\270*B\n\272\372\023.9\r\350\256\271\2243\212\271j\245]9\0002\353\271\035\276\206\272\013\25659\353\002\":\027T<\272{\275\202\272\320\031\302:\010\021\343\271\374+\343\271u\013<:%\203\300\271\0008#:\017\232\206\271f\261\274\271\372_<:4\245a:\017f\\\271\t\313\316\271\242\203\25798\256\211:\204\213\2449\017\300,:\220\267\2139!,?\272\230-\2728\345\372\261\271o\267`\271\350F\3009\010\nw\272\371\026\216:\272\323\217\272\313\"\2709\266\305R\272B\271\3318\335\301\217\270\315r\017:\357\"!:\303\013\0028e\327g\272\345N\347\271\201\224;:\0104C\272\253\016g\271(\351k:\356\025\014\272[\340\2309\207t\256:\350kA:\024\336\3579\276\365\360\271u\310Z9\212\353\237\267\320\357\312\271\334\022\332\272rK\006\272\024`\237\272\354s\306\270\211-\2679\017\264\33098\336\253\271\215\313s:r\336a9p\315\037\271\006d\330\270\353\354S\272\313@\215:\031\312\215\270m\306=\271\203\305\013\272\343H\202\271E\367\343\267a\203\2519$\377k:\221\032\004:s\221\3619z\361\022:D\373\367\271\3413\2138\360Em\270jC\013:\371\350L\272\035\204\002\272\001\360\035\272|Y\234\272u\"L\272\035\335\277\270\3101\213\272}\367\r\272\334\254\200\270#k\2159\262[{:\256\024o\270\344Vv9\034\260\354\271\211?\236\271 \345\035\272C\344\225\271\277\267\030\271\2073\350\270E\337\324\272\213\236!:k\033\023\271\025\310\332\271\017\240\200:\303`\\\272\023K?9\025\335\2478A\243\210\271\240\200?\272\213\221\201:aZ\\:^\377C9{\\S:\301\362#\272\2108\003\271\301\226\3249\310\347\\\271;$\0179\274\212\0149\305y\214:\"\006\27298<J\272$\242\313\271\321\262S\272<o\t:g9\211\270G{\357\270\213]\001\272\350\313\372\270 \17769\340V\351\271?\332\316\272vA\336\271\303\363\3359\326a\302\272 OT:\020?)\272K}\211:\215\253\255\271\351\024\2429\327fT9P\240!:\251\274\017\272\210\350[9i\243\245\270\273uz:\201\355\324:S\303\027\272\030\365\2568b\363\n:0\005\232:\221\3618;{\033\006\272%\"N\272\255\217U:\030\342\177:_\343%\271\341pu8\354\206\3539L\377S\272\375\323_:\316s\2747\274\222\037:\365\037\343\271o\323\2738b\252\270\271\252#`\272\316\034\t\272\315\004\332\271BP\3719p\243\220\271fdb:2\313a\272.\024\237:-$.9\010\352\2679\3311\3508m\207\327\271\002C\2369\214\332\0049\020/j\270\343\27508Q\2774\272yD\266\271\005m\3219\003\005N\272on?\266_\317O\272\030\367\243\272\261\343A\271u\234]9Z\004D\272\007]\353\271\330\303\3726\010\021\266:\363\'\312:\n0\3469\330$\235\271\307\221\246:wm\001:\222\320\361\271\202\370\2128;\005\2129$\033\014\2718\274\245:\017O\201\272^\355\3269\373.y\271%V\216\272\327w\002;~\240\241\267\304@\024\2728\246$:Z&d\271\212\220\264\271\354nh:4u\235\267\303&\245\267\324\242=\272\212Qe\272\306\224\020;l\247V:uz\3368>?\001\272\2005\3048UWF\272\300\\\22793\362l:2}x\2718,\2708\261\303^:\256\3129\270P\332\233\271\244\246\024:\367d9\272 \266l\272\3716\"7\312\177V\271\031\266;:\274\362\0319\216\335r\270\035\r@\272r1q:\223\031\3779\232[\253\271\327O#\271uuB:s\230V\272F2\376\271\201\254\2609ey\230\271=\217a:\245\311\':\020=\267\271\244\233):\274\271\3159\035\002\275\271p\225\026\272\300|\010\272 U\212\272\240g\2719,\033\2668\355\377R\272\r\262b:\202\266x\272{\372Y\271\031\006g\272\t\224\240:\277k\005\271\004X^\271\2273\3208%.\256\2707\213Q:R\235\237\271\202\006\235:\371+\373\270\023+\233\272q\345+\272\320\004\347:\341\213E:\337\345\253\272\350\313\220:\214\346\230\272t\240r9\245\260\024:a\311\0169\37232:,\232\237\270\310\342\2429\327\340\303\272\324\342\3548h\317\2159L\005m9\262\006S\272W\230\3109a\300\2178\360\242\205:\362>\241\272\360\262\3029\0346\016\272W\037\306\271e O:\352\"\2579I\217\266:c\320_:\325\337\365\272\005\341\3679}\270.:F\317&\272t\371\030:\314\325P:\006\020/\272\r\324\203:U\211\035\272\335\340(\272\360\017\365\271\253\335\330\271\247\337\213\272\022\005\337:\210\246\234:M\244\2358\037\231\3769\014\377\2309`\n\340\270T.~:\310\344\2267p\202C9\331e\3229X\333}\2677-\211\271\310\3206\272\271\003\304\272B\211\217:\232\004H\272\355W\213:\212=\3168[NG9\332%f\272\203\206\026\272J\324\2618\312\262R\271\330\tL\270\236\305\326:\231\373@:\031\364\024:\014*\217\272\013\213S:\274\t\271:\025\234\2019B$\234\272\220\362\243:?5\2737\212z\243\271\023G\2109r\231\227\272\314\374\263\272\333c\273\271\030\324\372\271\3606e:\001\2722\272\237\221+\272\024\033o\272\031\030\2329\221\236\363\271q\341E8v\010\365\270\265\347p:O0\236\270\301g\270:\204\335\210\271\033*\2749/v\333\267s\207\024:3\274\242\271\031\243M\272oT\034:\241\365\016:2\226\0359\345G\013:+0K:Nu\034\272\325\356\2509H+\034:1a\035\272C\206[\271\204h\2229\244\203\0219\r\327\3028\211Eb:jP[\272\211\267\272\270`\374\2529^\302.:\260\\\031\272\352ZY9P\357\253\272WW\0049] \013:\'\224d\272\251s\31394\177\3159\000]x:2\261>7\266\217x9,\332\353\271\225d\006:\024\375\254\272DX\210\271z4\323\271\006*W\271k\206\035:\240\330\226\271\300\002\277\271\202\251\212:F9/\272\022n\202:\255\224A\272\370\21589\312P\257\272\251\215a9\274\244\023:\240\037\366\271\360&\243\267\361XZ:\307%\004\272.v\276\271\240\350=\2722f\0368\242.\224\272r \212\272\217V#\272\355\363\2117\244}\242:\363\351\3238%\212\010\272t\246;\272\2277\361\271\223\033P\272\242\311\245\272\003qJ\272\363_\207\266fY\331\272\227$\212\270R\227\372\270*\303\2118l\013h:p\000\3209{C\'\272\303\340I:\325\031~\272\0104j:\0138K\272\375\3626\272Zq\006\272\017g\0269%\372\3039\370\377\021\271\001\224\231\267GSk:\201-\222\271\242A\254\270\255\345A\272\215\307\031\272\225\211w9V\362\3029\301\235\017\272\345v\3739O\256\3219\270G\000\272\347\242\2568\034\017\0359sO 8s\023C9\233\264\210\272\tc\300:x\362[\270\226\001w\271S\177\3779\007i\277\2728o\201\272\352\320\2319\222\252S:B\3170\271\'\251\221\272N\362<\272\273\325?:\350S?\271\000m\247\272\007<\3569\371I\n\27135\206\271\270\304 \272\\\316\005\271\3671m9U%\235:\224\234\025\270\306;;:-\004\2239\301)\0039\300\373\2219N\017:\271\205\201\3679\275/.\272\323\366H:\323a<\272W\223\212:T\300\273\271\313\\\267\270\272d\3208i\036\240:A*\2258\233\260 \272\224G\233\271\032\177\201:\177w\315\272\302]N\272\305.\274:^\007)\267\235\313Y\271doO\272\244\240\2057]a \272\277\361\204\270\025\261g8Y\327C9\351\376S\271\341\366\010\272a3(:|.\320\270^\274\010:\022\337\202:\356=\031\272\016Q\357\271\014\264\005\272\216- 9\234#\031\272\227g0:H\002\3079\027\233\330\271\345\305\337\272C\026[\271a\020r\272z\373x\270\302G\316\271\365UL:c\325$\271h\333\010\271c\372\"8\247]\2358S\223w\2718\323\320:5\263\3469\325;\023\272\370\334\203\2729\351:\272h:&\272\216\017\344:\236\243\252\270b\304\2629Lf\2137\375R$:?5X9\212\314F9\315\255\343\271G\33309\3734{9\227\265\301\272\"X\025\272W?\243:\267F7:\336P\003:&\213\220\271\266\327\2318gLZ:\216\274\357\270\022/(9\227\264 \272\331U\3228\372\210m\272\3145\004\272{\313\025\272A\322^\271F\217\014\273\204\013\273\271^\005+:kY\234\272\2574\2049\037P\250\272G\301y:\335\034\221\271\355\347$\272,\024\3669\306\335\216\271\3039\253:x;\244\271\344\260\307\266\266\270\2239\320\303\027\272\005@\2328\327s\303\271#\305\3619k\3002:\001\20428\304ak:`\272&:\242\366\264\270\276\'\233\272g\\]\272\336\246\026:\243\32129\247cQ\271\211\340\373:=p\001\272\317\366\3619{\215K:\232\240\236\271\344\365\254\272\200U8\272sb\341\271\346\005\020\272\351Rj8\027($:\211\242\204\271\264\243q:g\264\023:\332\035\034\2717\033q:?uk:\252\2314\271\000\376\245\271\357r\336\271\212\302f:C\r^9\303\351Q\271+\344\2339%<X\272\302\237R\272b6\310\271S\325\270:g\362~:\330\017\n:\374@\221\2679\275\031\271\017\334\2579\220C\0029]6L:1\226\r8\231\224%\272\'\021\306\272\n\332\244\272Dc,:\021\350t8\261\366\3738\020\263\3119\220\211\245\271\321-j\272\2277\2079P\266\261\272H)z\271\017`\2338\036\035\024\272q\0161:\342\376\2159\356g\216\271@\362\2369\001+r:|\222\231:q\307\2429\225#\002\267\373\221\2029\212\371\265\267\262Y\257\267\177tu\272\t\226\3629\002\024\252:h\252\\9B\326`:\205#\274\266\256n-\272d\031\234\271T* :\024j\013\272\202\350\343:I*\263\270\004+\2019\305\225~8\231d\272\271\021\322\"\272\035\001\2368e\225!\272\035\361@\272\000\257\230\272\243\312\345\271\211P\2509\266\245\2328\356\205F9\364%,:,(\270:\330Y\014\272\2111\2079Q\365.\271\007\003\246:\037`\262:(Z\\9\373T\001\271{\212\0329\001\244\035\271\374\216\3618\234\242\206:\304\213\2279x\260\375\270\036[\243\271\334\261F\270\351\033S:\202U\3478\273#\232\270(w\032\271\373\222\234\272\025\372u8B\275\020\271y\243\271\272\"s-\272\325\237|9\232\374K:\214\270\034\2678\205\3359\362!\3607\002\237\256:\222L\3069\177\006\0009-\330\3276h\376\217\271a\276\220:\301H\"\272\316\377\23291\245\2647\227S\3059\342f\236\272\313\005T:H/\215\271+\34328\373\317\207\272\007\0304\272aP\\:\252\246\3709\'E\223\2713\347\2429\223\310\2339=C\212:\301P\2569O\2449\271\203\t\323\271fk\t:\n\255\250\272\336\2435:\361\244\377\271w\330m:l\033R\272\206\367\366\2718\323\342\272\377\265}:\026\320*:\3238\276\270\270\311.:5\254t\272\267\037\344\271\257\3371\272\316\371\3069G\030\2029Dn-\272\3371\324\271R\302\211\272\262\236\325\271\203\311J8\006rT\272\275\277\005\271\217\346\235:\362\2538:\016\252?\272\3114\3729\005\327\035\272^\314\232\272k\335\033\271\341\030\2568c\345D:\177y!:\177a\230\271\020\r\204\271\273*\236:,56:\001\"\2229z\232w9\325\264O\272R\n[\272<\266\315:\212T\025:I\014\2519\227\373(\272:T\2109\267(\200\272f\266\026:/\271\2257\307W\3465\341\201\030:\002\031?\272\3665\324\272\364D\305:\020\322_:\304\230\233\2726\241\2649\322\366^\2726a\304\271N\r?8\031\361\377\271\305D\207:%\311U\272\211r\323\271\023uU:m\031*7\341Q\304\271\300\\\327\272\373\307\254\272\227D\010\272\034\264q\272\317\215]9\210\t\2229\325\254\230\272\361/\222\272\363O \272D\250\204:\007\330\234\271\330\317\3679\306\263\247:\265\250\0239\353\324\'\272R\277\005:\357\025\3428\rR\2318g_G\271/\001\277\271\357\377R\272\265\326\022\272pt3\272\205\317\0349\020Qk:\261m\"9\363\234\242\272\007}\006:\254\347\3019u\206\3239?\217\371\270\001\010\2339,\361\007\272\364u\220:\277\203\342\270&\013\2009M% \272\201L^\272\302\246\'\272q\023\\:7%\3777\007\300\215\271\004\r\010:\026\302\250\272.\343\3037K\363A\272\350\216\3369\253\004B\2725el9\005\322\024\272\n\002\327\267\321\352 \272s\301\203\272\004P\261:\277<\2019\321\267h\271\207\236\315\271\0278\021\272\014(\0108\341\244\026\271U\205\3077jn\270\272\363\353\331\267H\207\20582\306\306:\335\016\253\270_\364\320\267>ba\272\264S\252\270w\235\223:\217\327d99\370h\2722\222\254\271\232\031=\271U#\2537p\215\':D\223/\272\367\351n\272\335\365k9Y\275\001:\200o\3259\327\220\275\2714+\2359\014\361\2269x\300\231\270c\345\207\272\243!\3639\312\223\340\271JI6:\025e{\271\t\254\224\271\376\253\200\272\215u4\272\310\276\2559{\340/:\272\215\3009\003\3174\272\034\027\2669\205\372\235:\354\230g:H\373\0359\316pD\272\240\242\3348\246\304!:\031b\004\271\016\243\3669\347\201\334\2719\253M:\262\343\356\2712\274\3208g9\206\272\017\323\035:)\331\231\272\266\301\2679|\306(:Q\304\234:6Q\365\267v\332\233\271\311\321\261\271:QJ9\304\303~\2713\362\2547\257\377\3158\004\350-\271q\306R\272uL\246\270:\340\252:\021\374\207\2725\336\220:WjX\272\212g\225\272#\354y\271\264\227\3369Bg\276\271\322\272\354\272\211\360\301:\365\212\205:\233Y3\270W\244\005\272\315Q\004:\026\277\n\272~\370\267\271]\374\214\271\326\367o\272I\2223\272mlv\271*c\3339\361\\\3329v\275\227:\347&5\272Q\341\t\272\235=\206:\303b\t\272\3421\201\271\204\247g\271?\253\036\271\203L\017:\255\246\212\271\212\330\3749\3277\346\271o\323\203\271\022\013\0339(\177\207\271\016>+:IYV\272\260S\252:\242\265\236\271\275\332W\272\253\326\244\270\357\246\3708\306<\210\271\355\216\3237\337\363\2249\311\023\3529_\017\241\271\004M\336\271\304\333e\272\211o\273:\216\032\001\271\327\234<\272\016\361B:\317\213\221\272u^\2149\313\327\3738\022\343\"\272\313+\031:>\242\2638J|d\271\346\206\327\271\306IN\272\320\254\2669\250\026\017\272R\035\010\272Z\014\232\267\307\2129:\373\214\0358n\321\217\272\232\017\035\272r\003\2117\271\210\010:\353\277\3229\231>\367\272\004\344|\271\233\245Y\2649A\004;\260[,:\346.\263\267\317U\2229\242\027\302\270\344\002\013\272\276\234\3768\356\014 \272)\366\303\2717\272\2419\346\334\\9~\331\3759?\335\"\272\204!C9\231H\360\271S\253\0359\030\231P\272\242\250\014:\234tB\272vD1:\001\303\3749\303v\2709<yO\270\024\252\312:\026l\235918\274\272b)\2669\377t\033\273\337\2567\272\224\231\213\272AX\2519\273e1\272J\274\274\270\216\007\3239\'R(9!\325(\271\203\224\034\272\314\323\2419\214\234\243\270B\301\205\272\271\354c\272\270\203g\271i\303\245:\215~\206\272\255\327\222\272$\233L:\033H\242\271h\262\233\270\234\007W:\273=q\272\022\260\276:\214\214\2539\3310u:_\377+9\336\304\327\272\321\201\213\272t\223\2639\313\253\273\272\361\344I9\352\254\311:\020v\366\271\375\343\216\271\204I\0108\237{\t7|n\2548I\001\311:\347S\0049\034\337C\272\302\007\354\271\344\333\207\272\237\341\2278\023\010o:\\\003\231:Hb\205\272\310Z\330\271.\226x:\203\241w:E\214\237\271\375\222a:\252\231\027\272\t\010\2118xj28\217xV\272Z~F\272\313$\217\272\301\257\0049s\313*\272\3256\234:-:\3329f/\301:C\353::\023\006\036\272\206\262\3227\210J\3759\361\307\3639@x\3439_e\3329\023\330r9\346\356\2709\246\242\216\270v\305H\272\021\373Y:^\002\0239\347#\241:o-\235\271\241(J\272=\337\3539\342Al:\216uA\271\370\347\2636f\247:\272\207&\324\271\037\026u\272N\322\3679\004\314\343\270\212Z@:\260\355\246:\037\266\034\271\310\243\2429\\)\217\27249\3469fC\2259t\361\301:\355U\23098\253C\272\366\262\004:j\334i9\003\022=\272\333\221e:{\231q9\265\210\007:b\"t9\246\325\367\271Zq\020\272h\220\001\2714 \231\271\310&\007:\354\024\2269\346\022-\272{\357\017\272\254\002\321\2727\233$\272\217\266\203\270-\301o:92\27596\3336\271.\030\2428y\221\3079\347\223\230:r\241\2139\217\377\3379o|\003\271\255\262 \271\372\t\213\271\327\276\3506\362\277=9\037\321\'\272\210Cj\271\274\330\345\271\305q\3249F\274\264\270\271\317\006\272\275dA\272\221\352\2279I=\221\271\366\264d\271\3614\236:\373.\261\272\307\300\2209~\036\3479^\320\2249k\245\214\272M\331$9\364\323\336\271VJ\3129(\305\237\272\271R39\177\004\320:;\0028:\325c\3259\305hD\271_64:M\2121:\344\2655\272\327\333\323\272zu;\272\024gq:w\242!\272\270@\3377#\025\305:\313 \377\271\211\2610:c\306\331\271\335\226#88\237\035\272Q\313\255\271\262\255\202\271\373\250\203\2714\337_:\274\270_:\263\357P\2729\320494}\2339\204i\225\272\006\007\032\272\324bh:p\177m\272\3573\205:\211>Q:\260\327J\272\343zU\271\203\006\023\271\026J\245\272,\306L9\375\232<\271\315\034\200:\032\223\0009$pM:n\316\206:\352\376\267:\247B\243:z1~\272\351\245A:\225e\025:Io\007:\275\013,\267L:\035:\333\302+9\2734\024\271\032\0054:\202+F\2724\327h9\206\326\343\272\204 \3569jY\024:\213\032\005:\215\260:9\025w\223\271i\312|9t\300\366\271\000v\2229\312\257\3429It):\027\270\311\272\023D\2449irI:<Y\2309l\217\320\271m*\2639(\325\2478\2439\3679\005\306\245\272\317\276\014\270\245U\310:]\303\365\272\205v\t:M%C:\006S\2469\337\241K\272d\356E9\002\202\206:+#\364\272a\355$\272\213\222\253\271\033\001\004:\317\265(\271,\236\3229]\234\236\272\357\257\305\271\303O\265\271\330\302O8\263V\217\272u\216\033:Ru\005\272\321\3700:;M\200\271>\224\2247\276\234\256\272\223/\031\272\026\214\321\272U\320I9\204\200\234:C\300\314:\023l`:\275\214}\272\002\334\001:\210\032\276\270a\241\t\271\177 \310\272\327e\260:\000\264\310\267\363\367\013\271\021\241\366\267\367\252 \2722\266w\271\331 \227\272\374o\273\272\210\335A\272\207\373\006\272h\202\024\271\313\324\\:Z9G\272_\214):\237\305\037\272\350s\311\270-\222\025\271\362m\301\271\027\377\314\271\277\250\370\271\267i-\271\036\374y\271\352\331-:\001\031\250\271Cio9\"\303\\9&\227\303:`\236\314\271zJ\247\271\202\325\r:\216`/\271\351\306\035\272(\201<:\013<\0069E\371X\272<\245\3378\036\20318_-\n\272g\341\241\271\212\362\314\272O@\324\271\374\353L\272\313g@:\203K\014:\302\300\3439+\227\005\267oM\215:\366E\352\271\331\357N:<F+\272\362u\005\272\214\215@9\225\001\020\272\014\226\2639A\312\2239\307\257\3709\230D\250:v\271;:j\275[\2727\373G8\001\263\223\272\223{)\272\004=\0219\250\344\204:\017D\215\272XxY\271\020\266\2567*\320\241:\256\244\034\272tD\017\2702H,:b\330\343\271\252\265\224\272\006\243Z\272K\305\345:7\264\202\272\004+X\2729\204\33395\310\244:\362E\\:\357\214\3259\320X\2349]\274<97\r\210:\255:X9\206o\2118\331\356\3766\253\240Y\272\373?\031:\227\374\2319\010Y\241\2705Yh:\242s\305\272V\360F\271ZEH:Fr\267\272\246f\2309\245\304\2159\024x,\272\325)\016:\244E\260\272\302\211_:\266\335\276\271h\264%\272\302X+9x\302\314:\223\226\031:\315I\016:\037\260H:{\3312:\2520\007\272\334%\247:\245\232\354\271\026019!\250\0039\007g\030:\215\274t\271\307\345@:4yB\272\nH\220:\341\201\001\272M\342\034:\302\305\370\272\237\2252:\275\031\266\271$-\212:\367\3527:\242\335}9_\332s\272\365;Q\272\014}\235:\332\334\374\271:\267T:\022\266\307\271\200\324/:\360\023j:\226\354\304\271\242\346\223:Q\236\221:\215\203\"\271\264\3134:\274\305\215:\301\205_9G\320\272\271\253\273F\272\271e\376\271 \265\221\271G\356{9\032q\320:\210\212*\272n\026m:\276\014t9\014\235\000\272V=3\2725\271(:G\210e\272{5H:\n\373b\271)\255\354\271=\n\021\270L\367\3209>\204?9f\203\3228\025\240\235:@\367\372\270B\331\035\273\320\233\236:\0370\010\273&\210k\272\373\025\"\272\272\020T:\264\3126:\\\201W\270\266I\024\272tU\312:\005\256f\272Q\256\213:\214\315\265:U\247\332\270-\305\2559fy\023:\260\247\250\271j\254\232\272\021\317\366:\027?\010\272\256\267\207:]]\2748\025\323\020\270~\340Y7\373_\2019\025<\2749\267\017@\272\013\360e\271T\225\032\272\005N4:\343\367\2379\030\211\261\271\014\205\2608p\334u:$>a9\372?\356\271\326\305S\272\214\356\017\271\346;H\272\251M\000\271\375V\322\271X\212\002\271\225\224\3719v\303\2519\264\351d\2729\253\204\272*\365\362\272G\"Y\270\254Z\3268C\303\232:\206K.:}\240J8\217W\227\272\331\30308\010\0008:\316b\0329!\220\2359\335\262\r:\032`y8i\'v9\356\032V:|\366G:\377$\207\272\"8%:\n\215x9\353K[\271Q\005N5j\355\3669\366\301\006\272\001\345\3258\377.\225\272\226\027\025\271\273N\217\272x\254D\272Y\235\346\271\364\355T\27125\215\267\344\035(\272\243W\340\270\362\024\313\272\207^\3579%xZ9\204\323\r:\361\004\233:\344\376\2159O\273\005\272o\341\n:s\254,\272\267\322?\272r\305\006:\2410\266\271\243\225{\272\010:e8\027?\373\271\217\355|\272\3212V\272\207\277\270\272I\324\006\272\254\373\235:\226Q\211\272AwI:\310\333\336\270\257g\0178J\205{\272=\010\3558~\\(\267\200\006A\272\267O+:b\343\2449\260\355O9\361\347*\272\340\371#9)\251\2779\320\341\336:a\356\226\272\271-\3469C\256Y\271\242\212<\272\363\223\21581\214\271\272\360\203\022:\266\244\241\272bz\3409\275\261\3227~i)\270\237_{\270\"I\277\272\033\210\241\270\305\3779:\022}\242:.\251\002:\207\316P:\322\310-:\327\211\030\271}\0162\272#\003;\270\032\235\341:\201q\245:8a{\271\"\330\2277\201<\240:\207\362z9.\371\337\272s\304\256\272\341\232\35591G\207\272\373\363\303:`\331\246\267\007g\370\271T\230X:#\336F\271\246(t\272\362\252\016\271\353\236\3629\233\026\3578\0273\\9h\246\370\2717\357\021\272\233\001\r\272\372y\020\271+\211>:z\201#\272\005M}\271\323S\272\2729\314\267\271\014G+\272\025I\0208\340&\2019@s_\270Q\276\217\270|\033(\271}\007\245\271\311\250I:A\252^9\'#~:\364\225\220\270\202mS:\344\322\017:\324d\366\270\327\366\214:\233\357\246\272\350\242;\272t\"\002:d\t\3428\301\214\3279\360\271\0309\t\202\n:\317\336\3447\211$\021\271\243m/\272\336y\261\271d\r\244:`\321\242:\276\030v\270\265\250\201\272\310\271\255:\215o<9\330S,8>Fc9oB\2039\202Bp\272-\272\215:\227\2101:\375+;9\270\344\306:\332\237\3739\372\016Z:\254\235\3039\t\275\n:\356\277\016:t\224&\272\331\205\347\271\312\336>9\177DE\272\020R-\271\004\270\217\271\220\270\370\270\274\342.:&$Q:\333\014\335\270\274\033\365\271\320wM8\002\304\256\272/\347\356\271\303\326M\271\032Q0\272\220\306o:\277S\2508\277\323\251:)9\023\272\310\357\027\271$\0045\2729BN\272x\226\005\272\344\211\3449\2533\336\271\364\274g9\013\362\2529;nF\2716+y\271Z\301\260:\220 \0376\032\n\243\272\201Dx\272\216\216\020:J\206\027:\026\325\212\272@\t!9?\261\3469;Q\304\270]i6::b1:h@.9-)\307:\207$\014\272b{\211:\316\267\243\271.\303e8_\342A\271enV:\3134\227\272\313F\251\2677\364P9\240\376n\2711\3604\2664\014\235\271\377\357\224:\251n%\272j\206\204\270\'\307\225\271x/\225:\177;n:V:\214:*s?8u\360O\272`\237\":\346\257\000\272a\312 9\354i\210\272&g4\270\366Y\304\270\215\327G9|\005\365\271qF\3119\276\221\2639\313\t\251\271\3012\255\271\254V-:\254\004\3709\265\203.8\224\272\2608\221\002\350\271*\211\2469\210$J:\3177\"\272\303\377d\272QY\305\270\375\244\202\267\227\260\267\271\367\344\017\272\230\373R:\266\2477:h\310o\271\336Q\266\270P`z\272\017\350s:bHH8\265\235\350\267\032;X:\311#\0209\346}\212\270\037\301\267\272\360\375N:\007\035\3468\364-\277\271\372\032]\272\322|)\272M\3030\272\204\215Y:B\307>:\270;S8g\311\2008\373\302c\272N\354\372\270\353\006\353\270j0f:\237{\2119\214\331r\272\002\002\2559\347Yr\271\205p.:\261?\016\270F\306\010:\220\302\3249\307\"\2218\276\347\3109\212\201J\272\317\250\27181\035\232\271\353\301\375\271Q\340s9q\007\224\271\"\327\270\2728\207\247:\034\210\220:\200\311]\2720\001N:\221\211\363\270#\310`9\014\235\340\271\210\367\3079\217u\2328\365\232N\271\353\364\243\270\324M\247\271\236n\215\272,\004\021\272\250\034\241\272\213\236\024\272\221\330\0259E\376F\271\217\010\'9qDz:-\275\2509%c\r\272\026\313\313:n\253\301\267\265\305\2779_u\232:zkp\272\305\317\023;\021\260\342\272N\247o:\023M\213\272\340\005\211\272Wx\016:\202Z\225\271\252\274S\272\342\341A\272\246y\037:\313\21378m&\212\271?\340\36098\210\t:\337\212\026\272\252X\007;y_$\272\310\251\025:\232m\342\270\215\027\257:\265M\005\272\251\333;\2709\001C\270.Q$9\3024\300\271\356\307\356\270q\351J9\005F`9\245\030O9\245E1:\203G\272\272ci37\0003\004:0\305X:V\327\211\271T\332,\273\267\353v8lmo8&[\':*I6:\\\303\007\2724\355\371\265\335\247H9\330\246\203:\027\251%\272\251J\223\270e\001\r\272\t\352 \272tz\251\272\366\036\227\270\202\005\352\271\276\2677:]\"\217:\244~\2559AQ\254\272\243\230o:\261$\207\272\277\035\355\271\027y\372\271\200&\245:X7>9v\272\2479\331E)\271=\005\270:\035=\037\272\274\366A\271\217_\275\271\255\027\2659\236\272_\272\252\313\231:Kz\250\271t=\206:\322Vl\272\004c\236:O5\274\271\334J\3239T\203\023:\t\304\324:\022tZ:\255<\234\272R\244\277\271\233\215\2049\220\375:: +\236\271\016\304+\272\261f\'\272\333\250\2738\0175\3239\350e\220\271\266\243c\270Gx\2559\023t\t\270\322\230\3509%g\202\272x\266\2249n\030h\272\310\255\244\271)`\027\272p\252\265:\356]\036:\254\341|\272\nl\2679\"\344O\272\233\371\241\272%}K:=\327\247:\302\373\021\272\"\213\3018;dU\271\305\246\2239u`\2139\340\267t\272\266\006\275:\357\355s:\331\304\2139\037\223\200:\227\032t9\257g\203:\3458\342\2705\231\030\272\320U\3758m\014-\273\275Z#\272O1\3009\014\350\2319\242<\322\271p\013\223\271g\210g8{]\233\271\366@\3359^\004\242\272\221\341\214:i\034\301\271o\247:\272J\240\r:\260\004\':-\336M:\210\304\210\271\236*m:\333=\010\2718H\001\272\033\227!\272U\030\277:\231\036\264:\370\022#\271k(\303\271\211\340\2078$\244)9\017k\016\272G\306\252\272\320\257\2758]\031\327\271\020\223\3569\355\206\003\272\022\n\254\272\335\247%:d\352\3559\355b\361\271C\365\271\272\304#\010\272\315<39&\366\271\271\327\0318\272\201\241_\272\3714f:\255+|\272z\020\3367\330Of:f\035,\270\240\371\316\272\341\236\311\271*\36669\301\207i\271\0321=:\010\334\022\272\025\323\240\271[\350%8t\022\"\272*\305\336\271\002v\215\272\004/\005\272\r\360\327\271\\U\3267\354 \014\271\216B\2039Ik\330\270\024C.:\240\001/:}\001\\\272\002\354L\271\266p\033\2720)\340\271\317\035\210:\263i-\267\365I\323\272\217!\211\272\013^\"\272\240D\3508M\231\237:\205\212\355:$[\006;Bh\222\272\370\"z:\"F;\271\276G\031\272\216\347\030:\330\227\001\272\324\366::\372\267\2239s\356\201\271i(\2728\360Q\036\272\320d\013\270_<\357\266\321B\n:b`K9f$\0059(\030\211\272\227\255 :\236\n\3478\205{\010\272\233\031\277:\335\205\001:s\261Q\272\221\005\201:5\2259\272\271\340Y7\327\225\235\2720L&8\255\303\r:6\007\276\271\206\255\350\270\024\215l9+e\311\267\037\303-\272Ae\217\271\212\034\033:\207\360\027\272F\t\223\271\334\201\345\271\201V\262:\302[_\272\350\270\206\272\205\3541:\0374\256\266dCT:X\243\022\272\333\224)\272#\027>:\233eQ\272b/\3129dU7:w\r\343\271\353\202\0239\230\315<\272\360\363P:\034\020\351\270\346\331\020\271T\331Z\272\005\254\233\272\342%,:\026DN\271\322:\3249%B\351\271\232m\244\270\337\305\3049A\203\2269U\017%:\313\264\317:5\334\":\033\213Z\272\254\257\304\271t\034\352\270\316F\212:\243\267\037\272\026Xk\272\347\025\022\272\240\371\\9G(\t:\201V\2339M\226J:\305\t\206:\t\014\214:\334\"\270:\002\335\242:\037\210\2149\324l\254\272\314~\2429\001\203O\272\355\213\314:DMb\271\306\333\243\271\252t\006\272\372\364\223\271\035\200\2039\277K3\272s\205\321\271\355b\t:\323\375\3309\230#~\272\225+\214\272\264$O:\264\252\200\271\005\037\030\270}\330\030\272\006\270\2119iY\201:C&h\272\030#\206\272\264^a:@\346\033:M\222G\271Xa\306\271$&\247\270\222\303\274:oF\2319\034\320p:_\336\013\272\260T\2508\311%\226:I\202N:\317\245\3159\013\244\3718\203\2111:\343Y\220:\326\222L\271Gy\214:\216\334\021\271\333\\\033\271D\214o\272\010\003s8\022j\005\272\255~\3329_d>\272\301\"\031\272\343\221\000:^@\375\271\332\333\2129\\L\003\272o&T9\226\314\3027\267C\033\272P\373\364:\316\356\233\267H**:\221\331\2179\334\357\005\271:\206%\270\316\341K\271Y\344z:\327\341 \271\276=O:fW\230\272\203nh:\224\366l:]\243;\272\234 \326\271 F\3158\034\240\33790\"\272\267pU\351\270\323]\237\272\317N}\272*\303.\272}\352\005:b\241\312\271\307Ds\271t\244\003:w\325&8\354\357\302\271L\263U:\027q\306:\020\204\211:\237\235\\\271*d\274\272\025\223\221\272\264\301\2176\201\212\036\272\364o\2459\220?\2119\346\311^\272)h\250\272\254d;:\2031\264\267\241\224\001\272\212\013k\272\353Z\001:\260n\2659\245\257!\272\031\\\025:R\203l:R\302\3738\332G\224:\322\262|:a\252\005\270\n \3439\361\243\3608X\316\351\272.\364-:\375\367\203:\3414\2549\262_\2128\305\213\205:}\006h88!\342\272\232Tr\270\352P\2209\270d\0249\242)Q\271r-d9\214\314\3149o\221\200\270OF\203\272\330^\3229~\037\2008\323\"\214\271p\301#\270bS\2769\002\354<: \306\262:J\207\353:\'6\2149\'-@:@%\037\272]\304[\272\2102\3719b\'2\272\374\000\226:\340p#\272S\rC\272\332\204\3019\2315\2319\334\345\234\272\352\306X\272\230\260\032\272\034\373\2639\303\016F\272/\360\246\272\363\000\3139\235k\2029\254\n\202:\253|\201\2719\250\2178\031\306\2668uP\2079v\217\034\272Ehs:of\005\272d\252\305\271\256\251\254\270\331\035\222\272SF\342\271\337\003o95\025\3138\177\313e:\333C\2379y\014\0019\230\"\310\271[\340\025\272\345\242V9\276Iz:\223\257\344\271\346\334\202\271\204+Y\271)\235\203\271\265\231F\272v\252\264\270\2118\206\272\3249\35192\221\022\272.\357E9\023\032\375\272\347\217\216:\351j\361\271d\353X\271g\371*\2708Q\217\272\374\341\004\271\025[\3629\357\240w\272\241\023\3168B\007\214\271\307Y\252\271`\021\2469\331e\311\271\244\005\3529\001+V\272*i\2369)\346\3639\331!\217:_\304\206\272I\316]\271\202\327\202\270\334|\3339\t@\275\2713\032<\272@\020\3379\226\232\3069\306_\231:\351\026=\270\310\362\2109\025\223m\267hb\3449\353\005\027:\244\274\276:\016\020+:~\344:\272u\262\212:\216\217\3749\r\262\266\271\304O:\272\210\024r9^\244?:\206\365/\271\226O\010:*\364F\272i\211\'\270\227\312+\271t\222\2469=i\276\267m$\013\272Q,\022:\031u\002:\273\2466\272}\206\25798\313D:\335\217G:(\017\03198\377\0229\362\370\025:\267g\2019?\315\222\271S\034\3029F*\207:0o\332\272\301\206\2109\312\306-\272$\265R:\021\317\3459\363\245\3547\302D\3609(\317f\272\236\340t\270\315[)\272&\331-:o\272\034\272|\320U\271\344\222G8\020m\035:\240 (:\264\332\316\2727o}8\317\245\0019\2366+\271\377(!9\333`v\272\017L\2239Y\273\332\271>\312\263\271\305pB\270g?\255\271\305\316w\270jR\025\271\t\243\2238q+\0038\263\350y:@.Z\272\367\3058\272\316\303b\272\315\307\234\271G\211c\272lv\220\271\325\374v\272I?3\271\010\022\253:\204\230\000\271o\371\2169\330\265#:\364\357E\272H\200\036:\037r;\272\t\275L\267)\223A\272C>8\271\315\202\0269T\332\263\272\353ia\271&\003I\272\335(\207:\'\307\213\272C\343\237\271\315C\235\270J\017\004\272Wx}\272\300\200\276\271\216\247\021\272\217\026\3039\364I\013:]\335\246:\205\203\37087\251a\272iI\014\271\241\276b\272\200\267\227:\\\345Q:\007\277\204:\276\275T:\200\303\311\272Y\315a\271\2251|:\005\325\260\272\335x\265\271\311_0\271f\330\315:\010\366\2219^\202\25695*\273\271\254\327\232:\n%\3068\3009\233\271/\234\2229\316L\2729\265N\256\271)\234\250\272\254]\373\271\343\327\210\272\355\016\004\270<0\3069\347\231\301:\213W\325\2718A?9<j\020\272N\341\3628c\340Z:\355!\3739\251?\252:\230Q\001;\202\207\227\272.A\301\272\020n\237\272x\257\243\272\026\205\2528\223\035\000;\371\272\253\271\223\355g\272\223|\023\272\254\341\2649c{\215\2706\244\331\272\255\037\010\270\211f2\271.LK9\270\240<\272m\320\355\270\276\244\030:&\261\2149*\302\357\267V9\003\272\234SG:\010K6\271\225\342\213\270\353\316\243:\271\352\006:s\014I:\335q\247:\002X\245\271}\331\234\271\345d$:\0353\35591\230\036\272\376\305D\272t\325o\2712\177\253:\003o\2379\277\232\222:3\037\030\272*\244\315\2714\010|8.Y\016\272\271\020\307\271l\352\263\270\235m\231\272\307\013M\272\231\021\320\271\247\344\014\272\022\334\241\271\250\264\222:o\335\2769\334\216\003;\255\020\\8\030\023+\272\354jk\272\311\367\204\272qC;\272^\213\251:\224z`:^\325\350:0\223\3049\371\030\006\272\213\225\221:\214f\036;15g9\206\00198\016\024\\8r\245\215\271\310_\025\271\014u\242\271n\337\252:\241\007u\272\232A\26193q|\270\373\277\243\270\302\005\3019e\212\020:\033\243%\272\355\370_\271\365\250\025\271yN\206:\374\356k:[\260\222\272\274\210\222\271\017\327\032:\206\\\3479\003Ly\272n\nh9\33466:}rU\272\337R}\271z\205*\271\352n\021:\'mW:\356\352\276:\241\031i\272\361?\225\271\212\240P\272,\223<:\226\311\244\271\020\365\356\271\253Z<:\032\330$\2729\231\2539\t\037E\272.Y\301\272{L\330\270\204\271\217\272&;\274\272~\320N:\310\3414:a\310\023\271:c\330\270;\300N9\302z\272\272c\031\020\272\254\220\223:\236\233/\271b\361P\272\371%\313\270\317\225o9\354\336\3249@H\264\271N^\205:\337GO\271\331\177-\272$\036\2408\367c\230\2722\336\023\272\205\341\3609\277\275O\272\342\022-\272\367\2024\272\340SZ:3Y>\271>wn:\205\013\3767x\374\3149\220\016\0339\311\226\3629`o\2539\366\226\216\272\013\227\3129\366\320\2028\223K\014:\332xy9qH\2719\317\361\3539\316OY:\t\274\361\270\240\253\0059\350\321q9\215\216\211\272\200zg\272\262\321\2319\037l\026\270\310\212\001\272\262\305\310\271\004\006\236\272\313h\3258\342K\314:q\030\3209<\326)\271\007\310\017\272w \r:At\357\271\337\021\027\272E\022\377\271O\314g:\215v,:a\364\245:\037\226\276\272\024\306%\271\354\362=:\3124o\272a\275+8\014\'\0379\273ZM:*\002\013\272K\305\3139\363=\200\270\017\016\261\270\2378%;\236\303\246:\2174\221:~\301@\272{\350\333\271\211\230\010:I-\0149\253\034\031\272R-\222\271x\253r\271\326c\2148r\326\376\270\t\222\007\272\311A\2315L\n\2778\0374\251\272u)\246\267\370\334\252\272\364e\265\270\354\023+\271\204GB9\330y):\227\202\226:\001\374?:\274\251\303:\002\270\243:\351\251\340\271#\215\216:x\351\3739\275+&\272\245\016\227\271|\313\002;\026n\375\271\261 v\270\300\301\016\271;\312X\272h\361>\270\202\240\200:gc(9y\366\222:\0348\003\2723\266\243:\242r=:\233\324\3149]\3035\272\251\tQ9\2360o\272aM\276\271\022\235\013\272\\U\2128\252V\003\270\244W\215\272\345\002\261:\377\205*:\345\217\333\267\257wT\272r}\302\272D\252\3569\315\014`9\036\3745\272\276\272\221:\020\337\0059\225\210\303\272\310\315\2608\341r\3049\325\352\2269\326\300Y9\371J\2069\271\334\247\270\262\'\031:\'k\3269>X\210\272\375w\027:\317\323\237\272g\304\3759\211\035q:\302\343\001\272\010\267\023\271\034)\212\272\272\215,\272\250aH:\3002\223\271@\251g82;\271:C\237\243\272\301\203\305\272~\005\230\2665\223\027\2726u\202:\346N\256\271Bh\3127\363\317\353\271\'\236\':\3460\3719II4\271\357[w\272JVc\272\3423f\272\004\253a9$\236\3459{\356O9/\262\205\272\305\274\3217\315(p9\020\326\213:*\177\217:\007Q\002\271\200\311e:<\304\014\272i+\001:\311\\\"\271\231\253\332:\005q\2319\277\346\321\270\364\000\3118\t\317-9A\354\t:?*O:-\313;\272z2S\271\235\332\2619\3178\303\271l\351B\272\366v\221:.\351\002;!@\0149\272N\032:\352\016\003\271i\2435:Pz\2319\362\323\370\271\2765\272\271`H\346\270\371m\266\270N\006Y\271\334\221\240\270\321\000\222\267\337\351\\\272\"k\346:1x\370\271\032\277\377\270\322\371\036:\352\343\242:\021z\'9\212\205\035:\204\353p9i\252\3219\377\225#:j>&9\233\020?\272\340\213\315\272\322\327\003:\225j\236\272\203\326\340\270\010\0374\271s\356\t\272he%\271\212\330/:\327\324\243\271\246N\217:\013{#\272\007\"\340\271\023\204[\272\016\314\220\271\247=\223\272<\270y\272\313\020\003:\370\252\231\270\3664\330\272;\256\362\271B\001\2329qK\206:<\257?\272\203I\3618\033\3373:\262 \230\272\303@\265:\320\245\340\271\216\314\263\271\267\2108\272\341\302\2359\\K\2047\352\024\3369\271_\3327C\246Y\272X\037\331\271\252\261\2479\272\020\205\271\236T\230:yEU\272jX\272\272\260\242g\2712\215h:\214\377O:\035\235N\272H\277a\272\177\322\226\270\306Z\230:\021\237\026\272_\340\204\272\240\223*9+\354\036\272\253\250\2769\272\3135\271\252\246\245\272\322x\251\271D\275\2617\320\301\311\271\007\267\2119=O\251\272\366\314\2758\2232<\271\240)\24190s\2359\014\322\033\272h8y\272\227\361V:E\245\340\271{Z~\272\306\014T9\366#I9\356\307|:\240\322\206\270Z\327\003:hs\233\272\367\260>\272\203\311]\272\037m\376\271=`\241:\355\034\246\271c\006\2308\245\002\252\272\271PC\271\257@J:\347F\013:\010=\350\271\005\021\261\271\270\255\246:\271\356\2239\207\324\3379f\0145\272]|)\272\230Y\n\271z.\324:\3325\360\272\225\221X:\353\325\322\271\323Ne:\344v\002:\032\241\224\271`\3539:b\317\301\272\302\250\377\271:G\221:#q\254\272\276F\3677\233\322\201:\355\005\3538\266D\363\271\356\025\r:\2208\3539\206\327\n;4j\213:<\274\277\271\240\226\3229\322\034\265\272\203e8\272y(\0279Io\256\267P\001\247\272x\271!\272\260\234\344\271\024\235\3509\343!D\271\244x\2179d\262W:Wn\325\271\303<1:zW[:\263%}\272$\334\211\271Rv\325\2728\020_\272\033\274\351\271|\024\303:\377\257\204\272\2459\2417\377\372\2678<\001t\271!\343\221:\027\226\t\272H2\3267A\201\332:\223%P:B\265Z:\222\313\226:R?\n:_\005\3508\3108.:U\360&\272\r\310Y\272*m\"\272Q\005\264\272\223\311\224\271\211\271E:\212A\246::\240\214:\233\313\r\2715\216S\271\215\304H\272\376Q\262\271\264\305\374\270\210#\2539Z\221\370\271\036{\000\271}\347\275\272\316c\235\272\350\245@9{\006c:0\246R\2721%s\272\272z6\271\217.#\271\2571\255:\225\202\'\272\005\003\272\272e_\236\272\306G\010:\r\263\352\271\351\271\017\272\361\254\215\270\361\001\036:\342-w:\3541\003\270\221\311\320\266\323\307g\272HC9\272{\340\2729\027\017L\272kW\033\272\325[\2109\354\247\370\271\310t/\272m\210O:{\376Q\272\302\022\225:C\331p:\340\342-\272H\241\231\272c\267\270:)\t\2029\242\245\032\270\035[\302\270\327Yn\271\235\2440\272\350\024B90{g:\334\000\024:\355\364*\272L>\33791\234\2169\201\354~9\243c\203\272v\307q9fC\0239\017\335\022\272:\260Y\271\246\027@\271\230ID:\266\330Z:\366\227p:\247T9\272\215\365\205\272\262\255\216:\307\352\307:MR\201\272\352\017n\272c\366\3249$\260\3419\331\323\2178j\351\224:<\026\3708\325*>\271\024\307\025:x]a\272\220z\306\271@Aq94\267\25582\306\250\271\312]\3539\213\2149\272\323\242\212:\203)\216:G\305+\271\371\024 \270\232x\221\266\335F\320\271\264R\3075\310\275\177:`\366\2528\004\355\2229\t\374\2609\242`\035:P\310\2238b\265\3357\0145\324\271\331\375\250\271/\001\014\272\215\227p9l\251\273\271H ;\271\371sI\272S\2663\272\203\256\230\271\241x>:\336s\277\271\036\215\024\271 \t\320\271\247\370+:F!\362\270\'m\213\271\374\277\024\272M\202N:\372\266g9\203r\003:\374\327\272\270\300\205\2348\311\364\220:!2\357\271\rx\2229&$[\2727\213-\272\373|\3267Z\235\2269\027(:708\253\271\305\247\r9\233\007\3219t\200\332:\0146\311\271\0327\322:\244]!\272\222&H\271?f\n:\357\334\246\271-\327\225\272\343h\3559\2706\0229\006\032k\272\030y{\272\367\032_:\026\354:\2724\301\003\272V\310\272:\307KF\272$q\347:;E\254:\300H\3719\\t\2448Z\342(:\033\212\007:\211ze\271-\215\027:\025\356=\272\251r\236\271\013p@:\362:(:#d\306\270B\370[:\365\353\365\272\266\035<\271\222\200e:\000\201\2749.\326j:G\321::F\234\300\270`\322\016\272\234;\257:\266\303=\271\377\265\0139mwQ\272\243#\33696\017\322:\261\177\036\272%\006\214:\033$\030:\302\325\005\272\225\254_96\230X\272\3437\240\270\232{\217:\037\371*\27136]\270\376\313\2328\306\256\2019N4\3769)\240c\271\271SB\2712\001\253\271\332\356\245\272qO\3378l\254?99\341)8@Nd\272Q\372E\2725\323\366\271q\235\356\271$\340E:\nLk:\364t\3269\377T!:8\'\270\271\342\025(:n\253\347\270\332K\212\272;\001\261\271\032P\321:}\0344\271\233\304\2219\260\226\254\272\003\256c\271O\033K9\2545\2659\374\353A\272\230\010B9\364\250\374\271\377\2551\270 ]\254\271l\273\0208^!\3518\376\347\254:\261\022\"\271\005q\"\272\370\005\2318\212[\2609\254\263-:I\200~9\241v\024:\267:$:z\337@:9\310\230\271\350,\253\271l{\2027\341\355o\272k\000g\272\343\246\226\272H\023\241\272\'Ge:\222\215K9\275\326:8\211\223\027:\204\271\2229\347\030\334\271\n\022\307\271\342\241\266\271\005\317\320\271+\003\177:\235\027\227\270\240\266\024:\272\262O:\343\271d\271hB\3118\0070Q\272\207\3622:\311\275\036:\251h\3118#mG:G$1\271M\323\n\272\312\344\007\272\373\203\254:\304\002\014\272L\221\221\271\246B\344\271 \036\214\272g\314u:x\342\2549\006`t\271\307\252\222\267\260\301\034:a\225(\272\337\000\037\2709\016\332\270\216\373\214:j69:\031\226\2049\\\300g\272\273m6:\313\\\2649\0036\002\272\000\373\262\271\"#\":\261#-9o\007=\272_\240\3329\262N\3349-i\302\271s\360*:\227t\373\264F\301\2119W6\007\273\350\306\274\267\212\217\231:\321\345\377\271\236M\222\272GG\3469\303\225>:\312}\022:\341 R9\301\330,:\370\221K\272@J{9\222\243\2539\007\r\202\2714\341\310\270K\341\013:5\360\261\271lA\3649\245\246\224:\215\251\304\270\346\303\0009\366\322\357\270\3374R: =\203:TC\305\270\231\276\247\272\034\337\002:<y\3029\302\3259\272c@\003:\307I=:\221o6\270\363\207Q\272}\304C9\0353+9\253U_:\030[\006:\307\251\2509?6,\272\261\345\2259\307\322\224\271\227lm9fG\021\272\226LK\272yN\204\272\023{R:0J#9\344T\177\271\276\032\226\266-\365D9\360\340]:\332\313\240\272%_\262\271\207\323\320\272e\223\005;Ub\221:L\357@:\005$\3478\354\3559\272\275ut\272\254[\001\272%b\270:\233u\240\266z\264\'7\370\213\232\272\016\244\370\270\250\314\035\272\317\315\376\272t\032\3648c\203 \272\344\033\243\271\217\354N:\201 @:\364\224E9\202\217\005\272\340\"=9\262\355\22393\321#:ET6:h:\016;>\315\2268;\215\0077\331k\033\272g\344\247\272\250\352\2678\343\311\277\271\002\256\235:\353\216\2048SLU9l\232<:\3660<\271\214x\2238\316\202Z:R\005\365\271\013E\206\272I\226\r:\324\025/\272\370Bz:\216\014\332\271\224\243\2009z@\235\272\260z\205\272\344z \272\255@P9Q\211c:h9U:\367\2304\272GZ\314\272\013\342\2629o\273j:\213\017\226:\220$\3219E\344\207:\021\007%:,q\231:\316\007\260:\n\324l:\362)r\272$\301\3349\311\246\343\272\2017C\271\333\216/\270y\347\205\272\312\237\305\272\325\206~\271\026\213\202\272e\227t\272\334\377w\271\255\233\2679c\2355\271De\321:\032\216.\270\247\325\2079\273A\217:v\207\271:K\003\317:P\r\244:w\032:\272\375\345\370\271\366\322\024\272\344\024\2678ixW9\341\377\177\266*\273E\271\3563>:\375O\224\272\260\336f:\267\271\307\267\177\267\2479 \275|9<\322\2249\030s\372\271\0233\3467\343\275\3258\335\216S:\270\337\222\271qJ>:\005\001\3466?\005\2727\016\240\372:\301\360,\271\202\t*:`]\255\271\323\316\2749\321p\245\272{\241U:\365B\225\271\247\210*9\\\325\031;\316\227\236:\213\366\r\272\207\n\364\271\301\316\\:+\216\n\271y\310\226:\365h\010:\231$E\272\025\355\3007\377\031\000\272\311\277\2658Q\345\310\271\322\352\023:a8\246\272\366\325\2779\205\263V\272\320\355_\272g\220\3559\223\027\256\271r]I\272;\"e9>Y\314\271\377\226w8\023R\010:\002\214^9\356\240I:Dr\3239C\360\031\2724\03169 _K:h\226Y:![\006\272K5\247\2718B2\266t\303\003\272\347\346\3319C6\023\271\257X\314\271x\331\\8I\235\327: \247j:+\03369\031\n\0149W\246!\272\274~\201\272$\261M:?\356\004:\314Qa9t{\274\272\234\214B\266\331\227\2369\352[V\272\220\246\334\271,\256O:\033\351\320\271\032\365\276\271\364\365::30z\270c\271\353\2715N\210\272\355\211K\272\001h\311\271\356\305.:\230\200\352\270\205\336u:ia\371\272&\356=9y:(8\367\314\320:<&q9\374X\226:\303#n\272\307{w\272\r\277@:\006i\3228@ow\271\352#^7I\201\2048\350\227\3319\323d\225\271\026\n\2369\007=w:\275\351m\272\010\'\0229yR::\260|\2468\026\\r9Y}\3419\332WL:\025\2165\270\361\006\21493=\2269\332\256\272\272I\345;:\213}C\272\374\376\021:c\327\226\272K\252\205\271\324\013\300:\310\021\331\272OW\242\271\353\206/\272\361.]:c\264\244\272\2709`:\270\022\3539pb\006\272\250)\246\271>w5:[\010\265:%\006\204\272\263\242\3358V\006\214\271\214X2:P\202\300\271\034\305\202:\253\3755\272\325\006\003\273%)Z:#\333\2329+i\256\272\324z\037\272F\316\204:4\332\226\271k\250\2048\221\2525\272;\356\257:8\367\2729\014U\0339\226y\340\272jC\243\2711\266\3608@e\353\271\366}$\271d\207\017\271!\243\002:\201\255\214\270\322\376\r:{?*9(\201\3409\324\017C:\002\334R\272\250[\227\272\214>\230\271\310m1\272\262\314\221\272\311X):\356\000A\272\205\255u7\255\321n\272y\017\032\272\262\210j\272\272s\3329\373L\331:c0\3419Hn\3169\307L\3758\177b\2547,\237,92\354\022:\332\'\370\272\271?\247:\224\241}\272(\364\3208t\036\362\271k\027\0249\003\030\013:e\326m\272c\245\205\272\032\t\2179.g\0169\206\274&\272\256\211A\272\000\007\2119`\344W\272\342\n\033:\033.\346:C\275L8\205\211R\271\206\265;:U\021\017\271\257AK:\323\262\274\271\re\2419\325u\316:\317\255\321\272\2046L\272\203R\3609\375\23508\311T$\272+\214\332\271\000B\3039\316\353Q99K\0179\010\205\302:\375\327G\272\227\213\365\271I\346`\272\007\206\235\272\376N\2679]OX\272a\224\202\2721\323\243:7\316\302\271\217\236\027\272\272\323\262\272\2745L:f\252\t7o\024t:\321\364%:L\014\222:\223\024G\272V7\245\272L\3275\272\201Ju:\353l\224\271\265\320\210\272r\237\035:\222\203\212\272\275!\2239Vv2:i\306\2009\356\207-\270P,\311:\334G[\272\332\000y:K\205\004:]G\267\272b?\2569t\024\3777\352\262\023:C\017\3009\n\357_\272\323=\3169d\251\312\272\260\3112\272\2658\2669Q\320u:}\033\225:\023&f\272\033\244\276\272\347\204\':Yu\0269\016_O\272\333\374\370\270b\354\3779J]\250:\000@\22491\364\224:B\250\223\272R\302\010\271g{\2749\352\372\2529#R\2728\204u\240\272P\305\035:\217(\3439*\030\3319\330(\005:x\313(\272\315HY:\"|1\272O[79\246V,9\240\244\033\272\355\317\252\272\357rr\270\226\310\261:\r[J\271\003\313+:\355\320I\272\303\025):w?\370\271\017\245\334\267\033;\035;,\223\215\266\256y\325\271\023U#9\346\201p:\370\013d:A\3755:);\232:Tc?:\375\376\370\271\302*\362\271\237\366K:I\'\3079P\213s\272r\021\2659]\000B9\341\030\243\271Q,\034\2729A\230:\216T\240\271\207\223\2749\227\r\233:\236\263\3159\317s\261:U\003+\272G[ 9D\332\001\273\243\324\0109E\207L9\177(\352\270\343\014+:\240\346b\271\311Vk:e&\206\272UP-9Bp\0369\224\324\0079+ES\267\246\375\023\271\304[\"\272\021\016\2769J=\016\267U\340\033:\335x\232:\252\237\246:\020\372\377\270rL\2139\272q`\272\"\344\306\272\305\0304\2729i\3729{YX\272$\342\351\271,\336\002:l&9:F\005\031:\007\2019\270\263\035k\270\322Hp\271\3047@\272\314\210\r9\002\023\217:\177\203\003\272e\210\2529\250E\2259\177\224_\272ZM\212:\020X\264\272<\223@:Y\200\031:\221\262\330\270\365N\3069c\315\3519E\233A:x\232\255\271\033N\":\275C\0059\214BG\272\360\211O:\265\240h:\'\26659\006\361(\272\016\277\205\272\242\376\204:\375\321\213\271\020\334D:\234\245\2459\333i79^T`\272lq\3727z\321u:K\303.:(e\003\273\330\210\276\272\177\215\037:\203;L\2721r\370\270\313\336\227:%\257\346\271 \366{\271\226\341\303:\033\236\204:\0241\2619\336\245\3709\033}\302\272f\006\305\272\376P9:5\306\227\271#\304\013\272z\303\223:\000\224\\:@r_9\240\223\254\272\014 N\272\026P\240:f@\0139HaC:\313\263\367\270e\247\346\270\305\301\032\272\\\004\2559t\340_\272\273\204\212\272\033\365\223\271\237\233\276\271\315GY\272\240\314.\271\267\363\020:\313u`\272\223vB\272m\235\223\267\373\r/\270*\3262\272!\317\033:\327\353)\271\251z\214:\001x\210\272\370\327\352\271\353\205\025:\003\371\2008\027c\240\272n\310\2439\314R\261\270\017\310b\271\340\227\014;\336\356\223:\257A{\272\306/_:V\347\363\271\314\306\376:\270\270p\272\257\223\270:\200-\2577\345\273&\2721\254\2059\211a\014\272o4u:\216\022p\271\336\353\3318nc\2729\321\210)9\024\267\013:\357\214U:\326\341\262\272\340\317\022:D\234y\272\360k\251\271\241*\265:\311\3736\272\n\240\212\272\023\342\034\272]\010\271:4j\212\272\250R\2379\274\363\n:\320\254I9\253\210\2319Lm^:\320\217\3217\014xA\271\325\230\021\272\203\327\213\272p\211\3149\266\305\3368\201/\0148\210\31238\247<\021:|Aq:\267*\2459\210u\363\271\341bj9O\330\243\272\220\335\202\272r\230\232\271\027\037{8\241\322n9\365%\3119\363\326{\271\t \3369\247@\014\272:\252\026:g\374&:\010\376\335\271\346_\373\271\'\026\000\272\301\t\211\2704|\2639K2X:f\273/\272%GT\272\010c/\272*\331\025\271\242\376W\272|\232\224\2711\246B8\251y\2009\\\307U9\257\326\2369t\210\256\272\004\370+:<\025\2766/\364\371:1\313\241:w\320\001\272\246\372\320\266\233\232)\272\312H4\272\031\251\3509Ih$:\256\342\0379l:\306\271\351\215\333\271\360E\235\271\002\367K\272\333\244\3238\017\315r9\372d\3409\302\337\020\272\200\212|\272s\267\372\271\332\213\031\272V\362\033:J\237N9K\3313:\002:\334\271~\2254\272\232\0062:BXR:\001q\323\271q\321\202:@L\2169M@\3208Shr\272y\324\264\271;\312*:e\355\032:.j/:\266%)8\246\0300\272[\247K\272r?+:\336\221\360\272\'\367\032\271\204A\365\271-\375J\271\300\t79\376\312I\272\035\236\205:I\'\030\272\000\033\'\271o)t\271\340\0332\272\306\302M\271T\027:\272;\253=91\222%:CZ%\272zI\2449\3446\323\267\t\242l\272\316\220^:\354{/\272m,\177\271\335v?:\034\020\313\271\001\346\304:\n\013\226:\254\"\2608\204\026+:\200\021\013:\231\243\2439\306\230\252\267\273\265\2429\223\025\205:lA\254:\275\020\256\271\007S\244\272\201?3\272B\337\204:g1\211:Ml\262:!\257\010:{\277\222\271\301\352\277\271\204R?:\353u\204\271\324\374\3079Y`\3378\312\217\212\271m\t\225\272\000k\3469T\025k:+:L\272<Fq9^\321L\271\256)L\272\364\036\367\271\331\207\r:\230X\2439\242\350\204\266\252\r\n\273\251I\016\270\313WU\2721k+8`\252W9\347t\241\271\303\342\354\270\267\025+9\257\362\221\271\330\025S:\317\335;:\031G\347\272zO\2278\207`\205\272i |:\361\350\301\271\200F\005\272\356\035\257\272\'\334\213\271.\244*\272?I\372\271@Q\3458\211\236\2219\032\304X:\231\003\313\271\353\211K:$\001\203\272\225]p:C\361\333:\340?S\272\312\347\2519\275\233\223\267\337s\237\270\\%[8)H(:\214\340\2749\000\010\026:\262g+9\027\241\334\272\260\221\216:\007\232\n\272\'3\3449\3464\326\271H\020\335\272u@\314\271\r\345\2569\003\021Q\272\347\370-7\225Q\2628.g\314\271k\372g\272\254\027\303\271\324Xp9\362\255\2329s<\3569O\260^\267\026\214\233\271\342|\33091Q\375\271\370\302\032\271\311\247\316\272u\330T\271\333\'C:fW|7\000\0266\270D\202V:E\375\363\271$\005\3229\031\241\220:\333\274\221\272\373\261\001:ief:q+\367\271\024\300\024:\277\031\3049\367\241\036\272\331\017U:\254\001.:v\317t:\273\360L\271\365-\275\272\377\305\3619\303\032~9\273\202\035:\207\220\2519k+T\272\n1@\272\201Kg:=\005\373\271\271\250\3639\037\014\210\271t\212k\271\014R\026\272\355R\2618\031\256\020\271\027\370\231\272\005\016\2028PR\'\272\257\214\t9R\233\32199\322\3438\225\224\\\272\277\010(\272?D\201:\362\340~\271\271\241i:\332\276\357\271UY?9 \205\024\272\210\230\260\271t\301\2019\200Y\330:%t*:^S\2318\325E\232:\311\377\235\272S@\3429(\352\213\271\274\255\024\272\376\0170:b\010\002;T\242\360\267-S\2679\342\323~6\317\375\345:\202\261\352\271aj\2648A\370\332\2716K\233\271\346\005.\271`eu9\033\350\n:\r-Y\272Q\361\3029\223u\024\272W\233\033\272\277{\210:\262A\360\270\273\362\004\272\313a\2718W{\244:\307\214Q8\305\263\311:\261\232\2219\014\306$\271+\256\201\271A\017t\272i\222%\271\3239\3429\336\2458\272\310uN\270+\326S:n\353\002\272\277\275u9d\242\2048\222\306\0069\364\20379\260\364\3339O\340\231\272L\007u:\342w\2417\034\363\331\272\303+\036:f/l\271\276<\237:\010M:\272\233\032\251\271\n\r\017\272h\265\3568\265v79\254\022\2668\316\214X\271L\334\260\270Q\214\343\271~\355\234:H\006\025\272\3543!:,<\214\272`\257\201\272\212\377\017\271\"\227\221\271Y\0165\271dWL:\213b\344:\230\303\177\272r\266\261:\311\370-:aj\207:\t\233\"\2716\314W8U4\036:\032\247W:\236S\2049S\305T\272\t\376w\272Q\330\340\272\276N\234\271l\316k:m\377\217\272\025@\\\272\273\307\3159^C\367\271/\030\007\272\201\363\331\271\345\324\2218W\035\255:\323:\\\272\310~;\270\007\363\030:\t\307\025\272\324\322\r:\"\344@\271\270\001>\272\346W\304\271R\2339:\031:\005:\345-\220\272\215\353\2219LR\331\270\374\256\335\267\2465\346\270\231\316\267\271y\3066\272#u~:Y\345$:d\233\245\271\005\274s:\225\242H9\354\t\255\270J\376\3519\021^i\270I_\241:\241\306\3569J.\2409\311j\020\271\244\3775\272P+\232:\no\\\272\020\347\342\271\010*\224\271fE\2527\313#\2329k\201c\2728\233\240:\217cL9\217\374\264:0\200\033\271\024\2133\272F\031\274\271\020HP:\343\326\1779\304\376\227:t\367<8\301\236\000:\245\221\2458\353+\205:!\314\204:nj\2219M>\r9a\035\233\272\260\364\n\272\242\022\177\271etd\272m\233\330\270\025\254I:\301\014o9BP\001\272\"B\305\271\237\013\246\271N\326G\272\323\350\021\272\005/J8\245\360\2518\r\260\002:\356!\252\272\211\234\2279x\003C\272\354V>\272\224\273\325\266\021\303):\034\375\3438&Fw:\377\315\324\271^I\370:T\235f:y\377@\272\341\031{:\372\370\207\272-\007\363\271U\206\307\271\\\305\215\272\213R\367\272\2149\2179%\211\203\2711\'d:\001\2562:i\324\317\272;\027f\272\263d\357\271\027\013\226:+x\037\272\243,\220:\360\3077:_\007\313\272\225\2434\270g\353\276\270\344z\254:8K\036:\342yL:\234JE:\371\334?\272\022\304\006\272\222\236Q:M\217\000\272\276h\374\270B>\177\272cYu\272\315\334O\271\223I\377\271+\357l:\205\303\267\271\267\253w:\351\270\202\271\361\321F\272\252\370A9\343\250\005\271\030\342B9\333\252\373\270\254\304E:\210\256\013\272\377\340\300:\255\313C\272s\312\2139\212\347[:\211\311\3609\214\301&:\373\346\2108\202\256\252:p\254\377\271D\370\2069\366#\2239\010i\2249&\316i:\257\243\3638\361)u7\346\355\3758\372\257d\272\317\252\t\272\025\257\311\271\361\355\035:\354\242\2668\360\217,\272\210#\366\271\036\27618\035\341\210\271KF\026:\033\"8:!\\\0259{\352g\270[y\032:\246\201z8\366\345m\271\241L\337:g\312~9\2641\256\272\032\232[\272\030\301\2759T\251B\271F\372f\271oR\2309\227\3658\270\251\005U:\256l\242\272\255\234\014\271\367\333\276\2710\212z\272\357\257\206:\034\003\355\270\327\242\223:,\020\0039\273\020)\271^\207\223\272{\312\031\272q\004\232\272\tn\326:8\276\3318\220W\375\266q\365i9p\215\220:I\340\3409|\323&\271\375\370\223\272\0357\033\272%\253\301\272\234\272\034\272\264\365\207:\241j\204:\005o09\262\034$:s\013\246\271\362C\252\271m\300\253\271\243\367\2679\3213F:\351\177;:E\264\2339u|?\272\270\244\r8\372\026\213\270:\267\3537\342\353\323\271\365R\2367\266\327\2738bU\2668\313nL\270k\240\203\271\2642\215:\2052\033\271t3\220\272/Dz\271\342%\211\272\223\261\375\270\332\330\013\272\276\332\257\271\371\376\021\271Ir\267\267\337\355\2139\315\243\2369,5\207\270\322\324\260\270\265\36339U*\336\271\243h;:\256\372&7,\315N:\\\242\3449tW\331\271\025G\255\271=3\342:E\327\2507S\244\3369\212\006\223:\256\036\257\270\177V\022\272\265\221\2218\315\256~9\247I\3149\213\245\223:\322\336\312\271|3\032\271N\"\217:\211\271\3578VW\\\271\021\364P\272\332I\026\271\303\233\322\272\322P!\272\177*\2179\"/\\:\032+\021\272\356 \010:\246?@:\316&0:\305\305P:\270\311\033\271\277\t\234:\0212\3668P\300\0139\345\230\351\2710\310\3679\354\203X:\330\022S\272\224X\265\270\020\374\0249z\342\226\271\216\315q\271]\000\201\271\001\016\03198\375\2128\360vG\270V\323\203\271\335\3433\2722\037\256\271\304V\216:\325\324;9\302\261l\272\247h\207\272\032&\033:\332\\\023\272V\200\2109\000\341\211\272\254\235\177\272\372\232>:q\002\":\307\237\3148\212\354.\271\261:\346\272\356Z\225\272\001\013\235\271\221\003\215:\037\206<:\034\361t92\305\3569\226\027\3779fI\212\271\222+\002\272\037\324Q\271 Z-\271\244Q\005:+\233\352\272\367\274\2667$e<\271\034\234\2079\004\026\3539\364\024\2469\"vo:>\013\2049O\t!9\254\260\217\270!\244>\270\207MJ\272`\232\344\270\034\3239:\356\231\270\271\236C5:\232\340\233:b\005\3459\311a\276\270\302\260N9\256\345\2529\360\221G\271]\000\322:x\310|9\r\245i:l|\013\271\020\353\021:57\035:]\236\236:\"\220\337\271\214\250\272:\340.v81\301\316\271\"xe:&<?\271\257#\230\272\345\346\0109\304\316\366935\325\271\221\034Y\271\250\256R\271\324\227\354\271U\361\335\272\247\267l\271,e\270:\351\224\237\271+\243\3659S\273\3208\364\351\2648\267\246\302\271\210\352(:\223\243_\2725>R:\002>\230\270\276QX:$\201l\271\316R\2279\370\357o:\273Q_:\254W?\272\003\277\004:\240L\2729\014\"?\272\025\022\331\272av\000\273yj\232:\305\247\221:\2363\345\271s\274\310\272^\000\344\272,\335#\272\335\223X8\240\326\032:\257\022\206\272f\010\3749\001\026\216\272X\217\007:\t\333Y\272#q\307\270\341\236\017\2712\01629i\273\334\272\327\'$9m@\234\270\253\322\033\271]\001[8Q\206\n:,\002\031\272!\215F9\027\243s\271\225\356\033\270\332@6:\320\221\306\270\360|N\272t\260\2279\224KL\272\260\001\351\271\014\350\313\272S\025\260\272\331>\343\271\';\200:$r\0079@\223\001:\233)\0169M\333H8\251m\2009\314\003\355\271\025\030b\272\264\352\023\272\364\266.\272n8\345\272\267\346\250\272\301\364\020\271<\017\030:\225\227\337\271\344\377\036:\200f\214\272O\377q:&H\001\271\354\2051\271\r\330h:H\350!\272\370\320\255\271\376^\3358\356\025,\272\361\364C:\240j^:\033%\256\271\302\360\313\271#\273|:X\342\277:\253\"\2269\232\216\337\271IWf:\231az\272M}\031\272au\014\272p\344%9\332F\2559\2065\3039\230\343F:\204\245\025\270\254\202q\271\271L+\271\006}\203\271/}\025\267\276\222\204\272Mmi:\310\316\036\272 \036\267\270\031\355\340:h\265]9\004-\274\271\267 \210\272A\016P\271\t\264T:\021\272g\272\004\002\320:\374\232\256:<\024~\271_\013O\272/\252\004:\331\'\321\272\315\224\025:\267\254\3259\306&\233\270q<\r9!\231?:\017\364\3028c$@\271#=\273\271\340\254w:\374\207=9e\264\366\271\241U\0108\354\304\177\272\376\211S9\335I=\272_\031\024:\261\331*\272\335U\226:\214\222!9\366\342\257\272\232\363*:Hl\265:\224:T\271d\233\24574\230y9\374\245\030:W\004\017:/\363(:\314\027\265\270{n\3569\240\r\005;\200\345\314\271\221\3324\271\342\343\264\2727\305\2439\204\024\021\272\212\033\272\272@\024\017\272\211/\t\272\232b\3358\017\366\3228\026\262\304\270m\374/\272\273\230\3529\201\241D:(\334\313\271s\371<\271_IC\272\035|\177\272\210q\301:\033\223n:\341\345\01392m!\272\020\312\302:B\207A\2727\035,\272\364\013a:\344\204[\272\0005\211:\335\251\211\270\303{\021\272a\335!9\345\344\343\271\242\24109\032X\267\272\2126\370\271\363O\2329\202\207\214\271\225d\251\272pyW\272\312\251\3769<\345\205\271\336\n\001:\370\r\2549`\020\024:q\200\310\270\016\033\257\270i\212\200\272Hp\221\272\234@\204:\223\320\274:\220\202%\272C1P\271\031D\3628\364S\222\270\013P!\272u\366\3759\262y\231\270\210&>:\250\22749\3625\2438\202\177\2149\343\007\2469\033\032$:<\363\036\272\261\310F\271T\356\223\272\307\352e8\'I\364\271\274\270\270\272\214\255\3639\261#\301\271/\330\300\271\334\330Z\271|\006s\271\010?\327\271{\337\254\271\360\206\003:Vf\2169\311:\2319^A\0308\253\020n:\270\240\221:VF~:\227kS\271a\2253:\226PI:y\021\213\272\353\016\243\271{\310%\272X\354\035\272\347\310\2779\032\234\236\272./\000\272f\005\"\272\t\022@8\203\344\021\2729\3713:xO\233:\3371Y\272J\215\364\271C\301\204\271\036\"k7\025|\264\271\213\0234:\241<\311\271\245\302\022:\246\224\026\271\323\257\324\271\207\014\025\272\273lq9VnK\267\260\366\"\272\326\233\223:\257\027\2069J[V6o#C:\023\000\":\367\006\0079S[H:B\232\301:\271\307R:\007\314\034\271\325[ \271\360Y3\272\2334~:N\026\2079\331\036<\272h\247\014\272Z_\3549r\354,:\362qi:\005)\0328\275}l9\261\214v9)*\314\267\016j\026:\254\374\224\270\260HU:GI\255\272\353<}\272\260*\257:\213=D:p%\313\271v\336\270\271\362(\031:\000(\326\272\322\344\3069\033 \004:\231z@:\316\220\313\271\301\027\005:\275\032k:fs*:f\320\301:\343\246B:+\265\376:\035\207\253\272`\004w\270\3673\247:1\232\260\271\"\202\\\270\301~>\272\223\322\0368\221k\323\272\006\252\3279\037Ak:\340\2130\272|yj9M/.9\230b>\271p\027\243\267\246(y\271\370\336\220\272\346\267\360\271\265\335j:\024\213\3348\251\227&9\322k=:\021\"j:\223\177.:\340\375\363\270\036\214\254\270\225\356\3509\003\241\201:\245&\371\272\237\270\244\272\326\020\216\272\360;\2119 \326\3139\273\336\3269G\314K\271\033\003\3409\346\257\300\270\005f\2449\354\341\306\272\340\241;\271{i4\272\030p\025:\270C\232\272\210S\3439\027s\3369\"\360:\271g\201\302\271\300Z\332\271<h4\272\245\261\230:\362\315\025\272epF\271\314/\253\270\213+\031:\211\273\0339\017\264\005\272\013JI\271\350X\3709\252\261\001\272|$\216\271\376\370\341\271\026U\320\272\356\022\0139\3636\0169\304~\025\272^\245\266\271*v\004\272\025\205\2479\336\205\200\272\376\212.\272u?\n:\360xj\272\222\263U\272\220\025\315\267q\341\234:\354x\033\272\316[X\271\027\r\022\272\303\321\235\272\210\354r\272\"d\023:\027\366\270\270\035\02699\310\036\312\271\242\346p\271\342\231b\272c\262\0179\377\026\022\272\357\376\2502],\232\271\200\242\033\271\221\203K\272\034\016X\272l\325\321\271\014\021\3758\251\210\034:6.\224:\nqn9\353ff\272e1\206:\0239I:\363W\211\271\363\260\212:\215\327B\272\221\264M\272j\004 9+\377\325\267\035\030\223\265\365)\377\271\032\033\026\272M\0266\272anV\272\300\2019:\'\007X:\227\372\3279\335O\2129\016\270c\272\032`\240:7\345\0308\333I\314\272\245G\323\272l0\265:f\031\n\272\274Y\031\272T\"\036:\001)*:\346T@8\242\373\t:\336Z4\267\3401\200\272p\032\2059lb\210\271\3643\244\272\003\037$\272\301\035!\272R\004\0069\262\177\27594\353\2058P\037g\272.0+\272[\371j:}\357\037:u\010I:pCX\272O\\C:\224\'\2219\300\226\257\271\361\370\0068\377\2232:\320us\272\263\271\331\2710\220Z9.\375*\272^\252\233\271\377\'\274\271\tL\223\272\2623\310\270\344\036\354\270\230\241\0206-O\265:\r\311\253:\362\363%:xp\241\272\214\330%\271\033E\327\271\344\277d\271\323Zq\272\345\315\2369\366\261\200\272\330\262\256\272&\244\253:\350\275M:\"\243\2779\030\351\020:+\302\014:\3678\213\2723\t\357\271\311\3345:\357P\244\271\216\266\003\271`!!\271@\347\3219\230\361<\272\021xa\272\2700C\271wB$\271\006C>:A\276.:\223\323\234:\342\361{:\275u\201:q)\2069\266P\3068\224\226$:\330\3573\2711Q\203\271\031\t\241\272\033)\222\271\024\006%\272-\330+\272UU-:|\330&\272\241\275\034:f\345\3468\000f|\271D\253-8\331\370h:\013G\207\271\277\275\006\271\270\323\253\272[\264\2329,\'\177\272\302p\242:\0365\2179\360\224\251:\211b\004:p\331C:\301\276\035\272p\205\244\271\311g\306\271\\+a:\222\301d\272cY6\272\'u\230\272\245V\030\272\314\202\231\270\342:\"\271\'\253D\2727\013\301:\346\226\0359w\366Y\272K\013\2458\215\225\007\272z\210\3249\226\"\250:>\010w\272\201i\315\272\350|\301\270\374\210\3059\017\250\355:\240\361\0049i\305\177:\010\023\331\271(\252\020\271\203\033\326:\356Kn\271N3\3329\334\345\206:\335\301\213:R\315E\271\262$\2329l\330l\271_\315\304\271\357\236\2008\010\007M:+\351a\271b\200,\271\371\255\2449{\016\216\272\256\366\035:\014\232\260\272\323v@:\251\224Y\267\271v\22794\307\307\271D\322\233\2720i\252\271\027\013)\272/q\255\272\350\010\304\271\016j\262\272\333N\n\272\001\262\316\271`\245!9v\211\325\270I\351\3778\231\324\006:\257\035\017:\353|\201\272w`\232:Q\316\2159-\267+\272\t\212\332\264\374\013\210:\330\325+:\227\300\025:D\252H\271\002\352\n:~\362\332\270\026a\n9\212\177\2229#\233\3459L\247\337\270\234#`:\233QS:\230D\206\271%\331t9\226S<\2725\303\2278\332,\023:\177\332\245:\305V\320:F\327S9[h\214\271\326\224[9\005\220I:-\323E\272\302\221\377:\367R\304:\332v.:\334\006M\272\3059_:x\221\001\272I\031\264\271@\\/\271ql\013\272P:\252:i\266W8>\373\226\272k\371\332:\222\307 \272\273/\0069\264\232\3009t\375\327\271\027\001\3349\320=$:Lgz\271}\343t:\265l\306\271~\365\33292\036[:\262/P9\222UL\272\023\t\2619\326\235Q\272\035\370\2179\346A\337\272\203\3043\272>\032\3519:\366N8\335B\0059\010\232\256\272^\273\3418\224\346\0349|cS\272\013\375\2119\270<\010\273%\303\022\271\022\271l:\246B\373\271go;:\261\221(9C\205\3179\010\221V\272:\302\016:\376~\277:km\n\272\227\033\014\270\215\314V\272\342X\2539\031\3636\271\270\035\343\270\373C\354:Fj\235:\202\236\002\272\356\242_:G%\035:\354A\250:\177B\243\271*\004\213\270\247@?9\030\355\222\272?Q\201\272\037\254\314\270fYC\271\335\254%9$\375\2418]*\311\271h\316\004\272\314}\032\272Tj8\272d\272\004:?\t-:l\023\333\270\303\005\203\272\253pV:\200\313\311\271\003E\220\270x\373>\271\005\317 8\030\353\3549\333\263\205\272\306h\0219H\250&\272\302\272\021:\021\035X\272\210(\257\272\204\032\344\271>nH:[\270\2479\005\355+:T\232i\271/?\2749A\210\005\272{\275\2609\177?L\272\372La8\322*\2549\314J8\272\037{\204:\211\201=\272\234\025d\272\017\205\021:\322\330*:\330\035\260\270p\256\367:\316\267\032:d\310q:`s\2268\237\246\253:\200\302\341\271\263j\2609\272\006l\267\020B\2259\217\253\3479\301|I\271\212*\213\271}F\207\271Q\341\275\272\213\016\2059L\376\217\271\223y\225\271\356\224,\271\017h\010\273\271\332\027:\214\021\201\272\304\'\036:#)f:\320g\027\271\334*\213:\005\342E9\336a\3059\273ax\272H\013\374\271h\334\237\271Ud\204:=\337\016:\351\341\276\271T\215\007\271\2002\2508\207~t:\034\343\022:A\20159#B~:f\207Q\271l\342}\270\337\217\023:\363\320F:\240\241\210\272\276h\207\272C\021\2458w\310\350\271\347w\355\271cfP9\262\241w:uS\320:\363n8\271K\206\2719,\022\267:\337\001\024\271\322\024\217\272lQ\3179Y\207\001\271\304\241\013:\212\231-:\262\2464\270\004j\0058K\236\321\270\273\000l\271L\334\322\271\341\361b\271\332\337A9\223\272\227\271;\37709R\217\025\272\261\266\221\272\327\254\236\271\003\226$\272\001h\251:\223\024\261\272\332i-\272\021\232\226\2729n\374\271\237k,\272\311\305\251\272\340\231\024\273\222\212\215\272\014\234O\272l\256\'\271\007?[:u\036\312:\302\004\225\270W\242S\272\351\311,\272b\224\2248\222\r\221:\235=;\272\251\343\247\272y\247\310\271\020\334\361\271\2462\001\271\347\322\200\272\315\265\00198\\\031\272\236\2111:c\244\006\272\257i\222\271|\20508\000\322x\272\265\367v\271\020\317\353:%\211\0258\221d\320\271?\031\36777\236\2058\035f0\272\014 \222:~fr\271_\375\016\272\335\335\271\271{ :\272\216\341F\272\277\t :`\316\362\267\226^\3119 Bi:W\372\002;J\226\223:\205I\242\271\\\202F9\220\210\231\271T\326\311\270V\370\373:j&\22094>U\271M\367\220\271v\352\215\272\322\246*\270\023y\231\271dmV:\216O\\8}\317\3158\033]\021\272\310\234a:v\242\2729\202\275\3319/O\2739\333\214\2249\254\267L:\200\313-:\026\201\013\272\021\265\237\272\234\'\206\272=\004\242\267\006c\2109\020\246\3139\276[A\271~\377\331\271\360\236\235\272\235m\036:\362F\001\272\356wI:\200\321t\272G\t\2539w\251\031\272^\177~\271\363\245$\271\363\245\246\271\244\'$\272J\252m:0Da:\035I\205:2@\3257P\347\031\272\324\272\024\272\210\003\214:\225\362^:\221\311\037\271@V\020\270\317\221\267\272\245D#:\020\322\342\271\366\003W\272\220\332\303:\247{\252:!\001@\272\314k\263\271\237\237\2719e\352\211\272\016_\3759\327}\253:\347O\26695\276p:\033_\246\272\226\273\000\272\'\206\2659q\222\002:a\320\200\272\222.\235\272\300\311\034\272ct1:.\253:\270\243!3\272\270\216\001\271\270\332o:\346Y\":\203\307z9\004q\025:\330Fr9\240{\255:|\370\222\272\335HE9\002\266b\272rr\0239\255(9:\027\371\3359\270\261\001:\220\243b94y\026\272\324\220\214\271w0A9\246w+8\302\315\017:\344s\026:\r\003\311\271Ci\352\271\261\225\036\272\237\271-\271*\3353:p\333=\271\022=6\270\260\030\225\270\240\316_8&{2:\022f\302\272\221O\2249HB\232\272\300\203\3739\325=\202:El\250:\264d\r:\327\365i:GCh:\317\033\304\271\212\367c\272\203\352t\272\326\031\221\2717_\030:U\223\235\271\370\034\217\272\204\363f\272\370|r\272\330\270\3329\332\013\204\272\004\000d:q;\302\271\357o\2338+\201\250:A\204\263\271\251\337\37487\235\230:=\234\3359\032Z>\272\277i<:V\211\2609!\216$\272\215\215N\272Di\2258\303\363k:\363Q\37691\361\240\272\'\200\035\271\326\220\254\272\t\214\223\271\r.\0109\001 ::\007\030%9\214\276\225:\353r\36698\311X:T^\3458\242\"\220\271r\033R:\307\350\203:\317\\\232:\212[\2279\361\t9\270\016\355B:\211\036\004\271\304!f:H\022\024:\014?\000\272\224\276 :\354k\216\271\201\245E\272)~\305:\221\3119:\2153E:\357\234\227\270i\032f9\026\017{\272\t\275\250\271\300\340\3078&H\3648i\324\276\270\321\206\2729!\276\273\271H\373\204\2717r\2749O\211N:\243%\004\272|\320\3729\312?\341\271\"\021\213:\334T\3258:\035\3779\264U\010\272\036\3304\271\227\202\372\271\320\207,:\322L8\272\217\261\023\270+-\020:\265\014\031\272>l\221\272\036B\222:f4(:\277\202\306\271F\220T\272\223\315\202\272&^%:\213\036\222\272\316\263\000:H\201&\272-;N:U\"\314:8\020\035\272\274!\240\270\027p\000\271p!w9\244\007\343\272\251\251\360\271D\274\217\270JG\354\271\332\232{\272\226\0173:\354\275\2679\014\035o:\014\240\3428\313w\r\272\264v\361\270d\037X:\027(d\272o/\2479Me1\271\301~\024:\336\002\2039\246\346\2129\021\263\007\271\370\372\351\272~\212\2529\365\310\2319@%\2729X\016\030\273\034\r\271\271\002#K\272\216\326\251\267\267!t\2720e\002:i~\'\272\212\237y\272\346s\301:\266y\270:02\200:-\221\2068/\336\007\272l\317\225\270\334/\232:\304t\354\271\027\332J:\237\222\223\272fO\2559\200\326\3577C\177\254\272\231a\2509\021\225\234\2717DO9nT\02598Z\2549\037\257C\272Le\2558\255N\2518\216\357\036:F\323\031\270\224N#9cg\244\271\213\205\352\266\225\344\005:\017\316\303\271}\222T93\313q9KH\232:\275B1\272\270\254\022:\215.\222\272\3755i\272\025lm9d\274\n\271sN\3169\351z\257:A\362\023:Kn\0379\214\0175:\211=\276\267V\365\313\2703\244p\272\223\2645\272\024\342I\272\315\307\241\271\006\2730:\376\376\000\271\312\r}:yo):\211A\216\271\021\247w:y\212\325\271\305&\362\271+\2713:\355\034}:\031\371\025\271\010\177\203\271v\357`\270r\266\031\272d\274,:X\365\001:7LU:t\375I\272\376S\027:\251\236\3558\335#\360\271\376\376\317\271J\313$\271G_ \2729\254\307\270B\254\220:6\342f8\021x[:1-\313\272\027\001>9\262\201;8{\211i:\247\021z\272\r6d\272{e\234\271R/\237\271,\340I:\342\007>\272\364;\353\271\251w\022\272M\002m\271oe\037\272\356\245\232:^<\200\272\'*\276:\262\326\323\271>\364\232\2672\207-\272\004\365\205:9\000@\272_y\003:<\265\311\271=  :v\323\023\272\215}J\271\256\270\256\270L\203\244:W6\361\271\333\021\332\271\317\243\224\272\346a\220:\266\256\025\271\310v7:\207\250\r:\317\334.9\267\001\353:\227\010\0358\244Z\200\272v\276\315:\363`\010:t\340\265\271jm\032\272\376\367M\272\336\235f9\014\273/:\364\304\331\271\013\355\036:\201d\247:s\321\344:1\362\226\272zO^\271\260\202D:\365\342\243\270\035\227\266\270\"\237.\272\221o\227\271l\2732\272V\241\33196\024\3609\345\273\3509g\251\r\272\353\037\t9s.i:\032H\212\271\372\312\3539WS\0269\300f :\207\260\220\270\362\313\233\270\224\375\362\271\031\213)\272\225;\353\270p\004n\272]\344j:\005\"5\272\355\356):\221\265|:\350\217R:\305D\2178\302a\245:\245E?:Zy\177\272\245\261\334\267\2055\'\272\034\316Q\272\304e&:mC\2068[\007 :\371\337Z\2728\206\336\272\017\022p:\370B\270\271\n\370t:$r\304:\031\356B\272\\w\226\2721rO:\327]Z:\r!\3009\334\275\314:\320c\326\270\300\215D\271\010\313P:\346\315\007\271\000\325w\271\316\215\341\270\033\207\022:u\202\336\267\224\302\202:\205\334\0139\345*\003:\362\365\255\272e:\346\271Q\345u\271\210n\357\271\327o+\2714`\210\270:\014\'\272\307F\2069`je:\260\277m\271-\316{\271R\226\014\272\342\342\241:2\331\234\272x\343\0019\314`\230:\\\255\':\252\000=\272\355\350f\271\301}\214\272wk\2238\003\334o\272\316\310@\272 \243\312\2702R\2319\272a\2308\251\311\311\272i\213\362\271S\035\3039\362\303(9k\326x:\320\237@\272\333l\354\271lL\255\272&\314\236\271\005\335\014:\273h\'\271v\316\304\272\026_\225:|\313\266\271,\240>:+\216\3708x\300\305\2717\266\2158\352iP\271\334S\326\271h\033\267\271|\001\023\271\373\200r:4\250q9\022\006\307:\271a\3659;\231\004\272\367~\3139!j\221:\t\302,9\343\371\027\272\nG\246:j~\241\271\024\021\2539\375\032.\271\022\007)\272\277\215\322\271\027O\344\271D{\213\272 F\2209J\267>\272\251\356\234\272\235\256Q\272-\253\277\271\245\032v:\000\320\2768d\372B\272D\275J9/,\347\272\246c\204:<\006\204\266\371\340\004:o\267\025\271\360\"j\272\r\214\327:\r\250\213:\346L\252:\2236\276\271\261\254\252:|\200\\\271\226\355\'9R\210\002:3\274\231:\023\305p7b!\0029+\000\223:\361\321\3638\374\243\2659\267\337\270:l4\362\272j\300\013\272]\"\210\271\246k\353\270\020:\245\2708\315{\272`\350\2729\021\002\023:AIE:\034$n9\246:\321\271s\245\226:?\232.:\225\214\216:\346\350\n\272\002\335G\271\235\243\355\272\\S\3009s\363H\272\004Q\226\271\352\315@9\010v\3738M\3474\272c\366\032\267\257\335M8#=\313\271D5\306:b\322\3649\212\265\276\271*@`:\004w\212:\037u\2468\373Z\270\2678\t\3567\013\354-:\233\356\2649=\261\351\271O\310\215:\317\364T\272\267W\3758\314\033G9D\032S:#C-8\244\202~\272\340\033$\270b\212t\271\020\271\2759o\303Q:xW\250\271\223\320\204:\t`\215:\362P \272\341\004\362\271\324%\3428\\y\302\271\351\007\221\272\222\024\221\271\333\232e9\021\273\207:\230/\341\270\030(\r:\327@)9\376\333\274\272\245\224f:\021\030\004\272\'\302\3739}W\274\272\244=,\272\2036\030\272\026\306L\272v\220|\272\354\220H\272\342\350M:\306\n\210\272\312/\227\271\"\343\3009\237N\006:\200-\370\2715\241\271\272B\327v\272\261@\0209\327\345&\272w\327\317\271\227\353\026:D\275!:j\243\000\272^\372\202\270\245\225\":m\321\177:\251\357\246\272$\343.\271\320t\205\271\212#\211:\237\264\2249\344(`:x\316\036\271\347\304\217\272CG\204:\372\314V\272Qak:\2552\223\2727g)9Kn\'\272@\326r\271\224\232\026\272o\233::\363Q\3637\214\375\022:P\356\2629\232q\326\267\277J\3627\005\247 \272\307\377\334\271\n\225<\272\347\230\\9\352\354\213\271\220\357\270:\305\255\247:I\234\227\272\314\353\t:V\310P\271t\017n\2715\304I\272\214U\3479{\206\027\272\351%;\272`8G:\321U\276:A\3134:\360Gm9\200\023T:\030\013\205\271u\236\027\272\214Q\2129`8\3149\307\372v:\177\246\243\270>\364I\267\'\213,:\347\370\2559k\333\351\271%\300\3119\351\261\3159\"C\266\271s\257\251\271C\027\036\272*\366O:\301m\324\271\272*Y\272\340:\210\272\020NG9\370\004n9\257\247\2019\326\005\2619\251\246\013:\236\205\033\272J\005,\272\323\216\2569wqr9+5\321\272i\210\335\271j\271\':CI\004\272\026|\3009\315^s\271\325\347\001\272>\000\256:\323\0035:Lf\2649\321\371\257\267VX\264\272\260U\335\271\210\240w:EZ\337\271\260;Q:;\263\327\271\255\350\017\272\2021\336\271\341#\237:\337\327):\351\004\322\271L5\0267U\215\205\270*>\37092_\032:\222\027\010\272\304\310$:\333(\t\271\313\271\370\267hDX\272\276\251\214\272\354J\341\266\r\024\234\271\022\326\234\272\026\364\2329\230\002\221:Blw:\374E\027:\016\0236:_3\3518\014IO\2728\366\000:`Y\032\271U\237\253:5\334q9EH\023:\201ec\272;\000)9\006\032\217\2720\305\211\272\034\220\2469\036\206\033:\367\304\001:\023\244,9\246#\005\272\263\017s\272\303}i:\221\217$\267\270\274\2058\034q\3159a\264J9[\321w:Z\317\031:\272\312+:+\"\326\272\342\326\3379\250R\3279\216\272*9}\324\376\271\2746!\272\274\306\3009\000\033\2217\205WD:dV\261\272J\324\223:\350\203l\272\377\353\275\271\310\326\320\272C%(9\237\264\357\265\260\335\0039\236\274\311\271o\213\3548\007Y\350\272\324\305\215\266\272u\256\267\2627\205:\331/\3509\356\377c:\360\231\36292\2468:F\235\364\271\310B\211\271\376\'%:\037\211\3479\013\361\256:\027\347s:\360y\004:T\357Z\272\026\252\2766\243\305\303\270\004\370\3519\361}\211\271\366\263\375\271\203G\243\270?kb:\365:\373\270\353\235\2119\035\224Y:\263\020\344:\321\006\005\272\233\324\022\272\230)\225\272\t\333\344\271\372\020\2709\216\356\3379h[A7\336\'\2109\304)>\271\010\345\2059\232\016\3728)\243I\271\273\021\":luT8Z\364\270\270\346?\001\272\027\230`\272G\212v:\neJ: \014$:\357\343|\272Jm\314\272\240/A9\235\343\253:\364\330F:LW\252989c\272\256?4\272\206\271Q\272Y\032\0279\352rH\272@G\3679\231*\302:\356T1:\t\325\323\266\376.\303\271\321\002\216\272V\\|:\035\320\022\272S\002n\271\037\331\000\272\016\341V\272\223\221\257\272\334\235a:\345[\2419}|\004\271\365\013\0219W\252\005\273\tPH\272v\345\001\272zt\0049\030y\312\272\273q\370\270\310\335\232:\031\260\000:x\270\257\272\330\274q:\200\206\0059\212/.\272#\026\3769;[L\271\202\366t\272\345\275G:\240\010\025:<)\0268\367\032o\272\27306:\273\306\351\270\337J\2509/\222\027:\241\356m\272\002pa:2\204\2009\013(\2649\014uU\271f\202\215:~\365\223\2727D\363\271i\262\3218}=\0048\214\014\374\2719\320Z\267\340\265:9\331\244\010\270\223\017\032\271\2673r\272\245K\232\271\313\321\2109&-k\272y\033Y\271Z\262\003\271\254\254\020\272Y$\024\272\353@\321\271\221\0068\272\231\3738:a\236\t:ib\343\271\203\237\310\272\232\367\3029\315\"{:\034!\307\272h\tO:\231\022\312\271J\211\025:\307\010\203\270\2351\215\272\000\302\215\271\301\320\026\272\314\242\223:\323\271\326\2711+\374:`\33699\303H\273:F\033 \272!\\\267\270\354\340\"\272\342@\3229\241X\320:1\275G:\235^\213\272\332\004\246\272\000\230A:\314\246\2749\236\365\307\270\240\034\224:\026\264\376\271\336\227\2759\327:*\272<N\024\272\361\"\300\271\305p\2649\255\314.9\023\224\3169\006\353\212\271\305\327\3057>\237C\272Y\276:\271a<\037:\261r\3468+\210F\272\004\264\226\272s\226\31486s\2149\336\255\022:Tf\317\271\335\356u\267\212\227 8~+H\271JO\3139\234r\025:\373<R9F\352\3208\252\366\307\270\376\016\':\035\261L\271\232A\273:\243M\321\270\177\246\304:\361\324\2079\n\005-\270\352\254\2368=\215\016\272\233\372\2017\351!\r\270\307Z{:\014K\211:\016\002\307\270H\211j\272\275@\257\272*\220\2029\314\204\3118\310\365\262\272\343\204\225\271\246\242n\272\374\346\001\271\360K\3168\014\371\203:\344\364\355\271l!m\272{\321\3209R\005\330\271\271\2628:\254\350\217\272\017\250\243\271L\232;\272\035n\r:lL\3069 \rv:\376\323\2669rP\336\271f\312\n\271o\372I:\'+.\271=\313\035:\355\025\020:(6\251\272\233\214\t:Q\356\247\271\001\230\2429\227R\316\270\204\227\360\271\247\252)9\\\347\3358\260\353\200:\220\263\260\271(\254\360: \r\232\272\230(\2019\017\377*\272\220_\2279\275@\0369;\r%\270\035\240\014:\217\326\370\267\216\234\211:Y\243\004:D?0\272\312\314v9\201\363\211\272\345\265\236\266\370Pk\271\331\320t9\264\033&:\337\315p\272\247~\0139\266Y\t:\233\242C:\304\361\036\272*\233\2629E\341`9\353[\2509?\250b\271\033\365\t\272\024\001E:D\022\'\272FC\215:\360p2\272?\355\004\272\016?p9R5}:\303~m9\304\356J\272j\013\005\272<;\2348j1E9A\033u:\230\2076:\013\235u:\350A\2118\t<B:\017h\024:y\007\3668\373\214\\\272u\355\216\270\266=\3768\237\":\272\271\352\0378\223|\026:\201\2262:\005\177W\271\312\361\251\272\325t\036\271s\200]6{\371\312\271\213F7:A\203\207\272D\214\033:\226\033$:\331\354\3529\321!\211:x\243F\272\355\002\221\272#&\233\271\247\014+\272\262\200\255\271\"\360\3529\020x\035\271\365\357\177\2726\256\232\271\275\215S:\301\362\\\2727\\\3169H\266\\9\210\002w8\357\273d\272c\317\0059f3\031\271\237\323!\272\376\257T:\2630\214\271\366\360\204\272\273\377Y\267\376b6:}\207\3059\312p\222\271\177(7\271\027\0214\271\214.\033\271\352\004\3528E\327\023\267x\305\032\271\033\357\3378i\364\037\272\027@\2539\264\221%:\235(Q:l;\024:#\207\010\272X\225\201\271\342\'\032\2723\357\2479\t\201\2768\036K\225\267\017\372A\270\314]C\272!\236\3679\276-\3379\206\006u:\356\361K\272\367\370\2369$\232\2049\317[|\272\033\375>\267\030wF\272\353\313e8.\301\203\272df\2509\027|\357\271\324u\r\272\034\234\277\271h\010\2119\264\347+\267\202\220\211\272?\316T956.\27282,:\356\244-\271\251\231\2449/\227\2417\360\010D:NT/\272r\230V:\376\0311\272@\375p\272\026\235K9\'6`\272\371\265\0108V\207l\272k&\276\270\'\321\231\272\330359\226\271\2449\306[\247\2726\223}\272:\247x9dc99\0358_8g\3061\272\327\320k\2722\200Y\271\000\212\"9Zm\000\271\220H\215:\354AF\271%b]\272-$\0049\321\014\345\271\360{\2508s\rl:\037\344;9\336\327\3229y\251\204\271[8\000\272\373\301\266:}\224\2079\343\310\037:\372V\315\272\333\311\370\267\317F\005\272ba`:\2021\221\271Z\313C:\316\367J\272U\"\204:\375b\017\272(\022\2179\226q\226\272~2\223\271,t\2248ut\240\272*$\221:\320b68\023\245\036\2721$\2658nv/\271Q\t\343\271O\372\240\271G!2:S<+:5T\330\271\306F\270\270\242\n\216\271jr\231\271{\352\007:\277\357\244:\377Q\347\270**\n\271k%\327:Jc\244:\033I\016\272S\362\014\272C\021\201\272-\374\3009\027PP\2725\307 :\016\375\230\272!\214\302\272k\016q:\342B\3169]\245\2669\367\335\360\271\262\273\240:\332X\3619\357\324\006\272\3727\3239\254\321+\271]\231\322\271\0164@:\2177\003:#-\3049\031\225\222:\013\003\321\270\177a\2069\'Q\244:\241\2021:\026\237\262:\322iE\271\3754\271\272\361)\032\272V\246\231\270\021KG\271\375\257\213:JU\352\271]OS:\205\n}9_\021\036:\361g\270\271\003Y\261\271o\205n\272\257\033\240\267x\241\3709\276\211;:\037\367\010:\020\023t:H\177\210\272O\005\0139\243\353\"\272\215\332\245:\221\357\024\272\341\'J\271\311\261m9\325\345\267\271\307Qp\271\374:I\272\370\036#\272\260\326\233:\205\021\266:\224j\220\271\200\'\324\270B\221\016:y\374\317\271\034\250\010:\275nI\271e\221\234\272\246\202\2338\237\006\2539\241<\212\272\331{\326:0\276\2159\374\3450\272\276z\246\271\000\220\234\267\\\013\001:\322\347\215\272Ej\242\271\371\210]\271Kq\'\272f\330f\271\016\256_\271\230t\253\2716\223\332\271*\32708\214\322A\272\263\330\021:\n\035\270\272\254\336-\272>\207d9+\377\2349\376\246]\271!\355\233:\224\315\223\271\246^\2769:\244x\272\0203\203:$\305\3619\212\275\32596\254\316\271\301S4:\340\257F:\310\017!\272\304\\\013\2727\t!7\032?\025\271c}\0246\332\007\3269m&&\272X~\224\272@\346\2419\203!Y:\267\025N9\r\003\3779\336*\364\271\277\tp9\337\021C\266\326\321\2259XI\000:\005\010\005;\311 C\272\233\361\t9?\301p9\214\232\2609\372\232\305\270\'\016\3448\351\350c:\355\001`:\254J\023\272=\327u\272,\025\2119\326\357m\272\230\205 :\004#\247\272b;O:S\366@:\\~\370\270\350\275s\272\"W\235\272=t\3068\243\326-:*P\010:yo\223\271\245\322f:\021j\0317\305\204d9\301\2779\270\023\002P\270\031l\n\272\211\374\220:n\236 \272@\360\254:\324\375\363\2714\340\226\271\343\372C\272\345\220\3729\037\245\370\271\260\337\241\271\001rq\272\371\252\332\271D=m93\300=8\002\240\000:%\257\250\271\217\007N\271\245\341\"\271\366\017\025\272l\307\356\270\020\223\203:\224\351&:%\373\370\271=S\230:^i49f~\211\271\273A$\271\244`\273\271\236B\231\270_U\262:cd\317\271\345\0037:\\\261\001:\0219W:\264\316\362\271\345\010\n\273\204\031\206:r\021k:\214\233\341\271\357\306x\272B\315\\:c:\270\272\017\377\3608\336\346\t86!0\272\226\315D:\030Y\202\271#\346\356:\201\212\'\272\330\270\2139)\007H\272\311\020\267:_N\310\271\370\276\264:\223\252\215\272\365\216L\272\306\223\0209\311\006:8\0318;\2721)d\272+\226\216\272\364x\001\272J\364:\272v{\2019\270\322\3339`/z83\345G:\177vS9\303[\216\272\371W\2379)8\005\271\363bI\272\252\366\2509\'\240\2629dd\2179\344j\317:~%\r\272\304\262\301\271`\006\245\271\310\350\356:)46\272\345\315\202:\266\265\304\271l*\213\271\361V\300:\271\213\3258t\366\030:*\305\350\271\327\272\215:\023}\2579@\206l8\224\242\213:9*\303\271\031\251\020:~;]\272\'\376\226\271\260\216O\272I\376\302\271\2604\305\270\234\343 :\016\264\3239\335e59d\366\256\270\001\01769\306^\t:\272\216J:\365JS\272\221\362\\9\271\365\3349\035x\303\272Z4\3549\026\255\365\267\205\006\30391A\2409f\334\306\267\016\003\230\271\307,\021\270\307\004\256\271\3432\220:\3100p\270s\303\321:\306lD:-L\253\272\305&\323:\001|\3379^a\0257\244\003\006\271\310\\`9\240\355\3509~\237\024\272\n\006\'8yy\3549\036\347\177\271\201\037\243:\231\272\\:+k\222:\030+U9\004U\3529\033\r\2529\212e\036\272q\350\217\2716\236\273:\337\343\3429B\206\255\272\rs\327:]\216\354\271\224\317\024:\002\323\33697N\272\271\330|!\271\270\252F:5%\1778\313\340\036:\'6S:\030h\3717e\354\214\271\024\177x\2719\372\0378\207\277w\271;@O:\242\356\'91\270y:\225/0\272\002\324\370\271\370kd\272\255\201\264:,3(\272\030hH:\3315\265:\350\2527:\237\254\2419~\331\254:\256\247g:\345\345\314\271\343\226\206\272j.\235:\361\014\2138%\257P9\320TH:\004D\357\271\260\002\34398\340Q:\2632]9\006\224\3409\332\232\025:\334*\320\271\203.\266\272\013\251\244\271\013T\2449\261\357D\271\310k\226\271z\n1\271f\023\222\272/a>:C\326*:\200B\310\271\030\366F\272E\347\234\272\241WH\272m\240\t:\245\'\243\271\336\226\315\272\213p\3609\315Rw\271\336\315J\272\350\\\031\272\326\314=\272klR3dU-:*y\237\272\260\001\2069\013\202:\271K}\031:\3633\212\272A\003\036\272Ev\3359h\255O9\254\r79zE\304:\202\233\272\272\202B\222\270rz|7\203\367\2449C\331\005\272\001n\241:\203\306\3479_I4\272_Z\0039\365<\204:/Y\275\267tJo9)Y\271\2710\344\3426\270\2143:R\236\002\272b\352\203:\360$`:\217\307\036:\305$\353\271\3341\013\271Jj\236:\025\243/\272\262\034>\271\337k\231\272\'u\2239\235\360Y9\246j\302\267M\224\002\272\363\306\001:c\244\356:%a\n\270\327n\271\272\373\261\3169\363vW\271\\\247\3279\"j2:m\031N:\326\302\203\272x\'P\271\311\016\223:\256\275@\272\000kl\271`*\026\272\311\256\201\272>\234\014\267\365\246P\271\300\345\034\271\274p\2709y\206\210:\364\007\026\271\371\222\023:m\227\223\272s\366\215:\246\271k:E\343\273\270\265\326\231\272Y\360\303\271\274\225\302:9\332X:\204\3619:\3268\2248\230}\2009\376\253\327\271l}\3059\376\376\253\271\321r\221:.D\360\271\210\206X\272\r_\2779\235\210B\272C\340\211:)\203.\267\026\301Q8\r,\367\271nQx\272\316\377$\272\326R$\272\002.A:H\272\3479\241\207\207:\224\036\375\271K/?:ru\2319 \240\013\272\037\270\034\270\024\241C\271\251\364\216\272\324x\211\271@,\211\272\203\305>\272\2460\2069\033\303\0049!\235n\272\236\257\013\272,\226\215:\301\342\023\272\"L\002\272\313\306\242\271\032c\241\271\254K`\272 \303!9c\007\3269\023\331c\272\326D\023\271|?I\271>3\252\270\\\2563:\216\031\260\271\231\340\025:g\r\216\271\016\3702:\324\216\234\271\003\014\2528T\215Z\272vg\257\271\035\\\3318A(\016\271\314l29\264Og:\007\326\2259\300Y\001;\231\244\016\272\234(9\272\244hy\272\207#(:\360\275\022\271\370>\203\272F\210>:\360\030\345:\325\225\334\271h~\352\271\366z\312\272v\030+\272\241$j8<\265\177:\210\r\2129{pr8\214\014K\271-\236\020\272\032Y*:\267n\264\270x/`\272]\224\2509q9\243:Z0\354\270\311\177%9\336\32619\300\273\2239\022\365\3649f?\2379\033`o9N5U\271E\274c\272\234\257m\271\206\005\3379\030\022\213:I\257\3679\334\257~\271\271\007\354\271\217\000\234\271h\230\205\271\372WQ:\363\267\2339\356-\214\271\270s\265\272\306\024\237\271\215\350\2559m\022k\270\010\273\2679\301P?9\267\371\300\272\230\272z7\002\254\3569\002\201\363\270\276,&\272]\003\366:\2056\003\272\306\322\3409W\"\2416\323\\L9\"\341L8HI\r:h\221\3219\214ek\272\223ii:\362E\211\272\335&Q9[j\336\267Em\315\270N0\377\271S\227)\272\227i\3029V!\210:y\330n\272v>\3028GV\206:\345\223\014\272\355\362\270\272\235h@\271lh\212\271s\222\035\272C\332\260\271\367\017\3409\301]\273:\223\344\2119,7\213\272\263\240r\272\321:\227\271\367\300\2169\260\330\3639\347\226\226\272\227g-\272\350.\357\271\035P;:\227\224\2238\214&O\272\342\260\031:M\202\3779\373r\246:[\255\2579f\3137:\266\r*9U\253\242:\244\262\0319h/\272\271\204vC9\026\232\2138\231\375\2368S\036\223:\330\277^\272\202\333D:\347\"\025:2\2143:T\363f:\\\267-\272TU\r\271qK)\271\3213\317:\351\332\211:\335\020M\272\030I\263\271\236\317\226\272X\200\002\272\342px\272\216n\3139\361\307\3479>+19J\370\256:\214\276\3318\020\022\354:\023\367\2628\353^r\271h$,:\245\220\220\271*\007m:G\253\024\270\274-\224\272\2318j9\313\220\023\272](p\270\323\346\270\270\027\247\372\271\245\227!9\215?\033\267\004(%:\223[\033:\263&O\272\240t2\272\n\336\2179n\321K:\350r\231:I\301*\271\033\271\223:\264\244\2467\375\032\226\271,\315\'\272\265\267\265\272&\000\237:aq=:\2332\206\272\342\242I\271\240\276|\271\022G\202\272KRP\267||\177:\330\217\3239\254>\202\272I\231O\272\376\030\0228c\374\237:\215\206\010:fl\001\271_\212-:q\347\022:\306\335\302\270\202o\0029\246\300.\267\0342\0078\273\321{\272\014\371b9\234\340\2209\272\271\r9j\266o9\253\231X\271\360\234\241\271j\274\3358K d\271\215<\2519\347y\024\272\246\031\310\271\254\t\260:E\251{\271\212\302\213\272\267\030\2179s\233\205:\202p\'\272u\317\307\271\250\332\032:\227\204R8\233sg\270\202\n^\272\302\007h\2726\332\207:\270\333\032:+e\205\272\364\247\025\271\356\234\2218\232\312r\272\024\022v\271\204\360\000:\000;\0039`2\331\272\314T@8\245\265\214\272\341E\332:\006\303\035:\365\342o:\270=\312\271.b\025\271\307-\25091\201A\272\305\007\225:\202g\2659\316\222\357\271\3605\240:\323SD\272\014\260\3559\251?\240:dr\332\271t\357z9\014\241\201:W\005\0209\031\350\210\272\333]]\271\206R\234:\361>\3179\"BR9\230\376\320\272\311\260\255\271zYU:\026Ob\272\374{\213\271\277\0341:\341\024\003\272){C\271\220\261o\272\203\276\3149\310\220\2148\006e\242\272-\322\000\272e\225\013\272\301\360\310\271~I\201:\024F\372:\316\375\261\271d\270g\272\342\021>9\353*#9\003*!\272\202\003\206:\3328\2059\236\266\320:\271\315m:\025\336\200\271\245\255\334\270\031\002\006\271\245\002\244\266\241\243\304:\273\006}\272 h\2509\017\301\000\272\020x\2259\246T@\272\372\002\201\272\244\367\224\272i\233\2268\363:\177:q\315\251:t2\377\271\002\033\207\271\257\221n:0P\013:_\270\274\272\334\365\036\271D\375l:\300\253\363\271\370\211\2209\222>\275:\363R\206\272\331\353\3278\375\343Z9\241\253\010\2721\332\2139b\333\247\2729\035\2008\315K\232:s\255\254\272\014=\261\271<\200\000\272\203\316\207:\252\'\225\271\365L\34199\366\007:\270\003%\272\252\207X:\270\006\344\272\t\321W7\025\271\002\271L\017\027:5\367%8~\004\311\271\257V\324\271\270r\262\270\313\037\2609\327G\221\270r\250-:\004\206\3219~\314\345\271\220$\023\271\0228q\271\014n\025\273\027c\037:\364\21109\310+\3429\030\272%;D\'Y\272\200\263}:z\355\2429\200\230\262\272\014\265\361\271?[\243\272\344\310\36497\345 :\246\202\310\271b\367\r\272\014\"\035\271d\367;9\037\341\3209\202\363\2168\250\014\246\271\031\214J\272Hb\030\272\206\255?\2721\242B9>K*\270[\351\031:\013\337\027:\275\335\353\270\363\340\3029\222\230<:{\016E\272M\022\236\270R(V\272\314h\254\271\025|\2649\345l\223:\250E\230\271\366\341e:\016u\340:\342\222\212\271\270\351\3269v\203O\272F\037\211:h3\2219\344l1:\350N\2539\367\026\252\270=\311\231:\245l\033:\257\2034:H2)\270r\272\237\272:i 9{\244\034\272.&q:\207\2460\272\356\3240\271\272\002L\272\360\323k:^\026\t\271\264\323\003\272\253\254\314\271\352\024\345\270Y\345A9\304I::N\306\3769\241\314B\272G0\213\271\301\013\2749\276\266P\272c\307\353\272\014\177H8\005\027\244:6\237h:<<\212\272\227\211\003:\211\313\342\267\317;\2739\325\216\331:\274F\235\272\200\206\3069t\365p9\210L\226:\212\274\235\272\322\225\2429\373\203\017:\302T\2169\2458:9\211H=\272\324e\237\271\354\364\237:\360\351n\272\333\332\256:%ut\272\374\323!\272K\341\004:\226\006\2749U\207\242\271R\273\\\267<8y:11\322\272x\270\351\271\351\372\357\271\tuW:w\275\347\272\0013\277\272\030\356\3059w\273\2529I\003]\266\336\227\214\271\310\240-:\215\355.:BX\023:\026\234\2149f\243\r:\353Hl8W,W\271\312\267\3529\275*h\272!\272\213:\326\204\2169\240h\371\267\n\252}\271\302\256\2039\233\364$\272\237\321\377\270\215l\2668}\274\007\272&y\217\271c\\\3649\352\315\3159\177\035x\270\365\r\n:\326\007;\271\227\004W8\3135\004\272s\221\344\271-E)9\262{\002\272\034\277\021:\207e\247\271\204n.\271F`\201:R\231\326\267\227\263>\272d\210\323\271s\226\300\272\030`\026:_I3\271\324\257\2577\222{6\272\303z\326\271\321\315\326:\331?\3349!\200+\272\220\'q\271\034-)\272\374\265\3569J\363q:\205F\3678n`\010:\313\\\0239\261\306>:\367\207\017\272G\017\3629\345XF9\023T\2559\335\367\231\271\267\3025:\005p5\271L\000!:\266\222I:\376\335\272:\010\201\226\272\3616\250\271\212B79\0335F:\355\270\237::hv\271\021\207\2369\356\373\325\272\223\210\2209\216\002%\271<b\017:\377\177\020\272\352n\325\271db\274:u\213\2609\365\330\260:L`\340\272)\305\2639B\202]\270)Sb:*\227t\272B2H:(]\304\271\201\254\004\272\277jm:\315\207\2719\251\300\2749\350| 95DX:5\255\301:\243\366w:h\342\':\345\310\3749<\336\017:,\205\322\272\327\377]:\237>A:5\332\2229\315\257(\271\214\335\230\271#\211T\271\376\321\211\271w \256:1\020T:\026\014\263\270\277\347Z\272\031\220\2279j\031O7k\276\2718\003R8\272\342h\3779Kx\3259k\322\2479w\241\030\2724\\c\271k9\3279\276M\246\271\020o\246:q\\\231\271\305\345\246\272\306\035\003:\301\262L9\273\334D:\306\256V\271\r\357\325\271v\356(:%\203\014\272\373\300\010:\247[\221:\327\026n\271\231]\251\271\330\000\2749\214\306\225:\360k\021:4\\2:\364q6\272yz\266\266]\211\2629\tn\263\272\243\002J:g`E\272\352\335[:\216\265\226:\263\262P\272\002\3226:\261\261)\271F7#\271\212@\035\272\021\241\222\272\234\253\026:%n\242:\322\002\3027\013\250\221\272\370Ld:\274\342\2319\256\020\000\2736\257\214\267\326\231\365\271\204\272\355\267\034{\r:\\i2\272u\372\2766\010\323\210:}\3435\2722\214\037:o 7\272\241\036V:\343h\0079\032\327x:\016\314;\271`\014X\270\367\253\024\272[\251\241\271\226}t\272\016\327\262\272\255\375\267\271;\365\351\271bR`:q3G\272\315h\3059\231^\3218fJ\364:\251^\2556\211/W\271AU@9\274\026\034\271\\\332\2058\260\352\204\272$\367M\271\244\034[\271r\003\3149\371\3618\272\347\264\356\271\247\333D\272\302\363\261\271\321\211!\271\237\371\330\271\264*\2479\030b3\271/I\331\271\204\326|\272\332\307\2619\215\232\001:Z\325\033\271\014\362\2408\336\264\307\271=\337\2169\213 \3019\316\320y\272\364I\324\271\034\370y\272J\034\203\271\014I:\272\371x`\272\224\\\3149\201\033-:\232\36619=\244\3747\025_\2658\273\230i\272\316\037\2209\330[\006:\\8\246\272\213\223(\272\205;\000:\244\030\216\271\'V\'\271\007\253\r8\263\313\246\271\333\327\273\272eU}:\356~\020:\312\247\2648\233\205\024:\273\214m:Dc\276\271\225P]\272\212\345T\272\343\023\033:\033KR\272%\r\033:\0213\3249\235\001\234:\314\262j\272p#U\271\373*\034\273\356\'\254\271\"\345\037\271\305>S\272]G\2448{\350\257:b\251\304\272\352|?\271\365\341\213:\345\232T\272\246\263\007\271\373\364\361\2712\376\227\272:\230\3209\2676\2769\244\010\2606e>\n\2711\322\025\272`Q\2159\032\340\271\2711#\2018\207UJ:\'\"\024:\217\255\031\272\"\361D:\033\005I:\215\371\216:\034s5:\334\260\205\270\347\277*\270\250\251):h\336\340\270oi\260\271\277\237\250\272\247R\221\271\016\32059\364,\325\272\376!\240\271\266\177\037:\\\000\314\272\276\024W:A\266K:jv\221:\2529\r\271\200\342\0079\036\246\37598\321\222:#\215H9V\351\2129vx\216:\372B\364\271\014\036\21592\335\201\271\365|;\271\027m\245\271Y\2241\272W\305\216\271\3068A\272\246\321?\272\375\343n:L.\3209X\021\240:\242\005\3619\013\302:\272^G\2548\262\311\257\2726aR:\205\243\215\272\310\250\237:\201\330K\272i\014\253:\327\030\010\271\323\345\036:C\264\351\271\273q\200:\200y\334\271\350\257\2659\342\036\313\270z\354>\272\375\270\265\272\307\036\262\271B\303\213\272\240\362\2669F$\2219X\204%:\315g\317\272Q\2076:\227Z\311\271\026\204;\272:\032\206:;\265z9\027\215\363\271\317\320;\271<\271?\271V\\\201\272\271\027\010:\266\366\2419\355\037h\271\333\355^9t\232\3479\253K\366\271\320\n\006:\254\310\3439\263\216:\271\023|5\272\342\323\267\272\334\220?:\365\241\'\272\004\320\2069\024# \272\240\034\241:\266\236\220:\"\210V8\250\t$7\341j\3109\206\210.9\023\007\250:t\006A\271\n\202d\271\376\006\326\272g\366&:%(Q\272Kh\230\272\337d\357\271IW\014\272d\370\2419O\200\0309\216\255#\272\244\321\035\272ZJ^\272<\237]9Y\3618\272\265\346\2029\262+\3109\224\302%9\024\205\2249d\030\r:\037o\211\272D\221Q9\240\320\273\271\013d4\272\234IT9)E\341\271\214\240\20282\025\242\272\004x\263\267>??:[NE\272l\251\024:gF\266\271\260&B:\311j6\272\201g\3149\007s\326\271\037\010\014;\237\371\204:\277\327\316\271P\005\2469\375\2234:\220\205\202:\363\234\2209\312\3438\272\256_)\271I-T\272j#\3058\241\247!\272\244\007w:\n\200\244\271\262\217\3109\336\211\035:-\331,:\273\033\002\272\001!i\2721\344.:\217sI\272a\000\322\271:\255\030\272&\3743\271\203i\365\271\002t\304\272\361O\t:\300fm\2723f\207\270\356\303\2259W\222\201:\365\236\37298&\306\271\201\350\260\267O\017\317\271\225o\211\270\307\244\316:]\235\021\272\336\373V\270\301&\2579\024-c\272]\264\2368e\240\214:p\204a9\232\315\232\271\352\031\t\272C\204j\271\272Pu8\322E\200\272\264;\265\272\260\034\3219\205/\254:\257\254`\272\022\231m:\355\236L:f\213]9\373\031\013\271um\3439k\226\r\272\243U\3039\332\236\034\272\334.\000:@h\2277\253\363\032\271\3539\2739\367\206Q\272\256\245\322\2721\323\202\2710\247\215:\rA\3419\010\331\006\271\3632\310\272\"\263\217\271Y$*\272]\224\021:\204\00669\334\307\331\271\215]\3509X\323\027\271\300\353\006\2656\365\276\271v\341\307\270t\3511\272@\207\315\271Y\033%:8T\342\271.\331%:\177p\3419`\362N\270\022 \270\272\351`[\272\035y\211\271\026\243x\272\347\357\33089 \335\271`Y\267\271bT\017\271=\326\237:\305\343\007:t\033Q:Q.\035\271\225\263\'\272\000)\244\272H\320\311\271\372=%\270!7\201\272\370\2526\272\312\200\000\272\200\246\"\272\333\357\225:\336\344\356\270\031\013X:wG(:\362\035\014:\226\252D9*\323\3479hKn\272l\034\177\270\353\016s:\253Y}\272iSz\272\372Z\2178\312\027\000\266\267\356\217:\\\364\203\271O\301\007:\006tJ\271{\221\253\2721\371q:ej\267:z\n\3648\231]\036\272H\014\276\272\217\375\"\272\3706\034\271i\250\324\271k\277I:\352\\\r\272L\252\003:\0310\006:\355\266\345\272\002i\256\271\262\203\214:l\272\2329\271\346w\271Qb/\271Y4\3049\255\275\3078\201\024\203\271\0325\2709|\0305\271\353\232\002:\227`\213\272$a\223\272)w\2379T\307(\272\270o\3679\345\343O\271h\027\177:\367jA\270:\234\241\271]F,\272\363\247Q\271\212\010\273\271f\"U:\265\036\3709\324]\026\272\233\202>:v\364\2215\"FC:\340\237\317:,\"D8V\34299\2246\265:\261\r\032\271\3677\023:\202\201\017:\250\005\'\272J\362\260\272rD\005\272\337\233\0057\025\247X:\263\215\034:\342p\344\271\357\216\2109o\300a:\356\252\3639\005\003?:~\017\2107m\353\024\272\244\335\356:\244\206\n:\333f\254\271\r$\341\270\201\377\363\267U1\244:Y5d:\311\345K:#\254\246\272\315\361\2359\240\'\267:\014\333\236\271\002!d\272\022\220F9\245+\3249\026\331\205:\221\271\334:\3352;:\342\010\234\271\026\021 9\222B\2139c\352\3629\222\261\002\272!/\002\271\367\253\032:<\236|\272W\241\3769\356/7:mR\033:\374\225\270\2709\2126:O\214\027\271\210 g\272Q\232\337\267n\032\334:\014\240\006::i\2379\034\206J:Y4\2668\257\313\3039\361\240?:\274\341^\272\234\230\275\270\0212\2608f\025n\271\274\345\031;\3607\022\273\n\337\005:\273t\3039\314\221\255\2719{\2709\214\231\0149Y*Z9\210\237U\271\351\312\276\271\274k\367\271\035\333\243\272H\373\257\271\254\'\241:1\\\2069\360\364\337\272\231\331\355\272\346\367\3549\251\350\232\271^\331\360\271#\376b\272N\3676\272dA\256\271\352Z\364\270\315\030\2259\356\241\236\272,\216k\272bE\t:G\033\r\272p\301a\271\363\242\3249s\320\342\271\014\274\203\272\001m\243\271\261\234\231:\211.\007\2724^~\272H\314\201:\330V\213:\260\025\207\2714\357J\272\357\251\006:`,\334:0GM:\005\\9:\202N_\270\353\377v:\313\276\3719\354\262\275\272\237\276\236\271\336\345\325\271\352_]9B\3422:\221N\257\271o\t\3449Q\003\036:\313\301\035;C7\3178\024P\2209W\234\340\271\317\034\275:\311\300\2158J\224J:\376\262X\272u\245G:3\252\3479?\250|9Y\225t\272\367\324\370\272H\331\026\272h\217m\271\325\235\327:\242\267\0169q:Z9\312Qa9~\317\263\272\277\305\25296\017\266\270\332\315o\2715\326,\272\036\374\235\270\244\227\213:]\360u\271\016\255\013\271\230\021\201:18\233\272A\344\275:\233[\2068\215U\232\267\226\003b9#\231\272:*\351$:&\207\2759*]h\272\242g\025\272\037\320E:\033\226\204\272p\255(:b\004\02697i(\270b\240\"\272\362c^9\332\000\336:\313n\025\2712*\2449jDo:\330\000\017\272\265L\0079!\252\2569\325\20749\027\303\234\272n\375\323:\256\316&\271\210\361%9\216\025\006:s\315\005\272n\216<\272\376m\222\272-\322[\272\266\322\027\272M\001\3659\215\273\310:\317\216\224:G\0066\267\256\002\2659}\266l\271\234A\2509\261\224\207\267w\337\211:@Zn:\357H\257\271!\347\344\271\352\2034\272\235;\366\271\024->:\250\352\327:\034\234&:\342\225\216\271*\342\2639hq\3007/\355E9a\004\000\272|\320\214:,V&:\017q\276\271u_\247:nfH\272+u[9\301\362\345\271\357\355\216\271\203\354m9s\333\004\272\376Q\265:+w\356:\010}\230:Ll\3209\227\375\034:\372\375\212\272\'e\2779\316S\222:\305\324\343:\373\323\230:Eu\330\271N\360\026:\252K\3519\303F\235\271\341\223\326\271\337\226&\272\036\323J:QK1\272\322\032\2759\327\016\005:\3020z9\355\334\211:+\021v\272\035\226\2429\334H :E\001\213\272\241i\251:\n\377\230\271OQ\210:\213:\221\271o\225\020:\270Dt\272\0358\2268\345\236\003\272\352\325^9\261\234\261\271k\036\241\272,\345\247:K\006\2249NOs:\350j\213\272\300h\257\272\'{\277\266\240`78;\275\230:|\320%\272?[\371\271\302Z\205\271\230=X:\244\263\377\271\245\233\002\272\013G\013:\206\233\2658\330\341#:\224\334p:\370\357\220\270yc\264\271S\227\3728\276\262\206:\233\014\27395\357\2638+\246-\272>\264\312\272\346\324\3109\030A\'\271\017G|\2721\017|\272-\206E9\3566\005:\0344F\272 \346\2779\307&P\272,\037\016\272\310B?:nM\023:g\2602\272\367\"\277\271&g\":\001]}\270Ts\3068\320*\013:\t\237\342\267\346hJ\266\301;9\271N\006\2558{\373\213\270y)\2069|;\332:5\231\273\271o\002\223\271\325\374$9|\263\271\270\025Y\3429\343\235\207:\3763\0009/C~\271\337(\322\271r\2645\271\263\236U:\307O\233\271\n\201,:if\3759[\004E:\r\001E\270\005\335n9&W_7O\327[9\276`X\272\023\037\0149\210\266\201\272\227v\3749\352\202\002\272,{\013\272\003m|\271\030\317\010\271<\375\0309\t>(\271]B\2729:\222\337\271$\247\2209\343\314\0339-9\227:\301\376\3759\311a\212:\202\033\303\271\221H#:3\361\032:\200\344\0219\264\274d9\233?\367\272.\214|\272\206L585\026<8_6\207\270\215\240\325\272Wt\302\271e\304\211\272.2\3108U+\260:\252\357\215\271\210\000\2749a,\2329\302\201\034:\353\220\177:\236D::\003\271\331\271u\327.9\241\203\242\271\372\302@:\341\366\270\271\305\326c:\362\240\331\272\376\345\":\373\313\321\271\204n\236\272G\013z:\010\024\210\272Pl\206\272\272\351\377\271\342\276H\272(\\\3029\340B\001\272\371\265=\272<\205\276\271o\202\022:\021\0138\272\244pU\270\220`\3319\276\315\3728R\300\310:\327Dm\271\325\r \271Coi:e\212\320:-\257\3078\004e\3649&\305\241:\232\n\257\272\365\225\025\272\331\007\341\271\314\260T:hD\205\270\353p2\270\226\347:9\250\332\206\272R\347~9yX\210\271k6}:\275\036\3619,\205\2059A\005o:\346\022\274\271\321>v\271\341t\3157\255\363\2035\002\272^\271.\r\321:\274\242\3739\351k\2169\230`\224\270\005\317\344\271\357\034\034\272\017q\2718\233\352\'\272\361l\227\272\353\004\253\271\005\010X\272U\3168:\241\347\177\2716\002\001\272\002\327\302\272,\352\025\272s\224\0339\372\360\352\271\266\243\021\2728\321\032:=\202\233\272\216\232\032:x\224I\272\2535\276\271\024?\244\271\322.\2649\266\307\026:R\316\357\271\004\215\222:\372I\304\266\200\000;9\013+f\270\342It\270\276\200D\272]\353\221\270b\033t:Zl\020\272?\273i9R\265\2147\254\225\300\267\305\364\344\271\226:[\271I*\322:\273\236\003:\376d=\272\021f\316\271b\017\n\271Rm\2719\236]\336\272o\034\311:\321\342\021\272}^\241:\337\215\310\271\344\265\2779\002\240\3379\327\375\335\271\272\nQ:\276R\0228\247H2\272\026H\271\267R\356\017\272n\026\211\272\213\023\3169\245pZ\272SO\335\272C\366_\272D9{\272J\370\212:\366\276D:\ry<9\312e\206\271\005\021n\270\321BL\271\006\022\'\272I\314\232\272\322\'\037:\026\274\305\271\3215\315\271Q\330g\272*\305\221\271J%\323\270\205\363\233\267}\250\263\272S\3302\272\017c\327\271\227\301\3649\277\235\376\270\227z\234\271\340\033f\272\032\017\2148\026O\325\271\331x\357\271\355\031\333\270\376b*\272\235YG\272\370\010c:Q\300\232:\020\307\250\270|\373\203:J7\373\271\267\325\013\271\007\376\25097\3168:n\315=9\323e\260\271M\320\':Gx@:\313wE:\322r\225\271\322\235\274:\213}\307\271\364\344h9\200)\360:\311\271~:\343`\263\271\247\326\272\270\3737\376\271\2620`\271\017R\242\272\366J$:w\213\312:\n/a9\353\372\3578\206\240o9\323\220h\272n\305\234\270\371\370\251:uJ\231:\t\206[:\325u\302\2677\024j\272\362\315\3079\215\264\3409:u\031:p\033\251\271\332\0076\271c)\2169\275\225\3329A\007\270\272]f\214:\263\302\243\272\224\320$\2729H,\272\337\214\3727\363i\242\271\267*\0248nv2:\000UC8\235\020(9\347\"\230\271{r\2359F\336\036:\"\270h:\343\335T:[$\224\272H\027\021\267\315\251\3548\223\'\2458@\016\323:-\003/\271\332\237%:\352\n\2429\210P\3228\204{)\272\027CK9\324k\3209\206\304+\272\302+\"\272\323\204\220\270\025FY:\323\013t9\352\325#92K1\272\364[\2049\362\224j9\374\316\2069\327f\254\271W\030\2439\250J\0149\365\334J:\257\224\245:D(\036:\364\265`\272\031\257\255:\220\357\302\272\007\375\3649#\236\341\271]\002\021\272\021\003\216\272Z\306f\272\337\204\3519\020\262\037\271\351:?8d^\016:\233s\336\271\234$\022\272\205\355\2719O\256\2079\263?S\272M<\037:\260\204Y:\335\236\274\272\034\314\3379\265\215\237\270\340\216\024:\234\266\272:d\330\004\272\334\221C:K\001\3349\245\350(\272,.\036:\200\030\253\272\336NW9K\030\232\272\276\344b:l/#9\020\353\300\271\322\316\215\272\\c\270\271E\246\2349A\320\023\271\345\276\2439i\211\376\271\355\304\2559\017\377\034:o`g:\347\377P9\005\354\230\271m\3470\271e\2735\271\320\241\036\271\322r\256:\201\312A:\363\272\226\271\333\376\367\267\357\241\223\271\217|E\271l\302\3059\326\245\374\272Mk\213:7\021\22456j\005\271c\004\247\272\373Hu8\240m{:\005\024\352\267\326H\276\272\256\022175\242\013\272}C>\272\253\227\26494%j9K\2039:\312\265`:\257\272e9\361\310\267\272\337\315\200\272e\266\237\272\366-\2778\274\247\220\271\306\260\231\270\026^\024\271\016\226\322\270\344d\210:J\243\3449*\022)\272*\304\000\271=/\2179\021\307\31097j\343\272+J\272:\326\371P\272n \271\271\273\307\2329M\325(9\r\215\020:\227\tB9\000\220\204:\232CH:\026xl:Hh\031:\004\317\021\272|]\3729\303\001!\272O\362\010\272K\262\251\270\333\236J\272io\343\271`\235c:\032#z\272_C;\272\342&\032:\013\354\022:n\364\200:\353T\":\352\233\32199\371\2605\356\222/:\023\332\2618\337j\035\272d\266.\271\246\026\222\272Q\n\207\270\343!\t8&\250\036\272\255\251\355\271\177J\3479\246\025\0109/\352\212\271\337-\327:G\330,:\373>\2459\334x\214\272\320\237\214\270-\213\325\270XQ\t:nx$\267B\230\2348\266EA\272\3743\2219\306A*\265\214~\007\272Q\225\022\272\017\271\3548\242=\2467\206O\326\271Z\224\036;\026Z\214\271{\2462:\254\257\2069Z}\2519\205\201\3069\346\034\321\271\324\350\352\271\231\010b:\232\345\264\272\246S\r\272\270\277\211:\266\372\2649q_\33399H\026\272\211\365\2159J}\213\270r\022\237\270\t[\232\271\372\017t\271\357Q\344\271*\352\360\270k\310\267\271\375\202\341\271\357\037\3739\256a\003\273\231a1:\003\234\3118\232\021\360\270\331\374\2518\246#\2149\363F\2229\3331y\271\337h$:D\031\3168\257\375\024\2728\216T:\203\312\254\266\240\245\326\272\034\236\252\271\357\303\3708vZ\237:\270\330\336:\251\004\017\272\006\300\0239]o\2278\376\353=\272\034\017\212:\004\250\324\271b&h:\275;\2149s\n9\272D@\2359\317b[:\341\262\202\271p\200\225\272\321\362k8aR\210\271\016Y4\272\360\261\253\272\306\227\225\270r\341o\271\363\021\3509!\250c:ste\271\317\336J:\234\234\0279\257Z\025:7\007K:\004\257\261:\212*U\272\357\341\021\272\255\300\3309M\306\0239\353\367\201:_$\243\270\300\027\003\271?+\2229\316\001k\272\217\002\001\270\363\214\2269\022\n\336\271$k\0179>\261T8\327\242\2518m\366\247:\260\336\\9\310\312\340\271\234\370+\272\335\004G\272\207l\35186\306\031:\257\300\304\270\303M\274:k\255\026\272gV\2649\237\354\254:\370V\0079V\352\001:\230\036k:\205\374\334\271\022\217]9\364d\3369\212\364\037\270\241h\340\267$q[\2727hb:\364\334\210\272F\0322\272i\257\364\270\335\346\372\270\243\357\\\272P\212\037:\247E\246\270\327xV:\321\325U\2721\355Z:p\322\204\2729\345D:{\027\005:\256\360~\272B\341\2379u}\233:tD\307\271U\247\342\271\024\017\226\272\210%\2109\010\275\226\271\341\026\3439\0337\2019\3508\237:\262\234\2619\355u\344\271\243\036\000:PG\243\271#+-:4\271\2039\360\036\034\270\206\210x:\355\311\265\272\177\306U:T\t\n\267^E\3229\301\300\2329{\031{9b\311\2529\304D>:\241\333\023:\301E\256:Z\220=\272\233\266\025\272\014\225\343\271\"\225\343\272\313\341\3059>u\033\271\203Oq\272\273`\365:\310\010\3329]9I\2728\001j\272.\276\231\272\216V3:SJ\203\271\021H\216:\310\270*\271\372\326\202\271\364[\2419\370\232\220:k)G\271+\010t:54\260\270\227\315=\270P\377\3457\334v\215:^nj\272\243\266\250\271\"\244&:w\006\234\271\357\210\240:\023\202\205\272\344\241\3239@w\2778X\371J\271\335\205\023\272\006\266\223\271\333\0211:/]\275\271Gl\252\271]\030q:\257D\2609dC\321:\004\254\361\271^v\037:\020\341\337\271.\230\005\272dGA\272\337\233\2319#z\2469\364E+\272\270\225<9r\316\230\272\303\352\250:<\016\2658dv[\270O\301\323\271s\002\247\271K\250\240\272\347\221\3068\350\323\\\272\374\256\2459\007dq:nj \270\351\250\227\271\023\367\270\271\364i\000\272\317\257U\272%9\3339\027O}\272\314\237\n:C\302\305\271\247\270v\270c?\244\270r\251\315:\306\322\2019\377\321\3167\273:\2579\201\026\352\271\202eY:\305\272\253:\264|\353\271\005\013\3439\335X\2369aW\202\272\335\257\304\272\353\000\230\271\312\177\202\271^\305\022:\265\002o\272\242\344p:v\21599~\205\3649\004Kv:\016p9\270p\304\004:\230>\311\270\3172\272\271/)B\272[\'4\271\306\377\0308[\'N\272\232\256\334\271\307\220z:7-\3309\332\r\2008-\177)\272\354\221\3149\237\t\362\270S\207\200:\310\224.\272\220\017\3659\336\033p:\256\270\213\272\345j/\272\256*Q:\345G\\\272E\177X:_yV\272\230`\2239\rC\\\270e\300s8\3202<9\313.\2419\371s6:\340\216S\272\'\204w\272\332\346\0319+f;:\277\361`\271\255\312\246\271\243X\007\272\357\010\227:5%\3728\270w\3019\305\302}:\255\346M:\376(\036:l]l\272\340\260\212\271\321\246\220:\212\36069\027#\242:c\255m9\365\332l\272\030}\200:\265\2422:\233\031\'\272\336jv9\nvH:\372\241\t\271\003\355\255\270\314\257\021:\237lC\272&\210\240\271\221\034\315\271\030Q\036\272S\325\3109\314\007\2168\202\242\342\271\251Gu\271\314\364w\271\262?\207\272F\314\20695>.\2722\r\2249\362\2057\272w\2576:\202\203\214:\307\2551\272\233c\2128#\366\363\271\222\304\304:;c\005\272\362\342\227\271\357\225\201\272z7a9.\342`:\360\321\014:\327\222Y:Fm\270:\361=\212:\022o\001:\223\n\215\271\227\213+9Z\2421\2717\241\213:\211ka\272\266\001\'\272\237\370\213\272\240S\316\2711\003/:$\306\t\272\035\374\016:\203\036\260\271-\345\2369q\270\2629\252d\271\271\231\333\n:\273Y\201:\2327~9u\026\'\271T\\\031:\337\022\031:\177aN:\336\332M\271|\215\326\271|\001\242:\366%\357\271<qr\272(\034\322\270\037%\031\270\270\355>\2723\025\2108>\2479:=f\3759\300\207=:\013\024\232:\032\331,:^\375\032\271g\307\34493\3452:8$Y:\311\224\010\272\227\037.\272\027\337M:\305\241\2629\"\270`:\205oK\272J\250\337\271\316&e9\343\304\214\272b@\201\272\377\263#\272}|\243\271\377\001\177\270\227\022\303\271\351j\216\270\366\275\3448\330\216/:\345\227\210\271\024 \201\272N\374\202\272\202\257\236\270.6\3629U\225 :}\216\274:\033.M\2719(/:T:\305\271\230\321s\271-\304\247\266-\375\374\271_\275\2439\375\250D:\206\314`\2721~\3679\346Xi\271\007M\224\271\270\264Q8\371\007\211\272\226?\3569\245!\2059 \313\321\271\'\375\235\271\335\267\240:m\223\000\272?\306l\272\177^\272:\222A,9f\363T:\221\347\016:\264\371\033\272\370\014\2019k\351o9\263^\313\265\300I\3539\252b\221:\0009\213:\016\317\334\270K}\243\271\252\016\3409\367Z\210\272\022o(\272\320+\007\272Y$6:\223\374\007\272I\326\202\272\222\324\264:\253\355\324\272\246b\2559\362\311\2359sb\003:zo\3539\023\317/\272*\311\207\272\342\365\014\272\034\237\352\271\324E|\272#\354&9o\235=\272u\223\2439\235W\256\271n\212\235:f;\2518\374:\300\271\347\237\3768\356\367\2329\333%\2609\207?\004:rb\307\271\343\026\252\271Z\370%\272\n1\2329\3160\2459d\027T:>\274G:\004\021\2149\022\201\373\270\025\310S:\021/\200\272\257\344\027:\341 \260:\000\350\216\271\307ep:\352\226%\271\321\007\325\271\303nG\272\227\223\020\272\231?P9\000\360\3049\253,\2458,\313\2049\303\332C\272q`)\272D$\375\271\200\257\233\270s\370\035\272\316\007\3559|D1\271\341J\276\2710\002\2279\233\224#9\002\377\351\271\0141\034:\321\260\202:\320\260\247\272*\325\3749\352\026)\271\262\005\005:\n\277\310\272\270\035\316\270\273\333\245\2714S\322\271\021\323\322\271H\341t:{>\026:\360\373\204:\016\320\022:\256\343p\272Y\301\0079\260g\2259\243\246\260:a\314V:\030b\201\272t\236y9\334R.\272\250GT\271\352r\354:\302DB:UZ?9\010\376\3409\253<\335:~\307D\272\345\310(;\306\200\210\2720Z\2568\254\301]\272\303\323\245\271nw\003\272\327\366%:%@=9Ae\2639\265\347\360\271\310\340\3529[\347E\271\021y\001\272\366F\020\271j\221\022\272\203\325\3369\236\2779\272\240X\261\272t;\2039\330\224\267\271\370\241\230\271\021\333\n\271\036\342\275\271d\303\225:I\336\234943\020:\317|W:\207\305\206\272\2072\224\272\276b!\272\207\321\207\271vW\312:{L\3039=\311R9\233{Y\271\357\2307:\207\225\000\272\346\367(:\002WT:K\300\337\272\331_\220:\2201\237\270PS\177:\374\263\004\272\t$\243\272\307k^9\361\022X:\272t\2779\031 \016\272\200\266\255\271\342.u\272\024\265\2539%\346\207\271\343\353\2059hW\021:k\346}9\374\227\317:D\023\027:\311\364m\271\216\350I:\276\370\004\264\372\0261\272\264\r\2029\022\376J:\323\352m\272-\361\224:%\177e\272X\004}\272u\3722\272O\303\035:\340\335o\272\346\302\2129\251\005\354\267\350!\303\271qe\020:\376\313\214\272\366\336*\272\014k\2279\206+\372\267/\235\306\270\311\263\0069u\231F\271\014\240S\272\217\353&\272\360;\270\272\355\tV:\346\344X\267\273\3750:E2W\272\331t\363\270\354\351\366\271\345\324\177\272-\022/:]\337\236:\341\353\225\271\201e\035:\234\361\271:\273\347g:\263\336W9<K\2457Q\317}:#\376k9\340\032\3179U\362\022\272!\272\200\270\201\236X:\037M\221\271\005\302\t9\367\262#\272\376\221\21589\004\2179\031\300\214\271D\311\'\271\223e\\\270\312\245W9)\204\3479\363\361\223\271\264\204\037\272\222\004\257\272\025\220\225\271?n/:\365\233\3669\037\3237\272\306!\203\272\372G\347\271\236Xb:t\177F\272\245\302+:$\022k\271z\254\360\271\270\262\3209+\375]:w\242\270\272X\342\335:0\345M:x\000\2647\261>\330\271\304`/:<\212M\272\315\004\341\271\231uM\2728\002k\272\370\301F:\307Z\3059\003\317\0359+\004\203\272\203\331\245:*\357(\272\202\377L\272\242\362\022\2721W79\372\302\014\272\211l\240:@\345\026\272\316^\2579\201\253\023:F~`\272-\274\226:@%\350\271\246\233*9\006Ad\272_\006\2639\247\010J8\346C\363\270\001< 9\302\201\360\272\264J\225:&?L9N\021\247:L\270\"\271\010Ko\271\204\323\2419)\213\225\272\234\013h:\271_\034\271\213\\\232\271%iK\272\340#.\272\306\276+:\366\360\032\272\231(\2518\0162-:nu::G\243\343\271t\241q\272\177\033\266\272E_V\272\332e6:\231\003\232:\257w\005\272\346\315\270:\343\023\035\272\257\321\034\271\033\323\3459\210\306\23094a\2069\000\334I\271\217\024X\272\241\2641\272\n?}:\216? \271\024T\231\272\272*H\272{\343\3309\334W\262\271\266\022+\272\226~\220:)\211\2139^H\230\272\242$\"9*\342\347\264\317\022i\272\362E\022\272\023\365\220\272\347\275\213:O\004\3109]^\3649\262\215\022\272\303\262\030\272\370\305\261\272\224\331\334\270.\345\3219D\037\002\272\032\365\000\272\002u/\272<C\314\271\345\376\367\271S\306\'\272\324\250\244\270\266\031\3719\003\257\334:\214\273\3769\2642\255\272\343\243z\267\211\307T\272\3366\2429\r\034=\272\001\361\201\272]\351@\272\223\351\2229n\353\377\271\366EE:\005s\0339o\352q9y\221<:C1\307:{\001\221\271|\345\230:\352\2127\272\307\266n\272\225\274 \271\205\036\3269A;\006\271\374\275\316\272S\004\n\272F;\272\272\371dG:1\021~9\315\313#:\305]\0209\013\003H:B\205\301\271(>\001\272\317\252G7\017\217\3669\nU\320\272uI\r\272v\0058\271\250\307\316:\310\203 9\310e\247\270\261\215\3569\203HT:F\234\2509\220f@\272\357\250^\272\223;\0209\006\261\013:\352\205):c\013z\271\351\354\317:o\037\277:\t\346\\:\201&\031\270\222\217\255:\002\036\353\271z$\000\271\205\007H\272\353g\253:\332\310\214\270\266\032\3679\3077\026\272A\263\003\272\300\235\2207\222\004\3309x\222\027\272O\203=\271\216\335+8<\355g:\347TC9\321U\242\267\t~\014:{\177\2079\311D\2468j\\\364\271\352\334\2729\230\306\2369F\272\202\272\272\201\347:\356\370\211:\324\301\016\272\020\027\210:\002\013\2669]\316y\271ns\266\271(f\340\267\377\007&\272\234w\3359Z\233_:B\\\223:\251\313F:1\222=8\311+3\272<0|7\341\274\006\272\2105\247\272\363T<:\214\32059K\315\2728n\261J:{\237V\272\367\226\310\271s\351(\271\356=E:\350\014\370\271]\260I\272\223\365\020:n\263+9\320\360\370\271\207\375\323\271W\034\224:\303F\2379\253\271`\272[r,:\\\340$\272\362\004-:\314\376*\272\343\246\376\271k\330\266\272\304j\302\272?\035\355\271mP\216:\302\363\034\272^\3765:\244\334\253\271\334\225\267\271\000\341\001\272\276O\013:\263\262|9\331%X9T R\2721D\2629\226\374y\272\004\364\236\272]&T\272\357\326\262\271\3726\177:9(\24692\325k:zC\035\272\024\336.\272\023?\267:4u\261\271\247\330D:\r\2178\271\212\351\245\271dT\3349U\365\2569K\200\235:9\217C:\013^\2129\006\026\020:\177\026\3009\254\204\0077\316\267d\271P\341\022\272\320Q\375\265t\210b8t\306\232\271\274\217\177\270y\211\3249X\304F\272\202\003\020:[\357\3519\373\275\2738a\376\274\272\352\227K9U5\2109 \372h:U\355%\272i\230\356\271\020H\227:I\311\362\271i\257\3719\205\336b\272\315\244\3659\240}\204:O,\313\271\254l\300:N&\202\272s\341i8 \263\0208\030\252/\272{|\004:\275\316[:\316\003B\270\370\336\252\272\037DB9\030\200\025\272F\010\026\272E\356\3549\275\346^\272U\231\314\270\261\377,:%\303p\271>\354L\272\000\267\243:\344t\242\271\037\n@\272v\363\301\271Jd\035:\003,~:\365\221\234\270\253n\216\272\350\202\2519\240\243\223\271\213\246,:q\2247\272\0042\2259\022\024\260\271\261\022):#\302\001:\313\203\200\272\330\003\3368_\026\3459L\222B9\n\343\216\271\251\317\220\270\201\350\2358|5\031:\332\'p:\035\340\2118va\377\271\357x1\272\213?v\272\032\372(\271\3555\235\272\333\021G\272~^\233:\264\260\232:\207\024\305\271\225&\013:w\035B\272,{\313\271\017`H\2723Y%\272\003M\206\272&\262M9\343xD:T\335\377\271a(\212:V\355\2639\177\224\231:\332\315 :\2713\2349\262\302v\271\301\230\001\267\305\320Z\272\200\314\2019\023\371U:\313\033\3678\227\373\004:\312\244_7\345i\2629Q\366\013\273\324\323\221:\254\312\245:\005eJ:\307\305\363\271\276\0308:\312ye:\336\n\3549#\347\221:\255\331\0149\343(\016\272D$18\005\300:\272.\212\0268\r\353$\271\350\271\2038\177^g\267j\213k:\016\277\2279\210F\360\271\343J?\272\236\274\025:\204\303\2778\313\333\021:{\202e\272:\200>\270\242\006\215\271t0\225\272\024\225v9bw\326\270\037\345\2059\003\310O:\016H\177\272\200\246i:\004\242\035:\310\3113\272/\276\2159\324\227\313\271\200\313K:\376\302\030\271\001\373\230:\312\362\351\271\234\000\3359\327\344\257\267\036\230\013\272\240\205\020\272<\211\026\272<\232\212\270\226\233):\257\243\006\272 z\2129\271n\201:\375\334\2019\2576$\270\022\233\0108(\362\2659\244!=\272\006\207O\272\360*\2059\017\321\225:\321\300K\271\006-<\267\341\224\n\272 v:\272Mb\2449\343\032\2404\303\201\225\270\006\376\032\272\331\033+\271`\342\2528\345u\3449\370D\242\271\010\203\027:\2641\021:\254y\3609\033\246s\271\240H\2779\274\372+\272\274}\374\266m\362*\272\023\356+\272\257O\3509L\213\\:\250\273\272:x6\n9\351\301\217\2722\223O:K\246a9\266.\250:Q\202\214\271\007\\\2409:\366i:b\366\020\272\216\"o:\005Z@9`\326X:\022\207\311:\031\320\266\271\235\224g\270\355\357\3509\362\024\3059\260k\006\270(y\314\272\313k\317927\333\271p\227\2579\234\'\32599\004w:\004n\353:%e6:\021\372\242\271\377\343o9\254{\2049a]^\272\200\230t9\027\300\211:\241\250\277\271.\350A6\256A\344\270\241\360m\272\022\333\212:\376\243W9v\002\017\272\372D\362\271\221\232-7z,\225:\366\203\207\2724\0179\272\223.\272\271\253\271\3639\331\375A\272\022$\2109p9\0069&\337\026\272a\t6\270f\311i\272\261\335\360\271:\363\026\272\207\364\314\272/\355\222\272@\336%:\270rz:Nlv9\317&\363\271\023\304\010\273\273\340E:2_\223\270\204\201\303:\'fc:\006\266\375\271yN\353\272\325\225\001\272\361\n\2669\326\2173\271\210\307\273:\003t\216:\0009\2109\222,\304\272\256\313C\272>E\243\271\273B\255\271eC\233:\203\310O9D\373\203:`#\360\270\336\276\2119H\370{:\224\302\257\272\244\347\\\272$\325\':\007\010\242\271\221]\032:\035X\321\271\2723\2719\236\313]\270\342x\2418\t|)9S\222\334\271;0\3265\350?\230\267|\242\023\271j\322\325\271\034.\243\271\2259\2729~\313\327\272\210\326\020\272\325\331T9\236\t\3419q@\201\271\300e\032\271QT\030:\223\337\201\270Nm=:\033\347V\272/9G9\250Pf\272+f\022:x\236\3359\240\320\2329\314\n\023\272/\260\0369\242e\212\271\306\246\020:\321N\345\270\000\023<\272\206 \020:q}\2579\342=\235\272\024\005\3178\366V=:\304\n\022\271\252\312C\272\3560\3319\2150):2\374e\271ni\3449w\253\2209O\025\302\271\024\250\2219cC\2379\315?!\272\201\215\376\271M\3217\272\332f<:\263G{:\232\214%\272\347/\325:\360[\3439\'\021\0238(\021#9\215w\241\272\037\306d\271\030\010\032\272\212\362=\272\333U\327\270Sq4\271\206\256\217\271\215\006\3439\3623\204:\025\nc\270\013\2174\272\013K\337\271f\335\272:_\254\302:\354\031<\271\273\025\300\271k\202y\271\252\221p:c\026\031\272\340&X\272\330N9\272\032\270\0039\313\274\235\271\002\346$\272\330\244V:\354\316C\272\316\212\007:N`\305:r\336\201:|\375\254:W f9TF5\2720d\372\2727nU9\312\363\227\272\331]99I^]:\321y\3129\021= \272\273\001\203\272\2669g:\3222\016\270\216\303T\271V\373\0369\035\303\264\271\330$^:\203C\030\270u\207\244\271\t\247\007\271\265b\0219X<\n:LZ\317\271\206q\026:\363\375\t9\014J\261\271\355\225\216\271\254\240m:_\262\271\271\t\016\0259|\2507\270\256\033\2178\247\026\3339 \346\254\272Q8\265\271\247U\n\272\240\255]9\203H\354\267:\365\274:.\002\307\270\274\005*:&\257\031\272/\307:9\227\264\372\270\313\241\002\271\331\270+9\364\017\244\271\006\371i:\201\200#\271i}~\2706\020\\\272\373\034y9\025M\026:56t92\267c\272\241Z\2339\271\001k8\372\216/\272\306h!\272F2g:\36517\272\346j]\272RA*\272\274-\024\271\266`F\270\374\257\023\272\010I\3129r\260\214\271\303\024\274\271\230v=:wW\003\272\354\334A:\241\343\271\271\220/O\271\311\305\206:6u\":\303\031\2149\260.\3469\000\371\000\272\340\212\234:\365G\007;\3441H\270\351\206\273\271e\242\0109\242\354^:\016O\177:\tp$9\177\246\363\270\023\323\35189\310\274:\204\rc\271\257nB\272\365uI:f\366}\271\370K\270\272\352\t\2429lv\210:\274G1:\204\231\3519\246\253\3229\345\016\304\2714\2022\271\020R\204\271\002~\257\271\271Yu\272R|\002:\376\036T8\363\000\305\272q)\3629\264f\2038\206\020\003\271\022\01639\360fD\272\306m\262\271T5\014:\245V\3369\256\352N\271\211D\030\272f\nc\272\355\\.7\251\'\3348\373\254\027:\030*/\272\215\236\252:j\037\2459\237\251\037\272S\330\201\272M\252\2509\327\001\24191\201\3558\t\260)\272UM\3529Cm\246:GX<9L\212\024\272\347\021>8\315v\3249\027\034?\270e\203\315\267\036xO\272\255/\014:\236\325f:2wg9\376\352\014:\335\031\010:\014\251c9\302\302\212\267P=\0325\323\270\202\271\rWr\271\032G\2248A\2040\272\231~\237:\216\016l\272\252Q\2218\375\2145\270\034\321\036\271\243J\037\270Q.\2729hyt8\\3\237:\252\rz:2P\000:)\222Q:\217\376\3749\231U\2678\324\332\3239\346\243~\271\367\271\316\270\375(V\272\354\346\2709q\234}:\002I\243\272\303\235\3609\350\264\023\272\365\240\3779\256q\2068\252\303\332\271\232\237k:\000\025\014\272\ttl\272\332\360\005:\333\210\035:W\022\331\271k\004-\272\2763\226\272\346\2052\270\330\255\267\270~b\026:\263\220\032\270\264x\033:\013\005\240:\355\342\017;\251\306n:j_\2319\351\257\031:\360w\3448ib\034\271\216\356o:$c\246\270W\223\307\272*Z\204\271\233oC9\236*\3319>:\255\270\251\\\262\271r\330{\272\360\366\315\271\347\177\235\271\314\375_9\303H\3569[9<:l\252/:\324\001S9c\300\026:\025|\005:\014+\0248b$\237\270/!\2559\234\347V\272\372d\225:O\324\014\272\306\320\206\271\316\340G\272\340\344J\272\366>\020:\343\366\3768\033\224\3358\274d\006:\307\363\365:r\352&93\215~8\363\362\314\271k\014G:\234#\374\272\212I\307\270\023T\356\271\030k\3038\251\257\2518\304\217.9SC\027:\227{\037\272u\214 8\356Hk\272=1Z9\370\2021:}\323C9\302\275!8\037%\213\271\346\323\266\271\275\350\275\270\212\030l:\023#\350\2671\202[\271\317[(:\302\261\214:\225\372\261\271\257\364\037\272\225\346\2448\345\211k:\212\222\355\267\374\244y87s@:\267X+9u\271\216\271\333\\:9\233dP\272j\264\363:\360/\277:\"\357\32289\314\260\272U\ts:\307\0063\272wk\355\270\025\346\205\270\224A&\272\230\024n\272\371\374\214:\370h\'\272Z\363\001:{[&:\276d\033:\341I\2619\237\313\2429\361\030\337\2713\\D\272``\351\271\241\353\211:N7\221\267\266\324r\271|\222\3439V,i\271\312\033\317\270vx\237988M9\331HR7\344\226\033:<\310\3249\254\016\300:LB^\271\233\270Y:F\336\2159D\rd\272.0\025\272}N\354\271\3510\340\267\226Cc\272l\200Q\272b\227\233:\375K\237\271\311\276\2337^\344\004:\240n\003:\254:Q\272\216\340B\272\376\233\254:\333}\351:\036b\030:\310F\266\271~\340\217\272\302d\000\271b7\2568\022\233\017:\370\217\355:h\335\334\271\276\021\2109\241N\021\272!\270\020\272M\276\244\271\310\336\270\272\317\271N7\235\233*\272\000\036\205:F\214\357\271|\217\301:r5\234:\201\017p\272z\332\341\271\305\224K\272\r>\244\272\205\200\n\272\222vw:\372a\331\271\025L\255\271\217\276\217:\242\316\255\2710\017\'8\303\373\200\272\324\007E\272\372\273\312\271\235N\020:\031\302T\271\323\311\224\272\210\251\3108\031\342\313\270\376\225D:\340\314\2179\317\251\243\271\241\026\0309\030\270z:s(\006:\346\231\020:\301\257N\272\327!\273:n\203\344\271(QY:\3105\3378%\336-:\223K\245\271b\274\264\272\226\354\360\270\r\355\207\267\243\352\326\271\023\254A9\221\221\0368\367\016Q7(\327\275\271\rC\316\2717]\2549\361\362T\270\327w$:M\244\3508N\270\2529\3365\256\271\312\33359I\327\017\272\007*\0049bo5\272DH\321:\035\331\3418\233\354\005\272\224\310\2369\030t`\272\210 #\272N\217\3439\037x\2559\373:b8u\331\353\271\222\230\004:\tq\025\272tu\250\272r:\0069O\244F9\263\207\2568\202P\225:n\314\255:-q[:\013\035\341\266\247\316\n\272\216=.\271\272\370O:\206}\033:\233\016\264\271\351\206*\272\372lw:\366\336\214:\247\262T:+\330\2609\356\2344\272\311\222\213:\022\255\3358\212\327u\271\261vf:\200;&\272/\260\3249\'\242\2729\336\214\322:<*\371\267\265\r\014:N\000\235\271x\343\306\272M\245\017\273\022\210\035:\035m\200\272\313K\364\270u\237\3329\013\370+\271n\327&:\221O=:?8\025:\245\227\t\272\223\335\014\272M>C9\330\356_\272\210\246a:\354\020\273\272\035\027\315\271\200\252\2239\001\033X:\353W\253\271\035r\2339\317_\232\271\001\177\3249\255\265\3109N.t\272\365\336\225:\016j\004:\247\263\375\271\216q\026:\206\031\2329#\2619\272\342\006\2439\240\243\3259K\244\224\271E#\275\271P\316\345\271\231\206]:\352\205l9\324\335e:\310\007\0178paV:\241\230a:}\034\\\272F\347\013:\350o\3459\320\242\211\272\242\223\3709W\275\035\272\355\350\315\271W$$:{*b\270\024\205\256:\024c\216:\024\342\014\272\031?o\272\361\264\242:\206\252\3179\3235$\267\241\002\2048\327\304::*Jp\272\200r\264\271#\3700:,Bg\270_\303W\272[\307b9\202\032\201:_\235\252:)\263>91h\'\271\327)\"9H\321\2079P\251\247\270\224\240\2539S<\r:\206I\250:qk\3377\021\221\2269\233\270B9\227\201\252\271\023\343\232\272\020\240\221:u\312\033\267$\006\334\272\343X\0059s\247\3469\327P\024\271y;\275:E6\306\271\253\377\2619rl\0278\020mR:8\270\215\272A\310\010:\256\300\336:\034\277~\272\031S]\2729H\3718\\\031\003\271\3633\3129\300;j9\034]\3076\203HS\2720\031\257:{P\203\271`\326\325\270\375\336\3349\266\250::mK-\2727\2150:\254 \211\272O\033\215\272\315\222B:{Tf:\2016\205:cm\251\272\267\376M\271L\254\r\271m_\214:\256x8\272\255\346\0179\013XW\270\264\t\2009\022\004\357\270\273\215\210\272b6\215:C\271\"\272\364\022\2768}H\035:\250Ok9Ip\'9o\301I9\007!\3349M\214\263:\321\303\206:\304\027\363\271\237qA\272\265\246]9\275\224\3609x\3039:\034\321\2339A\264\3458_{\256:\212\250\3129|\301\372\271\315Jl9\255\231r9\211\335\3209\240\262/:\331\317\2319N\335\201\272o\0178\272\263\004\276\271\031\261\3409`\001\217\271#\013\2558\3003z\272\356\r\223\271\347\032)9\344\010\033:\353\371y:\354\031d:\203\357e\271\320I\314\270\216\207\201\272\255*u\271?\034\2049\376\3751\272\013se\272\220\036\037\272\235\317\2218\333\261\271\271T\242\373:\376Z\301975\030\272\260\266\254\271k\005)\272Vxm\272\007h\337\271\'\207U\271\261\227\030\272-\002\3668\035\032\315\270\202\236S\272\315\227\005\2722-$:\206\357d\272n\324Y\272w\"\3259!\276\033\272\215\330\300\271j\310\360\271{?\251\271\307\\O:\272|\353:\271^\036:\375j\261\271\204O\3419\020\253I9T6\37688w<:j\256\31082[\310:]\375\3109\275%59\264\253H:\002\342\016\270p.\301\272\035\253\177\271\222<\2178\241!\273\271?|\':\235\210\026\271+~\220\272\031a#:\314\300\'\272u\034C\272\372\275\023\272\211cp:5\024\2779T\237j:$/A8d\036\376\272\221\352\2069~Z\2069Z\307\212\2714V\3459\016\243\352\271Wb\r:\253\177\207\272\002\365\230:\034\022>\272P\201\0248\021\341\337:\342\344!\271\246\023\263\272\016 \373\2709\323>\272\354\255\t:GTP9_\034\344:P\022\3158\356&\017\272\033Ey\270\020zQ:\"\270\251\271\367\034\2229]\254\253\271d*\324\271\212\215\2529/X\r:<\251\342\271\331G\3259X\370D:\004\3448\272\211\'\3659c\022E:\305\376\247\271]g\2628\213\326\256\271\3344\310\271\305\371%9\253#\210:\031\036\251:\035i\272\271\0301\3569}(\033\272\010\211h9\225\315\22597\225g95^\240\271F&\027:.F\263\272\277k\336\271#{u\271\002\233\216\271<\223\3368\037\233]\270\027\214;:\235\034\263\272\r\341\302\271i\010\267\271m\034\253:\305*\275\272\026\221\2729!\207|\2706o\232\271]c\355\271\337\272\001\272\361~s9\335w\024\271@f\3328\217l\3539\200\266\2278\315\204\013:Z\305b:\360/\302:-\330\3427\004\206\212:[\033\2519\230d\320\272c\2605\272\205i\t\272C\241\027:?g\3538~\224\261\272\212\300\235\272\266\373\207:\354Ag:rs19\317B\263\271)\366\2139.K\215\272Qp\036:\347\307\236:SL\224\271\253\177\210:\0209#:\341~i9\375\002\231:\204\341\3617\321\337W\272}\311\3438\224\026T\272l\327\030:D\2132\271x\276\002:\302\343\005\273\273\031W\271i\273\2666\276\035\311\271s\230\2579^\3174:\020FN:\234\304=7z\211l:\272\344\210\272\014n\236\270\210\270\217\272\"\3258:\262\333\0049\332UU\271n\372Z7\352\345\007\273\245Bq\271y\312\021\271\361=\202\264v\277\\\271\236\361\25599\300\2158\353*\216:\270U\007\272\020~\310\267\246>D\271\357\233\3309\201\263\335:9\204\0219n\220\233\270;^w8\037\305\3429\337D\210\271\263\206f\272\231R\3579\272n\2409U\013\020\271~A\234\267\231Y{9A\370$9t8\024:k$)\271\377\226\006\272(\312\3719\376Y\023\272\276ox:\2407H:\031\200P:\301t\2608|\256\2609!\002\325\272\260\200\3479t\225N:M\307\266:\245W)\2721\314<:\300sJ\272\331\02039\202\372\"9Z\320E:\305\2421\272\317>!:\304\376-\272\002\305\2049\021\205\250\272(;\364\271{\n\335\271\311\316\374\271\253#,\271\351j\361\271\244\372\325\271,\341F\270\356\234\3649\nG.\272\254o\3649)\276\206\272\033+\362\271\256\210\300:\221\345A9\271\306\264\270\327\270\3258\222\246\026\272\237\035\267\271\306\354i\2727\243*9\307\340\031:\302/\255\272\032\362H:\333_\030\272Cz\235\272\215\nn\270\016>\236\272\307^\2119\242\023\201\270\322\307y9\245\225\014\271\026\004{\272}\273\3169\216\000\2509i\344\263\271\331J\010\272!\264\':%\2311:\303.\255\271\214L\3538b\305\247\272\352\342\227:9\032\2677\tz\0019\221\221\215:\270\377\3149\275\333s\267l\322\357\271g\034\330\272\341S&\270\000\354u:\216\223%\271\342\000\031\272K\246\272\272\350\361\030:\037\350\205\271\367\177\350\2719 \2459cT\3129\265\02729\343tE:\222\300\253\271\026TB\271\246w\212\272\256\274\3769DLG\272\205y\313\271\353\345\243:\004\243\2279\274E\226:\t\212\020\272DE\3419\273\000!\265\333\270\223\271\255\241\261:\t)(9U\232e:\271\004\3569\232N6\272\001\352\024\2729w\376\2711F\230\271\341\212M\270\312s\3529\034\031x9F\031/:\316fU:g[\0379\343\221\2009\367\364H\272%\303M\272C>\3429X\261\3209\306\234<\271V=\3628JU\3629\267,\230\271\207h\261:\312\234\300:\217Vu\272\345\021\2338\340y>\272]\350\0268>\245\210:5\307\372\271m\275\2379\245\356\3338\0257u\272\270)\035\272S*\264:\243\262\227: h\2368g\200\2169\227/\2709\232\261\035:\354\013\217\272\204\"\225:\237t<:\3604\0019\032\003\2009\272R\265\272\270T\035\272\201\315\037::3N\272d\036\005\272\232\254)\271\206\320u\271$p\216\272\256un:\347\217Z9$T\3557\245\030\177\272\243\360\230\271\221\276\357:my\3578\317s\027\271[\217\021\272\324\206\000\270\311\006v9\340AU\272g\353\3108M\220\334\271\202\215\0239_0(\272c\364\005;\215)\3768\247R\202\272\305\221\177:\022\272$:5\352\242\270c.(\272?\t\013\270i\301`\271\275\247\003\272\262\302\\\271\223C=\272M\331W\270\322\306\035\272\024Z\216\271\212#m:\275\337@9\265\311\3448@h\3538\341\244\217\272Q\310\301\272kNM9\\P\3769\203~\251:\2326O\272\257\225\257\271\272\230\203\272\3648\0337B{\3339\230\020~\267\215\222\026\272\2671\206\271\261\2452\272o\262;:\347\313\204\271\344)&\271{\013\010:\246\355l\272\367\244\323:\253\314i\272\352\263\272\272\232<\2439\305\2479\270\205\005\0039\302TN\272\303M(\271m\240\310\271\010\357\306:z\377\3539\215\251\306:x)\013\272\370f+\272\314\363\272\271c\230*\272\351\234U8\014\337\373:\033&\317\271\273\316B\272\"\273\203\271\014\021\247\272,\336\241\271b\021\202\272_\247\3669^4+9\211@y9\002\263\016:b\250!:\221R6:\270\320\373\271\334\227\2569\267\3418:`\033\207:\236\033\017:\257\335Q9\373\371\262:\022\013\242\272\254\271E9f\200\210\271\354[\013\272fz\353\272\250\257+:F\235?\271\234\361;8\320\325N:\2313G\271t\366O:\032\224p:\210\276\000\272\235;\2479\303.\001\272\032\235d9\235\327[:\007b\255:\273\345\357:\020\305Q:\332/\031\272\217{2:\205\231r\271\327?\332\272\247\332\013\272\220\253M\272\327\222\330:\315\364P9\344\\\227\271\304\207\315\272Z\343\306\271G#\2129\007Tx:\347\220\005\272`\036\221:W\207Y:OC\3079\307\200\303\272ov+\272\022\000\235\271\276x\313\271\020\336F\272\351y\312\271\177\016\0248\250+\2039b\266\353\271lg\010:\241V{:\220nI:/B;\27221/9I\314\215\272-\035\003\272\250\010\2449O\3519:D\013\2249\353\367\331\271S\323a5Y\215\002\272\337\331E9\361\034\246\271\320H\234:\274\376\030:\337\002\274\272IZ~:/E\204\271\031\377d9\346\207\001\272\344A_:\336R\2729B\241+\272:q\246\272\0273\013:\365oZ\270\301s\"\271\367\236\2119\373\342Y:\343\026\202\271\234j\2379L}P9\r\206\177\271\347o\024:M\273\0239F\177Q\271\313\013\3107\235\003\221\271\307!\3079bR\035\272\344\3733:\3451\2609!\226d\272i\251\"\272\350\233.\272\334\005a9\t\263Q\271\327-#\272\033\024\2149\2479\357\271W\372\013: U:\271\274\000\321\271Z\177\277:\305}u7\002\216\2059A\271\331\271<k\010:\033\330\251: \20799C\ti:A\013\375\271\374z\302:\261n\231:v}\003\2726\245 :\300\230)\271\223\230U\272\004\354\367\270~\326/:\032\021\227\2723\027#:|BC\272\033\0272\272Op;8,\202\004:\342\310W\2722|B\271Q\232y:\340W\177\272\345\327\0058\315\277G\272u\325\026\272\323\261A\270\207\317j\271T\224\356\271\201.\2468\306\303\3249%\240\333\271\007\177\256\271W\003p\272\222\320\260\271\352+\233\272}\2461:O\335\3179\321\002Z9\320m\014\272b\22629\355c\":#\375b8C\031\231\271x\253\3069\232\000\232\271\"|\315\271r\212Q\271\361.\246\271X]?:\374\204f:\027k\233\271~\363o\272cG\':\366\\\t:\321\\\3378!\334\240\272\244c\204:\201\001c\272\214\323G:\274\026H:\311T\t9\2505]\272K\353\237:\330\025\356\270=\n\237\272#\255\3229\246\021\2168u=\270\271\266\247/:\007)=:\003U\375\271\356\262\0309\217\2056:\307i\017\272\275\031\330\271U\243\3359\375\225\02589\347|:tl\251:ySZ\271\335\255.:\307\301\2509!\321\006\272\277X\360\271\005\360\014:\233\345\270\270\322(\3739\316\203\3328\024\257\233\272\306WI\271\326\220i\272\006\367q\272\004\317\262\271\343d\'8`\310F9[\316\272\271B\375r:\266\357\210\272\004\227\207\272$\237A\272\306\311\272\271kN\243\272\030\256\212\271:$_\272\007\344\\\271s\371*:/\202@:\354\200\274:\035\024C\272U4q\272\026\226S9\033y\232\272\354c\020\272\377Al9\371\232\037\272\355\272\367\271\026-\267\271pTM8\177|\014\271y\344\205\272;\323\3148\257\001\2059\026*$\267\\Xm\271\236\224\0219i\211\005\272MDz9*\014\320:\354\035\"\271\210\257\2029\037\342\3279\3202\225:\266|\221:\301\016\3778\373\345?9\216\362\032\271\353\033%\272<{\221:g:k9\330\241\2469 \333\352\270^S\0339>\2308\272\365\307\3409\222\313\030\271\335~5:\311\371\233\272o\231u\272k\350<:\301F\2138\207\360\207\271\277\200\223\267m0\306\270\373`~\272?\277\2678\267\376\317\272y\r\3169_\203\271\271/]\2579xG$\2718\251\2239>\305\372\272\024\340\213:\256&\214\271\002\245\265:@\313\001:\3035;\272\271\245\0039\370-M:\210\362@:\317*\360\270\023\350\367\271\323\013\3069\010\211\r\272\234\306\235\271\333\027\243\272;7\004\271\247K\3519\340u\001\271\275\301?\272\225<\32780\311\233:\345_*9\257\215\225\271_\002\3349\221_+\272S\2367\272Z\250a9\360\222]:\366\372::-\356\3259\031\335Q\272\343\255G\272\370\222\235:\333\213\337\267ih):]\3604\272\335\345\025:\344\306\3569\235J\3719&\201\216:\267\234J\271\2268\230\270\206\244g\271\314\025h7M\237N\272\005\242P9\274\2345\271\001x\26278YJ:\311.\240:_\245 :tK\2559#|D\271\245n\242:\311f8:\305\272b\272\373\357\246:\223\343\013\271\316\222H\272\365\035\006\271\314\332!9\020L\t\272\362O\201\270a\346::\235\023S9\014O\007:\212\207\036\272x\353\261\272\021\t9\271\n;\231\271\374\255\205:\240\344\007\271\371\302(\272\327\352\037\272\343\313\363\271\350\331E:\372\375\307:\260\343\t: \325\263\271M\370\n9&\177_\272\013D\366\271\251\211,\272J\325[:,\2603\2706\362\021:`\261\340:\312\243\245\267\332\356\342:C\0325:~\230\245\271$\266f:\035\360\037:\205\325\2239r\247\2778\223e\210:I\211\276\2678\037u\272\251Y\230\272\\D\321\271\034j\211\272z\211\237:\032\337\256\270\223\202\2148\025<\256::TM\270\372\227>\272qO\272:p\'r9\265\347E:\264\316\230\272\355\340\302\272\026\033\360\2707\364`\270\306+&:\227\003~:\300\255\330:\242*\306\272v\217\271::m\341\271\"\037\321\27240\r:\354&C9\324\261\210:\232{\305\271\273\257\226\272\217y6:\353\274\342\272I\244d\272Ye\2429_k%\272\244\372\322\271\010\214b\272\005\341\217:;\340\016\272nf\2569\222\031*\272\307xx9m\313F9\006\217\001\272\315\035\265\272[\324\3339r\222K\267\324\343\260\272\344\266\240\272\235\205X:\321\025A\272o\234\355\271%\211\303\271\200\320\351:\317769\335\343\213:\374E\3669\360^U9\344\260\312\271\273\340\240:\304\200\025\271z\033\263:\315\372\200\272\366\356\375:\226\346\2719z{\032\272e9\215\272n\226\023:\337J\272\271\222\313J9\033\346\320\271\220\263(\270\210\227\3118\026>\3739\333\3245\272\033c\3329\274\302/:\241\251o:\330\312R\272h\013{9\230n\\\270\366)0:\004\211R\267\373\350e\272\342\\\226:\021Zx:\235\270\203\271\232\016\376\271\276\265L:\036\230\026:EP\030\272\374\027\257\271d\017x:A\246\217\271|\r\226\270_AB\272\363\300l8\321\246(8(5e\272\025\266l9d\311\004:\001:\2549qB\t\272\001\202\362\270\'<L\272\007 \020\272A\371\\\271\373\364\033\272\3134\3669\273\215\232:m\216\220\271\005\304b\2707|\010:\314\260$:#\367\'\272\241\024U9\311\254s8\344\252g9\362\316\026\271\211\321R8\252\325\032\272J\367\3269<\036X\272H%\3049l\020 \272A\224F\272]\017\0039\271Y\021:T.\215\272Q[\231\271\346\277\230:6\325\244\267\321\266\030\272\247\254-:\224qy:\244SY\270B\273z:\270\221\2219\331fS\272\244!\374\271\227\310\3666\000_d\271\000\'{\271\201?f\272\032\242\3779d\305\245\271\242\300,:\022\245\231\266\036>\214:\006j(:\335\240O:\372\254\034:\347/\210\271\301\313d\271ei\217:@*\002:\357\206w:\352\220\362\272\225\357\013\271^l\252:\212\314\270\271uB{\272C\\\001\267u\340\2239`ST:\341\023\2549\251\220\3119\320\242\230\266h\234\3619\312f%\273_t[\272#Rg9\305L\0319\222\313\3709\334K9\272x\200\204\270\021\234\220\272\245w\22198\306\2768\245We7/\334\302:@\306\235\272\261OD8\361\266w\272Q\317\034\272\027\237\274\272~\312c\272\324\313*\272\377\245N:\255\236\276\271r\233\231:\257\304\013:\027\035~9A}\325\271#\340`:\331N\211:\243zX\272\003F\3769|V\022\271jl\312:\237J\3258\t\3579\272\222\355\246\2720\273w\272=,\2149\306\244\\\272YMT9o\3426:\353\3320\272\003AI:\241\010\024\271\315-\t9\314\002\3236=\347\r:p\004\"\272\017\242\000:\2108\305\272\240}\221\271\373\037K:\300M\230\271.\276\037:\334\344\234\272D\023\263\271\261u\010;\370b\"\272\314\366\345\271\216/\3679\374\033f\272-\266\3449\213\223%\267\215\346\3438\223\233\341\272kA\0219\210\366z\267sv\001\272d2\232\271)s\004:\346E(:\260\3235:\361\337\30390\223\353\271\264\312$\272\014\2411\272\010B\2729\245q\005:\210u\3428\317\271\221\271#%\007:\231t$\272\2350\2759MH\2509\326q~\271:P\332\272\325\312S5\2231\220\272J\301\005:\347\022\2559\332\225\200\271D\257\313\272(Sf\272\263\254\007;(\231[\272\310\373\026:\rR\034:\034\177\3478c\302\203\271\273x\034:\232\000\227\272\355D~\270\200Z\0077\336\243\220: \"N\272\272\357.9\366\352\330\271\337\2527\271)\t<:\374#N:\373\033\034\271\206\212\306\270J\314V\272\301\324E\271\241\374O:\273\270s\271Y7\352\271\332\030\311\271\212S\007\272\243\363\"\270\n\341!\271\212O,92\030\225\271\372\206\275\271\022\254\224\267\333\226\267:\034\244\024:&\032\376:D\361:\271\371\377\337\271\327\007\237:\356\020\251\272\020\367!\272\247\035?:YD}:\276w\335\266\250\351\211\272C\252x:3\377\277\270\026\350\234:\036\375\0328\034;\2728\350\310\247\271\377i0:\353\227\357\271\362\325x9\002+\375\271\222\226\304\271\263\266K:\240l\2009\221\374\362\272\305\2201\272\235_\2169y\226\2449\264G\207\272\263F\311\271\r\364Y9\\\245:\267\241d;:^\352\3159\271\222\177\270\377\306\020\272z\375\t8r\020\344:\312jQ:\356B\2149\213v&\272\332\203\3439\247\322\2059\003\3736\271\315\232\227\272\372\337\007\272o\317(:\220\345K\271\332t\231:Xg\2319&\231\001:\267\373\2709\25542:\275t\027\271\376\273t\272.\003\3238\\t\275\272\360~P:\003g\022\273\\\334\2438\014p\3069\316F\243\272\013\036\274\272^ca:a\372h\272\312s\2638\366Dg:\267\351I8\007\264\2169c\211=9\204\177\036:\226\233n:\340^\255\272h|J\272@\234\243\271\025\352{\272Wu\2729\344\277n\272Z=\030:\343\212\017\272\373v\200\271\030K\017\271y\356m\272\277\237X\270x\031V9\241\356\234\2716\365\353\270\356\316%\272kC\364\271vm5:Qs%\271\371\277\2609T`r:\322\303G:\263I\2436\303\007\3309\343\267\030\272Y\350\205\272\261\200`9zA3:\201\261J:}\265\215\271\320\351\2279S\002\3207\246t\004\272jJ\2368TE\r9\213\276\2229\273\210\2559\346+\017:f\243\002:Go\0238.u\033:\037\021n\272\010\036\206\271\371\237\375\271\206\333\2478\204\272t\271\257\033\2039\212\346\3679\265X\23097\342L\272\241Q\2578\014\274\236\272Z:\002;\337\357\315\271&f\004\272\374\336\255\271\323\327@\270\276\340$\271\346\023\3539S\204\357\267\336w\361\271\277\245\033:\234Y\377\271\221\004\200\272\312\313[:h\201\275\271_\340\206:Y\3509\270f|\005\272\272\310\333\271\004x\2769K\202\031\2709\006\260\271\'Xi\272~\223\353\272.\017.9\307.\312\271\346#\350\272\344\236\030:\360sE:\253]c9~\032\225\272\275 \3119\264\337\007:\273\001g:^/M\272qlr:Pa-\2738\211g\271\324\266\261\272\354\250h7\026\267`\271K\226\266\271I\372\220:\027+#\271\260\332t:\010\t*\272S\014(\272\245\202\3079\324l\253\272\242\316R\271\256\302\223:\222\014\250:\332\231h\271\364I\206:@s\253\272\320\373\025:\207\324?:\343\226\220:\023\246N\271W\302*9\365g,:\316o\3049>d\210\272j\353n:\241Y\005\272hR\230:\300Q\277\271G\346\2578q\251f:01\207:@^d\272v\316\177:\037\010\366\271\311%\222:6\344U\272\264\325\r\272L\255\021\272\375\217\034\272\353\24068\331X?7msm:v\360\003\272\323\220\2479\306\316\003:\030?V\272R\336\225\272*wd:\260\000\336\271\221\357\205:\271\204\354\271\310\236m\270\2766\036:\360\220\255\271\032s\3779b(\333:\211\004\3569)\000\2239\020v\3569\367\306\0058\365\372\257:\035\355\3469+2\2639\343\325\006\272\331\267\354\271I\034\3449/:\2757u#p\272\262:\3639\227G\361\271l\013;9\323\032I\272\037\341\266\271,y5\271\013\366\350\2704>o\271/\275\2219\215\270m9\307\363\315\272\245d\2579\331\272\007\271s-q\270\316\177i\271\r\321\361\270n\021\037\272l\211w:\273\264\371\271+\334=\271\310\271\303\272i\227\346\271\221&\227\272U\2762:!\244\2569,F\260:\337\006\250\271\010D\226:\244\244\014\271\227\222\036\272\347\\4:\200\030\322\270\024\220^\272\252\016\206\271^LA:\270\365\2119\202\n$:\365p\000\272\357\036p\272\300.\\9*\314\27197\326A:\325\327q:\037\266\3009j \210\272\226\032\3039#\357\3419\307\256\2169\365<$\272\020k\2377o\315\3309\242t\206:\017\362\317\271\337\345\2739\210\207\036\272\225\274\2728\353^\2519}\026i:*\023<:9\313\"9\024\213\245\271\327|\256\272p\225\2259\301\375\005\270qf :\261d\227\2674\033\3379\356]M\272\220\223}\272)\\6\272wu\204:~\270\201\271\211>+\272\204\255\03796\032l\2719\3510:)\224p9Ni\236\272\007\262\362\272l\247\3419PM\244:0+b\272Y\002f\272\3211}\272\223\345\3578R\316\310\271:\317\224\271\232I\n:b4m9\306\n\026\272g\035N9\371\362\024\272\215\r\0268\375\005g:\214\261?:\230%\3079.\257\\:P\304`\272\206\311\2549\322\004\016:\023\024\306\271\312\350\224\272=Mi\272<\021\3457\274\301B:4\220b:k~\2528v\210P:z\2439\272\341y\315\272x\314\017\273\332%\2737\212\251\2757\230\\\365\271+,\017\271\372$\n:{\333\3459\003uf\272\334\037\261:\261R\223:\033\356\246\272ms\302\271\252\226)\272_g\034:\026(\235:\271\301\2749.\244\355\271\236\3313:\203\355\226\271\224v\3329\331\347?\272\203\256\247:\315\317\3108\265\314\3608\366\375x\272D3~:\351<\036:\316)\n\272\356\372\000\272\324\234\275\272\301\365k9;h\3659\261\037t\272\016\276\203\272\224C\007\272\231\014\006:\0373O9O\272\274\272\351\243\372\267E\207\3569I@\2229\265\021H:[\310V\270\212bF:/\210\002\272:\27629\334\005\332\272\372\260N\271pg\361\270q\253!\272\270Q\317\271\206,7:\035\212\226\271\223x\332\271\313\261\3349\231B\3619\276\003):\232\301\034\272`r\232:\236\313\017;\226X\21390\000>8\316^\261\271\322\"\3229\022\322\353\270)dg9\264I\214\272.\375x\271\226\3261\272\325\370\201\271\235\277\0368\231\027\360\271\253>\251:\211\324\034\272\257\233\344\272\354\250M:\314e\2449\021\3315:\335B\313\271\260\355\37094\302\001\272\360\004\3769\\\"\242\272\235(3\270\221K\3779\370\253\3318\333\347\2629\201\361?:\376r\235:M.\3579\000\376V\2725\256\024\272\350\367\267\270\306F2\2727\315\n:\317\235D\272\0259\257\272\345\362\220\272\3555\3669\312\017I\272&\020=:\224\270\3269\271\034\3139\251\033\240\272\3046_9\256O\3679B\033\257\271\323\377\345\271?x\217\270\\6\277\271\264t\025\271\335\364N\271\252di9\263\035\177\2724\313\3359BZC\272\226\332\212\272\241\347\266\272.\237\211\271\332Z\0358In\207\271\353\347\3228\027\031\266\271\363\352_\272S\255\3739\030\tb\272E\357\353:\25625\272\010u\242\272\253%\247:\356\311\3409\300~\3109\251\243[\272\020#\022:\263\215\2378G\245A\272C\004\270\270\000\354T:\310\026\005\272\271FS8\355\261\037:\337\315R:\025\321\027\271\265\333*9\003\036\031\272\000\177\0356Q\262&\273\242G&\272\035IG\271\221\260\3179\210<\n:\301\312\255\267_B*\271\322\333\3529\276\367U\272\001\355#:G\026\347\271\004\302\242\271\230ln9\272\233\246\272Q\233\204\272\353\332\030\272\340\226\204\271x\267\241\271\243s\036\272n\020\0029\365g\271\272%\236\237\271\316\346L:\311\006\017\272\325\303o\272H\330\014:\214\311[:\373n?8O\276\243\272\270\212\2259\372\241\347\272\201\245(\272QuT:\326\276\275\271\371\211Y\272y\005\2509\220tx:%\024\260\271\n\310\2008>\034\2109\342\254\3349b<i\272\013\207&\272I\002\2579\032\314M:|\351\306:\222R$\272\361XV\272\245\376\3538\377\207\2569\025\352h:\212\375\26692\036]9\002\037\3029}R\n\272\323\332\0357\334s\003\271,\254\025\272[\2406\272\r\214\222\272\331{_\272uX\3579!\026\211:\203\324&9{\341^\272\006\026\252\272<1\367\271i\352\022:7\275\017\272F7\005:\276\014\"\271kJ\006\272\216D\323\271\236\3018\271\343\215R9)\2511:\232\337\336:\206\004\3069\326#\2578\017\257\3009:\342x\272\317\307\232\271V\225H\272\214\251\216:l\345\261\270Z\310\206\272\001w\3239;\377c86.\007\272i\251\331\271G\367\214::\272|\271\027-\256:\254Mg\2729\305#\271\031\307\206\272\204i]:G\214\277:\215:\3619\355A\217\271?\177\206\272\021:\333\272\244\350\212\271\005\354&\272\227\207\267\271\303\263\314\271\312o\301\272\303\211\250\271\325\313\207\2729\336V\271PR~\272XX\322:V\"\201\271\220\342\3379Z\263\2618v\337\236\272\227=\013\272o\177\3009\256\007j:\336\267\206:V\2564:\007\305+\271r\322\005:\241/\253:F\305\006:\245T\3229\274n\3178R\323\223:b\367\261\272[\236R\272#y\214:uY\205:\367\300\013\272\273W\341\271\326/I:\2168\333\270\317\235\036\272\220\034\035:+`\025:H\356\301\270\336\311\3177\013\236^:E\347\033\272\311\205U\272\250.\027\273\374\206\024\272}(\036\272d\333\345\270\377H\3449!\001\316\270\256{\265\270\177@.\271\300\217:\272j\302K\272\245\226\266\271&}o8\257@D:\344\013{\272/\215\317\271\344\3624\272\203\001\013\271\026U\023:g\340J:\375\314\346:\215\353p:\001\006\2579h\030\3159\257\205F:{\324=:\366\252\213:N1\326\267\017\347\336\2725R\251:1\265\3049\204u\222:<\331h:\344\252t92=%\271\202\242\302\272#nv81\235\00494P\032:x\000\200\272\275[U\270vp5\271\354\274\232\2715\203\3079u\177\223\272\312\"\034\2724\r\3059c\222\253:\367YO\272\2417\037:\3531\2249\214\262\363\271\255\251\024:|8\3658\0206\365\272%Q\01789\n\205\272\331\345\317:8qk::\376\200\272\224w\'7\346w\212\271\265\206\031\271\252\354\247\272\031\262\220:Jf\001:.\364\336\271\276\357\013\272K\232\2619\024 \002;\246[=\272.=\3279\270\372M\272X-8\272o\241\2208K%G\272Q\352w9\222\225\314\270\0222X:\3243\236:<i#:\321\232\245:Ga\224:\241\321\247\270\311\352\275:\372\230\277:\007U\221\2715\201\023\272V\025\341\271\004\243\033:/m\17797\016\224\272W\230n8\371\347\322:H6\035\272\243\2655:Ax?:\244\266{9B\376O\271G\033\330\270\026C\0068nV7:h\206\267\272\345\240\3379\232\025\2649\216\026\2119\221\274\n\271\016\370!9o\360\2369\350\326\3109\352;d\271\233M\322\271\227\212\3169p*\021:K{7\272\373\206=:\202\233&\272\264K\016\271H\357\016:p\306j\272&\020\3238}2\313\271iw\2669\330Z\300\272`\360\316\271@\375\223\2724\035\2739\000\276\261\271\262\326\203:7\021g\271\364!A\271\314\000\251:A\263\027:M\017\334\271SC\212\272r6\235\272\253!\223:\002F6\272d|D\272\367\300\2208OO\370\27285q\272\234\300\013:\026\311\222\271xfL\271\217`\200:%\016\273:\337\032D:w=\2269T\200\254:\007\021\2018\251\217\246: \223\2779\202\177\n\271\016\"\274\271\341Q(:\377\375\030\272!P\222\2729\034\037\272}\242\231\271U\245|\272\201\225\021:&\327N\270\225\322$:\316k\0359;\203\036:\212U\317\271\222\342\r\272 A\31395\205\200\271\260]j:t=\222\270\277\351_:\260\'\203\272\037\302U7\365\302\265:\337Ol\272MFV9\'\255\243\272\250\373\240:\313Y&:\344\332f9\336\006H:\0102v\272J4\2358\274\250\273\271\221\276g9a\202\3369v\330\025:{\006\203\272\311\254V\271\215P/:\211\205\2319L\256M:g\013)\272\375\035\250:s\223E:\t\341\'\272A\250\321\271\371q \272\220r[\272\223\256\351\271(b\232\270 _\276\271S!Q\272\315\006\036\271\370M\2218\006\254\277:\020\275\245\266\350\330\301\271\250w\241\272\327O \272\301\370\035:K-5:\355i\200\272\t\'\"\272\267\200\204\272\311WY:n\300\211\272G\035\3229BD&\272\307_R:\312\305y9#\231\244\272K\252\200:I\024\3748v\354\002\272\241:\204:;2\340\270~{\272\272\254{\224:v\230\013:\223\200e:\005\332\230\272\325\315V:X\277\002\273*\030\2669]J\'9AG\020\272\332\201s:\027\245\2136N2+\271M\347\024:\304\232\222:h\351\2219\307\377\214\271>W*\271<\017 \272\255\344::\351\371\232\272\3223X9B\367J\272\2105\325\271\021\002\201\271Sy`\272yG_\272\251?\255:\312t~:\257_\010\272\006D\006\272\001-i9\226\263\336\271\020\021\2229\377\211\005:\212\346\211\271\266\\;:XZ{:\022\256U\272t\356\007\271M\246\212\272\254J\023:\277d#8\271g\370\270?\205\2569\3016N\272\2255,9Q<\n:\177\271\200\271s\3765\272\237-::\261\206>:\016\262b\272P\300\3748\346\201\021:\267<\2039A\230(\271\242\275\3149#\377 9us\3629oj\000:\356A\025\272\356E\2048WE\221\267e\320B\271 \313\2677,\'\216\272\246.\003\272\206Bn\267\365C3:\024s\'9\275\360>\270\002\n\253\271S\250\337\271\032%\2059\221\255c\271W\330(\272\373W,\272\263\346\3058\332\364B\272\001\320\3179\326\300E\272\325\24359W.\021\271\270\250\310\270o\247W\272\215\345\202:\300U\'\272\245\326O\271\244\361C:\344 \\84V\022:l\323\236::\377\362977\2239y\316U\271\363\311V\272Ac\2319\326\026\264\267Pdf\271\321\233\036:y\214/\272\243\331\3109\036\237\216\272\232\036\023:C:h\271\234Z\316\270\237UL:\224\247):\254\nJ:]:F\272b\2609:\367\325\214:x\332\246:9\236u9\232\256\2337\035\363\247:\022]F9*\231A:\375\336\3538\014i\025:\340\201\0329\356\231z\271\266%\020\272_\262x:\333r\2768\332(\17783\010\016:m\376#\272T\005q\272\220$\367\271\366\223\337\272\340S\305\266\243]\3409\371f\2619-\352\247\271uDP\272DA;9\245\324\3059\332\227i9.}m\271\216\324\262:\351\332\004\272\316\004$\272\224\213U:\231>\273\271YQ\020:\243\243k:\325A\276:\256\006\3179\312\336\230:`\021\024\272\304\215\300\2722\334\342\271\350\327\020\270fD\231:\240\345\025\270\255\327\330\271\365^f:\246\362\2759\200\331\274\271\331\372\2459\253\3761\272\255\321q\272\033\262\2019\235v\3149\365\376\177:\357\025\0259\261:\316\271\352\3371\271\352w\314\271x.\316:e\376s\272\266;\2566\336\223\205\270E$\':a\272\r:\034G\255\272\n\201\3709TH\035\271|`{7{\376\002\272\255\270\3308=!\006;\254\253\270\2714\2444\272<\253}:+\320\2649\276(\301\271\3556\001\271\017 c\272#\246\2248\311\r\n\272C+\3209\363\361\246\272@\235\356\271\206\365\3079\205\274\337\270\267\274\200\271\301\234]\272\026\314U9\366\022 :{\033\003\272\26686\267\264\357\2449$\233\202:\007\2663:\200\340\026\271V\263\2129bAw9\350o\206:\205R_\272G\272\310\270\n\254\2439zq\260\272\372\272\255\272\353&\0207\274\r\t9\254.\266\271\017m\3177L\376L\272\030\263\002\272\035H\271\271\037`\3558Z*\0016\024\177\2218\016!\2229\345%\256:O\256\025\272::\027:\333\372q:\347\314\22195V\000\271x\007<9r\330\010:\235\222\3469\034d\227\271\237\300\306\271\255l^\270\244\2776\272\312\235\251\272\263\2558:U\252\207\272\347\007,:\271:Q\271\313\336\3349?\333\207\272\362C\370\272`v\2536\212\"\200\271\337\270\371\270\252J\2039U\342,9\222\307#\272\244\217\2319\247\202\274:\201./9R\216\223\271\327\t\3028\'\346\3228\332b\225\271\037\036$9\354\340\0358t\010\3719\225\272\250\272\002\365\3759\016\377\210\272\342I\310:=M\3419\027=\3369$C\014:5}\225:z\377\304\267\351\016\t:\037\232R\272F\2162;2\224,:\357\335\036\2710\017x:\213PL\271\226\333\237:\375\004\002\272K\242\212\272\263\213b9\245\2723\272\255`\2159\253xP:\213\r\014\271\333\377\3039\220M\005:}X=9\302\215\20294:\372\266=\022\203:iU(:\271\361\3106\235@s9wW]\271\375\'M\272w\217\2028\013\351\310\271\233D}\272K\224\213\271|\315\227:\221N\241:\372\356\201\272\273\0214\272\014Q=:\207>\034\272\2702\262\272p \202\271\303\246w7(\023H:\347\246%\271\261\010\206\270\244\217V9\231\326\212\272\263\357\3338\302\'\001:\\\344\0239Q\177m:\305\370\216\272\353e\027;MH*\271h\2326:B\363!9\311\344\320\270\353\326\025\272\304\032\307\271 \256l:\361\242\2727_\217a9\357\312M9\026\376\010:\362\203s\272p\357\216:L;j9\n!c9\002\347)\272\275\341\246\271\267p?:\232uI\272\035\037\242:Gqu:\032\251\0279@7\026\272\324\271\2009\336:\354\2711\337\275\271\314\232j:\300[\273\271\t\"=\271]\304\3559 \204y\272\201g\2348@\351\300\271\356\364\267:\201!\006\272%\363D\272\373)l\271\327\004\202\271\223\212\334\272\rU\2219\207\246)\272\225\223n74Vs\271\337n[:\270\254\203\271\203^\n\272\177\213\2466\321\272f\272\017\214\2468\213\\i\270+z\2769)\222\3179\364\250\24297\365\224\271~+\0349\360#\003\273*\352L:6\252\276\271\364&\224:\035X\3469\231\232a\272T/\351\272"
      }
    }
  }
}
node {
  name: "local/rp_dense//w"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/rp_dense//w/Assign"
  op: "Assign"
  input: "local/rp_dense//w"
  input: "local/rp_dense//w/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/rp_dense//w/read"
  op: "Identity"
  input: "local/rp_dense//w"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "local/rp_dense//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/rp_dense//b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/rp_dense//b/Assign"
  op: "Assign"
  input: "local/rp_dense//b"
  input: "local/rp_dense//b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/rp_dense//b/read"
  op: "Identity"
  input: "local/rp_dense//b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_5"
  op: "MatMul"
  input: "local/Reshape_11"
  input: "local/rp_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_6"
  op: "Add"
  input: "local/MatMul_5"
  input: "local/rp_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "local/Elu_13"
  op: "Elu"
  input: "local/add_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "local/rp_classifier//w/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\022\210\3209\275\270\275:\005\375\365:\273\205\2639\036(\225:\037e\222:\263\304\352:\333;\024:R\304\2759G\300\017\272\026tz:UR\235:\220G\203:i\361\020\2721\335\035:I\331\2739 \331\3769\237+w:\225\354X\272\315\374\362\271\270.\2179O 7\271Tr\3208\215g\2009\274\227\":\314[):\273\313\253\272j\004\016\271\262\023\217\271]\207\210:\023\010V\271\203\253\0349b\313\001\272\2132\345:\n:\256\272\327Kw9\367\304\322\271\351l\005:\034\355\204\272v\3222\272|\322\203:\355I\020\273t\0258\271\267o{8\376\245\337\271\002\345\205\271\210\357\223\271\013l\000:\273\000A\272\207\213\204\270\'<\315\272>\231f\272\260\313@:\233\236\251:Qq\350:5\264\221:n\031\265:d{\':\311\205):\017\224\3258\031\205\236\270\365\361Y8\226\005\336:0W[:%\356}\271\351\000k\272l\235G\272\025\246V9\007&*:\361\203g8u\031J\272\031\262\243:\257\'\374\271\315\032}\272\261\264\005:\270f\022\272\201\236r:/\201\260\271x\021\3579^\032\240:\020;+\272\254\322)\272\251tT\272\337\211\2149\240\337\367\267t\234!:\037\'(\272\264\224\0359@\232v\270\020\256}:qE\n:\265\032\252\272n\256\202\272\032\365\300\272\242\315\3159|\342\'\273\254\024\2018\263,\265\2714\260\3249\226\327\332:g\031(:\006\336\004\272\255\251\2139\223\033\222\272\334r\3449\005B\034\272\036\035[8\330k\203\272bD\031:(KS\271\377R\326\270>\306\315:?,\343\272L\004\236\271\020O\227\272;\234\2079\022\233\330:;:\3549\304\230w\272%=U\272(\003\006\273\247\371\255:\023b[:^\337e9\377\366\265\272\363\373V\272\252<\3439rz\017\271\265X\342\271\327qB:\363\330\2779K\311U\272R\253\\:\361\212\237:\337T=\272\251c\2009=3\202:>U\335\272\333\216+9\300U\357\271\2645\360\271\361\340P:\343\272\033\273\362\315\345\272j\222\275:GMN:\317\254/9\274mN\272\202\211\204:!\n3\272\237\001\230\271\373\360C\272\310\212\320:\263u8\272\344\201 \272\256\003\231\272\330\202\266:\001\207\3648l\364k\271\321#\25097\334[\271P^\255\267t#\214\2727\335\0279\323\207\2579+Yx:\014\276.\272\274\224\243:\342\257\373\272{\332\304:\'\301\324\271\270\237\213\272c\025\003\266Lg}:\234\177\230\271\317&\365\271\002\002\3319\t\000\037\272\255\366j\272uCa:\'\034P:K?G\272\017\272g:[>\2569\353\363\t9\332\227H\272O_\"\272\353\3237:\304\021F\272\242\014.:\205\227f\272\235\326\374:\217v\024\270\330\236\0329\n\243q:\207<\314\272\t\007}9\374\007\"\272\357{~:<+p8@\331=\272\256\334\013\272VB\035:\274\26579\305\006\3258\035\265T9U*\032:\356;\324:\261l5\271 7\2169\275Z\001\272\016?];g\231\016\273e\244k\271\026\266\035\271Q\033\230:\352\352\002\272\020\366\261\271;*q:\276#!:ZWa\272\266s79\206\360H\272\251^\253:\241\275\343\272\r\240\013:U \221\271AR\t\272C\205\3158M-\2079\304.P\271\3301\217:\301\361T\271\005d\r8q\3067\272\014G\221:\355\351\002\2719\214x\272\241uF\271\033[\2429\017\315)\272d\335}9\312\002R\271\315\'Y\272\256o\036\272k\361S71\220\2759\316\230\254\272\225\024M\272\323\325\223\271\323\005`:\224{@9`N\001\273\204\200\217\271hQq\271\022\234\2139\223\030\306\272\372\344\0317p\233c:\243\237\213\272\202o\n\272\356\342\277:\010\376\3429\337\322\263\271\347:\":\020\253.\272\230,\336\272NOI\271\036\221.\271\270\225\205\271\347\021z\272\324ke\271\026:p\271\017\240\244\272\223\305\3719\324\202\3228\337\002\330\271]\254\027\272\305B\010\266\273\312~:\230\007s9\3555\241\271\211n\035\272]\274\223\272\231R\3169\252\177\"90\021\266\272C\032\231\271V\211M6\250\253\245:\221A-8s\342\251:(\346]9s\342Q\272;\374\3229G\341L:\343\007\376\270\357\357\034\272\357k\370\272\032\357\3569\216,\2738\031\223\2429I\027X\271\374f\330\271\356G\\\272\327\367\267\271\017\022\3169\024J::\274\271\2518\255\375\3019\244\000\230:\032`\336\270:\300q9\030&\250:\277\310\004\272P\000\215\271[\027\276\2679U\2429\213C\367\270\302]\3409\226\220\216:|\223\375\270P\272\002\272\3347H9\270D0\272\350r\3618\026\377\207\272\361\314\"\272H\275\0368\256\264-8w\023\307:\177\364`\272\227\n\025\270\014\035\t9hW2\272fY\267:\364w\276\271\274a\230:-cm\2725/\305\272K<G:g\273Y\271x\267\267:$\0038\272 \311\2229\227\265U:\364\313\005;\232<\207\272,L\350\272\020M\2718\001P\014\272\033\376\217\2719\326P:f\370\3329\275y3\271\336\274\227\271\021K\006: \213d\272FO\321\267\024H\t\271a\245\300:.\224\313\272\006\356\306:k\360\235\272-\351g\271\342j\2179\224:\037\273\333}\300:;?\021:N\016\0249\251\207\250:u\377\3718\305\265\223:\022s\225\272\326\237\324\267\351m\213:\367j9\272\243)\355:\367\211\246:ux\316\271\275\367\3448\372\013\033\272\316t\243:\207l\300:"
      }
    }
  }
}
node {
  name: "local/rp_classifier//w"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/rp_classifier//w/Assign"
  op: "Assign"
  input: "local/rp_classifier//w"
  input: "local/rp_classifier//w/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/rp_classifier//w/read"
  op: "Identity"
  input: "local/rp_classifier//w"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/rp_classifier//b/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "local/rp_classifier//b"
  op: "VariableV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "local/rp_classifier//b/Assign"
  op: "Assign"
  input: "local/rp_classifier//b"
  input: "local/rp_classifier//b/Initializer/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "local/rp_classifier//b/read"
  op: "Identity"
  input: "local/rp_classifier//b"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/MatMul_6"
  op: "MatMul"
  input: "local/Elu_13"
  input: "local/rp_classifier//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "local/add_7"
  op: "Add"
  input: "local/MatMul_6"
  input: "local/rp_classifier//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "local/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "local/train_phase_flag_pl"
  op: "PlaceholderWithDefault"
  input: "local/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "global/global_step/read"
  input: "add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/learning_rate"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.00010000000000000009
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast"
  op: "Cast"
  input: "add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_1/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100000000
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_1"
  op: "Cast"
  input: "PolynomialDecay/Cast_1/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_2/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_2"
  op: "Cast"
  input: "PolynomialDecay/Cast_2/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_3/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PolynomialDecay/Cast_3"
  op: "Cast"
  input: "PolynomialDecay/Cast_3/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Minimum"
  op: "Minimum"
  input: "PolynomialDecay/Cast"
  input: "PolynomialDecay/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/div"
  op: "RealDiv"
  input: "PolynomialDecay/Minimum"
  input: "PolynomialDecay/Cast_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/sub"
  op: "Sub"
  input: "PolynomialDecay/learning_rate"
  input: "PolynomialDecay/Cast_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/sub_1/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "PolynomialDecay/sub_1"
  op: "Sub"
  input: "PolynomialDecay/sub_1/x"
  input: "PolynomialDecay/div"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Pow"
  op: "Pow"
  input: "PolynomialDecay/sub_1"
  input: "PolynomialDecay/Cast_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay/Mul"
  op: "Mul"
  input: "PolynomialDecay/sub"
  input: "PolynomialDecay/Pow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "PolynomialDecay"
  op: "Add"
  input: "PolynomialDecay/Mul"
  input: "PolynomialDecay/Cast_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.1
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "PolynomialDecay"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.00010000000000000009
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "mul"
  input: "truediv/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy_action_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "on_policy_advantage_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "on_policy_return_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "on_policy/aac/Shape"
  op: "Shape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/Rank_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "on_policy/aac/Shape_1"
  op: "Shape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/Sub/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Sub"
  op: "Sub"
  input: "on_policy/aac/Rank_1"
  input: "on_policy/aac/Sub/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice/begin"
  op: "Pack"
  input: "on_policy/aac/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "on_policy/aac/Slice/size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice"
  op: "Slice"
  input: "on_policy/aac/Shape_1"
  input: "on_policy/aac/Slice/begin"
  input: "on_policy/aac/Slice/size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/concat/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "on_policy/aac/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/concat"
  op: "ConcatV2"
  input: "on_policy/aac/concat/values_0"
  input: "on_policy/aac/Slice"
  input: "on_policy/aac/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Reshape"
  op: "Reshape"
  input: "local/add"
  input: "on_policy/aac/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Rank_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "on_policy/aac/Shape_2"
  op: "Shape"
  input: "on_policy_action_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/Sub_1/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Sub_1"
  op: "Sub"
  input: "on_policy/aac/Rank_2"
  input: "on_policy/aac/Sub_1/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice_1/begin"
  op: "Pack"
  input: "on_policy/aac/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "on_policy/aac/Slice_1/size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice_1"
  op: "Slice"
  input: "on_policy/aac/Shape_2"
  input: "on_policy/aac/Slice_1/begin"
  input: "on_policy/aac/Slice_1/size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/concat_1/values_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "on_policy/aac/concat_1/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/concat_1"
  op: "ConcatV2"
  input: "on_policy/aac/concat_1/values_0"
  input: "on_policy/aac/Slice_1"
  input: "on_policy/aac/concat_1/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Reshape_1"
  op: "Reshape"
  input: "on_policy_action_pl"
  input: "on_policy/aac/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/SoftmaxCrossEntropyWithLogits"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "on_policy/aac/Reshape"
  input: "on_policy/aac/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Sub_2/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Sub_2"
  op: "Sub"
  input: "on_policy/aac/Rank"
  input: "on_policy/aac/Sub_2/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice_2/begin"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/Slice_2/size"
  op: "Pack"
  input: "on_policy/aac/Sub_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "on_policy/aac/Slice_2"
  op: "Slice"
  input: "on_policy/aac/Shape"
  input: "on_policy/aac/Slice_2/begin"
  input: "on_policy/aac/Slice_2/size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Reshape_2"
  op: "Reshape"
  input: "on_policy/aac/SoftmaxCrossEntropyWithLogits"
  input: "on_policy/aac/Slice_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mul"
  op: "Mul"
  input: "on_policy/aac/Reshape_2"
  input: "on_policy_advantage_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/Mean"
  op: "Mean"
  input: "on_policy/aac/mul"
  input: "on_policy/aac/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "local/Reshape_4"
  input: "on_policy_return_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "on_policy/aac/mean_squared_error/ToFloat_3/x"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Mul"
  op: "Mul"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  input: "on_policy/aac/mean_squared_error/ToFloat_3/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Const"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Sum"
  op: "Sum"
  input: "on_policy/aac/mean_squared_error/Mul"
  input: "on_policy/aac/mean_squared_error/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/Equal/y"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/Equal"
  op: "Equal"
  input: "on_policy/aac/mean_squared_error/ToFloat_3/x"
  input: "on_policy/aac/mean_squared_error/num_present/Equal/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/zeros_like"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/ones_like/Shape"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/ones_like/Const"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/ones_like"
  op: "Fill"
  input: "on_policy/aac/mean_squared_error/num_present/ones_like/Shape"
  input: "on_policy/aac/mean_squared_error/num_present/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/Select"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/num_present/Equal"
  input: "on_policy/aac/mean_squared_error/num_present/zeros_like"
  input: "on_policy/aac/mean_squared_error/num_present/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^on_policy/aac/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/broadcast_weights"
  op: "Mul"
  input: "on_policy/aac/mean_squared_error/num_present/Select"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present/Const"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/num_present"
  op: "Sum"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights"
  input: "on_policy/aac/mean_squared_error/num_present/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Const_1"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Sum_1"
  op: "Sum"
  input: "on_policy/aac/mean_squared_error/Sum"
  input: "on_policy/aac/mean_squared_error/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Greater/y"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Greater"
  op: "Greater"
  input: "on_policy/aac/mean_squared_error/num_present"
  input: "on_policy/aac/mean_squared_error/Greater/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Equal/y"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Equal"
  op: "Equal"
  input: "on_policy/aac/mean_squared_error/num_present"
  input: "on_policy/aac/mean_squared_error/Equal/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/ones_like/Shape"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/ones_like/Const"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/ones_like"
  op: "Fill"
  input: "on_policy/aac/mean_squared_error/ones_like/Shape"
  input: "on_policy/aac/mean_squared_error/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/Select"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Equal"
  input: "on_policy/aac/mean_squared_error/ones_like"
  input: "on_policy/aac/mean_squared_error/num_present"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/div"
  op: "RealDiv"
  input: "on_policy/aac/mean_squared_error/Sum_1"
  input: "on_policy/aac/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/zeros_like"
  op: "Const"
  input: "^on_policy/aac/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "on_policy/aac/mean_squared_error/value"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Greater"
  input: "on_policy/aac/mean_squared_error/div"
  input: "on_policy/aac/mean_squared_error/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mul_1/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "on_policy/aac/mul_1"
  op: "Mul"
  input: "on_policy/aac/mul_1/x"
  input: "on_policy/aac/mean_squared_error/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Max/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Max"
  op: "Max"
  input: "local/add"
  input: "on_policy/aac/Max/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "on_policy/aac/sub"
  op: "Sub"
  input: "local/add"
  input: "on_policy/aac/Max"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Exp"
  op: "Exp"
  input: "on_policy/aac/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Sum/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Sum"
  op: "Sum"
  input: "on_policy/aac/Exp"
  input: "on_policy/aac/Sum/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "on_policy/aac/truediv"
  op: "RealDiv"
  input: "on_policy/aac/Exp"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Log"
  op: "Log"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/sub_1"
  op: "Sub"
  input: "on_policy/aac/Log"
  input: "on_policy/aac/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mul_2"
  op: "Mul"
  input: "on_policy/aac/truediv"
  input: "on_policy/aac/sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/Sum_1/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "on_policy/aac/Sum_1"
  op: "Sum"
  input: "on_policy/aac/mul_2"
  input: "on_policy/aac/Sum_1/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "on_policy/aac/Mean_1"
  op: "Mean"
  input: "on_policy/aac/Sum_1"
  input: "on_policy/aac/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "on_policy/aac/add"
  op: "Add"
  input: "on_policy/aac/Mean"
  input: "on_policy/aac/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/mul_3/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.010317882522940636
      }
    }
  }
}
node {
  name: "on_policy/aac/mul_3"
  op: "Mul"
  input: "on_policy/aac/Mean_1"
  input: "on_policy/aac/mul_3/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/sub_2"
  op: "Sub"
  input: "on_policy/aac/add"
  input: "on_policy/aac/mul_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/policy_loss/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "on_policy/aac/policy_loss"
      }
    }
  }
}
node {
  name: "on_policy/aac/policy_loss"
  op: "ScalarSummary"
  input: "on_policy/aac/policy_loss/tags"
  input: "on_policy/aac/Mean"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/value_loss/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "on_policy/aac/value_loss"
      }
    }
  }
}
node {
  name: "on_policy/aac/value_loss"
  op: "ScalarSummary"
  input: "on_policy/aac/value_loss/tags"
  input: "on_policy/aac/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "on_policy/aac/entropy/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "on_policy/aac/entropy"
      }
    }
  }
}
node {
  name: "on_policy/aac/entropy"
  op: "ScalarSummary"
  input: "on_policy/aac/entropy/tags"
  input: "on_policy/aac/Mean_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy_action_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "off_policy_advantage_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "off_policy_return_pl"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "pc_action"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "pc_target"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Shape"
  op: "Shape"
  input: "pc_action"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice"
  op: "StridedSlice"
  input: "off_policy/pixel_control/Shape"
  input: "off_policy/pixel_control/strided_slice/stack"
  input: "off_policy/pixel_control/strided_slice/stack_1"
  input: "off_policy/pixel_control/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "off_policy/pixel_control/Reshape/shape/0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Reshape/shape/1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Reshape/shape/2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Reshape/shape"
  op: "Pack"
  input: "off_policy/pixel_control/Reshape/shape/0"
  input: "off_policy/pixel_control/Reshape/shape/1"
  input: "off_policy/pixel_control/Reshape/shape/2"
  input: "off_policy/pixel_control/strided_slice"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "off_policy/pixel_control/Reshape"
  op: "Reshape"
  input: "pc_action"
  input: "off_policy/pixel_control/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Mul"
  op: "Mul"
  input: "local/sub_2"
  input: "off_policy/pixel_control/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Sum/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Sum"
  op: "Sum"
  input: "off_policy/pixel_control/Mul"
  input: "off_policy/pixel_control/Sum/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "off_policy/pixel_control/Shape_1"
  op: "Shape"
  input: "pc_target"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/strided_slice_1"
  op: "StridedSlice"
  input: "off_policy/pixel_control/Shape_1"
  input: "off_policy/pixel_control/strided_slice_1/stack"
  input: "off_policy/pixel_control/strided_slice_1/stack_1"
  input: "off_policy/pixel_control/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "off_policy/pixel_control/sub"
  op: "Sub"
  input: "pc_target"
  input: "off_policy/pixel_control/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Square"
  op: "Square"
  input: "off_policy/pixel_control/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/Sum_1"
  op: "Sum"
  input: "off_policy/pixel_control/Square"
  input: "off_policy/pixel_control/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "off_policy/pixel_control/Cast"
  op: "Cast"
  input: "off_policy/pixel_control/strided_slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/truediv"
  op: "RealDiv"
  input: "off_policy/pixel_control/Sum_1"
  input: "off_policy/pixel_control/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/q_loss/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "off_policy/pixel_control/q_loss"
      }
    }
  }
}
node {
  name: "off_policy/pixel_control/q_loss"
  op: "ScalarSummary"
  input: "off_policy/pixel_control/q_loss/tags"
  input: "off_policy/pixel_control/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_1/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "mul_1/x"
  input: "off_policy/pixel_control/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "on_policy/aac/sub_2"
  input: "mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "vr_target"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "local/Reshape_9"
  input: "vr_target"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "off_policy/value_replay/mean_squared_error/ToFloat_3/x"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Mul"
  op: "Mul"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  input: "off_policy/value_replay/mean_squared_error/ToFloat_3/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Const"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Sum"
  op: "Sum"
  input: "off_policy/value_replay/mean_squared_error/Mul"
  input: "off_policy/value_replay/mean_squared_error/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/Equal/y"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/Equal"
  op: "Equal"
  input: "off_policy/value_replay/mean_squared_error/ToFloat_3/x"
  input: "off_policy/value_replay/mean_squared_error/num_present/Equal/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/zeros_like"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/ones_like/Shape"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/ones_like/Const"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/ones_like"
  op: "Fill"
  input: "off_policy/value_replay/mean_squared_error/num_present/ones_like/Shape"
  input: "off_policy/value_replay/mean_squared_error/num_present/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/Select"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/num_present/Equal"
  input: "off_policy/value_replay/mean_squared_error/num_present/zeros_like"
  input: "off_policy/value_replay/mean_squared_error/num_present/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  input: "^off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights"
  op: "Mul"
  input: "off_policy/value_replay/mean_squared_error/num_present/Select"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present/Const"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/num_present"
  op: "Sum"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights"
  input: "off_policy/value_replay/mean_squared_error/num_present/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Const_1"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Sum_1"
  op: "Sum"
  input: "off_policy/value_replay/mean_squared_error/Sum"
  input: "off_policy/value_replay/mean_squared_error/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Greater/y"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Greater"
  op: "Greater"
  input: "off_policy/value_replay/mean_squared_error/num_present"
  input: "off_policy/value_replay/mean_squared_error/Greater/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Equal/y"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Equal"
  op: "Equal"
  input: "off_policy/value_replay/mean_squared_error/num_present"
  input: "off_policy/value_replay/mean_squared_error/Equal/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/ones_like/Shape"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/ones_like/Const"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/ones_like"
  op: "Fill"
  input: "off_policy/value_replay/mean_squared_error/ones_like/Shape"
  input: "off_policy/value_replay/mean_squared_error/ones_like/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/Select"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Equal"
  input: "off_policy/value_replay/mean_squared_error/ones_like"
  input: "off_policy/value_replay/mean_squared_error/num_present"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/div"
  op: "RealDiv"
  input: "off_policy/value_replay/mean_squared_error/Sum_1"
  input: "off_policy/value_replay/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/zeros_like"
  op: "Const"
  input: "^off_policy/value_replay/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "off_policy/value_replay/mean_squared_error/value"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Greater"
  input: "off_policy/value_replay/mean_squared_error/div"
  input: "off_policy/value_replay/mean_squared_error/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "off_policy/value_replay/v_loss/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "off_policy/value_replay/v_loss"
      }
    }
  }
}
node {
  name: "off_policy/value_replay/v_loss"
  op: "ScalarSummary"
  input: "off_policy/value_replay/v_loss/tags"
  input: "off_policy/value_replay/mean_squared_error/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_2/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul_2/x"
  input: "off_policy/value_replay/mean_squared_error/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "add_1"
  input: "mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "local/lstm/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^local/lstm/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/Select_grad/Select/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "local/lstm_1/rnn/while/LoopCond"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^local/lstm_1/rnn/while/Identity"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_2_grad/Shape"
  input: "gradients/add_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/Fill"
  input: "gradients/add_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum"
  input: "gradients/add_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/Fill"
  input: "gradients/add_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum_1"
  input: "gradients/add_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_1_grad/Shape"
  input: "gradients/add_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/add_2_grad/Reshape"
  input: "gradients/add_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum"
  input: "gradients/add_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/add_2_grad/Reshape"
  input: "gradients/add_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum_1"
  input: "gradients/add_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_2_grad/Shape"
  input: "gradients/mul_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/add_2_grad/Reshape_1"
  input: "off_policy/value_replay/mean_squared_error/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/mul_2_grad/mul"
  input: "gradients/mul_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum"
  input: "gradients/mul_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/mul_1"
  op: "Mul"
  input: "mul_2/x"
  input: "gradients/add_2_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_2_grad/mul_1"
  input: "gradients/mul_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum_1"
  input: "gradients/mul_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/sub_2_grad/Shape"
  input: "gradients/on_policy/aac/sub_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/add_1_grad/Reshape"
  input: "gradients/on_policy/aac/sub_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_2_grad/Sum"
  input: "gradients/on_policy/aac/sub_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/add_1_grad/Reshape"
  input: "gradients/on_policy/aac/sub_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/on_policy/aac/sub_2_grad/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_2_grad/Neg"
  input: "gradients/on_policy/aac/sub_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_1_grad/Shape"
  input: "gradients/mul_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/add_1_grad/Reshape_1"
  input: "off_policy/pixel_control/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/mul_1_grad/mul"
  input: "gradients/mul_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum"
  input: "gradients/mul_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/mul_1"
  op: "Mul"
  input: "mul_1/x"
  input: "gradients/add_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_1_grad/mul_1"
  input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum_1"
  input: "gradients/mul_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/value_grad/zeros_like"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/value_grad/Select"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Greater"
  input: "gradients/mul_2_grad/Reshape_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/value_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/value_grad/Select_1"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Greater"
  input: "gradients/off_policy/value_replay/mean_squared_error/value_grad/zeros_like"
  input: "gradients/mul_2_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/add_grad/Shape"
  input: "gradients/on_policy/aac/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/sub_2_grad/Reshape"
  input: "gradients/on_policy/aac/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/add_grad/Sum"
  input: "gradients/on_policy/aac/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/sub_2_grad/Reshape"
  input: "gradients/on_policy/aac/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/add_grad/Sum_1"
  input: "gradients/on_policy/aac/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mul_3_grad/Shape"
  input: "gradients/on_policy/aac/mul_3_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/sub_2_grad/Reshape_1"
  input: "on_policy/aac/mul_3/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_3_grad/mul"
  input: "gradients/on_policy/aac/mul_3_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_3_grad/Sum"
  input: "gradients/on_policy/aac/mul_3_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/Mean_1"
  input: "gradients/on_policy/aac/sub_2_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_3_grad/mul_1"
  input: "gradients/on_policy/aac/mul_3_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_3_grad/Sum_1"
  input: "gradients/on_policy/aac/mul_3_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/pixel_control/truediv_grad/Shape"
  input: "gradients/off_policy/pixel_control/truediv_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/mul_1_grad/Reshape_1"
  input: "off_policy/pixel_control/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/truediv_grad/RealDiv"
  input: "gradients/off_policy/pixel_control/truediv_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/truediv_grad/Sum"
  input: "gradients/off_policy/pixel_control/truediv_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Neg"
  op: "Neg"
  input: "off_policy/pixel_control/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/off_policy/pixel_control/truediv_grad/Neg"
  input: "off_policy/pixel_control/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/off_policy/pixel_control/truediv_grad/RealDiv_1"
  input: "off_policy/pixel_control/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/mul"
  op: "Mul"
  input: "gradients/mul_1_grad/Reshape_1"
  input: "gradients/off_policy/pixel_control/truediv_grad/RealDiv_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/truediv_grad/mul"
  input: "gradients/off_policy/pixel_control/truediv_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/truediv_grad/Sum_1"
  input: "gradients/off_policy/pixel_control/truediv_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/off_policy/value_replay/mean_squared_error/value_grad/Select"
  input: "off_policy/value_replay/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Neg"
  op: "Neg"
  input: "off_policy/value_replay/mean_squared_error/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Neg"
  input: "off_policy/value_replay/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv_1"
  input: "off_policy/value_replay/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/value_grad/Select"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/RealDiv_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Sum_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/add_grad/Reshape"
  input: "gradients/on_policy/aac/Mean_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/Mean_grad/Reshape"
  input: "gradients/on_policy/aac/Mean_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Shape_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/on_policy/aac/Mean_grad/Shape_1"
  input: "gradients/on_policy/aac/Mean_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/on_policy/aac/Mean_grad/Shape_2"
  input: "gradients/on_policy/aac/Mean_grad/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/on_policy/aac/Mean_grad/Prod_1"
  input: "gradients/on_policy/aac/Mean_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/on_policy/aac/Mean_grad/Prod"
  input: "gradients/on_policy/aac/Mean_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/on_policy/aac/Mean_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/on_policy/aac/Mean_grad/Tile"
  input: "gradients/on_policy/aac/Mean_grad/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mul_1_grad/Shape"
  input: "gradients/on_policy/aac/mul_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/add_grad/Reshape_1"
  input: "on_policy/aac/mean_squared_error/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_1_grad/mul"
  input: "gradients/on_policy/aac/mul_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_1_grad/Sum"
  input: "gradients/on_policy/aac/mul_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/mul_1/x"
  input: "gradients/on_policy/aac/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_1_grad/mul_1"
  input: "gradients/on_policy/aac/mul_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_1_grad/Sum_1"
  input: "gradients/on_policy/aac/mul_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_3_grad/Reshape"
  input: "gradients/on_policy/aac/Mean_1_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/Mean_1_grad/Reshape"
  input: "gradients/on_policy/aac/Mean_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Shape_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/on_policy/aac/Mean_1_grad/Shape_1"
  input: "gradients/on_policy/aac/Mean_1_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/on_policy/aac/Mean_1_grad/Shape_2"
  input: "gradients/on_policy/aac/Mean_1_grad/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/on_policy/aac/Mean_1_grad/Prod_1"
  input: "gradients/on_policy/aac/Mean_1_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/on_policy/aac/Mean_1_grad/Prod"
  input: "gradients/on_policy/aac/Mean_1_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/on_policy/aac/Mean_1_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/on_policy/aac/Mean_1_grad/Tile"
  input: "gradients/on_policy/aac/Mean_1_grad/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_1_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/truediv_grad/Reshape"
  input: "gradients/off_policy/pixel_control/Sum_1_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_1_grad/Shape"
  op: "Shape"
  input: "off_policy/pixel_control/Square"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/off_policy/pixel_control/Sum_1_grad/Reshape"
  input: "gradients/off_policy/pixel_control/Sum_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Tile/multiples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Tile/multiples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/zeros_like"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/Select"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Equal"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Reshape_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/Select_1"
  op: "Select"
  input: "off_policy/value_replay/mean_squared_error/Equal"
  input: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/zeros_like"
  input: "gradients/off_policy/value_replay/mean_squared_error/div_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/Reshape_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Shape_1"
  op: "Shape"
  input: "on_policy_advantage_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mul_grad/Shape"
  input: "gradients/on_policy/aac/mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/Mean_grad/truediv"
  input: "on_policy_advantage_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_grad/mul"
  input: "gradients/on_policy/aac/mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_grad/Sum"
  input: "gradients/on_policy/aac/mul_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/Reshape_2"
  input: "gradients/on_policy/aac/Mean_grad/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_grad/mul_1"
  input: "gradients/on_policy/aac/mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_grad/Sum_1"
  input: "gradients/on_policy/aac/mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/value_grad/zeros_like"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/value_grad/Select"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Greater"
  input: "gradients/on_policy/aac/mul_1_grad/Reshape_1"
  input: "gradients/on_policy/aac/mean_squared_error/value_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/value_grad/Select_1"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Greater"
  input: "gradients/on_policy/aac/mean_squared_error/value_grad/zeros_like"
  input: "gradients/on_policy/aac/mul_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/add"
  op: "Add"
  input: "on_policy/aac/Sum_1/reduction_indices"
  input: "gradients/on_policy/aac/Sum_1_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/on_policy/aac/Sum_1_grad/add"
  input: "gradients/on_policy/aac/Sum_1_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/range"
  op: "Range"
  input: "gradients/on_policy/aac/Sum_1_grad/range/start"
  input: "gradients/on_policy/aac/Sum_1_grad/Size"
  input: "gradients/on_policy/aac/Sum_1_grad/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Fill/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/on_policy/aac/Sum_1_grad/Shape_1"
  input: "gradients/on_policy/aac/Sum_1_grad/Fill/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/on_policy/aac/Sum_1_grad/range"
  input: "gradients/on_policy/aac/Sum_1_grad/mod"
  input: "gradients/on_policy/aac/Sum_1_grad/Shape"
  input: "gradients/on_policy/aac/Sum_1_grad/Fill"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/on_policy/aac/Sum_1_grad/DynamicStitch"
  input: "gradients/on_policy/aac/Sum_1_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/on_policy/aac/Sum_1_grad/Shape"
  input: "gradients/on_policy/aac/Sum_1_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/Mean_1_grad/truediv"
  input: "gradients/on_policy/aac/Sum_1_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/Sum_1_grad/Reshape"
  input: "gradients/on_policy/aac/Sum_1_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Square_grad/mul/x"
  op: "Const"
  input: "^gradients/off_policy/pixel_control/Sum_1_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Square_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/pixel_control/Square_grad/mul/x"
  input: "off_policy/pixel_control/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Square_grad/mul_1"
  op: "Mul"
  input: "gradients/off_policy/pixel_control/Sum_1_grad/Tile"
  input: "gradients/off_policy/pixel_control/Square_grad/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_1_grad/Tile"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/Mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Reshape_2_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/SoftmaxCrossEntropyWithLogits"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_grad/Reshape"
  input: "gradients/on_policy/aac/Reshape_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/on_policy/aac/mean_squared_error/value_grad/Select"
  input: "on_policy/aac/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Sum"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Neg"
  op: "Neg"
  input: "on_policy/aac/mean_squared_error/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Neg"
  input: "on_policy/aac/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv_1"
  input: "on_policy/aac/mean_squared_error/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/mean_squared_error/value_grad/Select"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/RealDiv_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/mul"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Sum_1"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mul_2_grad/Shape"
  input: "gradients/on_policy/aac/mul_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/Sum_1_grad/Tile"
  input: "on_policy/aac/sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_2_grad/mul"
  input: "gradients/on_policy/aac/mul_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_2_grad/Sum"
  input: "gradients/on_policy/aac/mul_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/truediv"
  input: "gradients/on_policy/aac/Sum_1_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_2_grad/mul_1"
  input: "gradients/on_policy/aac/mul_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mul_2_grad/Sum_1"
  input: "gradients/on_policy/aac/mul_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Shape"
  op: "Shape"
  input: "pc_target"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Shape_1"
  op: "Shape"
  input: "off_policy/pixel_control/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/pixel_control/sub_grad/Shape"
  input: "gradients/off_policy/pixel_control/sub_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Square_grad/mul_1"
  input: "gradients/off_policy/pixel_control/sub_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/sub_grad/Sum"
  input: "gradients/off_policy/pixel_control/sub_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Square_grad/mul_1"
  input: "gradients/off_policy/pixel_control/sub_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Neg"
  op: "Neg"
  input: "gradients/off_policy/pixel_control/sub_grad/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/sub_grad/Neg"
  input: "gradients/off_policy/pixel_control/sub_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Tile"
  input: "off_policy/value_replay/mean_squared_error/ToFloat_3/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/mul_1"
  op: "Mul"
  input: "off_policy/value_replay/mean_squared_error/SquaredDifference"
  input: "gradients/off_policy/value_replay/mean_squared_error/Sum_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/mul_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Sum_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/Select_grad/Select_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Shape"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "on_policy/aac/SoftmaxCrossEntropyWithLogits:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/on_policy/aac/Reshape_2_grad/Reshape"
  input: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "on_policy/aac/SoftmaxCrossEntropyWithLogits:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Tile/multiples"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Tile/multiples"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Select_grad/zeros_like"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Select_grad/Select"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Equal"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Reshape_1"
  input: "gradients/on_policy/aac/mean_squared_error/Select_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Select_grad/Select_1"
  op: "Select"
  input: "on_policy/aac/mean_squared_error/Equal"
  input: "gradients/on_policy/aac/mean_squared_error/Select_grad/zeros_like"
  input: "gradients/on_policy/aac/mean_squared_error/div_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/Exp"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/truediv_grad/Shape"
  input: "gradients/on_policy/aac/truediv_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/on_policy/aac/mul_2_grad/Reshape"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/truediv_grad/RealDiv"
  input: "gradients/on_policy/aac/truediv_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/truediv_grad/Sum"
  input: "gradients/on_policy/aac/truediv_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Neg"
  op: "Neg"
  input: "on_policy/aac/Exp"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/on_policy/aac/truediv_grad/Neg"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/on_policy/aac/truediv_grad/RealDiv_1"
  input: "on_policy/aac/Sum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/mul_2_grad/Reshape"
  input: "gradients/on_policy/aac/truediv_grad/RealDiv_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/truediv_grad/mul"
  input: "gradients/on_policy/aac/truediv_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/truediv_grad/Sum_1"
  input: "gradients/on_policy/aac/truediv_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/Log"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/sub_1_grad/Shape"
  input: "gradients/on_policy/aac/sub_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_2_grad/Reshape_1"
  input: "gradients/on_policy/aac/sub_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_1_grad/Sum"
  input: "gradients/on_policy/aac/sub_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mul_2_grad/Reshape_1"
  input: "gradients/on_policy/aac/sub_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/on_policy/aac/sub_1_grad/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_1_grad/Neg"
  input: "gradients/on_policy/aac/sub_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Shape"
  op: "Shape"
  input: "off_policy/pixel_control/Mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/add"
  op: "Add"
  input: "off_policy/pixel_control/Sum/reduction_indices"
  input: "gradients/off_policy/pixel_control/Sum_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/off_policy/pixel_control/Sum_grad/add"
  input: "gradients/off_policy/pixel_control/Sum_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/range"
  op: "Range"
  input: "gradients/off_policy/pixel_control/Sum_grad/range/start"
  input: "gradients/off_policy/pixel_control/Sum_grad/Size"
  input: "gradients/off_policy/pixel_control/Sum_grad/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Fill/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/off_policy/pixel_control/Sum_grad/Shape_1"
  input: "gradients/off_policy/pixel_control/Sum_grad/Fill/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/off_policy/pixel_control/Sum_grad/range"
  input: "gradients/off_policy/pixel_control/Sum_grad/mod"
  input: "gradients/off_policy/pixel_control/Sum_grad/Shape"
  input: "gradients/off_policy/pixel_control/Sum_grad/Fill"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/off_policy/pixel_control/Sum_grad/DynamicStitch"
  input: "gradients/off_policy/pixel_control/Sum_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/off_policy/pixel_control/Sum_grad/Shape"
  input: "gradients/off_policy/pixel_control/Sum_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/off_policy/pixel_control/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/sub_grad/Reshape_1"
  input: "gradients/off_policy/pixel_control/Sum_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/off_policy/pixel_control/Sum_grad/Reshape"
  input: "gradients/off_policy/pixel_control/Sum_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Tile"
  input: "off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "off_policy/value_replay/mean_squared_error/num_present/Select"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Reshape_grad/Shape"
  op: "Shape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/SoftmaxCrossEntropyWithLogits_grad/mul"
  input: "gradients/on_policy/aac/Reshape_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_1_grad/Tile"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/Mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "on_policy/aac/Sum"
  input: "^gradients/on_policy/aac/sub_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Log_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/sub_1_grad/Reshape"
  input: "gradients/on_policy/aac/Log_grad/Reciprocal"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Shape"
  op: "Shape"
  input: "local/sub_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Shape_1"
  op: "Shape"
  input: "off_policy/pixel_control/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/pixel_control/Mul_grad/Shape"
  input: "gradients/off_policy/pixel_control/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/pixel_control/Sum_grad/Tile"
  input: "off_policy/pixel_control/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Mul_grad/mul"
  input: "gradients/off_policy/pixel_control/Mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/Mul_grad/Sum"
  input: "gradients/off_policy/pixel_control/Mul_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/mul_1"
  op: "Mul"
  input: "local/sub_2"
  input: "gradients/off_policy/pixel_control/Sum_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Mul_grad/mul_1"
  input: "gradients/off_policy/pixel_control/Mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/pixel_control/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/pixel_control/Mul_grad/Sum_1"
  input: "gradients/off_policy/pixel_control/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Tile"
  input: "on_policy/aac/mean_squared_error/ToFloat_3/x"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/mul"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Sum"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/mean_squared_error/SquaredDifference"
  input: "gradients/on_policy/aac/mean_squared_error/Sum_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/mul_1"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Sum_1"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/Select_grad/Select_1"
  input: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Reshape/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/on_policy/aac/truediv_grad/Reshape_1"
  input: "gradients/on_policy/aac/Log_grad/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Shape"
  op: "Shape"
  input: "on_policy/aac/Exp"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/add"
  op: "Add"
  input: "on_policy/aac/Sum/reduction_indices"
  input: "gradients/on_policy/aac/Sum_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/on_policy/aac/Sum_grad/add"
  input: "gradients/on_policy/aac/Sum_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/range"
  op: "Range"
  input: "gradients/on_policy/aac/Sum_grad/range/start"
  input: "gradients/on_policy/aac/Sum_grad/Size"
  input: "gradients/on_policy/aac/Sum_grad/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Fill/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/on_policy/aac/Sum_grad/Shape_1"
  input: "gradients/on_policy/aac/Sum_grad/Fill/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/on_policy/aac/Sum_grad/range"
  input: "gradients/on_policy/aac/Sum_grad/mod"
  input: "gradients/on_policy/aac/Sum_grad/Shape"
  input: "gradients/on_policy/aac/Sum_grad/Fill"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/on_policy/aac/Sum_grad/DynamicStitch"
  input: "gradients/on_policy/aac/Sum_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/on_policy/aac/Sum_grad/Shape"
  input: "gradients/on_policy/aac/Sum_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/on_policy/aac/Sum_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/on_policy/aac/Sum_grad/Reshape"
  input: "gradients/on_policy/aac/Sum_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Shape"
  op: "Shape"
  input: "local/add_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Shape_1"
  op: "Shape"
  input: "local/Mean_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/sub_2_grad/Shape"
  input: "gradients/local/sub_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Mul_grad/Reshape"
  input: "gradients/local/sub_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/sub_2_grad/Sum"
  input: "gradients/local/sub_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/pixel_control/Mul_grad/Reshape"
  input: "gradients/local/sub_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/local/sub_2_grad/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/local/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/sub_2_grad/Neg"
  input: "gradients/local/sub_2_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Tile"
  input: "on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/mul"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Sum"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "on_policy/aac/mean_squared_error/num_present/Select"
  input: "gradients/on_policy/aac/mean_squared_error/num_present_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/on_policy/aac/truediv_grad/Reshape"
  input: "gradients/on_policy/aac/Sum_grad/Tile"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Exp_grad/mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "on_policy/aac/Exp"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Shape"
  op: "Shape"
  input: "local/pc_value_fn/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Shape_1"
  op: "Shape"
  input: "local/pc_advantage/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/add_5_grad/Shape"
  input: "gradients/local/add_5_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Sum"
  op: "Sum"
  input: "gradients/local/sub_2_grad/Reshape"
  input: "gradients/local/add_5_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/add_5_grad/Sum"
  input: "gradients/local/add_5_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/sub_2_grad/Reshape"
  input: "gradients/local/add_5_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/add_5_grad/Sum_1"
  input: "gradients/local/add_5_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Shape"
  op: "Shape"
  input: "local/pc_advantage/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/add"
  op: "Add"
  input: "local/Mean_1/reduction_indices"
  input: "gradients/local/Mean_1_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/mod"
  op: "FloorMod"
  input: "gradients/local/Mean_1_grad/add"
  input: "gradients/local/Mean_1_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/range"
  op: "Range"
  input: "gradients/local/Mean_1_grad/range/start"
  input: "gradients/local/Mean_1_grad/Size"
  input: "gradients/local/Mean_1_grad/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Fill/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Fill"
  op: "Fill"
  input: "gradients/local/Mean_1_grad/Shape_1"
  input: "gradients/local/Mean_1_grad/Fill/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/local/Mean_1_grad/range"
  input: "gradients/local/Mean_1_grad/mod"
  input: "gradients/local/Mean_1_grad/Shape"
  input: "gradients/local/Mean_1_grad/Fill"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Maximum/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/local/Mean_1_grad/DynamicStitch"
  input: "gradients/local/Mean_1_grad/Maximum/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/local/Mean_1_grad/Shape"
  input: "gradients/local/Mean_1_grad/Maximum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/sub_2_grad/Reshape_1"
  input: "gradients/local/Mean_1_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/local/Mean_1_grad/Reshape"
  input: "gradients/local/Mean_1_grad/floordiv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Shape_2"
  op: "Shape"
  input: "local/pc_advantage/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Shape_3"
  op: "Shape"
  input: "local/Mean_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/local/Mean_1_grad/Shape_2"
  input: "gradients/local/Mean_1_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/local/Mean_1_grad/Shape_3"
  input: "gradients/local/Mean_1_grad/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Maximum_1/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/local/Mean_1_grad/Prod_1"
  input: "gradients/local/Mean_1_grad/Maximum_1/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/local/Mean_1_grad/Prod"
  input: "gradients/local/Mean_1_grad/Maximum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/Mean_1_grad/Shape_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/local/Mean_1_grad/floordiv_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/local/Mean_1_grad/Tile"
  input: "gradients/local/Mean_1_grad/Cast"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "local/Reshape_9"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "vr_target"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/scalar"
  input: "gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "local/Reshape_9"
  input: "vr_target"
  input: "^gradients/off_policy/value_replay/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/mul"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights_grad/Reshape_1"
  input: "gradients/on_policy/aac/mean_squared_error/num_present/broadcast_weights/ones_like_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/on_policy/aac/sub_1_grad/Reshape_1"
  input: "gradients/on_policy/aac/Exp_grad/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/sub_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Shape"
  op: "Shape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Shape_1"
  op: "Shape"
  input: "on_policy/aac/Max"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/sub_grad/Shape"
  input: "gradients/on_policy/aac/sub_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/on_policy/aac/sub_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_grad/Sum"
  input: "gradients/on_policy/aac/sub_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/on_policy/aac/sub_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Neg"
  op: "Neg"
  input: "gradients/on_policy/aac/sub_grad/Sum_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_grad/Neg"
  input: "gradients/on_policy/aac/sub_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Shape"
  op: "Shape"
  input: "local/pc_value_fn/conv2d_transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/pc_value_fn/add_grad/Shape"
  input: "gradients/local/pc_value_fn/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/add_5_grad/Reshape"
  input: "gradients/local/pc_value_fn/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/pc_value_fn/add_grad/Sum"
  input: "gradients/local/pc_value_fn/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/add_5_grad/Reshape"
  input: "gradients/local/pc_value_fn/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/pc_value_fn/add_grad/Sum_1"
  input: "gradients/local/pc_value_fn/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/local/add_5_grad/Reshape_1"
  input: "gradients/local/Mean_1_grad/truediv"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_5_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Shape"
  op: "Shape"
  input: "local/pc_advantage/conv2d_transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/pc_advantage/add_grad/Shape"
  input: "gradients/local/pc_advantage/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/local/pc_advantage/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/pc_advantage/add_grad/Sum"
  input: "gradients/local/pc_advantage/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_3"
  input: "gradients/local/pc_advantage/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/pc_advantage/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/pc_advantage/add_grad/Sum_1"
  input: "gradients/local/pc_advantage/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_9_grad/Shape"
  op: "Shape"
  input: "local/add_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/off_policy/value_replay/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "gradients/local/Reshape_9_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Shape"
  op: "Shape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/add"
  op: "Add"
  input: "on_policy/aac/Max/reduction_indices"
  input: "gradients/on_policy/aac/Max_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/on_policy/aac/Max_grad/add"
  input: "gradients/on_policy/aac/Max_grad/Size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/range/start"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/range/delta"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/range"
  op: "Range"
  input: "gradients/on_policy/aac/Max_grad/range/start"
  input: "gradients/on_policy/aac/Max_grad/Size"
  input: "gradients/on_policy/aac/Max_grad/range/delta"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Fill/value"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Fill"
  op: "Fill"
  input: "gradients/on_policy/aac/Max_grad/Shape_1"
  input: "gradients/on_policy/aac/Max_grad/Fill/value"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/on_policy/aac/Max_grad/range"
  input: "gradients/on_policy/aac/Max_grad/mod"
  input: "gradients/on_policy/aac/Max_grad/Shape"
  input: "gradients/on_policy/aac/Max_grad/Fill"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Reshape"
  op: "Reshape"
  input: "on_policy/aac/Max"
  input: "gradients/on_policy/aac/Max_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/sub_grad/Reshape_1"
  input: "gradients/on_policy/aac/Max_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Equal"
  op: "Equal"
  input: "gradients/on_policy/aac/Max_grad/Reshape"
  input: "local/add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Cast"
  op: "Cast"
  input: "gradients/on_policy/aac/Max_grad/Equal"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/Max_grad/Cast"
  input: "on_policy/aac/Max/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/on_policy/aac/Max_grad/Sum"
  input: "gradients/on_policy/aac/Max_grad/DynamicStitch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/div"
  op: "RealDiv"
  input: "gradients/on_policy/aac/Max_grad/Cast"
  input: "gradients/on_policy/aac/Max_grad/Reshape_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/Max_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/Max_grad/div"
  input: "gradients/on_policy/aac/Max_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/conv2d_transpose_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/local/pc_value_fn/add_grad/Reshape"
  input: "gradients/local/pc_value_fn/conv2d_transpose_grad/Shape"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/local/pc_value_fn/add_grad/Reshape"
  input: "local/pc_value_fn/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/pc_advantage/conv2d_transpose_grad/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000\004\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/local/pc_advantage/add_grad/Reshape"
  input: "gradients/local/pc_advantage/conv2d_transpose_grad/Shape"
  input: "local/Reshape_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/pc_advantage/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/local/pc_advantage/add_grad/Reshape"
  input: "local/pc_advantage/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Shape"
  op: "Shape"
  input: "local/MatMul_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/add_3_grad/Shape"
  input: "gradients/local/add_3_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/local/Reshape_9_grad/Reshape"
  input: "gradients/local/add_3_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/add_3_grad/Sum"
  input: "gradients/local/add_3_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Reshape_9_grad/Reshape"
  input: "gradients/local/add_3_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/add_3_grad/Sum_1"
  input: "gradients/local/add_3_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "local/Reshape_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "on_policy_return_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/on_policy/aac/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/scalar"
  input: "gradients/on_policy/aac/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "local/Reshape_4"
  input: "on_policy_return_pl"
  input: "^gradients/on_policy/aac/mean_squared_error/Mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/mul"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Sum"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/on_policy/aac/Reshape_grad/Reshape"
  input: "gradients/on_policy/aac/sub_grad/Reshape"
  input: "gradients/on_policy/aac/Max_grad/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/on_policy/aac/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_grad/Shape"
  op: "Shape"
  input: "local/MatMul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/local/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/add_grad/Shape"
  input: "gradients/local/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_4"
  input: "gradients/local/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/add_grad/Sum"
  input: "gradients/local/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_4"
  input: "gradients/local/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/add_grad/Sum_1"
  input: "gradients/local/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/add_3_grad/Reshape"
  input: "local/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "local/Reshape_8"
  input: "gradients/local/add_3_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/Reshape_4_grad/Shape"
  op: "Shape"
  input: "local/add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/on_policy/aac/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "gradients/local/Reshape_4_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/add_grad/Reshape"
  input: "local/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "local/Reshape_3"
  input: "gradients/local/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Shape"
  op: "Shape"
  input: "local/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/add_1_grad/Shape"
  input: "gradients/local/add_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/local/Reshape_4_grad/Reshape"
  input: "gradients/local/add_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/add_1_grad/Sum"
  input: "gradients/local/add_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Reshape_4_grad/Reshape"
  input: "gradients/local/add_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/add_1_grad/Sum_1"
  input: "gradients/local/add_1_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/add_1_grad/Reshape"
  input: "local/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "local/Reshape_3"
  input: "gradients/local/add_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/local/add_3_grad/Reshape_1"
  input: "gradients/local/add_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2D"
  input: "gradients/local/pc_advantage/conv2d_transpose_grad/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_10_grad/Shape"
  op: "Shape"
  input: "local/Elu_8"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_10_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_6"
  input: "gradients/local/Reshape_10_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/local/MatMul_grad/MatMul"
  input: "gradients/local/MatMul_1_grad/MatMul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_3_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_7"
  input: "gradients/local/Reshape_3_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/local/MatMul_3_grad/MatMul_1"
  input: "gradients/local/MatMul_1_grad/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_8_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/Reshape_10_grad/Reshape"
  input: "local/Elu_8"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "local/lstm/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/local/Reshape_3_grad/Reshape"
  input: "gradients/local/lstm/rnn/transpose_grad/InvertPermutation"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Shape"
  op: "Shape"
  input: "local/MatMul_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "gradients/local/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/add_4_grad/Shape"
  input: "gradients/local/add_4_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_8_grad/EluGrad"
  input: "gradients/local/add_4_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/add_4_grad/Sum"
  input: "gradients/local/add_4_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_8_grad/EluGrad"
  input: "gradients/local/add_4_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/add_4_grad/Sum_1"
  input: "gradients/local/add_4_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "local/lstm/rnn/TensorArray"
  input: "local/lstm/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "local/lstm/rnn/while/Exit_1"
  input: "^gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "local/lstm/rnn/TensorArrayStack/range"
  input: "gradients/local/lstm/rnn/transpose_grad/transpose"
  input: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/add_4_grad/Reshape"
  input: "local/pc_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "local/Reshape_8"
  input: "gradients/local/add_4_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/local/MatMul_3_grad/MatMul"
  input: "gradients/local/MatMul_4_grad/MatMul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_8_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/transpose"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_9"
  input: "gradients/local/Reshape_8_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "local/lstm/rnn/while/Exit_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "local/lstm/rnn/while/Exit_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "local/lstm_1/rnn/concat_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/local/Reshape_8_grad/Reshape"
  input: "gradients/local/lstm_1/rnn/transpose_grad/InvertPermutation"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/local/lstm/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "local/lstm_1/rnn/TensorArray"
  input: "local/lstm_1/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "local/lstm_1/rnn/while/Exit_1"
  input: "^gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "local/lstm_1/rnn/TensorArrayStack/range"
  input: "gradients/local/lstm_1/rnn/transpose_grad/transpose"
  input: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/Exit_1_grad/b_exit"
  input: "gradients/local/lstm/rnn/while/Switch_1_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/Exit_2_grad/b_exit"
  input: "gradients/local/lstm/rnn/while/Switch_2_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/local/lstm/rnn/while/Switch_3_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "local/lstm_1/rnn/while/Exit_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "local/lstm_1/rnn/while/Exit_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/Merge_1_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/Merge_2_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/Merge_3_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "local/lstm/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/local/lstm/rnn/while/Merge_1_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm/rnn/while/Merge_1_grad/Switch:1"
  input: "^gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "local/lstm/rnn/while/Identity"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "local/lstm/rnn/while/Identity_2"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/Enter"
  input: "local/lstm/rnn/while/GreaterEqual_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Merge_2_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like"
  input: "gradients/local/lstm/rnn/while/Merge_2_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/Enter"
  input: "local/lstm/rnn/while/Identity_3"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/Enter"
  input: "local/lstm/rnn/while/GreaterEqual_2"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Merge_3_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like"
  input: "gradients/local/lstm/rnn/while/Merge_3_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/Exit_1_grad/b_exit"
  input: "gradients/local/lstm_1/rnn/while/Switch_1_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/Exit_2_grad/b_exit"
  input: "gradients/local/lstm_1/rnn/while/Switch_2_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/Exit_3_grad/b_exit"
  input: "gradients/local/lstm_1/rnn/while/Switch_3_grad_1/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "local/lstm/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm/rnn/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/Enter"
  input: "local/lstm/rnn/while/GreaterEqual"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/local/lstm/rnn/while/Select_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_grad/zeros_like"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/zeros"
  op: "Fill"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/Shape"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc_1"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc_1"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc_2"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select_1"
  input: "gradients/local/lstm/rnn/while/Select_grad/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "gradients/AddN_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm/rnn/while/Merge_1_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/Merge_1_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/Merge_2_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/Merge_3_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/zeros_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/zeros_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/Select/Enter_grad/b_acc_2"
  input: "gradients/local/lstm/rnn/zeros_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArray"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/local/lstm_1/rnn/while/Merge_1_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm_1/rnn/while/Merge_1_grad/Switch:1"
  input: "^gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "local/lstm_1/rnn/while/Identity"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/Enter"
  input: "local/lstm_1/rnn/while/Identity_2"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/Enter"
  input: "local/lstm_1/rnn/while/GreaterEqual_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Merge_2_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like"
  input: "gradients/local/lstm_1/rnn/while/Merge_2_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/Enter"
  input: "local/lstm_1/rnn/while/Identity_3"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/Enter"
  input: "local/lstm_1/rnn/while/GreaterEqual_2"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Merge_3_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like"
  input: "gradients/local/lstm_1/rnn/while/Merge_3_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_11"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/zeros_like/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/zeros_like/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/Enter"
  input: "local/lstm_1/rnn/while/GreaterEqual"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/zeros_like"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/zeros_like"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/Identity_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/zeros/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/zeros"
  op: "Fill"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Shape"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/zeros/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/zeros"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc_1"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc_1"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc_2"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select_1"
  input: "gradients/local/lstm_1/rnn/while/Select_grad/Select_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_12"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "gradients/AddN_12"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm_1/rnn/while/Merge_1_grad/Switch:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/Select_1_grad/Select"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/zeros_grad/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/zeros_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/Select/Enter_grad/b_acc_2"
  input: "gradients/local/lstm_1/rnn/zeros_grad/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_13"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_14"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_14"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/Identity_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/zeros_like/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/local/lstm_1/rnn/while/Select_1_grad/Select"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_15"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "local/lstm/rnn/while/TensorArrayReadV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "local/lstm/rnn/while/TensorArrayReadV3"
  input: "^gradients/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "local/lstm/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/local/lstm/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/Select_2_grad/Select"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_16"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 475
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "local/lstm/rnn/TensorArray_1"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "local/lstm/rnn/TensorArrayUnstack/range"
  input: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "local/lstm_1/rnn/while/TensorArrayReadV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "local/lstm_1/rnn/while/TensorArrayReadV3"
  input: "^gradients/Add_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/zeros_like/StackPopV2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArray_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/local/lstm_1/rnn/while/Select_2_grad/Select"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm_1/rnn/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "gradients/local/lstm_1/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/local/lstm_1/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/Add"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/Switch"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_18"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "local/lstm_1/rnn/TensorArray_1"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/local/lstm_1/rnn/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm_1/rnn/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "local/lstm_1/rnn/TensorArrayUnstack/range"
  input: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/local/lstm/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "local/lstm/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/local/lstm/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/local/lstm/transpose_grad/InvertPermutation"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/mod"
  op: "FloorMod"
  input: "local/concat/axis"
  input: "gradients/local/concat_grad/Rank"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/Shape"
  op: "Shape"
  input: "local/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/concat_grad/ShapeN"
  op: "ShapeN"
  input: "local/Reshape_1"
  input: "local/Reshape"
  input: "local/Reshape_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/local/concat_grad/mod"
  input: "gradients/local/concat_grad/ShapeN"
  input: "gradients/local/concat_grad/ShapeN:1"
  input: "gradients/local/concat_grad/ShapeN:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/Slice"
  op: "Slice"
  input: "gradients/local/lstm/transpose_grad/transpose"
  input: "gradients/local/concat_grad/ConcatOffset"
  input: "gradients/local/concat_grad/ShapeN"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/local/lstm/transpose_grad/transpose"
  input: "gradients/local/concat_grad/ConcatOffset:1"
  input: "gradients/local/concat_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_grad/Slice_2"
  op: "Slice"
  input: "gradients/local/lstm/transpose_grad/transpose"
  input: "gradients/local/concat_grad/ConcatOffset:2"
  input: "gradients/local/concat_grad/ShapeN:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_1_grad/Shape"
  op: "Shape"
  input: "local/Elu_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_grad/Slice"
  input: "gradients/local/Reshape_1_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_grad/Shape"
  op: "Shape"
  input: "local/on_policy_action_reward_in_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_grad/Slice_1"
  input: "gradients/local/Reshape_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_2_grad/Shape"
  op: "Shape"
  input: "local/on_policy_state_in_internal_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_grad/Slice_2"
  input: "gradients/local/Reshape_2_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "local/lstm_1/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/local/lstm_1/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/local/lstm_1/transpose_grad/InvertPermutation"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 219
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/Rank"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/mod"
  op: "FloorMod"
  input: "local/concat_1/axis"
  input: "gradients/local/concat_1_grad/Rank"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/Shape"
  op: "Shape"
  input: "local/Reshape_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/ShapeN"
  op: "ShapeN"
  input: "local/Reshape_6"
  input: "local/Reshape_5"
  input: "local/Reshape_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/local/concat_1_grad/mod"
  input: "gradients/local/concat_1_grad/ShapeN"
  input: "gradients/local/concat_1_grad/ShapeN:1"
  input: "gradients/local/concat_1_grad/ShapeN:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/local/lstm_1/transpose_grad/transpose"
  input: "gradients/local/concat_1_grad/ConcatOffset"
  input: "gradients/local/concat_1_grad/ShapeN"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/local/lstm_1/transpose_grad/transpose"
  input: "gradients/local/concat_1_grad/ConcatOffset:1"
  input: "gradients/local/concat_1_grad/ShapeN:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/concat_1_grad/Slice_2"
  op: "Slice"
  input: "gradients/local/lstm_1/transpose_grad/transpose"
  input: "gradients/local/concat_1_grad/ConcatOffset:2"
  input: "gradients/local/concat_1_grad/ShapeN:2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 150
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_6_grad/Shape"
  op: "Shape"
  input: "local/Elu_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_1_grad/Slice"
  input: "gradients/local/Reshape_6_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_5_grad/Shape"
  op: "Shape"
  input: "local/off_policy_action_reward_in_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_1_grad/Slice_1"
  input: "gradients/local/Reshape_5_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Reshape_7_grad/Shape"
  op: "Shape"
  input: "local/off_policy_state_in_pl_internal_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/Reshape_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/concat_1_grad/Slice_2"
  input: "gradients/local/Reshape_7_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_3_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/Reshape_1_grad/Reshape"
  input: "local/Elu_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_4/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_4/add_grad/Shape"
  input: "gradients/local/conv2d_4/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_3_grad/EluGrad"
  input: "gradients/local/conv2d_4/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_4/add_grad/Sum"
  input: "gradients/local/conv2d_4/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_3_grad/EluGrad"
  input: "gradients/local/conv2d_4/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_4/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_4/add_grad/Sum_1"
  input: "gradients/local/conv2d_4/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu_2"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_4/Conv2D_grad/ShapeN"
  input: "local/conv2d_4/W/read"
  input: "gradients/local/conv2d_4/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu_2"
  input: "gradients/local/conv2d_4/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_4/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/Elu_2_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_7_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/Reshape_6_grad/Reshape"
  input: "local/Elu_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_3/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_3/add_grad/Shape"
  input: "gradients/local/conv2d_3/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_2_grad/EluGrad"
  input: "gradients/local/conv2d_3/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_3/add_grad/Sum"
  input: "gradients/local/conv2d_3/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_2_grad/EluGrad"
  input: "gradients/local/conv2d_3/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_3/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_3/add_grad/Sum_1"
  input: "gradients/local/conv2d_3/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_4_1/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_4_1/add_grad/Shape"
  input: "gradients/local/conv2d_4_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_7_grad/EluGrad"
  input: "gradients/local/conv2d_4_1/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_4_1/add_grad/Sum"
  input: "gradients/local/conv2d_4_1/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_7_grad/EluGrad"
  input: "gradients/local/conv2d_4_1/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_4_1/add_grad/Sum_1"
  input: "gradients/local/conv2d_4_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu_1"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_3/Conv2D_grad/ShapeN"
  input: "local/conv2d_3/W/read"
  input: "gradients/local/conv2d_3/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu_1"
  input: "gradients/local/conv2d_3/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_3/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu_6"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_4_1/Conv2D_grad/ShapeN"
  input: "local/conv2d_4/W/read"
  input: "gradients/local/conv2d_4_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_4_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu_6"
  input: "gradients/local/conv2d_4_1/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_4_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/local/conv2d_4/add_grad/Reshape_1"
  input: "gradients/local/conv2d_4_1/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_1_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_6_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_4_1/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
  input: "gradients/local/conv2d_4_1/Conv2D_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_2/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_2/add_grad/Shape"
  input: "gradients/local/conv2d_2/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_1_grad/EluGrad"
  input: "gradients/local/conv2d_2/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_2/add_grad/Sum"
  input: "gradients/local/conv2d_2/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_1_grad/EluGrad"
  input: "gradients/local/conv2d_2/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_2/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_2/add_grad/Sum_1"
  input: "gradients/local/conv2d_2/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_3_1/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_3_1/add_grad/Shape"
  input: "gradients/local/conv2d_3_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_6_grad/EluGrad"
  input: "gradients/local/conv2d_3_1/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_3_1/add_grad/Sum"
  input: "gradients/local/conv2d_3_1/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_6_grad/EluGrad"
  input: "gradients/local/conv2d_3_1/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_3_1/add_grad/Sum_1"
  input: "gradients/local/conv2d_3_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_2/Conv2D_grad/ShapeN"
  input: "local/conv2d_2/W/read"
  input: "gradients/local/conv2d_2/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu"
  input: "gradients/local/conv2d_2/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_2/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu_5"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_3_1/Conv2D_grad/ShapeN"
  input: "local/conv2d_3/W/read"
  input: "gradients/local/conv2d_3_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_3_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu_5"
  input: "gradients/local/conv2d_3_1/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_3_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/local/conv2d_3/add_grad/Reshape_1"
  input: "gradients/local/conv2d_3_1/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_5_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_3_1/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
  input: "gradients/local/conv2d_3_1/Conv2D_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_1/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_1/add_grad/Shape"
  input: "gradients/local/conv2d_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_grad/EluGrad"
  input: "gradients/local/conv2d_1/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_1/add_grad/Sum"
  input: "gradients/local/conv2d_1/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_grad/EluGrad"
  input: "gradients/local/conv2d_1/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_1/add_grad/Sum_1"
  input: "gradients/local/conv2d_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_2_1/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_2_1/add_grad/Shape"
  input: "gradients/local/conv2d_2_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_5_grad/EluGrad"
  input: "gradients/local/conv2d_2_1/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_2_1/add_grad/Sum"
  input: "gradients/local/conv2d_2_1/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_5_grad/EluGrad"
  input: "gradients/local/conv2d_2_1/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_2_1/add_grad/Sum_1"
  input: "gradients/local/conv2d_2_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/on_policy_state_in_external_pl"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_1/Conv2D_grad/ShapeN"
  input: "local/conv2d_1/W/read"
  input: "gradients/local/conv2d_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/on_policy_state_in_external_pl"
  input: "gradients/local/conv2d_1/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/Elu_4"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_2_1/Conv2D_grad/ShapeN"
  input: "local/conv2d_2/W/read"
  input: "gradients/local/conv2d_2_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_2_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/Elu_4"
  input: "gradients/local/conv2d_2_1/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_2_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/local/conv2d_2/add_grad/Reshape_1"
  input: "gradients/local/conv2d_2_1/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/Elu_4_grad/EluGrad"
  op: "EluGrad"
  input: "gradients/local/conv2d_2_1/Conv2D_grad/Conv2DBackpropInput"
  input: "local/Elu_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "gradients/local/conv2d_2_1/Conv2D_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Shape"
  op: "Shape"
  input: "local/conv2d_1_1/Conv2D"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/local/conv2d_1_1/add_grad/Shape"
  input: "gradients/local/conv2d_1_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/local/Elu_4_grad/EluGrad"
  input: "gradients/local/conv2d_1_1/add_grad/BroadcastGradientArgs"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/local/conv2d_1_1/add_grad/Sum"
  input: "gradients/local/conv2d_1_1/add_grad/Shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/local/Elu_4_grad/EluGrad"
  input: "gradients/local/conv2d_1_1/add_grad/BroadcastGradientArgs:1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/local/conv2d_1_1/add_grad/Sum_1"
  input: "gradients/local/conv2d_1_1/add_grad/Shape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "local/off_policy_state_in_pl_external_pl"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/local/conv2d_1_1/Conv2D_grad/ShapeN"
  input: "local/conv2d_1/W/read"
  input: "gradients/local/conv2d_1_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/local/conv2d_1_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "local/off_policy_state_in_pl_external_pl"
  input: "gradients/local/conv2d_1_1/Conv2D_grad/ShapeN:1"
  input: "gradients/local/conv2d_1_1/add_grad/Reshape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/local/conv2d_1/add_grad/Reshape_1"
  input: "gradients/local/conv2d_1_1/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_27"
  op: "AddN"
  input: "gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "gradients/local/conv2d_1_1/Conv2D_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/AddN_27"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/AddN_26"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/AddN_25"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/AddN_24"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/AddN_23"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/AddN_22"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_6"
  op: "L2Loss"
  input: "gradients/AddN_21"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_7"
  op: "L2Loss"
  input: "gradients/AddN_20"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_8"
  op: "L2Loss"
  input: "gradients/AddN_19"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_9"
  op: "L2Loss"
  input: "gradients/AddN_17"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_10"
  op: "L2Loss"
  input: "gradients/local/MatMul_grad/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_11"
  op: "L2Loss"
  input: "gradients/local/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_12"
  op: "L2Loss"
  input: "gradients/AddN_8"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_13"
  op: "L2Loss"
  input: "gradients/AddN_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_14"
  op: "L2Loss"
  input: "gradients/local/MatMul_4_grad/MatMul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_4_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_15"
  op: "L2Loss"
  input: "gradients/local/add_4_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_16"
  op: "L2Loss"
  input: "gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_17"
  op: "L2Loss"
  input: "gradients/local/pc_advantage/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_18"
  op: "L2Loss"
  input: "gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_19"
  op: "L2Loss"
  input: "gradients/local/pc_value_fn/add_grad/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/stack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  input: "global_norm/L2Loss_6"
  input: "global_norm/L2Loss_7"
  input: "global_norm/L2Loss_8"
  input: "global_norm/L2Loss_9"
  input: "global_norm/L2Loss_10"
  input: "global_norm/L2Loss_11"
  input: "global_norm/L2Loss_12"
  input: "global_norm/L2Loss_13"
  input: "global_norm/L2Loss_14"
  input: "global_norm/L2Loss_15"
  input: "global_norm/L2Loss_16"
  input: "global_norm/L2Loss_17"
  input: "global_norm/L2Loss_18"
  input: "global_norm/L2Loss_19"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 20
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/stack"
  input: "global_norm/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1/y"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 40.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "clip_by_global_norm/Const"
  input: "clip_by_global_norm/truediv_1/y"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/truediv_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 40.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/AddN_27"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/AddN_26"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/AddN_25"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/AddN_24"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/AddN_23"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/AddN_22"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_7"
  op: "Mul"
  input: "gradients/AddN_21"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_6"
  op: "Identity"
  input: "clip_by_global_norm/mul_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_8"
  op: "Mul"
  input: "gradients/AddN_20"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_7"
  op: "Identity"
  input: "clip_by_global_norm/mul_8"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_9"
  op: "Mul"
  input: "gradients/AddN_19"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_8"
  op: "Identity"
  input: "clip_by_global_norm/mul_9"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_10"
  op: "Mul"
  input: "gradients/AddN_17"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_9"
  op: "Identity"
  input: "clip_by_global_norm/mul_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_11"
  op: "Mul"
  input: "gradients/local/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_10"
  op: "Identity"
  input: "clip_by_global_norm/mul_11"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_12"
  op: "Mul"
  input: "gradients/local/add_grad/Reshape_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_11"
  op: "Identity"
  input: "clip_by_global_norm/mul_12"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_13"
  op: "Mul"
  input: "gradients/AddN_8"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_12"
  op: "Identity"
  input: "clip_by_global_norm/mul_13"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_14"
  op: "Mul"
  input: "gradients/AddN_5"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_13"
  op: "Identity"
  input: "clip_by_global_norm/mul_14"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_15"
  op: "Mul"
  input: "gradients/local/MatMul_4_grad/MatMul_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_4_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_14"
  op: "Identity"
  input: "clip_by_global_norm/mul_15"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_4_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_16"
  op: "Mul"
  input: "gradients/local/add_4_grad/Reshape_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_15"
  op: "Identity"
  input: "clip_by_global_norm/mul_16"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_17"
  op: "Mul"
  input: "gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_16"
  op: "Identity"
  input: "clip_by_global_norm/mul_17"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_18"
  op: "Mul"
  input: "gradients/local/pc_advantage/add_grad/Reshape_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_17"
  op: "Identity"
  input: "clip_by_global_norm/mul_18"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_19"
  op: "Mul"
  input: "gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_18"
  op: "Identity"
  input: "clip_by_global_norm/mul_19"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_20"
  op: "Mul"
  input: "gradients/local/pc_value_fn/add_grad/Reshape_1"
  input: "clip_by_global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_19"
  op: "Identity"
  input: "clip_by_global_norm/mul_20"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "local/conv2d_1/W"
  input: "global/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "local/conv2d_1/b"
  input: "global/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "local/conv2d_2/W"
  input: "global/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "local/conv2d_2/b"
  input: "global/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "local/conv2d_3/W"
  input: "global/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "local/conv2d_3/b"
  input: "global/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "local/conv2d_4/W"
  input: "global/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "local/conv2d_4/b"
  input: "global/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "local/action//w"
  input: "global/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "local/action//b"
  input: "global/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "local/value//w"
  input: "global/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "local/value//b"
  input: "global/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "local/pc_dense//w"
  input: "global/pc_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "local/pc_dense//b"
  input: "global/pc_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "local/pc_advantage/d_W"
  input: "global/pc_advantage/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "local/pc_advantage/d_b"
  input: "global/pc_advantage/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "local/pc_value_fn/d_W"
  input: "global/pc_value_fn/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_19"
  op: "Assign"
  input: "local/pc_value_fn/d_b"
  input: "global/pc_value_fn/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_20"
  op: "Assign"
  input: "local/rp_dense//w"
  input: "global/rp_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_21"
  op: "Assign"
  input: "local/rp_dense//b"
  input: "global/rp_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_22"
  op: "Assign"
  input: "local/rp_classifier//w"
  input: "global/rp_classifier//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Assign_23"
  op: "Assign"
  input: "local/rp_classifier//b"
  input: "global/rp_classifier//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^Assign"
  input: "^Assign_1"
  input: "^Assign_2"
  input: "^Assign_3"
  input: "^Assign_4"
  input: "^Assign_5"
  input: "^Assign_6"
  input: "^Assign_7"
  input: "^Assign_8"
  input: "^Assign_9"
  input: "^Assign_10"
  input: "^Assign_11"
  input: "^Assign_12"
  input: "^Assign_13"
  input: "^Assign_14"
  input: "^Assign_15"
  input: "^Assign_16"
  input: "^Assign_17"
  input: "^Assign_18"
  input: "^Assign_19"
  input: "^Assign_20"
  input: "^Assign_21"
  input: "^Assign_22"
  input: "^Assign_23"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "Shape"
  op: "Shape"
  input: "local/on_policy_state_in_external_pl"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "AssignAdd"
  op: "AssignAdd"
  input: "global/global_step"
  input: "strided_slice"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_1/W/Adam"
  input: "global/conv2d_1/W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam/read"
  op: "Identity"
  input: "global/conv2d_1/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_1/W/Adam_1"
  input: "global/conv2d_1/W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/W/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_1/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_1/b/Adam"
  input: "global/conv2d_1/b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam/read"
  op: "Identity"
  input: "global/conv2d_1/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_1/b/Adam_1"
  input: "global/conv2d_1/b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_1/b/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_1/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_2/W/Adam"
  input: "global/conv2d_2/W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam/read"
  op: "Identity"
  input: "global/conv2d_2/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_2/W/Adam_1"
  input: "global/conv2d_2/W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/W/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_2/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_2/b/Adam"
  input: "global/conv2d_2/b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam/read"
  op: "Identity"
  input: "global/conv2d_2/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_2/b/Adam_1"
  input: "global/conv2d_2/b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_2/b/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_2/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_3/W/Adam"
  input: "global/conv2d_3/W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam/read"
  op: "Identity"
  input: "global/conv2d_3/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_3/W/Adam_1"
  input: "global/conv2d_3/W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/W/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_3/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_3/b/Adam"
  input: "global/conv2d_3/b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam/read"
  op: "Identity"
  input: "global/conv2d_3/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_3/b/Adam_1"
  input: "global/conv2d_3/b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_3/b/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_3/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_4/W/Adam"
  input: "global/conv2d_4/W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam/read"
  op: "Identity"
  input: "global/conv2d_4/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_4/W/Adam_1"
  input: "global/conv2d_4/W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/W/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_4/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam/Assign"
  op: "Assign"
  input: "global/conv2d_4/b/Adam"
  input: "global/conv2d_4/b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam/read"
  op: "Identity"
  input: "global/conv2d_4/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam_1/Assign"
  op: "Assign"
  input: "global/conv2d_4/b/Adam_1"
  input: "global/conv2d_4/b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/conv2d_4/b/Adam_1/read"
  op: "Identity"
  input: "global/conv2d_4/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 475
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 475
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "global/action//w/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/action//w/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//w/Adam/Assign"
  op: "Assign"
  input: "global/action//w/Adam"
  input: "global/action//w/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//w/Adam/read"
  op: "Identity"
  input: "global/action//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/action//w/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/action//w/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//w/Adam_1/Assign"
  op: "Assign"
  input: "global/action//w/Adam_1"
  input: "global/action//w/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//w/Adam_1/read"
  op: "Identity"
  input: "global/action//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/action//b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/action//b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//b/Adam/Assign"
  op: "Assign"
  input: "global/action//b/Adam"
  input: "global/action//b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//b/Adam/read"
  op: "Identity"
  input: "global/action//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/action//b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/action//b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/action//b/Adam_1/Assign"
  op: "Assign"
  input: "global/action//b/Adam_1"
  input: "global/action//b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/action//b/Adam_1/read"
  op: "Identity"
  input: "global/action//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/value//w/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/value//w/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//w/Adam/Assign"
  op: "Assign"
  input: "global/value//w/Adam"
  input: "global/value//w/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//w/Adam/read"
  op: "Identity"
  input: "global/value//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/value//w/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/value//w/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//w/Adam_1/Assign"
  op: "Assign"
  input: "global/value//w/Adam_1"
  input: "global/value//w/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//w/Adam_1/read"
  op: "Identity"
  input: "global/value//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/value//b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/value//b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//b/Adam/Assign"
  op: "Assign"
  input: "global/value//b/Adam"
  input: "global/value//b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//b/Adam/read"
  op: "Identity"
  input: "global/value//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/value//b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/value//b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/value//b/Adam_1/Assign"
  op: "Assign"
  input: "global/value//b/Adam_1"
  input: "global/value//b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/value//b/Adam_1/read"
  op: "Identity"
  input: "global/value//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_dense//w/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_dense//w/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//w/Adam/Assign"
  op: "Assign"
  input: "global/pc_dense//w/Adam"
  input: "global/pc_dense//w/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//w/Adam/read"
  op: "Identity"
  input: "global/pc_dense//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_dense//w/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_dense//w/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//w/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_dense//w/Adam_1"
  input: "global/pc_dense//w/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//w/Adam_1/read"
  op: "Identity"
  input: "global/pc_dense//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_dense//b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_dense//b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//b/Adam/Assign"
  op: "Assign"
  input: "global/pc_dense//b/Adam"
  input: "global/pc_dense//b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//b/Adam/read"
  op: "Identity"
  input: "global/pc_dense//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_dense//b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_dense//b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_dense//b/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_dense//b/Adam_1"
  input: "global/pc_dense//b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_dense//b/Adam_1/read"
  op: "Identity"
  input: "global/pc_dense//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_W/Adam"
  input: "global/pc_advantage/d_W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam/read"
  op: "Identity"
  input: "global/pc_advantage/d_W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_W/Adam_1"
  input: "global/pc_advantage/d_W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_W/Adam_1/read"
  op: "Identity"
  input: "global/pc_advantage/d_W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_b/Adam"
  input: "global/pc_advantage/d_b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam/read"
  op: "Identity"
  input: "global/pc_advantage/d_b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_advantage/d_b/Adam_1"
  input: "global/pc_advantage/d_b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_advantage/d_b/Adam_1/read"
  op: "Identity"
  input: "global/pc_advantage/d_b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_W/Adam"
  input: "global/pc_value_fn/d_W/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam/read"
  op: "Identity"
  input: "global/pc_value_fn/d_W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_W/Adam_1"
  input: "global/pc_value_fn/d_W/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_W/Adam_1/read"
  op: "Identity"
  input: "global/pc_value_fn/d_W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_b/Adam"
  input: "global/pc_value_fn/d_b/Adam/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam/read"
  op: "Identity"
  input: "global/pc_value_fn/d_b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam_1"
  op: "VariableV2"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam_1/Assign"
  op: "Assign"
  input: "global/pc_value_fn/d_b/Adam_1"
  input: "global/pc_value_fn/d_b/Adam_1/Initializer/zeros"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global/pc_value_fn/d_b/Adam_1/read"
  op: "Identity"
  input: "global/pc_value_fn/d_b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_1/W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_1/W"
  input: "global/conv2d_1/W/Adam"
  input: "global/conv2d_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_1/W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_1/b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_1/b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_1/b"
  input: "global/conv2d_1/b/Adam"
  input: "global/conv2d_1/b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_1/b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_2/W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_2/W"
  input: "global/conv2d_2/W/Adam"
  input: "global/conv2d_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_2/W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_2/b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_2/b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_2/b"
  input: "global/conv2d_2/b/Adam"
  input: "global/conv2d_2/b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_2/b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_3/W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_3/W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_3/W"
  input: "global/conv2d_3/W/Adam"
  input: "global/conv2d_3/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_3/W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_3/b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_3/b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_3/b"
  input: "global/conv2d_3/b/Adam"
  input: "global/conv2d_3/b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_3/b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_4/W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_4/W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_4/W"
  input: "global/conv2d_4/W/Adam"
  input: "global/conv2d_4/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_4/W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_6"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/conv2d_4/b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/conv2d_4/b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/conv2d_4/b"
  input: "global/conv2d_4/b/Adam"
  input: "global/conv2d_4/b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/conv2d_4/b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_7"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_8"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_9"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/action//w/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/action//w/ApplyAdam"
  op: "ApplyAdam"
  input: "global/action//w"
  input: "global/action//w/Adam"
  input: "global/action//w/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/action//w/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_10"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/action//b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/action//b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/action//b"
  input: "global/action//b/Adam"
  input: "global/action//b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/action//b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_11"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/value//w/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/value//w/ApplyAdam"
  op: "ApplyAdam"
  input: "global/value//w"
  input: "global/value//w/Adam"
  input: "global/value//w/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/value//w/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_12"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/value//b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/value//b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/value//b"
  input: "global/value//b/Adam"
  input: "global/value//b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/value//b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_13"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_dense//w/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_dense//w/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_dense//w"
  input: "global/pc_dense//w/Adam"
  input: "global/pc_dense//w/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_dense//w/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_14"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_dense//b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_dense//b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_dense//b"
  input: "global/pc_dense//b/Adam"
  input: "global/pc_dense//b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_dense//b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_15"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_advantage/d_W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_advantage/d_W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_advantage/d_W"
  input: "global/pc_advantage/d_W/Adam"
  input: "global/pc_advantage/d_W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_advantage/d_W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_16"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_advantage/d_b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_advantage/d_b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_advantage/d_b"
  input: "global/pc_advantage/d_b/Adam"
  input: "global/pc_advantage/d_b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_advantage/d_b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_17"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_value_fn/d_W/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_value_fn/d_W/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_value_fn/d_W"
  input: "global/pc_value_fn/d_W/Adam"
  input: "global/pc_value_fn/d_W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_value_fn/d_W/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_18"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_global/pc_value_fn/d_b/Cast_2"
  op: "Cast"
  input: "PolynomialDecay"
  device: "/job:ps/task:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/update_global/pc_value_fn/d_b/ApplyAdam"
  op: "ApplyAdam"
  input: "global/pc_value_fn/d_b"
  input: "global/pc_value_fn/d_b/Adam"
  input: "global/pc_value_fn/d_b/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/update_global/pc_value_fn/d_b/Cast_2"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "clip_by_global_norm/clip_by_global_norm/_19"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_global/conv2d_1/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_1/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/b/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_global/action//w/ApplyAdam"
  input: "^Adam/update_global/action//b/ApplyAdam"
  input: "^Adam/update_global/value//w/ApplyAdam"
  input: "^Adam/update_global/value//b/ApplyAdam"
  input: "^Adam/update_global/pc_dense//w/ApplyAdam"
  input: "^Adam/update_global/pc_dense//b/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_b/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_b/ApplyAdam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_global/conv2d_1/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_1/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/b/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_global/action//w/ApplyAdam"
  input: "^Adam/update_global/action//b/ApplyAdam"
  input: "^Adam/update_global/value//w/ApplyAdam"
  input: "^Adam/update_global/value//b/ApplyAdam"
  input: "^Adam/update_global/pc_dense//w/ApplyAdam"
  input: "^Adam/update_global/pc_dense//b/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_b/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_b/ApplyAdam"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/update_global/conv2d_1/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_1/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_2/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_3/b/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/W/ApplyAdam"
  input: "^Adam/update_global/conv2d_4/b/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_global/action//w/ApplyAdam"
  input: "^Adam/update_global/action//b/ApplyAdam"
  input: "^Adam/update_global/value//w/ApplyAdam"
  input: "^Adam/update_global/value//b/ApplyAdam"
  input: "^Adam/update_global/pc_dense//w/ApplyAdam"
  input: "^Adam/update_global/pc_dense//b/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_advantage/d_b/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_W/ApplyAdam"
  input: "^Adam/update_global/pc_value_fn/d_b/ApplyAdam"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  device: "/job:ps/task:0/device:CPU:0"
}
node {
  name: "model/global_norm/L2Loss"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_2/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_3/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_6"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_7"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/conv2d_4/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_8"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_8"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_9"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_9"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_10"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_10"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_11"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_11"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_12"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_12"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_3_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_13"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_13"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_3_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_14"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_14"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/MatMul_4_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_15"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_15"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/add_4_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_16"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_16"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_17"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_17"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_advantage/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_18"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_18"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/L2Loss_19"
  op: "L2Loss"
  input: "clip_by_global_norm/clip_by_global_norm/_19"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/local/pc_value_fn/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/stack"
  op: "Pack"
  input: "model/global_norm/L2Loss"
  input: "model/global_norm/L2Loss_1"
  input: "model/global_norm/L2Loss_2"
  input: "model/global_norm/L2Loss_3"
  input: "model/global_norm/L2Loss_4"
  input: "model/global_norm/L2Loss_5"
  input: "model/global_norm/L2Loss_6"
  input: "model/global_norm/L2Loss_7"
  input: "model/global_norm/L2Loss_8"
  input: "model/global_norm/L2Loss_9"
  input: "model/global_norm/L2Loss_10"
  input: "model/global_norm/L2Loss_11"
  input: "model/global_norm/L2Loss_12"
  input: "model/global_norm/L2Loss_13"
  input: "model/global_norm/L2Loss_14"
  input: "model/global_norm/L2Loss_15"
  input: "model/global_norm/L2Loss_16"
  input: "model/global_norm/L2Loss_17"
  input: "model/global_norm/L2Loss_18"
  input: "model/global_norm/L2Loss_19"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 20
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "model/global_norm/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/global_norm/Sum"
  op: "Sum"
  input: "model/global_norm/stack"
  input: "model/global_norm/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "model/global_norm/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "model/global_norm/mul"
  op: "Mul"
  input: "model/global_norm/Sum"
  input: "model/global_norm/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm/global_norm"
  op: "Sqrt"
  input: "model/global_norm/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/grad_global_norm/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model/grad_global_norm"
      }
    }
  }
}
node {
  name: "model/grad_global_norm"
  op: "ScalarSummary"
  input: "model/grad_global_norm/tags"
  input: "model/global_norm/global_norm"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss"
  op: "L2Loss"
  input: "local/conv2d_1/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_1"
  op: "L2Loss"
  input: "local/conv2d_1/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_2"
  op: "L2Loss"
  input: "local/conv2d_2/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_3"
  op: "L2Loss"
  input: "local/conv2d_2/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_4"
  op: "L2Loss"
  input: "local/conv2d_3/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_5"
  op: "L2Loss"
  input: "local/conv2d_3/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_6"
  op: "L2Loss"
  input: "local/conv2d_4/W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_7"
  op: "L2Loss"
  input: "local/conv2d_4/b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_8"
  op: "L2Loss"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_9"
  op: "L2Loss"
  input: "local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_10"
  op: "L2Loss"
  input: "local/action//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_11"
  op: "L2Loss"
  input: "local/action//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_12"
  op: "L2Loss"
  input: "local/value//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_13"
  op: "L2Loss"
  input: "local/value//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_14"
  op: "L2Loss"
  input: "local/pc_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_15"
  op: "L2Loss"
  input: "local/pc_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_16"
  op: "L2Loss"
  input: "local/pc_advantage/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_17"
  op: "L2Loss"
  input: "local/pc_advantage/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_18"
  op: "L2Loss"
  input: "local/pc_value_fn/d_W/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_19"
  op: "L2Loss"
  input: "local/pc_value_fn/d_b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_20"
  op: "L2Loss"
  input: "local/rp_dense//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_21"
  op: "L2Loss"
  input: "local/rp_dense//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_22"
  op: "L2Loss"
  input: "local/rp_classifier//w/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/L2Loss_23"
  op: "L2Loss"
  input: "local/rp_classifier//b/read"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@local/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/stack"
  op: "Pack"
  input: "model/global_norm_1/L2Loss"
  input: "model/global_norm_1/L2Loss_1"
  input: "model/global_norm_1/L2Loss_2"
  input: "model/global_norm_1/L2Loss_3"
  input: "model/global_norm_1/L2Loss_4"
  input: "model/global_norm_1/L2Loss_5"
  input: "model/global_norm_1/L2Loss_6"
  input: "model/global_norm_1/L2Loss_7"
  input: "model/global_norm_1/L2Loss_8"
  input: "model/global_norm_1/L2Loss_9"
  input: "model/global_norm_1/L2Loss_10"
  input: "model/global_norm_1/L2Loss_11"
  input: "model/global_norm_1/L2Loss_12"
  input: "model/global_norm_1/L2Loss_13"
  input: "model/global_norm_1/L2Loss_14"
  input: "model/global_norm_1/L2Loss_15"
  input: "model/global_norm_1/L2Loss_16"
  input: "model/global_norm_1/L2Loss_17"
  input: "model/global_norm_1/L2Loss_18"
  input: "model/global_norm_1/L2Loss_19"
  input: "model/global_norm_1/L2Loss_20"
  input: "model/global_norm_1/L2Loss_21"
  input: "model/global_norm_1/L2Loss_22"
  input: "model/global_norm_1/L2Loss_23"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 24
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "model/global_norm_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/global_norm_1/Sum"
  op: "Sum"
  input: "model/global_norm_1/stack"
  input: "model/global_norm_1/Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "model/global_norm_1/Const_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "model/global_norm_1/mul"
  op: "Mul"
  input: "model/global_norm_1/Sum"
  input: "model/global_norm_1/Const_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/global_norm_1/global_norm"
  op: "Sqrt"
  input: "model/global_norm_1/mul"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/var_global_norm/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model/var_global_norm"
      }
    }
  }
}
node {
  name: "model/var_global_norm"
  op: "ScalarSummary"
  input: "model/var_global_norm/tags"
  input: "model/global_norm_1/global_norm"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/learn_rate/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model/learn_rate"
      }
    }
  }
}
node {
  name: "model/learn_rate"
  op: "ScalarSummary"
  input: "model/learn_rate/tags"
  input: "PolynomialDecay"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/total_loss/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model/total_loss"
      }
    }
  }
}
node {
  name: "model/total_loss"
  op: "ScalarSummary"
  input: "model/total_loss/tags"
  input: "add_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model_summary/model_summary"
  op: "MergeSummary"
  input: "on_policy/aac/policy_loss"
  input: "on_policy/aac/value_loss"
  input: "on_policy/aac/entropy"
  input: "off_policy/pixel_control/q_loss"
  input: "off_policy/value_replay/v_loss"
  input: "model/grad_global_norm"
  input: "model/var_global_norm"
  input: "model/learn_rate"
  input: "model/total_loss"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "human/tag"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "human"
      }
    }
  }
}
node {
  name: "human"
  op: "ImageSummary"
  input: "human/tag"
  input: "Placeholder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "model_input_external/tag"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model_input_external"
      }
    }
  }
}
node {
  name: "model_input_external"
  op: "ImageSummary"
  input: "model_input_external/tag"
  input: "Placeholder_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "episode/tag"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode"
      }
    }
  }
}
node {
  name: "episode"
  op: "ImageSummary"
  input: "episode/tag"
  input: "Placeholder_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "render/render"
  op: "MergeSummary"
  input: "human"
  input: "model_input_external"
  input: "episode"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/state/tag"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model/state"
      }
    }
  }
}
node {
  name: "model/state"
  op: "ImageSummary"
  input: "model/state/tag"
  input: "Placeholder_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "episode/total_reward/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/total_reward"
      }
    }
  }
}
node {
  name: "episode/total_reward"
  op: "ScalarSummary"
  input: "episode/total_reward/tags"
  input: "Placeholder_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode/cpu_time_sec/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/cpu_time_sec"
      }
    }
  }
}
node {
  name: "episode/cpu_time_sec"
  op: "ScalarSummary"
  input: "episode/cpu_time_sec/tags"
  input: "Placeholder_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode/final_value/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/final_value"
      }
    }
  }
}
node {
  name: "episode/final_value"
  op: "ScalarSummary"
  input: "episode/final_value/tags"
  input: "Placeholder_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode/env_steps/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/env_steps"
      }
    }
  }
}
node {
  name: "episode/env_steps"
  op: "ScalarSummary"
  input: "episode/env_steps/tags"
  input: "Placeholder_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode_1/episode"
  op: "MergeSummary"
  input: "episode/total_reward"
  input: "episode/cpu_time_sec"
  input: "episode/final_value"
  input: "episode/env_steps"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode/total_reward_1/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/total_reward_1"
      }
    }
  }
}
node {
  name: "episode/total_reward_1"
  op: "ScalarSummary"
  input: "episode/total_reward_1/tags"
  input: "Placeholder_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode/steps/tags"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "episode/steps"
      }
    }
  }
}
node {
  name: "episode/steps"
  op: "ScalarSummary"
  input: "episode/steps/tags"
  input: "Placeholder_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "episode_atari/episode_atari"
  op: "MergeSummary"
  input: "episode/total_reward_1"
  input: "episode/steps"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global/conv2d_1/W/Assign"
  input: "^global/conv2d_1/b/Assign"
  input: "^global/conv2d_2/W/Assign"
  input: "^global/conv2d_2/b/Assign"
  input: "^global/conv2d_3/W/Assign"
  input: "^global/conv2d_3/b/Assign"
  input: "^global/conv2d_4/W/Assign"
  input: "^global/conv2d_4/b/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^global/action//w/Assign"
  input: "^global/action//b/Assign"
  input: "^global/value//w/Assign"
  input: "^global/value//b/Assign"
  input: "^global/pc_dense//w/Assign"
  input: "^global/pc_dense//b/Assign"
  input: "^global/pc_advantage/d_W/Assign"
  input: "^global/pc_advantage/d_b/Assign"
  input: "^global/pc_value_fn/d_W/Assign"
  input: "^global/pc_value_fn/d_b/Assign"
  input: "^global/rp_dense//w/Assign"
  input: "^global/rp_dense//b/Assign"
  input: "^global/rp_classifier//w/Assign"
  input: "^global/rp_classifier//b/Assign"
  input: "^global/global_step/Assign"
  input: "^global/global_episode/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global/conv2d_1/W/Adam/Assign"
  input: "^global/conv2d_1/W/Adam_1/Assign"
  input: "^global/conv2d_1/b/Adam/Assign"
  input: "^global/conv2d_1/b/Adam_1/Assign"
  input: "^global/conv2d_2/W/Adam/Assign"
  input: "^global/conv2d_2/W/Adam_1/Assign"
  input: "^global/conv2d_2/b/Adam/Assign"
  input: "^global/conv2d_2/b/Adam_1/Assign"
  input: "^global/conv2d_3/W/Adam/Assign"
  input: "^global/conv2d_3/W/Adam_1/Assign"
  input: "^global/conv2d_3/b/Adam/Assign"
  input: "^global/conv2d_3/b/Adam_1/Assign"
  input: "^global/conv2d_4/W/Adam/Assign"
  input: "^global/conv2d_4/W/Adam_1/Assign"
  input: "^global/conv2d_4/b/Adam/Assign"
  input: "^global/conv2d_4/b/Adam_1/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^global/action//w/Adam/Assign"
  input: "^global/action//w/Adam_1/Assign"
  input: "^global/action//b/Adam/Assign"
  input: "^global/action//b/Adam_1/Assign"
  input: "^global/value//w/Adam/Assign"
  input: "^global/value//w/Adam_1/Assign"
  input: "^global/value//b/Adam/Assign"
  input: "^global/value//b/Adam_1/Assign"
  input: "^global/pc_dense//w/Adam/Assign"
  input: "^global/pc_dense//w/Adam_1/Assign"
  input: "^global/pc_dense//b/Adam/Assign"
  input: "^global/pc_dense//b/Adam_1/Assign"
  input: "^global/pc_advantage/d_W/Adam/Assign"
  input: "^global/pc_advantage/d_W/Adam_1/Assign"
  input: "^global/pc_advantage/d_b/Adam/Assign"
  input: "^global/pc_advantage/d_b/Adam_1/Assign"
  input: "^global/pc_value_fn/d_W/Adam/Assign"
  input: "^global/pc_value_fn/d_W/Adam_1/Assign"
  input: "^global/pc_value_fn/d_b/Adam/Assign"
  input: "^global/pc_value_fn/d_b/Adam_1/Assign"
  device: "/job:ps/task:0"
}
node {
  name: "init_1/NoOp"
  op: "NoOp"
  input: "^global/conv2d_1/W/Assign"
  input: "^global/conv2d_1/b/Assign"
  input: "^global/conv2d_2/W/Assign"
  input: "^global/conv2d_2/b/Assign"
  input: "^global/conv2d_3/W/Assign"
  input: "^global/conv2d_3/b/Assign"
  input: "^global/conv2d_4/W/Assign"
  input: "^global/conv2d_4/b/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^global/action//w/Assign"
  input: "^global/action//b/Assign"
  input: "^global/value//w/Assign"
  input: "^global/value//b/Assign"
  input: "^global/pc_dense//w/Assign"
  input: "^global/pc_dense//b/Assign"
  input: "^global/pc_advantage/d_W/Assign"
  input: "^global/pc_advantage/d_b/Assign"
  input: "^global/pc_value_fn/d_W/Assign"
  input: "^global/pc_value_fn/d_b/Assign"
  input: "^global/rp_dense//w/Assign"
  input: "^global/rp_dense//b/Assign"
  input: "^global/rp_classifier//w/Assign"
  input: "^global/rp_classifier//b/Assign"
  input: "^global/global_step/Assign"
  input: "^global/global_episode/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global/conv2d_1/W/Adam/Assign"
  input: "^global/conv2d_1/W/Adam_1/Assign"
  input: "^global/conv2d_1/b/Adam/Assign"
  input: "^global/conv2d_1/b/Adam_1/Assign"
  input: "^global/conv2d_2/W/Adam/Assign"
  input: "^global/conv2d_2/W/Adam_1/Assign"
  input: "^global/conv2d_2/b/Adam/Assign"
  input: "^global/conv2d_2/b/Adam_1/Assign"
  input: "^global/conv2d_3/W/Adam/Assign"
  input: "^global/conv2d_3/W/Adam_1/Assign"
  input: "^global/conv2d_3/b/Adam/Assign"
  input: "^global/conv2d_3/b/Adam_1/Assign"
  input: "^global/conv2d_4/W/Adam/Assign"
  input: "^global/conv2d_4/W/Adam_1/Assign"
  input: "^global/conv2d_4/b/Adam/Assign"
  input: "^global/conv2d_4/b/Adam_1/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  input: "^global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^global/action//w/Adam/Assign"
  input: "^global/action//w/Adam_1/Assign"
  input: "^global/action//b/Adam/Assign"
  input: "^global/action//b/Adam_1/Assign"
  input: "^global/value//w/Adam/Assign"
  input: "^global/value//w/Adam_1/Assign"
  input: "^global/value//b/Adam/Assign"
  input: "^global/value//b/Adam_1/Assign"
  input: "^global/pc_dense//w/Adam/Assign"
  input: "^global/pc_dense//w/Adam_1/Assign"
  input: "^global/pc_dense//b/Adam/Assign"
  input: "^global/pc_dense//b/Adam_1/Assign"
  input: "^global/pc_advantage/d_W/Adam/Assign"
  input: "^global/pc_advantage/d_W/Adam_1/Assign"
  input: "^global/pc_advantage/d_b/Adam/Assign"
  input: "^global/pc_advantage/d_b/Adam_1/Assign"
  input: "^global/pc_value_fn/d_W/Adam/Assign"
  input: "^global/pc_value_fn/d_W/Adam_1/Assign"
  input: "^global/pc_value_fn/d_b/Adam/Assign"
  input: "^global/pc_value_fn/d_b/Adam_1/Assign"
  device: "/job:ps/task:0"
}
node {
  name: "init_1/NoOp_1"
  op: "NoOp"
  input: "^local/conv2d_1/W/Assign"
  input: "^local/conv2d_1/b/Assign"
  input: "^local/conv2d_2/W/Assign"
  input: "^local/conv2d_2/b/Assign"
  input: "^local/conv2d_3/W/Assign"
  input: "^local/conv2d_3/b/Assign"
  input: "^local/conv2d_4/W/Assign"
  input: "^local/conv2d_4/b/Assign"
  input: "^local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^local/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^local/action//w/Assign"
  input: "^local/action//b/Assign"
  input: "^local/value//w/Assign"
  input: "^local/value//b/Assign"
  input: "^local/pc_dense//w/Assign"
  input: "^local/pc_dense//b/Assign"
  input: "^local/pc_advantage/d_W/Assign"
  input: "^local/pc_advantage/d_b/Assign"
  input: "^local/pc_value_fn/d_W/Assign"
  input: "^local/pc_value_fn/d_b/Assign"
  input: "^local/rp_dense//w/Assign"
  input: "^local/rp_dense//b/Assign"
  input: "^local/rp_classifier//w/Assign"
  input: "^local/rp_classifier//b/Assign"
  device: "/job:worker/task:0/device:CPU:0"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^init_1/NoOp"
  input: "^init_1/NoOp_1"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 68
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global/action//b"
        string_val: "global/action//b/Adam"
        string_val: "global/action//b/Adam_1"
        string_val: "global/action//w"
        string_val: "global/action//w/Adam"
        string_val: "global/action//w/Adam_1"
        string_val: "global/conv2d_1/W"
        string_val: "global/conv2d_1/W/Adam"
        string_val: "global/conv2d_1/W/Adam_1"
        string_val: "global/conv2d_1/b"
        string_val: "global/conv2d_1/b/Adam"
        string_val: "global/conv2d_1/b/Adam_1"
        string_val: "global/conv2d_2/W"
        string_val: "global/conv2d_2/W/Adam"
        string_val: "global/conv2d_2/W/Adam_1"
        string_val: "global/conv2d_2/b"
        string_val: "global/conv2d_2/b/Adam"
        string_val: "global/conv2d_2/b/Adam_1"
        string_val: "global/conv2d_3/W"
        string_val: "global/conv2d_3/W/Adam"
        string_val: "global/conv2d_3/W/Adam_1"
        string_val: "global/conv2d_3/b"
        string_val: "global/conv2d_3/b/Adam"
        string_val: "global/conv2d_3/b/Adam_1"
        string_val: "global/conv2d_4/W"
        string_val: "global/conv2d_4/W/Adam"
        string_val: "global/conv2d_4/W/Adam_1"
        string_val: "global/conv2d_4/b"
        string_val: "global/conv2d_4/b/Adam"
        string_val: "global/conv2d_4/b/Adam_1"
        string_val: "global/global_episode"
        string_val: "global/global_step"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "global/pc_advantage/d_W"
        string_val: "global/pc_advantage/d_W/Adam"
        string_val: "global/pc_advantage/d_W/Adam_1"
        string_val: "global/pc_advantage/d_b"
        string_val: "global/pc_advantage/d_b/Adam"
        string_val: "global/pc_advantage/d_b/Adam_1"
        string_val: "global/pc_dense//b"
        string_val: "global/pc_dense//b/Adam"
        string_val: "global/pc_dense//b/Adam_1"
        string_val: "global/pc_dense//w"
        string_val: "global/pc_dense//w/Adam"
        string_val: "global/pc_dense//w/Adam_1"
        string_val: "global/pc_value_fn/d_W"
        string_val: "global/pc_value_fn/d_W/Adam"
        string_val: "global/pc_value_fn/d_W/Adam_1"
        string_val: "global/pc_value_fn/d_b"
        string_val: "global/pc_value_fn/d_b/Adam"
        string_val: "global/pc_value_fn/d_b/Adam_1"
        string_val: "global/rp_classifier//b"
        string_val: "global/rp_classifier//w"
        string_val: "global/rp_dense//b"
        string_val: "global/rp_dense//w"
        string_val: "global/value//b"
        string_val: "global/value//b/Adam"
        string_val: "global/value//b/Adam_1"
        string_val: "global/value//w"
        string_val: "global/value//w/Adam"
        string_val: "global/value//w/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 68
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global/action//b"
  input: "global/action//b/Adam"
  input: "global/action//b/Adam_1"
  input: "global/action//w"
  input: "global/action//w/Adam"
  input: "global/action//w/Adam_1"
  input: "global/conv2d_1/W"
  input: "global/conv2d_1/W/Adam"
  input: "global/conv2d_1/W/Adam_1"
  input: "global/conv2d_1/b"
  input: "global/conv2d_1/b/Adam"
  input: "global/conv2d_1/b/Adam_1"
  input: "global/conv2d_2/W"
  input: "global/conv2d_2/W/Adam"
  input: "global/conv2d_2/W/Adam_1"
  input: "global/conv2d_2/b"
  input: "global/conv2d_2/b/Adam"
  input: "global/conv2d_2/b/Adam_1"
  input: "global/conv2d_3/W"
  input: "global/conv2d_3/W/Adam"
  input: "global/conv2d_3/W/Adam_1"
  input: "global/conv2d_3/b"
  input: "global/conv2d_3/b/Adam"
  input: "global/conv2d_3/b/Adam_1"
  input: "global/conv2d_4/W"
  input: "global/conv2d_4/W/Adam"
  input: "global/conv2d_4/W/Adam_1"
  input: "global/conv2d_4/b"
  input: "global/conv2d_4/b/Adam"
  input: "global/conv2d_4/b/Adam_1"
  input: "global/global_episode"
  input: "global/global_step"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "global/pc_advantage/d_W"
  input: "global/pc_advantage/d_W/Adam"
  input: "global/pc_advantage/d_W/Adam_1"
  input: "global/pc_advantage/d_b"
  input: "global/pc_advantage/d_b/Adam"
  input: "global/pc_advantage/d_b/Adam_1"
  input: "global/pc_dense//b"
  input: "global/pc_dense//b/Adam"
  input: "global/pc_dense//b/Adam_1"
  input: "global/pc_dense//w"
  input: "global/pc_dense//w/Adam"
  input: "global/pc_dense//w/Adam_1"
  input: "global/pc_value_fn/d_W"
  input: "global/pc_value_fn/d_W/Adam"
  input: "global/pc_value_fn/d_W/Adam_1"
  input: "global/pc_value_fn/d_b"
  input: "global/pc_value_fn/d_b/Adam"
  input: "global/pc_value_fn/d_b/Adam_1"
  input: "global/rp_classifier//b"
  input: "global/rp_classifier//w"
  input: "global/rp_dense//b"
  input: "global/rp_dense//w"
  input: "global/value//b"
  input: "global/value//b/Adam"
  input: "global/value//b/Adam_1"
  input: "global/value//w"
  input: "global/value//w/Adam"
  input: "global/value//w/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2_1"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global/action//b"
  input: "save/RestoreV2_2"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "global/action//b/Adam"
  input: "save/RestoreV2_3"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "global/action//b/Adam_1"
  input: "save/RestoreV2_4"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "global/action//w"
  input: "save/RestoreV2_5"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//w/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "global/action//w/Adam"
  input: "save/RestoreV2_6"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/action//w/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "global/action//w/Adam_1"
  input: "save/RestoreV2_7"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "global/conv2d_1/W"
  input: "save/RestoreV2_8"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "global/conv2d_1/W/Adam"
  input: "save/RestoreV2_9"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "global/conv2d_1/W/Adam_1"
  input: "save/RestoreV2_10"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "global/conv2d_1/b"
  input: "save/RestoreV2_11"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "global/conv2d_1/b/Adam"
  input: "save/RestoreV2_12"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_1/b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "global/conv2d_1/b/Adam_1"
  input: "save/RestoreV2_13"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "global/conv2d_2/W"
  input: "save/RestoreV2_14"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "global/conv2d_2/W/Adam"
  input: "save/RestoreV2_15"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "global/conv2d_2/W/Adam_1"
  input: "save/RestoreV2_16"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "global/conv2d_2/b"
  input: "save/RestoreV2_17"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "global/conv2d_2/b/Adam"
  input: "save/RestoreV2_18"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_2/b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "global/conv2d_2/b/Adam_1"
  input: "save/RestoreV2_19"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "global/conv2d_3/W"
  input: "save/RestoreV2_20"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "global/conv2d_3/W/Adam"
  input: "save/RestoreV2_21"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "global/conv2d_3/W/Adam_1"
  input: "save/RestoreV2_22"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "global/conv2d_3/b"
  input: "save/RestoreV2_23"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "global/conv2d_3/b/Adam"
  input: "save/RestoreV2_24"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_3/b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "global/conv2d_3/b/Adam_1"
  input: "save/RestoreV2_25"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "global/conv2d_4/W"
  input: "save/RestoreV2_26"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "global/conv2d_4/W/Adam"
  input: "save/RestoreV2_27"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "global/conv2d_4/W/Adam_1"
  input: "save/RestoreV2_28"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "global/conv2d_4/b"
  input: "save/RestoreV2_29"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "global/conv2d_4/b/Adam"
  input: "save/RestoreV2_30"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/conv2d_4/b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "global/conv2d_4/b/Adam_1"
  input: "save/RestoreV2_31"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/global_episode"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "global/global_episode"
  input: "save/RestoreV2_32"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "global/global_step"
  input: "save/RestoreV2_33"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2_34"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_35"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_36"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2_37"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_38"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_39"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 475
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "global/pc_advantage/d_W"
  input: "save/RestoreV2_40"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "global/pc_advantage/d_W/Adam"
  input: "save/RestoreV2_41"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "global/pc_advantage/d_W/Adam_1"
  input: "save/RestoreV2_42"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_43/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_43/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_43"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_43/tensor_names"
  input: "save/RestoreV2_43/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "global/pc_advantage/d_b"
  input: "save/RestoreV2_43"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_44/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_44/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_44"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_44/tensor_names"
  input: "save/RestoreV2_44/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "global/pc_advantage/d_b/Adam"
  input: "save/RestoreV2_44"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_45/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_advantage/d_b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_45/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_45"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_45/tensor_names"
  input: "save/RestoreV2_45/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "global/pc_advantage/d_b/Adam_1"
  input: "save/RestoreV2_45"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_46/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_46/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_46"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_46/tensor_names"
  input: "save/RestoreV2_46/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "global/pc_dense//b"
  input: "save/RestoreV2_46"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_47/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_47/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_47"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_47/tensor_names"
  input: "save/RestoreV2_47/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "global/pc_dense//b/Adam"
  input: "save/RestoreV2_47"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_48/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_48/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_48"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_48/tensor_names"
  input: "save/RestoreV2_48/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "global/pc_dense//b/Adam_1"
  input: "save/RestoreV2_48"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_49/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_49/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_49"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_49/tensor_names"
  input: "save/RestoreV2_49/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "global/pc_dense//w"
  input: "save/RestoreV2_49"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_50/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//w/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_50/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_50"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_50/tensor_names"
  input: "save/RestoreV2_50/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "global/pc_dense//w/Adam"
  input: "save/RestoreV2_50"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_51/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_dense//w/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_51/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_51"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_51/tensor_names"
  input: "save/RestoreV2_51/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "global/pc_dense//w/Adam_1"
  input: "save/RestoreV2_51"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 192
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_52/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_W"
      }
    }
  }
}
node {
  name: "save/RestoreV2_52/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_52"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_52/tensor_names"
  input: "save/RestoreV2_52/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "global/pc_value_fn/d_W"
  input: "save/RestoreV2_52"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_53/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_W/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_53/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_53"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_53/tensor_names"
  input: "save/RestoreV2_53/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "global/pc_value_fn/d_W/Adam"
  input: "save/RestoreV2_53"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_54/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_54/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_54"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_54/tensor_names"
  input: "save/RestoreV2_54/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "global/pc_value_fn/d_W/Adam_1"
  input: "save/RestoreV2_54"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_55/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_55/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_55"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_55/tensor_names"
  input: "save/RestoreV2_55/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "global/pc_value_fn/d_b"
  input: "save/RestoreV2_55"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_56/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_56/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_56"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_56/tensor_names"
  input: "save/RestoreV2_56/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "global/pc_value_fn/d_b/Adam"
  input: "save/RestoreV2_56"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_57/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/pc_value_fn/d_b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_57/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_57"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_57/tensor_names"
  input: "save/RestoreV2_57/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "global/pc_value_fn/d_b/Adam_1"
  input: "save/RestoreV2_57"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_58/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/rp_classifier//b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_58/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_58"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_58/tensor_names"
  input: "save/RestoreV2_58/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "global/rp_classifier//b"
  input: "save/RestoreV2_58"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_59/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/rp_classifier//w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_59/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_59"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_59/tensor_names"
  input: "save/RestoreV2_59/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "global/rp_classifier//w"
  input: "save/RestoreV2_59"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_60/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/rp_dense//b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_60/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_60"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_60/tensor_names"
  input: "save/RestoreV2_60/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "global/rp_dense//b"
  input: "save/RestoreV2_60"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_61/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/rp_dense//w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_61/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_61"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_61/tensor_names"
  input: "save/RestoreV2_61/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "global/rp_dense//w"
  input: "save/RestoreV2_61"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_62/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_62/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_62"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_62/tensor_names"
  input: "save/RestoreV2_62/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "global/value//b"
  input: "save/RestoreV2_62"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_63/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_63/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_63"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_63/tensor_names"
  input: "save/RestoreV2_63/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "global/value//b/Adam"
  input: "save/RestoreV2_63"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_64/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_64/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_64"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_64/tensor_names"
  input: "save/RestoreV2_64/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "global/value//b/Adam_1"
  input: "save/RestoreV2_64"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_65/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_65/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_65"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_65/tensor_names"
  input: "save/RestoreV2_65/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "global/value//w"
  input: "save/RestoreV2_65"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_66/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//w/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_66/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_66"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_66/tensor_names"
  input: "save/RestoreV2_66/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "global/value//w/Adam"
  input: "save/RestoreV2_66"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_67/tensor_names"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global/value//w/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_67/shape_and_slices"
  op: "Const"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_67"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_67/tensor_names"
  input: "save/RestoreV2_67/shape_and_slices"
  device: "/job:ps/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "global/value//w/Adam_1"
  input: "save/RestoreV2_67"
  device: "/job:ps/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  device: "/job:ps/task:0"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "global/action//w"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "global/action//b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "global/value//w"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "global/value//b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "global/pc_dense//w"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "global/pc_dense//b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_W"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "global/rp_dense//w"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "global/rp_dense//b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "global/rp_classifier//w"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "global/rp_classifier//b"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/rp_classifier//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "global/global_step"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "global/global_episode"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/global_episode"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "beta1_power"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "beta2_power"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "global/conv2d_1/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_1/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "global/conv2d_2/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_2/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "global/conv2d_3/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_3/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "global/conv2d_4/b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/conv2d_4/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "global/action//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "global/action//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "global/action//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "global/action//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/action//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "global/value//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "global/value//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "global/value//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "global/value//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/value//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "global/pc_dense//w/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "global/pc_dense//w/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "global/pc_dense//b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "global/pc_dense//b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_dense//b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "global/pc_advantage/d_b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_advantage/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_W/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_W/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_W"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_b/Adam"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "global/pc_value_fn/d_b/Adam_1"
  device: "/job:ps/task:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global/pc_value_fn/d_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 68
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 68
          }
        }
        string_val: "global/conv2d_1/W"
        string_val: "global/conv2d_1/b"
        string_val: "global/conv2d_2/W"
        string_val: "global/conv2d_2/b"
        string_val: "global/conv2d_3/W"
        string_val: "global/conv2d_3/b"
        string_val: "global/conv2d_4/W"
        string_val: "global/conv2d_4/b"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "global/action//w"
        string_val: "global/action//b"
        string_val: "global/value//w"
        string_val: "global/value//b"
        string_val: "global/pc_dense//w"
        string_val: "global/pc_dense//b"
        string_val: "global/pc_advantage/d_W"
        string_val: "global/pc_advantage/d_b"
        string_val: "global/pc_value_fn/d_W"
        string_val: "global/pc_value_fn/d_b"
        string_val: "global/rp_dense//w"
        string_val: "global/rp_dense//b"
        string_val: "global/rp_classifier//w"
        string_val: "global/rp_classifier//b"
        string_val: "global/global_step"
        string_val: "global/global_episode"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global/conv2d_1/W/Adam"
        string_val: "global/conv2d_1/W/Adam_1"
        string_val: "global/conv2d_1/b/Adam"
        string_val: "global/conv2d_1/b/Adam_1"
        string_val: "global/conv2d_2/W/Adam"
        string_val: "global/conv2d_2/W/Adam_1"
        string_val: "global/conv2d_2/b/Adam"
        string_val: "global/conv2d_2/b/Adam_1"
        string_val: "global/conv2d_3/W/Adam"
        string_val: "global/conv2d_3/W/Adam_1"
        string_val: "global/conv2d_3/b/Adam"
        string_val: "global/conv2d_3/b/Adam_1"
        string_val: "global/conv2d_4/W/Adam"
        string_val: "global/conv2d_4/W/Adam_1"
        string_val: "global/conv2d_4/b/Adam"
        string_val: "global/conv2d_4/b/Adam_1"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "global/lstm/rnn/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "global/action//w/Adam"
        string_val: "global/action//w/Adam_1"
        string_val: "global/action//b/Adam"
        string_val: "global/action//b/Adam_1"
        string_val: "global/value//w/Adam"
        string_val: "global/value//w/Adam_1"
        string_val: "global/value//b/Adam"
        string_val: "global/value//b/Adam_1"
        string_val: "global/pc_dense//w/Adam"
        string_val: "global/pc_dense//w/Adam_1"
        string_val: "global/pc_dense//b/Adam"
        string_val: "global/pc_dense//b/Adam_1"
        string_val: "global/pc_advantage/d_W/Adam"
        string_val: "global/pc_advantage/d_W/Adam_1"
        string_val: "global/pc_advantage/d_b/Adam"
        string_val: "global/pc_advantage/d_b/Adam_1"
        string_val: "global/pc_value_fn/d_W/Adam"
        string_val: "global/pc_value_fn/d_W/Adam_1"
        string_val: "global/pc_value_fn/d_b/Adam"
        string_val: "global/pc_value_fn/d_b/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 68
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 68
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
versions {
  producer: 24
}
